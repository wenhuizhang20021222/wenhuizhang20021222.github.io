{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/background.png","path":"images/background.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/bitbug_favicon-16x16.ico","path":"images/bitbug_favicon-16x16.ico","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/bitbug_favicon-32x32.ico","path":"images/bitbug_favicon-32x32.ico","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/zrn.png","path":"images/zrn.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/fairyDustCursor.js","path":"js/fairyDustCursor.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/fireworks.js","path":"js/fireworks.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/live2d-widget/LICENSE","path":"live2d-widget/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/live2d-widget/README.md","path":"live2d-widget/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/live2d-widget/autoload.js","path":"live2d-widget/autoload.js","modified":0,"renderable":1},{"_id":"themes/next/source/live2d-widget/live2d.min.js","path":"live2d-widget/live2d.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/live2d-widget/waifu-tips.js","path":"live2d-widget/waifu-tips.js","modified":0,"renderable":1},{"_id":"themes/next/source/live2d-widget/waifu-tips.json","path":"live2d-widget/waifu-tips.json","modified":0,"renderable":1},{"_id":"themes/next/source/live2d-widget/waifu.css","path":"live2d-widget/waifu.css","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/rating.js","path":"js/third-party/rating.js","modified":0,"renderable":1},{"_id":"themes/next/source/live2d-widget/assets/screenshot-1.png","path":"live2d-widget/assets/screenshot-1.png","modified":0,"renderable":1},{"_id":"themes/next/source/live2d-widget/assets/screenshot-2.png","path":"live2d-widget/assets/screenshot-2.png","modified":0,"renderable":1},{"_id":"themes/next/source/live2d-widget/assets/screenshot-3.png","path":"live2d-widget/assets/screenshot-3.png","modified":0,"renderable":1},{"_id":"themes/next/source/live2d-widget/demo/demo.html","path":"live2d-widget/demo/demo.html","modified":0,"renderable":1},{"_id":"themes/next/source/live2d-widget/demo/login.html","path":"live2d-widget/demo/login.html","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"fbe513ad52ed690aca60eea5575b2aa8c16b5baf","modified":1655953242288},{"_id":"source/_data/post-body-end.njk","hash":"a8896ddc256b4757764aa5adc523e8897cfd6193","modified":1656313018325},{"_id":"source/_data/styles.styl","hash":"fbf2647d77a462046b6b7eb5cd291f36466d247a","modified":1656293816147},{"_id":"source/_data/variables.styl","hash":"adfbd2ee51aee4e64a6f7973b04ee15ed5f9fc40","modified":1655974630962},{"_id":"source/_posts/os绪论.md","hash":"5d209d50e316e0373d446be759e58a050ad73045","modified":1656289792985},{"_id":"source/_posts/hello-world.md","hash":"7cf9ac36a535d8eb64c06597cb47bddede028636","modified":1656031746582},{"_id":"source/_posts/sql概述与sql定义语言.md","hash":"978fb6fe1c3312cc7d83c819ef65747af167c01c","modified":1656031487199},{"_id":"source/_posts/一、操作系统绪论.md","hash":"4147a68ccf7b426b244cbe912fcd9ea6f52a544e","modified":1656342750867},{"_id":"source/_posts/七、虚拟内存管理.md","hash":"ec4c2e5598d229b4d6b92270d2330c017214e8e6","modified":1656342750869},{"_id":"source/_posts/二、进程与线程.md","hash":"5bf60d7be36015daf0ad2f30f3a5fddd7170b0dd","modified":1656342750871},{"_id":"source/_posts/三、进程调度.md","hash":"dec3af079cf8dd7d9999891b2a52ee233c11bd80","modified":1656343007722},{"_id":"source/_posts/五、死锁.md","hash":"d12b48f663558a2e89c097946c8fc1c14f10497b","modified":1656342750875},{"_id":"source/_posts/六、主存储器管理.md","hash":"8fc90de45d4da2f8b6a8c8266b062778d9bc7976","modified":1656342750874},{"_id":"source/_posts/关系范式.md","hash":"b00677f50b5506fea2e63403d11f8e79546c9a30","modified":1656342750876},{"_id":"source/_posts/关系数据库.md","hash":"969eca4ea2d3ef057c54a4a5f1a83795d7fedec2","modified":1656084305872},{"_id":"source/_posts/四、进程同步.md","hash":"987c0ca693ed9afd8384615764902fdd6baa39cf","modified":1656342750877},{"_id":"source/_posts/并发控制.md","hash":"c773dbc3535fdd74fa34115d38727b8d72225132","modified":1656342750879},{"_id":"source/_posts/数据库安全.md","hash":"16f0aff65866f556bb97c89ea94283e9cc177473","modified":1656342750880},{"_id":"source/_posts/数据库设计.md","hash":"bda540f3f8ef324d06be20d677f7938fa0bb53be","modified":1656342750881},{"_id":"source/_posts/编译原理复习笔记.md","hash":"d524521e2c8fcd82764d12fad01813d180d582c8","modified":1656342750883},{"_id":"source/_posts/绪论.md","hash":"e03cca413757a9da46d8a1bfb4adba1291d83726","modified":1656031495900},{"_id":"source/about/index.md","hash":"8cf8c4698c13686a5bf6ff4883328d81aec7bcb1","modified":1655968619724},{"_id":"source/_posts/调度算法.md","hash":"1a50ec8f8f4ab45da974cf0013639b5bc9704ec7","modified":1656342007332},{"_id":"source/categories/index.md","hash":"e4759a1350a33eb7c3dcf513e7c344456f5d5c6a","modified":1656078637991},{"_id":"source/tags/index.md","hash":"0d3acc0c2ddbea3e1d0c5db31754e471c48e0769","modified":1656078654971},{"_id":"source/_posts/编译原理笔记.md","hash":"0b5c8ba8878405364f6fc9a7e4d4b78c5a1d7a3c","modified":1656342750885},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1655947982729},{"_id":"themes/next/.eslintrc.json","hash":"611e15c3fcb41dc68fa8532ee595a1262a1b5a8a","modified":1655947982729},{"_id":"themes/next/.gitattributes","hash":"aeeca2f1e987d83232d7870d1435a4e3ed66b648","modified":1655947982729},{"_id":"themes/next/.gitignore","hash":"087b7677078303acb2acb47432165950e4d29b43","modified":1655947982736},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1655947982736},{"_id":"themes/next/LICENSE.md","hash":"8cfb03967dd4cbaf3b825271ffce0039aa3fc22a","modified":1655947982736},{"_id":"themes/next/README.md","hash":"9b0af190c8265911c379ba9c7b453c8a7f1501c8","modified":1655947982740},{"_id":"themes/next/_config.yml","hash":"925a55861d398f02313e3e4bcd5b5a20bd22581c","modified":1656340107019},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1655947982741},{"_id":"themes/next/_vendors.yml","hash":"82f1e8e8fbbf20aab6bbec9d736ecd6c1bda33dd","modified":1655947982740},{"_id":"themes/next/package.json","hash":"59799b4933d021b37b1120a4dc3e8fb86599b017","modified":1655947982773},{"_id":"themes/next/renovate.json","hash":"767b077c7b615e20af3cf865813cd64674a9bea6","modified":1655947982773},{"_id":"themes/next/.githooks/install.js","hash":"305c2a269818466eed9e381b866c6cd1ad7f8afd","modified":1655947982729},{"_id":"themes/next/.githooks/pre-commit","hash":"b69b9d0b51e27d5d4c87c3242f5067c2cda26e44","modified":1655947982729},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"2fdca1040427cabfe27cae6754ec5e027ec7092e","modified":1655947982729},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"593ae64e72d43c020a697eac65b1f9c3483ff097","modified":1655947982729},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"a103e2d875f7434191859e5b42075cfa9a4cbcb3","modified":1655947982729},{"_id":"themes/next/.github/config.yml","hash":"0956bf71b6f36632b63b14d26580458041a5abd2","modified":1655947982729},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1655947982729},{"_id":"themes/next/.github/label-commenter-config.yml","hash":"a1aa85a2fc66ff0c52c65bd97b0fa282e297a73f","modified":1655947982736},{"_id":"themes/next/.github/labeler.yml","hash":"ff76a903609932a867082b8ccced906e9910533a","modified":1655947982736},{"_id":"themes/next/.github/release-drafter.yml","hash":"de38f816e3023e0a5c1fd1f3c2b626f78bc35246","modified":1655947982736},{"_id":"themes/next/languages/ar.yml","hash":"cc7e3e2855348563d746f15c4752b9c63fcdd91a","modified":1655947982744},{"_id":"themes/next/languages/README.md","hash":"b1c96465b3bc139bf5ba6200974b66581d8ff85a","modified":1655947982744},{"_id":"themes/next/languages/bn.yml","hash":"842adcbab6a56762521a02f8b1d8c49c10e02a80","modified":1655947982744},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1655947982744},{"_id":"themes/next/languages/de.yml","hash":"83023c4246b93a2f89f342afe29a7b9e1185f74f","modified":1655947982744},{"_id":"themes/next/languages/en.yml","hash":"66445143decfbb5eb7031eb370698e31d5222a7a","modified":1655947982744},{"_id":"themes/next/languages/es.yml","hash":"21676d658d309eb90342a924e106645611c937bc","modified":1655947982744},{"_id":"themes/next/languages/fa.yml","hash":"e09fad889ab3ae87874093e1acd51edc9297d869","modified":1655947982744},{"_id":"themes/next/languages/fr.yml","hash":"328c255c82e9b561e20a9f51a4d84abc63d1b90a","modified":1655947982744},{"_id":"themes/next/languages/id.yml","hash":"d7c337ca72efb0bd02ade8b5560c559384ad84dd","modified":1655947982744},{"_id":"themes/next/languages/it.yml","hash":"c038ff0cadbe405750d980bcacfd3900acf96905","modified":1655947982744},{"_id":"themes/next/languages/ja.yml","hash":"57a35b21aca04ce8bca64fb5933f35626c462ea3","modified":1655947982744},{"_id":"themes/next/languages/ko.yml","hash":"a4b607d38fb77f083235a0ecb2384cfdd3542bde","modified":1655947982744},{"_id":"themes/next/languages/nl.yml","hash":"e47858bd1e0d0622c15366ae6c0513d996f589e3","modified":1655947982744},{"_id":"themes/next/languages/pt.yml","hash":"ff93459250c33d3c7ba06c30164cc4208edf9b33","modified":1655947982744},{"_id":"themes/next/languages/pt-BR.yml","hash":"305025e932832328b7e2a8a584638a23c462e68f","modified":1655947982744},{"_id":"themes/next/languages/ru.yml","hash":"837bb39651769244b19ce458053757d429869764","modified":1655947982744},{"_id":"themes/next/languages/si.yml","hash":"c15ed758dbad890e856f4fc281208d7b78cc1a59","modified":1655947982744},{"_id":"themes/next/languages/tk.yml","hash":"bf61562ac892231bd28f23a2a5597ee98fb05aa6","modified":1655947982744},{"_id":"themes/next/languages/tr.yml","hash":"d3262d2221b0583a52e5d20a3cd1380f5dc49378","modified":1655947982744},{"_id":"themes/next/languages/uk.yml","hash":"f32871f67c63d26bc4e3e15df9b01f5a41236a50","modified":1655947982744},{"_id":"themes/next/languages/vi.yml","hash":"e452ea8c48993262a3e8fce9d92072cafabfc734","modified":1655947982744},{"_id":"themes/next/languages/zh-CN.yml","hash":"f8379d15038e22ef7039d91272cb4f36842dbbe1","modified":1655947982744},{"_id":"themes/next/languages/zh-HK.yml","hash":"c1ee97ceb56da76ecdc7b69fa975f28c8574441b","modified":1655947982744},{"_id":"themes/next/languages/zh-TW.yml","hash":"70c45076ad722b777956048fcc430eac37844c11","modified":1655947982744},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1655947982741},{"_id":"themes/next/docs/LICENSE.txt","hash":"d1cd5a8e83d3bbdb50f902d2b487813da95ddfd3","modified":1655947982742},{"_id":"themes/next/docs/AUTHORS.md","hash":"579014d47f45b27fd1618b9709f0efe9585c7449","modified":1655947982742},{"_id":"themes/next/layout/_layout.njk","hash":"51b9beb54b640bbfd832892d0cd4b0a046e8149f","modified":1656300944115},{"_id":"themes/next/layout/archive.njk","hash":"aa491dba8f746e626c273a920effedf7d0b32170","modified":1655947982771},{"_id":"themes/next/layout/category.njk","hash":"82f541452cae76a94ee15cb8d8a888f44260a0fd","modified":1655947982771},{"_id":"themes/next/layout/index.njk","hash":"fa52c3049871e879980cb6abccdea3792ca4ce70","modified":1655947982771},{"_id":"themes/next/layout/page.njk","hash":"0bc9379473b6c968f43dde9b783bbbf0a71a5c3e","modified":1656292079490},{"_id":"themes/next/layout/post.njk","hash":"707a50e50b90df5fbeaf8407d12895d04163a290","modified":1655947982771},{"_id":"themes/next/layout/tag-color.njk","hash":"b0c7af8665173c8ecdf9f5278c55419effcd4c76","modified":1655972485936},{"_id":"themes/next/layout/tag.njk","hash":"b6c017d30d08ddd30d66e9c6f3a71aa65d214eac","modified":1655947982771},{"_id":"themes/next/test/index.js","hash":"983a505399796b9d9e174ba46d89abbdde38f8ee","modified":1655947982817},{"_id":"themes/next/.github/ISSUE_TEMPLATE/config.yml","hash":"daeedc5da2ee74ac31cf71846b766ca6499e9fc6","modified":1655947982729},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"032194e7975564176f2109aa8b7c020fa6d5e6b1","modified":1655947982729},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"618d07b49f4774cd79613d4001984a19d954a6ad","modified":1655947982729},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"4a7885fe2c8b25be02ab57c345cd862aeeeeacaf","modified":1655947982729},{"_id":"themes/next/.github/workflows/label-commenter.yml","hash":"b87ffaf40820461159c891d0d41c87e00e312ff3","modified":1655947982736},{"_id":"themes/next/.github/workflows/labeler.yml","hash":"bfea9b04e3ea7da31a2095277c4c23ae6bd14baa","modified":1655947982736},{"_id":"themes/next/.github/workflows/linter.yml","hash":"40b9068c85bff6a11ae0f7623fa3b5e9fdbd273e","modified":1655947982736},{"_id":"themes/next/.github/workflows/lock.yml","hash":"58eca481fd71088a8ae1dbc04645bcfc03460b87","modified":1655947982736},{"_id":"themes/next/.github/workflows/release-drafter.yml","hash":"359b74890a47d784e35a5cc3c7885d5cdf302e82","modified":1655947982736},{"_id":"themes/next/.github/workflows/tester.yml","hash":"dda18899fe62652c633f60c300a93df18f58862f","modified":1655947982736},{"_id":"themes/next/docs/ru/README.md","hash":"ce247fb6ba20c607be42957ff38f2dd6d71c12a4","modified":1655947982742},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7befb4325b107dd668d9eae3d7e86a34910ce3f2","modified":1655947982742},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"a09ceb82b45dd8b7da76c227f3d0bb7eebe7d5d1","modified":1655947982742},{"_id":"themes/next/docs/zh-CN/README.md","hash":"fc077960de61db02072573dd330ba2ca3ae9d4de","modified":1655947982742},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"d9d8e6d7a6a8c80009dd5334cc17fd3e4977a008","modified":1655947982744},{"_id":"themes/next/layout/_macro/post.njk","hash":"d5b467a116088cbf8d7eb870f8269e183713f61f","modified":1656298877266},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"ac1c38618c440e8204c96511c3a324b28da99e4a","modified":1656339493215},{"_id":"themes/next/layout/_partials/footer.njk","hash":"65f0d69084e0e26a0153d3b8db610a15c4102691","modified":1655947982744},{"_id":"themes/next/layout/_partials/comments.njk","hash":"007e4a3dc1df926fbea467b5aef20c06015b1ba0","modified":1656068342105},{"_id":"themes/next/layout/_partials/languages.njk","hash":"537026fc120adeef9148c98ebf074207e3810538","modified":1655947982755},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1655947982755},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"967594ee64805e27b7ff9d957e23ab3f5c948600","modified":1655947982755},{"_id":"themes/next/layout/_scripts/index.njk","hash":"4eb65641b47ea9b23ed2ddfd69b18f21d7d8f214","modified":1655947982755},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"0a1470440f11362df2b1cd6b6228e273d9f999d6","modified":1655947982755},{"_id":"themes/next/layout/_third-party/index.njk","hash":"33a4a3275474bd3bb2e8d1b0ea01b42dda9ea608","modified":1655947982766},{"_id":"themes/next/layout/_third-party/fancybox.njk","hash":"53ad3c31762b74e5d29787b37d5e494cc4fded9b","modified":1655947982766},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"73bc15a9c3c5c239ab90efa19a1e721f41f3cb93","modified":1655947982766},{"_id":"themes/next/layout/_third-party/pace.njk","hash":"13b2a77b4858a127f458ea092b6f713b052befac","modified":1655947982766},{"_id":"themes/next/layout/_third-party/rating.njk","hash":"d0444179fec512760ab1d4f76928d795b971c884","modified":1655947982766},{"_id":"themes/next/scripts/events/index.js","hash":"e1c366efdab730a7791099115698c97b31b5ff78","modified":1655947982774},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"0c9a1fe9906672724dbf274154a37bac1915ca2c","modified":1655947982774},{"_id":"themes/next/scripts/filters/minify.js","hash":"81edb9cfda491b860ebeb5645c1f5349ccacfbec","modified":1655947982774},{"_id":"themes/next/scripts/filters/locals.js","hash":"87f3bff03fa9fd96cf0787a6442464a7ff57f76b","modified":1655947982774},{"_id":"themes/next/scripts/filters/post.js","hash":"1ca7885ce5024bfda13e28e605a33ba335b8aea0","modified":1655947982774},{"_id":"themes/next/scripts/helpers/engine.js","hash":"43568a872a93259fc1c497724a53914474ef83ae","modified":1655947982774},{"_id":"themes/next/scripts/helpers/font.js","hash":"0a6fa582a0890ecaf5f03f758a730936e48aeca1","modified":1655947982774},{"_id":"themes/next/scripts/helpers/navigation.js","hash":"82f6e81bacf23d10cac71b09cff8708e47891ef3","modified":1655947982774},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"ad764d48715c5da87d33f048ad5f1ae8b4e2eb52","modified":1655947982774},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"98fc68cf3fcd6253bbb94068ab1d86578a4ef9ea","modified":1655947982774},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"52acbc74c1ead8a77cd3bbcba4e033053683f7d0","modified":1655947982774},{"_id":"themes/next/scripts/tags/button.js","hash":"86c71c73a63744efbbbb367612871fede0d69529","modified":1655947982774},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"8e912c715702addaf0cefe63e580e45b97ae8c3f","modified":1655947982774},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"b4d12e6fe29089be0f43bafc9eea736602cd16bf","modified":1655947982774},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"1c609312a71d47f838226346aad5c2e1c35f15dd","modified":1655947982774},{"_id":"themes/next/scripts/tags/index.js","hash":"255dd1090e8319b557eeca43571f0e4f8aab013b","modified":1655947982774},{"_id":"themes/next/scripts/tags/label.js","hash":"c18b0e619a779ed40be7f014db92af18f45fbd5c","modified":1655947982774},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"3f358bb78c5c6fdf45de287f3ead553e3a6a93c2","modified":1655947982774},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"b3844e168b51a99d495ca05562ffac47677f5728","modified":1655947982774},{"_id":"themes/next/scripts/tags/note.js","hash":"a12fd53e421400836a3722ae69130969558d6ac0","modified":1655947982774},{"_id":"themes/next/scripts/tags/pdf.js","hash":"317ba4611020cc840854386dde098dbbe452777e","modified":1655947982784},{"_id":"themes/next/scripts/tags/tabs.js","hash":"e0ed5fe1bc9d2957952a1aacdf3252d6ef3f9743","modified":1655947982784},{"_id":"themes/next/scripts/tags/video.js","hash":"f6ad3f52779f0636251238d3cbdc5b6f91cc5aba","modified":1655947982784},{"_id":"themes/next/source/css/_colors.styl","hash":"a88430865c99f47ce1d8240f8895819b8b7b0c06","modified":1655947982785},{"_id":"themes/next/source/css/_mixins.styl","hash":"74cf298800fa560e1521d1875f60b5097a5c3b4d","modified":1655947982804},{"_id":"themes/next/source/css/main.styl","hash":"38b8a12681a3a04bed02aa1659054912ed6def11","modified":1655947982805},{"_id":"themes/next/source/css/noscript.styl","hash":"6a9e80ca4abb294bc0fb22442fc7a0201dd8fc25","modified":1655947982805},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1655947982805},{"_id":"themes/next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1655947982805},{"_id":"themes/next/source/images/bitbug_favicon-16x16.ico","hash":"998c8c7c1b89f6f323d2485a001983ad271fb103","modified":1655971330225},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1655947982805},{"_id":"themes/next/source/images/bitbug_favicon-32x32.ico","hash":"9f23b3240a6709e32d1b734a519128fb038e20d4","modified":1655971212751},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1655947982805},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1655947982805},{"_id":"themes/next/source/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1655947982805},{"_id":"themes/next/source/js/bookmark.js","hash":"1457291a7244b7786ec35b949d97183e4fbd181d","modified":1655947982805},{"_id":"themes/next/source/js/comments.js","hash":"0b4daf0ce610760bd52e95d423f61f3e1c72442a","modified":1655947982805},{"_id":"themes/next/source/js/comments-buttons.js","hash":"81ea6cbcdf0357094753d7523919c1eafa38e79f","modified":1655947982805},{"_id":"themes/next/source/js/config.js","hash":"211a9ab35205ccfa6b7c74394bade84da0d00af7","modified":1655947982805},{"_id":"themes/next/source/js/fairyDustCursor.js","hash":"3a73ffb1dfb17a7adaa4e95d7e077e5e11764409","modified":1656299305721},{"_id":"themes/next/source/js/fireworks.js","hash":"53981959bc6def4a85bbbb41b07e4b1474a2124d","modified":1656300047024},{"_id":"themes/next/source/js/next-boot.js","hash":"da11083557070d947da48d29d2d60988c8d628e9","modified":1655947982805},{"_id":"themes/next/source/js/pjax.js","hash":"85293c253e0f43540572c4e4615c712325a732e2","modified":1655947982805},{"_id":"themes/next/source/js/motion.js","hash":"cce4f3cc59e76f899f3c1d9a7c53a33cf693d507","modified":1655947982805},{"_id":"themes/next/source/js/schedule.js","hash":"4858233224756e3cadfabd8135f7c4b1e3673b44","modified":1655947982805},{"_id":"themes/next/source/js/utils.js","hash":"8abd170f5d3c2399b8012fb08b22dbf4cef2e89f","modified":1655947982817},{"_id":"themes/next/source/live2d-widget/LICENSE","hash":"1eba7caf09a39110ad2f542e3ed8700d1a69c6d3","modified":1656075311721},{"_id":"themes/next/source/live2d-widget/autoload.js","hash":"61211be19fa20adfbcc13924fa76c85c2b566675","modified":1656075701762},{"_id":"themes/next/source/live2d-widget/README.md","hash":"fe001678f15e98294f2d5722567f089483b549be","modified":1656075311721},{"_id":"themes/next/source/live2d-widget/waifu-tips.js","hash":"c0ce86d39f1d3e2f79129d81d2f7fe46e1d88f0b","modified":1656075311731},{"_id":"themes/next/source/live2d-widget/waifu-tips.json","hash":"cc68124da17a8547f26ebca0c0596d20dea37238","modified":1656075311731},{"_id":"themes/next/source/live2d-widget/waifu.css","hash":"86ecc0a7c379080a0cf09d0e314b5a5b5137cbea","modified":1656077512671},{"_id":"themes/next/test/helpers/font.js","hash":"6f5076bd3f2724e47b46ca69028393a9b6275cd1","modified":1655947982817},{"_id":"themes/next/test/helpers/index.js","hash":"2fb58dca3df2fe53116ee2b1232fa26ebe7b2ce5","modified":1655947982817},{"_id":"themes/next/test/helpers/next-url.js","hash":"08e84781f1cd54e5634b86877ad9cefae4a78e95","modified":1655947982817},{"_id":"themes/next/test/validate/index.js","hash":"560862194991c5963da5a411629d8e6c71d20ee2","modified":1655947982827},{"_id":"themes/next/test/tags/button.js","hash":"a50ca44eaec3d91c2958e3157d624cd3e68828c7","modified":1655947982817},{"_id":"themes/next/test/tags/caniuse.js","hash":"2852be850d9103c25114253a45e6c62e32517de4","modified":1655947982817},{"_id":"themes/next/test/tags/center-quote.js","hash":"2ac4b5a358681691a17e736de06fce0b640a7023","modified":1655947982817},{"_id":"themes/next/test/tags/group-pictures.js","hash":"8f66d3c6f03fb11d85aa2ab05c9b3c9aa2b4e994","modified":1655947982817},{"_id":"themes/next/test/tags/index.js","hash":"5cad001936a694bf32d59751cc2b68a66199f976","modified":1655947982817},{"_id":"themes/next/test/tags/label.js","hash":"6cad7d84c42511459a89cda3971e8ea5cdee0125","modified":1655947982817},{"_id":"themes/next/test/tags/mermaid.js","hash":"f718a3d0e303d842e2ca5a3b162539a49e45a520","modified":1655947982817},{"_id":"themes/next/test/tags/link-grid.js","hash":"41730266306c02362258384cd73659223928361f","modified":1655947982817},{"_id":"themes/next/test/tags/note.js","hash":"161a81ce749e239d2403681372d48ecc1b51d7b9","modified":1655947982817},{"_id":"themes/next/test/tags/tabs.js","hash":"b19d2592347eae5d6a7a97ca7e8cec03e8f25b51","modified":1655947982827},{"_id":"themes/next/test/tags/pdf.js","hash":"2d114596a8a180b2f3cd2a9c6528a328961f12d4","modified":1655947982827},{"_id":"themes/next/test/tags/video.js","hash":"88db9a3a26cd35525c43c0339fcd1c5965ec9518","modified":1655947982827},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"fd75652957c1c3668874fdfd16f4f56027be0d8b","modified":1655947982744},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"6ae4c8976223dbf69bf2684307f80990f51675c2","modified":1656301272957},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"8e08c19e1bd92f3179907b0ff3743d6e2371d7ae","modified":1655947982754},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"1b2ae17f3c394ce310fe2d9ed5f4d07d8cc74ae7","modified":1655947982754},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"828700af2a2f273d3e3e0554ffc60706d889d539","modified":1655947982755},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"62513f08e9e7f4abeaeedca91fd0af0861a2540f","modified":1655947982755},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"20cb9c39bcdcfa3f710df7bc5838d6e62d4dd674","modified":1655947982755},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"92553feb26f30f7fc9147bc4ef122908a9da06be","modified":1655947982755},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"b352346dd2cb42f7eeaec5e39d9a2a353b029775","modified":1655947982755},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"1fe44a1e156cd30e3e9fd8313e1011ad30970f83","modified":1655947982755},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"6ec9c97e91c793cc2eb5ac0f7c3c36fdaaf637d1","modified":1655947982755},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"752df7d12360a077c51a25609916a3ecc1763bb3","modified":1655947982755},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"0ebc0142abebbeef4278e32abb543c7d7fa75d88","modified":1655947982755},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"ebf83083856f8bd81ad47ffb985d44e338b4e6bb","modified":1655947982755},{"_id":"themes/next/layout/_partials/post/post-footer.njk","hash":"e3502059bcc443ce932946a9891fcbe8b2bb362d","modified":1655947982755},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"9a9c4fb7e7c4fe4b7d474bdfdb4ed2b0a5423df2","modified":1655947982755},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"17e03b61e20a5cb4195f0e0d75261ce61a1cddc4","modified":1655947982755},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"58b3f657a47bae406e5fcf19cd5e42680785ac71","modified":1655947982755},{"_id":"themes/next/layout/_partials/search/algolia-search.njk","hash":"93fbb449fbd599cb4315d7eb0daeb239811b233f","modified":1655947982755},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"9766852e72c1809d8c1eea71ac6116b4cc0886d2","modified":1655947982755},{"_id":"themes/next/layout/_partials/search/localsearch.njk","hash":"f73d25a8ccfdd5d4ca2953dc434ff8ce36034c57","modified":1655947982755},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"c5c38b4fb137cc799a6ec31f391d1efc12234c8c","modified":1655947982755},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"3e80332f88b101141be69f2a07f54ed8c053eabb","modified":1655947982755},{"_id":"themes/next/layout/_third-party/analytics/cloudflare.njk","hash":"17173c45f0b740669ef45aaae1fe96eeb0a0ff52","modified":1655947982755},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"52ad137450f7b3d6a330e16b3ed1c6174290f0eb","modified":1655947982755},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"9ff9ec05c2037beea229a6bb698f9e3546973220","modified":1655947982755},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"eef710e9be20e7fed7573d0824feaa4eb1cf2737","modified":1655947982755},{"_id":"themes/next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"24719266662fcff63e88a21ee9b5b284abb8b37c","modified":1655947982755},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"09d2c9487d75894d45a823e3237ae9f90fd6ee01","modified":1655947982755},{"_id":"themes/next/layout/_third-party/chat/gitter.njk","hash":"375a86f0b19e130cfa7707007e3a53d9ae7c9b64","modified":1655947982755},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"3fbc72427c1211e5dcfd269af1a74852a7ba5c1a","modified":1655947982755},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"5f7967bd946060f4102263a552ddfbae9975e7ea","modified":1655947982755},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"b0828dd1b1fd66ecd612d9e886a08e7579e9a4f7","modified":1655947982765},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"c5086b4c35f730f82c99c4a8317f2f153ebde869","modified":1655947982765},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"6fd4df5c21cfe530dbb0c012bc0b202f2c362b9c","modified":1655947982766},{"_id":"themes/next/layout/_third-party/comments/isso.njk","hash":"38badcc7624a13961381c2465478056b9602aee5","modified":1655947982766},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"b8e0d5de584cece5e05b03db5b86145aa1e422b4","modified":1655947982766},{"_id":"themes/next/layout/_third-party/comments/utterances.njk","hash":"a7921be7328e1509d33b435175f5333a9aada66f","modified":1655947982766},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"a62aa1ed4e35b8d0451d83f341bf0a97538bc9a4","modified":1655947982766},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"a84db8bc8804335f95609a221ac1746433dcdc89","modified":1655947982766},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"1856c4b035c5b8e64300a11af0461b519dfc4cf4","modified":1655947982766},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"d97790e4b442a1e3ded7d7b4f84b8ee6cdb6e8ea","modified":1655947982766},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"af5336e8bbdc4638435971da115bb7443d374ade","modified":1655947982766},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"8703d1855bb8d251c9b7c2940b7e3be525e53000","modified":1655947982770},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"866ffa15a3250678eb8a90aa6f609fa965db90fd","modified":1655947982770},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"dd8f963acd5a3685be46fd5319c06df0308d99b2","modified":1655947982770},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"0386c708975cc5faea4f782611c5d2c6b8ac2850","modified":1655947982770},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"67f67a77f27103177b9940446f43610229536d82","modified":1655947982766},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"210c32b654adae3d8076c4417d370b42af258cea","modified":1655947982766},{"_id":"themes/next/scripts/events/lib/config.js","hash":"f78cd74b25cc0ef65c060fec1d7e056967e26b4b","modified":1655947982774},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"00cec6980cafd417def885f496371856cd524a25","modified":1655947982774},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"1f1ea7b579a49f17574c31d78d663c54896133eb","modified":1655947982774},{"_id":"themes/next/scripts/events/lib/navigation.js","hash":"0a2df7d40d64c61ce7e730bb8269b848b03526d1","modified":1655947982774},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"65825c37e473c942095df05183424003d7263df5","modified":1655947982774},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"a96050b0a9bcb49f1f6897660efc77991024790a","modified":1655947982774},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"17fbc99521440a5d6c32ac991ba2038a12f86b31","modified":1655947982774},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"550cc7f57bc3ab3d093e34741e7860222851d4d4","modified":1655947982774},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"1cb58aa6b88f7461c3c3f9605273686adcc30979","modified":1655947982774},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3283bdd6e5ac7d10376df8ddd5faaec5dc1bd667","modified":1655947982774},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"70eb507ef7f1a4fc3ca71a3814cc57afe7f3f60c","modified":1655947982774},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"96e58efba0dc76af409cc7d2db225f0fe4526ea8","modified":1655947982774},{"_id":"themes/next/scripts/filters/comment/isso.js","hash":"c22cbccd7d514947e084eeac6a3af1aa41ec857a","modified":1655947982774},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"bb8ebb541c40362c0cbbd8e83d3b777302bb6c40","modified":1655947982774},{"_id":"themes/next/scripts/filters/comment/utterances.js","hash":"a50718c081685fd35ff8ea9ca13682c284399ed8","modified":1655947982774},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"c4537fa2de33d98baff2c87a73801770414e0b69","modified":1655947982805},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"ee5024be8e39605f0c6d71db038e15e0693d0f41","modified":1655947982805},{"_id":"themes/next/source/css/_variables/base.styl","hash":"0876b50a58f114bc0b7982b85c5e5011730253b8","modified":1655947982805},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"d3a8f6e71c86926d0c2a247a31d7446d829736d5","modified":1655947982805},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"58014a2d087c4126058a99b5b1cb7d8a2eb6224d","modified":1655947982805},{"_id":"themes/next/source/js/schemes/muse.js","hash":"714acb6317cc0d4c5aca26d974c536e37bb9ce1b","modified":1655947982816},{"_id":"themes/next/source/js/third-party/fancybox.js","hash":"8a847a7bbdbc0086dd1de12b82107a854b43f5e5","modified":1655947982817},{"_id":"themes/next/source/js/third-party/pace.js","hash":"0ebee77b2307bf4b260afb06c060171ef42b7141","modified":1655947982817},{"_id":"themes/next/source/js/third-party/quicklink.js","hash":"5b0197e061f57e00875be3636ba372a67693abe0","modified":1655947982817},{"_id":"themes/next/source/js/third-party/rating.js","hash":"a1f44247c18ac00ee3e0026560398429e4c77dd7","modified":1655947982817},{"_id":"themes/next/source/live2d-widget/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1656075311712},{"_id":"themes/next/source/live2d-widget/.git/config","hash":"3616011373820efa4a3c94f1d900ea7d9ff7f3e3","modified":1656075311717},{"_id":"themes/next/source/live2d-widget/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1656075306183},{"_id":"themes/next/source/live2d-widget/.git/index","hash":"bb11e56914a9c5d27613330b17bae6e437a3e6ce","modified":1656075335734},{"_id":"themes/next/source/live2d-widget/.git/packed-refs","hash":"390ab6e7a02cb8bd1fdd02d48a3d80024f6a1789","modified":1656075311706},{"_id":"themes/next/source/live2d-widget/assets/screenshot-1.png","hash":"4bd4d97a1fcaa5deb3cea1c0a102a895a15af32f","modified":1656075311722},{"_id":"themes/next/source/live2d-widget/demo/demo.html","hash":"5428dfdcae21ac210a2487a25aa9d5a5728b2a36","modified":1656075311728},{"_id":"themes/next/source/live2d-widget/demo/login.html","hash":"7cfcc0a4103083bced0db5a6878a6ab60071dd5b","modified":1656075311729},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"2bbf9046ef2a8f99ef3668bbb8be4e52e9d97bb7","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/index.styl","hash":"991c1f80995cec418dc00d3d6b13e2d911ac9894","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"f3defd56be33dba4866a695396d96c767ce63182","modified":1655947982785},{"_id":"themes/next/source/css/_common/outline/index.styl","hash":"7782dfae7a0f8cd61b936fa8ac980440a7bbd3bb","modified":1655947982795},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"2db4462e9cb87b8aef3f50f850fed407de16da3e","modified":1655947982796},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"1239f1b432a6932b2bb9ebcfbaabf724b8f4e59a","modified":1655947982799},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"cf8446f4378dcab27b55ede1635c608ae6b8a5c8","modified":1655947982799},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"f768ecb2fe3e9384777c1c115cd7409e9155edd7","modified":1655947982799},{"_id":"themes/next/source/css/_common/scaffolding/index.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1655947982800},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1655947982801},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"34416a5792d0235caa8c0c7e59725f2df0fa614c","modified":1655947982801},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"b9388016f8d9274703e77e306a1feaad1b7b9d6c","modified":1655947982801},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"90f7d3baab061e860172b536c9edc38c7fd2ef5c","modified":1655947982804},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"f51b6a4f06359ed56b2d10caa6f15362d3b3751d","modified":1655947982804},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b1054313ca9419e76fea0451417c881616f50a38","modified":1655947982805},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"82311a531e26ca5a6ad17cf14959da75d4ac6106","modified":1655947982805},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"00366a6bd1a66f99f845c5ebfc9e8cf56651b815","modified":1655947982805},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"fd89988442f380cba907752fe3f608e3498f8c93","modified":1655947982805},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"4a454bcadd9de7d73172abd3276943e8626657be","modified":1655947982805},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"89bf3f6b82cb0fafbbd483431df8f450857c5a0b","modified":1655947982805},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"018b6a761e197086174c9f06b4d5ea21cc230951","modified":1655947982805},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"ec5d4e8ffe74722a092a69ace2f8dec7776466a8","modified":1655947982805},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"134272cb8096156c9e32fbbe085394633c7509cd","modified":1655947982805},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1655947982805},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1655947982805},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"9b2cba0c9aa5a64957294f7548c199db1f63f0f4","modified":1655947982805},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"9f60d501808f67d151af437221d0dfacc27c180c","modified":1655947982805},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"42bf453def88da82c842dca84e8f47087091f08e","modified":1655947982805},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"1d29eca70fa686d895f8e98a283e4a159e40905a","modified":1655947982805},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b5c3dd08c520a16ee49f85fa12b4935e725ef261","modified":1655947982805},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"7905f428b46d100ac5928875cb1e2b99fa86fc0b","modified":1655947982805},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","hash":"f9579a02599de063ccff336177ba964a2931a6e9","modified":1655947982816},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","hash":"f755e8537ccbbb0bd84c26923f320d4e206e7428","modified":1655947982817},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","hash":"d77d4934d959e7125128754b568f1d041c3fbfff","modified":1655947982816},{"_id":"themes/next/source/js/third-party/chat/chatra.js","hash":"72e0766752b78a723fb30e92d533a8b353104e2d","modified":1655947982817},{"_id":"themes/next/source/js/third-party/chat/gitter.js","hash":"14b024c920a8b359777d79dd8e1a849387f8f3ad","modified":1655947982817},{"_id":"themes/next/source/js/third-party/chat/tidio.js","hash":"77c231bcd64f1c09bd9989909e9fee703b65f47f","modified":1655947982817},{"_id":"themes/next/source/js/third-party/comments/changyan.js","hash":"b4cb06fdf531292e2361398a98d75a4ca2b8473a","modified":1655947982817},{"_id":"themes/next/source/js/third-party/comments/disqus.js","hash":"5460de247c038d6cfbe774d7f8747f0a958d9017","modified":1655947982817},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","hash":"1c282d6c2151346d1f0aa95055d17abe77054ec9","modified":1655947982817},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","hash":"1e8509356fb027d948d118ab220d9631f4d482fa","modified":1655947982817},{"_id":"themes/next/source/js/third-party/comments/isso.js","hash":"b9b9fd2f0e098a123b34a4932da912a9485ffe6c","modified":1655947982817},{"_id":"themes/next/source/js/third-party/comments/livere.js","hash":"68892d74ef5fc308c6e7e6b4f190826d79f3055d","modified":1655947982817},{"_id":"themes/next/source/js/third-party/comments/utterances.js","hash":"ec44d7f1c8b51b0aa3cccba099a78f3575ac828c","modified":1655947982817},{"_id":"themes/next/source/js/third-party/math/katex.js","hash":"5c63ec71458b4fe0cd98fd4a04e11c3746764f11","modified":1655947982817},{"_id":"themes/next/source/js/third-party/math/mathjax.js","hash":"d93556184b2c0aa1dbc4a6fb892d2f77b80d7d9f","modified":1655947982817},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","hash":"e927000b375e79e2d173bdc6b8b45e67364fad4a","modified":1655947982817},{"_id":"themes/next/source/js/third-party/search/local-search.js","hash":"e6361ed3d5fa959e11e90f7dab8fdaff398b4425","modified":1655947982817},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","hash":"3272f3373fa7c3910852124bc5e43e90e3470ff8","modified":1655947982817},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","hash":"6abdc209f4503d4efd676e18bc30ddea813b6ff9","modified":1655947982817},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","hash":"e9fffe2a14751e86aed5e84a5e96514413eac2dc","modified":1655947982817},{"_id":"themes/next/source/js/third-party/tags/pdf.js","hash":"e109c2d6828f527f0289d5fa3bb02fce63ee6d93","modified":1655947982817},{"_id":"themes/next/source/live2d-widget/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1656075306184},{"_id":"themes/next/source/live2d-widget/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1656075306184},{"_id":"themes/next/source/live2d-widget/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1656075306186},{"_id":"themes/next/source/live2d-widget/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1656075306186},{"_id":"themes/next/source/live2d-widget/.git/hooks/fsmonitor-watchman.sample","hash":"118ff5509f187039734d04456bf01e44c933ac19","modified":1656075306186},{"_id":"themes/next/source/live2d-widget/.git/hooks/pre-commit.sample","hash":"a79d057388ee2c2fe6561d7697f1f5efcff96f23","modified":1656075306187},{"_id":"themes/next/source/live2d-widget/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1656075306187},{"_id":"themes/next/source/live2d-widget/.git/hooks/pre-push.sample","hash":"a599b773b930ca83dbc3a5c7c13059ac4a6eaedc","modified":1656075306187},{"_id":"themes/next/source/live2d-widget/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1656075306188},{"_id":"themes/next/source/live2d-widget/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1656075306188},{"_id":"themes/next/source/live2d-widget/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1656075306188},{"_id":"themes/next/source/live2d-widget/.git/hooks/update.sample","hash":"730e6bd5225478bab6147b7a62a6e2ae21d40507","modified":1656075306189},{"_id":"themes/next/source/live2d-widget/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1656075306190},{"_id":"themes/next/source/live2d-widget/.git/hooks/push-to-checkout.sample","hash":"508240328c8b55f8157c93c43bf5e291e5d2fbcb","modified":1656075306189},{"_id":"themes/next/source/live2d-widget/.git/logs/HEAD","hash":"87b8aa03f4b1c5a919c2b093944352e2fbed12fb","modified":1656075311714},{"_id":"themes/next/source/css/_common/components/post/index.styl","hash":"df2fbd0ada00f37439b0de965c6f1c29d3c97429","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"eebe3013a9a976011570dce2d04dfeae4c31d790","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"c931b03777623a569e21a60e891efe9e0e39ecd8","modified":1656061796603},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"e53a5eb1d1771e284044bdb0bc0ed2de27923669","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"791bc9befb0d4d06e3e517eccfe0bc3551a02a60","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"69dff7cf231d01f85671758455726dd666664a73","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"9043d9bc2db35ca000c79258ef89fdb161dc43fb","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"c34936a17c3d8af6c0988ac6746d7509dc0b50eb","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"4d29b6ae7ed3dc44b10df851a4128b6441efa8be","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"0a779f955a0e25df0852e0731517dadb234aa181","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fde10ce94e9ae21a03b60d41d532835b54abdcb1","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"80595d274f593b321c0b644a06f3165fe07b16f5","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/pages/index.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"091b8c763e43447d087c122a86538f290f83136a","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"56d719bcdcba3d725141c55bbd4b168f3942f912","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"fb165c1a0d990c5cf98b87773e0dc50410229b96","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/third-party/disqusjs.styl","hash":"c1e9edbfd1c3696b35d5452ae2e6d766f3fe91aa","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/third-party/gitter.styl","hash":"7b36f776c41fbb744572c5de2c8d49b35656ec21","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/third-party/index.styl","hash":"0c4c5e39f8ac12febaa0f4ff7265151e139edad8","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"1e5776ad4c5c8bcf7596ac74dcabc30704b3f5a0","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"0527153aa821bdbdb84c7b47f60e3cefd95a742f","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"49c26184580fde8a732899a4de5aae8662e289b8","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/third-party/utterances.styl","hash":"d28856f365a9373c4ae6fe1e5673d63df2dfd65f","modified":1655947982785},{"_id":"themes/next/source/css/_common/outline/footer/index.styl","hash":"02b6d1a53f7a02c6b0929b11f3ab904b5b873a0e","modified":1655947982785},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"c8648c8ea3105556be0068d9fb2735261d0d94bc","modified":1655947982785},{"_id":"themes/next/source/css/_common/outline/header/index.styl","hash":"f465cc1bfe98e3f2b33f5b696d4870c8dc56da6b","modified":1655947982785},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"05af22f3edc2383a3d97ec4c05e9ac43b014bead","modified":1655947982785},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"2db695204d39e4c7daa7b91585a0ea4b06b49f11","modified":1655947982785},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"86b0925e968f35bbc76b473a861e8f9797f7580e","modified":1655947982785},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"d9bc2b520636b9df7f946295cd430593df4118ff","modified":1655947982795},{"_id":"themes/next/source/css/_common/outline/sidebar/index.styl","hash":"9964a96f9a647cfb16b97679eced79d07e084e6d","modified":1655947982796},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2c2bfbc34b6f19d262ae7c041474985e12f4f4ad","modified":1655947982796},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"d8a028f532d562e6a86bb3b9c7b992e4b6dbbb51","modified":1655947982797},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"1c324d56ae83e96db2c4c6d63edd7ee51c936fc1","modified":1655947982797},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"63d8f5f169c2b1c969928fc79244c5fe89ee484e","modified":1655947982797},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"db4f3263b2b6551dd56bfdf33cceaf81661a3611","modified":1655947982798},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"57ed6770535ecb2e6485a0c87d4de6d6476368b9","modified":1655947982797},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"081345490271840855d1238b969dbf2e0a2bba8f","modified":1655947982798},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"6681ffe283f8a7e3c86310ef4f6ca1e499c1a19f","modified":1655947982798},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2de038def2cb91da143b14696366c14a66e0e569","modified":1655947982798},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"047bf8176ea24e277b1a4f6e6ad599033f1d1a44","modified":1655947982799},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"6b3680e0dbea8e14c1cec24ef63b7fae5e37f7ef","modified":1655947982801},{"_id":"themes/next/source/css/_common/scaffolding/highlight/index.styl","hash":"ee05c1d00bc38397bd320128bbe15d05d9100039","modified":1655947982800},{"_id":"themes/next/source/css/_common/scaffolding/tags/index.styl","hash":"e22fde6f1657d311d46f64d868c4491d535c8caa","modified":1655947982802},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"8d9218980e185210ce034e9769ab639b9630fd88","modified":1655947982802},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"531daf2612c6217950677a2d03924459ce57c291","modified":1655947982802},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7075dd32dd70da1e161e4bd14b46f1e8be62fa3c","modified":1655947982802},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"c7754dc6c866928b538f0863a05b96ec44b5e986","modified":1655947982803},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"2e9dc3b3546e19e9de18050ad04b1741841116bc","modified":1655947982803},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"77122986509a6b4968bae2729417b7016137534c","modified":1655947982803},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f71b2022094c5bc8c74b4ed049639f7262e0b182","modified":1655947982803},{"_id":"themes/next/source/live2d-widget/.git/objects/pack/pack-4dde768677bc3ba1f8b03e44470f25576e4fb058.idx","hash":"41b6caeb9374e4dbe40f0374285c84d018f8b216","modified":1656075311325},{"_id":"themes/next/source/live2d-widget/.git/refs/heads/master","hash":"76eead8361376617053acb43190de816f4030c2d","modified":1656075311714},{"_id":"themes/next/source/live2d-widget/.git/logs/refs/heads/master","hash":"87b8aa03f4b1c5a919c2b093944352e2fbed12fb","modified":1656075311715},{"_id":"themes/next/source/live2d-widget/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1656075311710},{"_id":"themes/next/source/live2d-widget/.git/logs/refs/remotes/origin/HEAD","hash":"87b8aa03f4b1c5a919c2b093944352e2fbed12fb","modified":1656075311710},{"_id":"themes/next/source/live2d-widget/live2d.min.js","hash":"61a09b54a472b4d0541b7c50afb3dfdd172e062f","modified":1656075311731},{"_id":"themes/next/source/live2d-widget/assets/screenshot-3.png","hash":"f89c6fdf44008e7d3c7a1aafe65dc39b212edb6c","modified":1656075311727},{"_id":"themes/next/source/live2d-widget/assets/screenshot-2.png","hash":"76b844653136184c573b3632e12296e008a7ff5c","modified":1656075311724},{"_id":"themes/next/source/images/background.png","hash":"0b8c53b27ef059ac9dde8b75851bc4e8a7ab1c83","modified":1655973516416},{"_id":"themes/next/source/images/zrn.png","hash":"3ebd139cd267300c6bd37ee76fdc0eb156f7bc0c","modified":1655971127634},{"_id":"themes/next/source/live2d-widget/.git/objects/pack/pack-4dde768677bc3ba1f8b03e44470f25576e4fb058.pack","hash":"16bcf8a409cea43577f1718d4dd113bcd2afaea1","modified":1656075335725},{"_id":"public/search.xml","hash":"f9e2f4b947c79db81605a5e45e16e862d9573c98","modified":1656343399080},{"_id":"public/sitemap.xml","hash":"554dcd6601a5ff8d71c92b0cbd2d87f2c939b4fd","modified":1656343399080},{"_id":"public/about/index.html","hash":"67795729b7c0f6af8d50e35adb77c9b40fd3109b","modified":1656343399080},{"_id":"public/tags/index.html","hash":"5112bed0d9e252c1c588fb32ea341e4958338bbd","modified":1656343399080},{"_id":"public/categories/index.html","hash":"e1c6ed6781484b941df19074a4030eea2c54fe91","modified":1656343399080},{"_id":"public/2022/06/27/数据库安全/index.html","hash":"b26d9b8bcb8efeb75ea1470791759e0b1a058632","modified":1656343399080},{"_id":"public/2022/06/23/os绪论/index.html","hash":"22e941fee867c6bf7be253f99edd0a12819257c2","modified":1656343399080},{"_id":"public/2022/06/23/sql概述与sql定义语言/index.html","hash":"7dbbf051ae1e8bbf3d2d11d20db55ce7f5361ddc","modified":1656343399080},{"_id":"public/2022/06/23/绪论/index.html","hash":"1a6c320de25392adf35b4371948925535edf76ff","modified":1656343399080},{"_id":"public/2022/06/22/hello-world/index.html","hash":"e078020f7baf6e01546f009b2881a95149164f71","modified":1656343399080},{"_id":"public/archives/index.html","hash":"8495be553f160b9e8917ca150a2cd4fe21034ffa","modified":1656343399080},{"_id":"public/index.html","hash":"5914e2b73c11e7b2802d1e54c917cfb7ec7a6709","modified":1656343399080},{"_id":"public/archives/2022/index.html","hash":"56b8cdf3178076236b36a8471ad599dd250ec2c0","modified":1656343399080},{"_id":"public/archives/2022/06/index.html","hash":"87686bbb18847740f882a82fe436c1940947d852","modified":1656343399080},{"_id":"public/categories/操作系统/index.html","hash":"e110299a317f1932584db8e6daafc38b7067483c","modified":1656343399080},{"_id":"public/categories/数据库/index.html","hash":"520e9a35305b8a41445a09c1780c8f011637279d","modified":1656343399080},{"_id":"public/tags/操作系统/index.html","hash":"fdb40ccbb614cae22f7f19b93ca6acab379a07c3","modified":1656343399080},{"_id":"public/tags/数据库/index.html","hash":"0a3fe0b6d8c329b56517dbd2242d6e966b9c42df","modified":1656343399080},{"_id":"public/CNAME","hash":"fbe513ad52ed690aca60eea5575b2aa8c16b5baf","modified":1656343213312},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1656343213312},{"_id":"public/images/bitbug_favicon-16x16.ico","hash":"998c8c7c1b89f6f323d2485a001983ad271fb103","modified":1656343213312},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1656343213312},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1656343213312},{"_id":"public/images/bitbug_favicon-32x32.ico","hash":"9f23b3240a6709e32d1b734a519128fb038e20d4","modified":1656343213312},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1656343213312},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1656343213312},{"_id":"public/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1656343213312},{"_id":"public/live2d-widget/LICENSE","hash":"1eba7caf09a39110ad2f542e3ed8700d1a69c6d3","modified":1656343213312},{"_id":"public/live2d-widget/assets/screenshot-1.png","hash":"4bd4d97a1fcaa5deb3cea1c0a102a895a15af32f","modified":1656343213312},{"_id":"public/css/hbe.style.css","hash":"b0a0077cb588c0941823905fcc383aa7509ade73","modified":1656343213312},{"_id":"public/lib/hbe.js","hash":"136dba00826bdd086153bf0acb5473aea7183ad1","modified":1656343213312},{"_id":"public/css/noscript.css","hash":"ec89b3425fbce20863d554c6fd495ea29c3c303d","modified":1656343213312},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1656343213312},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1656343213312},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1656343213312},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1656343213312},{"_id":"public/js/fairyDustCursor.js","hash":"3a73ffb1dfb17a7adaa4e95d7e077e5e11764409","modified":1656343213312},{"_id":"public/js/motion.js","hash":"f7c825cbff11885fa0dffa64824fd00e505d6a8d","modified":1656343213312},{"_id":"public/js/fireworks.js","hash":"53981959bc6def4a85bbbb41b07e4b1474a2124d","modified":1656343213312},{"_id":"public/js/next-boot.js","hash":"da0f07f9eaaa83de70128b0feaea3fdadb90457a","modified":1656343213312},{"_id":"public/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":1656343213312},{"_id":"public/js/utils.js","hash":"200088bfd042f5304b2a04befab0829148845e0e","modified":1656343213312},{"_id":"public/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1656343213312},{"_id":"public/live2d-widget/README.html","hash":"282925aa5a1a41f306ec2e9201b84245cbc4120b","modified":1656343213312},{"_id":"public/live2d-widget/autoload.js","hash":"61211be19fa20adfbcc13924fa76c85c2b566675","modified":1656343213312},{"_id":"public/live2d-widget/waifu-tips.js","hash":"61efcb42681f7b777a89b6d3d1b563472c7226a3","modified":1656343213312},{"_id":"public/live2d-widget/waifu-tips.json","hash":"a3f9d4d832cd0948cd21385e7e8c62db377ba7d4","modified":1656343213312},{"_id":"public/live2d-widget/waifu.css","hash":"86ecc0a7c379080a0cf09d0e314b5a5b5137cbea","modified":1656343213312},{"_id":"public/js/schemes/muse.js","hash":"9794bd4fc6a458322949d6a0ade89cd1026bc69f","modified":1656343213312},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1656343213312},{"_id":"public/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1656343213312},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1656343213312},{"_id":"public/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1656343213312},{"_id":"public/live2d-widget/demo/demo.html","hash":"48492e824495bc2870b7160d0fa7d92b28863f11","modified":1656343213312},{"_id":"public/live2d-widget/demo/login.html","hash":"5df56deaeea62f81ea7f41343d91232229b87f21","modified":1656343213312},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1656343213312},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1656343213312},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1656343213312},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1656343213312},{"_id":"public/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1656343213312},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1656343213312},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1656343213312},{"_id":"public/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1656343213312},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1656343213312},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1656343213312},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1656343213312},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1656343213312},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1656343213312},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1656343213312},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1656343213312},{"_id":"public/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1656343213312},{"_id":"public/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1656343213312},{"_id":"public/js/third-party/statistics/firestore.js","hash":"411a72df581f5b21317dc28633c7993207eb9e1c","modified":1656343213312},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1656343213312},{"_id":"public/js/third-party/tags/mermaid.js","hash":"f27d817b0c2138dd3215b1f46af0753f60a008f3","modified":1656343213312},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1656343213312},{"_id":"public/css/main.css","hash":"eb014019898d7fd2865e919b1fc1e50cf14aa0c5","modified":1656343213312},{"_id":"public/live2d-widget/live2d.min.js","hash":"94383fb61de815c3f806ae3f11026bbcfe384082","modified":1656343213312},{"_id":"public/live2d-widget/assets/screenshot-3.png","hash":"f89c6fdf44008e7d3c7a1aafe65dc39b212edb6c","modified":1656343213312},{"_id":"public/live2d-widget/assets/screenshot-2.png","hash":"76b844653136184c573b3632e12296e008a7ff5c","modified":1656343213312},{"_id":"public/images/background.png","hash":"0b8c53b27ef059ac9dde8b75851bc4e8a7ab1c83","modified":1656343213312},{"_id":"public/images/zrn.png","hash":"3ebd139cd267300c6bd37ee76fdc0eb156f7bc0c","modified":1656343213312},{"_id":"public/2022/06/27/并发控制/index.html","hash":"80a456d192c5b2b448574314044584b456f4a242","modified":1656343399080},{"_id":"public/2022/06/27/关系范式/index.html","hash":"0f18d77702de34571e06a3b4729c07ce005b1cd4","modified":1656343399080},{"_id":"public/2022/06/27/数据库设计/index.html","hash":"41fc614fe794d66c929a6d4921f62b07c74425b4","modified":1656343399080},{"_id":"public/2022/06/23/关系数据库/index.html","hash":"fb49f521a547b19bd56cb957a793477b2612df34","modified":1656343399080},{"_id":"public/2022/06/27/三、进程调度/index.html","hash":"9b0d301d473884b26cb217844e0a5bbf8f06fca8","modified":1656343399080},{"_id":"public/2022/06/27/二、进程与线程/index.html","hash":"5e7dafb49d8f60804396a59cc5f3977335d27f85","modified":1656343399080},{"_id":"public/2022/06/27/一、操作系统绪论/index.html","hash":"40d7414439728bbe74029933a84747ea4eaeac61","modified":1656343399080},{"_id":"public/archives/page/2/index.html","hash":"10527c473e1a4159808b81303cf693a88fa0c7ed","modified":1656343399080},{"_id":"public/archives/2022/page/2/index.html","hash":"38722754c8c2aaac09147190ef9cb6aa6f0f8024","modified":1656343399080},{"_id":"public/archives/2022/06/page/2/index.html","hash":"0d9a77c7507a123f2910e120a50ec1fc7e243bd4","modified":1656343399080},{"_id":"public/page/2/index.html","hash":"ae164d7eab35d2d796bcc4a34c97d2f3cea7164f","modified":1656343399080},{"_id":"public/2022/06/27/七、虚拟内存管理/index.html","hash":"a42cf8354f8a34596b125de43b80e0d819b09b81","modified":1656343399080},{"_id":"public/2022/06/27/六、主存储器管理/index.html","hash":"41801b166204dcc040fa84caff68925c8e99cf80","modified":1656343399080},{"_id":"public/2022/06/27/四、进程同步/index.html","hash":"40ef3fac79ad5c58c5733fac5bd956de1feeb723","modified":1656343399080},{"_id":"public/2022/06/27/五、死锁/index.html","hash":"7f41ca36ff1f1c98ce456a73d983b01aa1663231","modified":1656343399080},{"_id":"source/_posts/编译原理复习笔记（前三章）.md","hash":"d524521e2c8fcd82764d12fad01813d180d582c8","modified":1656342750883},{"_id":"public/2022/06/27/编译原理复习笔记（前三章）/index.html","hash":"b6f90f9d008b4030833612b45ace950e8718b8c8","modified":1656343399080},{"_id":"public/categories/编译原理/index.html","hash":"6df0b2b63d03019011fac6d46a23010822d625c2","modified":1656343399080},{"_id":"public/tags/编译原理/index.html","hash":"e8bf72958b47ab29c560764cf803f9ab6cf41a6a","modified":1656343399080}],"Category":[{"name":"操作系统","_id":"cl4wvpgrh0006ugskawzueebs"},{"name":"数据库","_id":"cl4wvpgrq000bugskfqhebez1"},{"name":"编译原理","_id":"cl4wvpgsn001eugsk0krmd83s"}],"Data":[{"_id":"post-body-end","data":"<div>\n    \n</div>\n"},{"_id":"styles","data":"body {\n  background: url(\"/images/background.png\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 100% 100%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.8);\n}\n.popup {\n  opacity: 0.8;\n}\n.post-block {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.comments {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.post {\n  margin-top: 60px;\n  padding: 20px;\n  margin-bottom: 60px;\n  -webkit-box-shadow: 0 0 0px #788072;\n  -moz-box-shadow: 0 0 0px rgba(202,203,204,0.5);\n}\n.post-button .btn {\n  color: #555 !important;\n  background-color: #fff;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  border: none !important;\n  transition-property: unset;\n  padding: 0px 15px;\n}\n.post-button .btn:hover {\n  color: #fff !important;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  background-image: linear-gradient(90deg, #a166ab 0%, #ef4e7b 25%, #f37055 50%, #ef4e7b 75%, #a166ab 100%);\n}\n"},{"_id":"variables","data":""}],"Page":[{"title":"about","date":"2022-06-23T07:14:37.000Z","_content":"\n从前慢\n\n​          木心\n\n记得早先少年时\n\t\t大家诚诚恳恳\n\t\t说一句 是一句\n\t\t清早上火车站\n\t\t长街黑暗无行人\n\t\t卖豆浆的小店冒着热气\n\t\t从前的日色变得慢\n\t\t车，马，邮件都慢\n\t\t一生只够爱一个人\n\t\t钥匙精美有样子\n\t\t你锁了 人家就懂了\t\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2022-06-23 15:14:37\n---\n\n从前慢\n\n​          木心\n\n记得早先少年时\n\t\t大家诚诚恳恳\n\t\t说一句 是一句\n\t\t清早上火车站\n\t\t长街黑暗无行人\n\t\t卖豆浆的小店冒着热气\n\t\t从前的日色变得慢\n\t\t车，马，邮件都慢\n\t\t一生只够爱一个人\n\t\t钥匙精美有样子\n\t\t你锁了 人家就懂了\t\n","updated":"2022-06-23T07:16:59.724Z","path":"about/index.html","comments":1,"layout":"page","_id":"cl4wvpgqp0000ugskcawb1fxc","content":"<p>从前慢</p>\n<p>​          木心</p>\n<p>记得早先少年时<br>        大家诚诚恳恳<br>        说一句 是一句<br>        清早上火车站<br>        长街黑暗无行人<br>        卖豆浆的小店冒着热气<br>        从前的日色变得慢<br>        车，马，邮件都慢<br>        一生只够爱一个人<br>        钥匙精美有样子<br>        你锁了 人家就懂了\t</p>\n","site":{"data":{"post-body-end":"<div>\n    \n</div>\n","styles":"body {\n  background: url(\"/images/background.png\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 100% 100%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.8);\n}\n.popup {\n  opacity: 0.8;\n}\n.post-block {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.comments {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.post {\n  margin-top: 60px;\n  padding: 20px;\n  margin-bottom: 60px;\n  -webkit-box-shadow: 0 0 0px #788072;\n  -moz-box-shadow: 0 0 0px rgba(202,203,204,0.5);\n}\n.post-button .btn {\n  color: #555 !important;\n  background-color: #fff;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  border: none !important;\n  transition-property: unset;\n  padding: 0px 15px;\n}\n.post-button .btn:hover {\n  color: #fff !important;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  background-image: linear-gradient(90deg, #a166ab 0%, #ef4e7b 25%, #f37055 50%, #ef4e7b 75%, #a166ab 100%);\n}\n","variables":""}},"length":180,"excerpt":"","more":"<p>从前慢</p>\n<p>​          木心</p>\n<p>记得早先少年时<br>        大家诚诚恳恳<br>        说一句 是一句<br>        清早上火车站<br>        长街黑暗无行人<br>        卖豆浆的小店冒着热气<br>        从前的日色变得慢<br>        车，马，邮件都慢<br>        一生只够爱一个人<br>        钥匙精美有样子<br>        你锁了 人家就懂了\t</p>\n"},{"title":"tags","date":"2022-06-24T13:49:23.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-06-24 21:49:23\ntype: \"tags\"\ncomments: false\n---\n","updated":"2022-06-24T13:50:54.971Z","path":"tags/index.html","layout":"page","_id":"cl4wvpgra0002ugsk6o9bcn1e","content":"","site":{"data":{"post-body-end":"<div>\n    \n</div>\n","styles":"body {\n  background: url(\"/images/background.png\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 100% 100%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.8);\n}\n.popup {\n  opacity: 0.8;\n}\n.post-block {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.comments {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.post {\n  margin-top: 60px;\n  padding: 20px;\n  margin-bottom: 60px;\n  -webkit-box-shadow: 0 0 0px #788072;\n  -moz-box-shadow: 0 0 0px rgba(202,203,204,0.5);\n}\n.post-button .btn {\n  color: #555 !important;\n  background-color: #fff;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  border: none !important;\n  transition-property: unset;\n  padding: 0px 15px;\n}\n.post-button .btn:hover {\n  color: #fff !important;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  background-image: linear-gradient(90deg, #a166ab 0%, #ef4e7b 25%, #f37055 50%, #ef4e7b 75%, #a166ab 100%);\n}\n","variables":""}},"length":0,"excerpt":"","more":""},{"title":"categories","date":"2022-06-24T13:48:25.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-06-24 21:48:25\ntype: \"categories\"\ncomments: false\n---\n","updated":"2022-06-24T13:50:37.991Z","path":"categories/index.html","layout":"page","_id":"cl4wvpgrf0004ugsk5tu7fu0j","content":"","site":{"data":{"post-body-end":"<div>\n    \n</div>\n","styles":"body {\n  background: url(\"/images/background.png\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 100% 100%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.8);\n}\n.popup {\n  opacity: 0.8;\n}\n.post-block {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.comments {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.post {\n  margin-top: 60px;\n  padding: 20px;\n  margin-bottom: 60px;\n  -webkit-box-shadow: 0 0 0px #788072;\n  -moz-box-shadow: 0 0 0px rgba(202,203,204,0.5);\n}\n.post-button .btn {\n  color: #555 !important;\n  background-color: #fff;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  border: none !important;\n  transition-property: unset;\n  padding: 0px 15px;\n}\n.post-button .btn:hover {\n  color: #fff !important;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  background-image: linear-gradient(90deg, #a166ab 0%, #ef4e7b 25%, #f37055 50%, #ef4e7b 75%, #a166ab 100%);\n}\n","variables":""}},"length":0,"excerpt":"","more":""}],"Post":[{"title":"Hello World","abbrlink":16107,"top":true,"_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n<!-- more -->\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\nabbrlink: 16107\ntop: true\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n<!-- more -->\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2022-06-22T00:41:03.664Z","updated":"2022-06-24T00:49:06.582Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4wvpgqw0001ugsk0djoae3u","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<span id=\"more\"></span>\n\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{"post-body-end":"<div>\n    \n</div>\n","styles":"body {\n  background: url(\"/images/background.png\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 100% 100%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.8);\n}\n.popup {\n  opacity: 0.8;\n}\n.post-block {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.comments {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.post {\n  margin-top: 60px;\n  padding: 20px;\n  margin-bottom: 60px;\n  -webkit-box-shadow: 0 0 0px #788072;\n  -moz-box-shadow: 0 0 0px rgba(202,203,204,0.5);\n}\n.post-button .btn {\n  color: #555 !important;\n  background-color: #fff;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  border: none !important;\n  transition-property: unset;\n  padding: 0px 15px;\n}\n.post-button .btn:hover {\n  color: #fff !important;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  background-image: linear-gradient(90deg, #a166ab 0%, #ef4e7b 25%, #f37055 50%, #ef4e7b 75%, #a166ab 100%);\n}\n","variables":""}},"length":431,"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>","more":"<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>"},{"title":"os绪论","abbrlink":23723,"date":"2022-06-23T03:23:57.000Z","_content":"\n# 一、操作系统绪论\n\n## ==重点考察概念==\n\n操作系统的定义，操作系统在计算机系统中的地位，操作系统的主要功能，资源复用、虚化、抽象，操作系统的特征，多道程序设计，并发，中断，系统调用，CPU 的两种工作模式（用户态、内核态），特权指令和非特权指令 \n\n## 1、操作系统概念、功能及提供的接口\n\n**操作系统的概念**：管理计算机硬件并提供应用程序运行环境的软件。操作系统是配置在计算机硬件上的第一层软件，是对硬件的首次扩充，形成了虚拟计算机/扩展机。它位于硬件与其它软件之间，是所有其他软件运行的基础。\n\n<!-- more -->\n\n**操作系统的作用：**\n\n**用户视角：** 操作系统是用户与计算机硬件之间的接口。为用户使用计算机提供服务。\n\n**系统视角：** \n\n- ==资源管理器== ：管理计算机系统的软硬件资源。**资源复用、资源虚化以及资源抽象** 。\n    - 资源复用：分为时间复用和空间复用。时间复用指的是多个用户或程序轮流使用某个资源，如CPU使用；空间复用指的是多个用户或程序同时使用资源的一部分，如内存使用。\n    - 资源虚化：让一个物理设备变成多个相对独立的对应物\n    - 资源抽象：对内封装细节，对外通过管理对象与访问接口，如：面向进程而不是CPU，面向文件而不是物理存储介质，面向窗口而不是屏幕\n    - ==复用与虚拟化解决的是资源不足的问题。资源抽象解决的是资源复杂的问题。==\n- ==控制程序== ：控制程序执行过程，防止错误和计算机的不当使用\n\n![image-20220513191418134](https://s2.loli.net/2022/05/13/msaGykqzLiVtrDT.png)\n\n![image-20220513193433159](https://s2.loli.net/2022/05/13/HKJvnRhTVw89bdC.png)\n\n![image-20220513192502110](https://s2.loli.net/2022/05/13/AQW3CRkS6fHpBNw.png)\n\n![image-20220513193123123](https://s2.loli.net/2022/05/13/LiEpfK6Awz8WFvs.png)\n\n联机命令接口 = 交互命令接口，如命令行\n\n脱机命令接口 = 批处理命令接口，如*.bat文件\n\n程序接口：如dll文件，调用dll文件即可进行系统调用，只能通过应用程序间接使用\n\n## 2、操作系统的特征\n\n- **并发性：** 多个事件在同一事件间隔内发生（并行：同一时刻）。并发的实质是一个物理CPU(也可以多个物理CPU) 在若干道程序之间多路复用，并发性是对有限物理资源强制行使多用户共享以提高效率。\n\n- **共享性：** 系统中的资源可供多个并发执行的进程共同使用。有两种资源共享方式：\n\n    - 互斥共享：一段时间只允许一个进程访问。如对摄像头设备的共享使用\n    - 同时访问：一段时间允许多个进程访问。如对硬盘资源的共享使用\n\n    ==并发和共享是操作系统的两个最基本特征，二者之间互为存在条件。== \n\n- **虚拟性：** 把一个物理上的实体变为若干个逻辑上的对应物；或把物理上的多个实体变成逻辑上的一个对应物的技术。eg.虚拟存储器\n\n    - 空分复用技术：如虚拟存储技术\n\n    - 时分复用技术：如虚拟处理器技术\n\n        并发性是虚拟性存在的基础\n\n- **异步性（或不确定性）：** 多个作业的执行过程是走走停停的，其执行顺序和每个作业的执行时间是不确定的。\n\n## 3、操作系统的发展与分类\n\n![image-20220513201053867](https://s2.loli.net/2022/05/13/3AWQXpLSTGkobFC.png)\n\n批处理技术是指计算机系统对一批作业自动进行处理的一种技术。\n\n分类：\n\n- 联机批处理：采用联机输入/输出，即输入/输出操作在监督程序控制下，同步进行。 缺点：速度慢 \n- 脱机批处理：外围机：独立于主机，负责把作业任务写入磁带，以及从磁带输出到打印机。主机：负责从磁带上把作业调入内存，或者把结果写回磁带。实现了部分异步能力、减少了CPU的空闲时间、提高了I/O速度\n\n---\n\n多道程序设计：\n\n- **核心思想：** 将多个作业存放在主存中，这些程序在管理程序的控制下交替运行，共享处理机和系统中的其他资源。即通过安排作业（编码与数据）==使得CPU无论何时都有进程执行，从而最大化CPU利用率== \n- 没有提供用户与计算机系统的交互\n- 多道程序宏观上并行，微观上串行\n- 多道程序设计的道数不是任意的\n- **优缺点：** \n    - 提高了CPU的利用率\n    - 提高了内存和I/O设备的利用率\n    - 改进了系统的吞吐率\n    - 充分发挥了系统的并行性\n    - 其主要缺点是: 作业周转时间延长\n- **多重处理系统:   ** 指配置了多个物理CPU，能真正同时执行多道程序的系统。\n\n---\n\n==操作系统的三种基本类型：批处理操作系统、分时操作系统、实时操作系统== \n\n分时系统：允许多个联机用户同时使用一台计算机系统进行计算的操作系统称分时操作系统\n\n**分时技术：** 把处理机的运行时间分成很短的时间片，按时间片轮流把处理机分配给各联机作业使用。\n\n是多道程序设计的自然延伸\n\n采用调度算法，以快速切换作业，好像每个作业同时执行\n\n**特征：** \n\n- 多路性：也称同时性，一台计算机与若干台终端相连接，终端上的这些用户可以同时使用计算机。\n- 交互性：用户通过终端采用人机会话的方式直接控制程序运行，同程序进行交互。\n- 独立性：用户彼此之间都感觉不到别人也在使用这台计算机，好像只有自己独占计算机一样。\n- 及时性：用户请求能在很短时间内获得响应。\n\n## 4、操作系统的运行机制与体系结构\n\n![image-20220513203343485](https://s2.loli.net/2022/05/13/uCvXRb5ixgc4ep9.png)\n\n> 用程序状态字寄存器（PSW， program status word）中的某标志位来标识当前处理器处于什么状态。如0为用户态，1为核心态\n\n---\n\n内核是操作系统的构件，或称基本单位。 \n\n内核作用：  为进程提供管理 、为进程执行提供良好的运行环境\n\n==基本功能:==  \n\n- 中断处理：截获中断，转向中断处理例程\n- 短程调度：CPU调度，保存与恢复现场\n- 原语管理：原语是不可中断过程\n\n==基本属性:== \n\n- 内核是由中断驱动的\n- 内核的执行是连续的\n- 内核在屏蔽中断状态下执行\n- 内核可以使用特权指令\n\n==分类：==\n\n- **模块结构（整体式结构）**：将内核划分为一个个独立的模块，模块之间相互调用。效率高但是结构不清晰，访问控制困难\n\n- **层次结构**：一种特殊的模块结构。将内核划分为一系列相互依赖的层次，每个层次也可以分解为一系列更小的模块。\n\n    ![](https://s2.loli.net/2022/03/04/2PkGeSmIBXyOTai.png)\n\n- **微内核结构**\n\n![image-20220513202231353](https://s2.loli.net/2022/05/13/OzmplexJuwFcj24.png)\n\n![image-20220513202617422](https://s2.loli.net/2022/05/13/7S4E6d3gHUeNlpI.png)\n\n## 5、中断和异常\n\n![image-20220513205554625](https://s2.loli.net/2022/05/13/ojrdODLXqEezi3G.png)\n\n==用户态 → 核心态是通过中断实现的，并且中断是唯一途径==\n\n==核心态 → 用户态的切换是通过执行一个特权指令，将程序状态字（PSW）的标志位设置为“用户态”==\n\n![image-20220513205029547](https://s2.loli.net/2022/05/13/twndlTegkLJ6x9X.png)\n\n![image-20220513205136837](https://s2.loli.net/2022/05/13/EYTzjIOvW7drqfx.png)\n\n**外中断的处理过程：**\n\n![image-20220513205420243](https://s2.loli.net/2022/05/13/oRmXYrNvBUkTgfI.png)\n\n## 6、系统调用\n\n![image-20220513213014300](https://s2.loli.net/2022/05/13/xzmwb1KdrT5MIsp.png)\n\n系统调用是操作系统提供给应用程序（程序员/编程人员）使用的接口，可以理解为一种可供应用程序调用的特殊函数，应用程序可以发出系统调用请求来获得操作系统的服务。\n\n系统调用与库函数的区别：\n\n![image-20220513211951839](https://s2.loli.net/2022/05/13/tK9mNhM6OdzepCP.png)\n\n系统调用背后的过程：\n\n![image-20220513212751507](https://s2.loli.net/2022/05/13/obNKP1RrQt9sBuV.png)\n\n中断、异常和系统调用：\n\n|              | 产生原因                                         | 实现机制                     | 区别                                                         | 保存地址                                                 | 处理                                                         |\n| ------------ | ------------------------------------------------ | ---------------------------- | ------------------------------------------------------------ | -------------------------------------------------------- | ------------------------------------------------------------ |\n| **中断**     | 由定时器和I/O设备产生（来自硬件设备的处理请求）  | 中断机制                     | ①由与现行指令无关的中断信号触发的(异步的)；②中断的发生与CPU处在用户模式或内核模式无关，系统不能确定中断发生的时间 ；③一般来说，中断处理程序提供的服务不是为当前进程所需的 | 保存的是下一条指令的地址，以便在指令结束后检测有没有中断 | **硬件和软件结合** 。①定时器：定时器是OS回收控制的重要方式，可设置为在指定周期（固定或可变）后中断计算机。防止用户程序陷入死循环，或不调用系统服务并且不将控制返回给操作系统。在将控制交到用户之前，操作系统确保定时器已设置好以便产生中断；②中断装置（发生中断源并产生中断的**硬件** ）：发现中断源、保护现场、启动中断处理程序（IDTR寄存器中存放了中断描述符表在内存的起始地址）；③中断处理程序： 保护未被硬件保护的一些必需的处理状态 （CPU自动保存的只有EIP/EFLAGS/ESP/SS/CS） ；识别各个中断源，分析产生中断的原因；处理中断事件；恢复正常操作；④OS必须保证中断前后的同步性，必须保证现场保护的原子性（保护现场的过程不能被中断） |\n| **异常**     | 由程序错误产生，或者由内核必须处理的异常条件产生 | 中断机制                     | ① 由处理器正在执行现行指令而引起的； ②异常处理程序提供的服务是为当前进程所用的；③异常包括出错、陷入、终止和编程异常等等；④异常通常由意想不到的行为触发 | 出错保存的是当前指令的地址，陷入保存的是下一条指令的地址 | ①由硬件检测并处理（如除0）；②硬件自身出错产生的异常：通常会在检测错误之后重新执行该指令，CPU保存运行状态；③有些异常是修复后返回并重新执行出错的指令（如页错误）；有些异常是OS通知相应进程；④异常发生在内核会导致OS崩溃 |\n| **系统调用** | 程序主动请求操作系统服务                         | 通常通过一种特殊的异常来实现 | 程序主动请求系统服务                                         | 保存的是下一条指令的地址                                 | 提供给用户态程序执行特权操作的接口；触发事件，切换至内核态；传递系统调用的参数； 保存状态以便完成系统调用后恢复执行 |\n\n## 7、==可能的大题：多道程序运行、简答题==\n\n### 甘特图\n\n计算作业完成时间，CPU或者I/O设备的利用率等等\n\n资源利用率：CPU利用率 = CPU有效工作时间/CPU总的运行时间， CPU总的运行时间 = CPU有效工作时间+CPU空闲等待时间。\n\nI/O设备的利用率同理。\n\n==注意考虑优先级以及是否能够抢占==\n\n**（1）**在单CPU和两台I/O(I1,I2)设备的多道程序设计环境下，同时投入三个作业运行。它们的执行轨迹如下：\n\nJob1：I2(30ms)、CPU(10ms)、I1(30ms)、CPU(10ms)\n\nJob2：I1(20ms)、CPU(20ms)、I2(40ms)\n\nJob3：CPU(30ms)、I1(20ms)\n\n如果CPU、I1和I2都能并行工作，优先级从高到低为Job1、Job2和Job3，优先级高的作业可以抢占优先级低的作业的CPU。试求：(1)每个作业从投入到完成分别所需的时间。(2) 每个作业投入到完成CPU的利用率。(3)I/O设备利用率。\n\n**答：**画出三个作业并行工作图如下(图中着色部分为作业等待时间)：\n\n![img](https://s2.loli.net/2022/05/14/FxBnaZuVIQ8Nhe7.png)\n\n(1) Job1从投入到运行完成需80ms，Job2从投入到运行完成需90ms，Job3从投入到运行完成需90ms。\n\n(2) CPU空闲时间段为：60ms至70ms，80ms至90ms。所以CPU利用率为(90-20)/90=77.78%。\n\n(3) 设备I1空闲时间段为：20ms至40ms，故I1的利用率为(90-20)/90=77.78%。设备I2空闲时间段为：30ms至50ms，故I2的利用率为(90-20)/90=77.78%。\n\n \n\n2、 若内存中有3道程序A、B、C，它们按A、B、C优先次序运行（不考虑强占）。各程序的计算轨迹为：\n\nA：计算(20)、I/O(30)、计算(10) \n\nB：计算(40)、I/O(20)、计算(10)\n\nC：计算(10)、I/O(30)、计算(20)\n\n如果三道程序都使用相同设备进行I/O(即程序用串行方式使用设备，调度开销忽略不计)。试分别画出单道和多道运行的时间关系图。两种情况下，CPU的平均利用率各为多少?\n\n**答**：分别画出单道和多道运行的时间图\n\n(1) 单道运行时间关系图\n\n  ![img](https://s2.loli.net/2022/05/14/FhG1CTOSvzJu8EM.png)\n\n单道总运行时间为190ms。CPU利用率为(190-80)/190=57.9%\n\n(2) 多道运行时间关系图\n\n  ![img](https://s2.loli.net/2022/05/14/vworFI23sGiWeKp.png)\n\n多道总运行时间为140ms。CPU利用率为(140-30)/140=78.6%\n","source":"_posts/os绪论.md","raw":"---\ntitle: os绪论\ntags: \n- 操作系统\ncategory: \n- 操作系统\nabbrlink: 23723\ndate: 2022-06-23 11:23:57\n---\n\n# 一、操作系统绪论\n\n## ==重点考察概念==\n\n操作系统的定义，操作系统在计算机系统中的地位，操作系统的主要功能，资源复用、虚化、抽象，操作系统的特征，多道程序设计，并发，中断，系统调用，CPU 的两种工作模式（用户态、内核态），特权指令和非特权指令 \n\n## 1、操作系统概念、功能及提供的接口\n\n**操作系统的概念**：管理计算机硬件并提供应用程序运行环境的软件。操作系统是配置在计算机硬件上的第一层软件，是对硬件的首次扩充，形成了虚拟计算机/扩展机。它位于硬件与其它软件之间，是所有其他软件运行的基础。\n\n<!-- more -->\n\n**操作系统的作用：**\n\n**用户视角：** 操作系统是用户与计算机硬件之间的接口。为用户使用计算机提供服务。\n\n**系统视角：** \n\n- ==资源管理器== ：管理计算机系统的软硬件资源。**资源复用、资源虚化以及资源抽象** 。\n    - 资源复用：分为时间复用和空间复用。时间复用指的是多个用户或程序轮流使用某个资源，如CPU使用；空间复用指的是多个用户或程序同时使用资源的一部分，如内存使用。\n    - 资源虚化：让一个物理设备变成多个相对独立的对应物\n    - 资源抽象：对内封装细节，对外通过管理对象与访问接口，如：面向进程而不是CPU，面向文件而不是物理存储介质，面向窗口而不是屏幕\n    - ==复用与虚拟化解决的是资源不足的问题。资源抽象解决的是资源复杂的问题。==\n- ==控制程序== ：控制程序执行过程，防止错误和计算机的不当使用\n\n![image-20220513191418134](https://s2.loli.net/2022/05/13/msaGykqzLiVtrDT.png)\n\n![image-20220513193433159](https://s2.loli.net/2022/05/13/HKJvnRhTVw89bdC.png)\n\n![image-20220513192502110](https://s2.loli.net/2022/05/13/AQW3CRkS6fHpBNw.png)\n\n![image-20220513193123123](https://s2.loli.net/2022/05/13/LiEpfK6Awz8WFvs.png)\n\n联机命令接口 = 交互命令接口，如命令行\n\n脱机命令接口 = 批处理命令接口，如*.bat文件\n\n程序接口：如dll文件，调用dll文件即可进行系统调用，只能通过应用程序间接使用\n\n## 2、操作系统的特征\n\n- **并发性：** 多个事件在同一事件间隔内发生（并行：同一时刻）。并发的实质是一个物理CPU(也可以多个物理CPU) 在若干道程序之间多路复用，并发性是对有限物理资源强制行使多用户共享以提高效率。\n\n- **共享性：** 系统中的资源可供多个并发执行的进程共同使用。有两种资源共享方式：\n\n    - 互斥共享：一段时间只允许一个进程访问。如对摄像头设备的共享使用\n    - 同时访问：一段时间允许多个进程访问。如对硬盘资源的共享使用\n\n    ==并发和共享是操作系统的两个最基本特征，二者之间互为存在条件。== \n\n- **虚拟性：** 把一个物理上的实体变为若干个逻辑上的对应物；或把物理上的多个实体变成逻辑上的一个对应物的技术。eg.虚拟存储器\n\n    - 空分复用技术：如虚拟存储技术\n\n    - 时分复用技术：如虚拟处理器技术\n\n        并发性是虚拟性存在的基础\n\n- **异步性（或不确定性）：** 多个作业的执行过程是走走停停的，其执行顺序和每个作业的执行时间是不确定的。\n\n## 3、操作系统的发展与分类\n\n![image-20220513201053867](https://s2.loli.net/2022/05/13/3AWQXpLSTGkobFC.png)\n\n批处理技术是指计算机系统对一批作业自动进行处理的一种技术。\n\n分类：\n\n- 联机批处理：采用联机输入/输出，即输入/输出操作在监督程序控制下，同步进行。 缺点：速度慢 \n- 脱机批处理：外围机：独立于主机，负责把作业任务写入磁带，以及从磁带输出到打印机。主机：负责从磁带上把作业调入内存，或者把结果写回磁带。实现了部分异步能力、减少了CPU的空闲时间、提高了I/O速度\n\n---\n\n多道程序设计：\n\n- **核心思想：** 将多个作业存放在主存中，这些程序在管理程序的控制下交替运行，共享处理机和系统中的其他资源。即通过安排作业（编码与数据）==使得CPU无论何时都有进程执行，从而最大化CPU利用率== \n- 没有提供用户与计算机系统的交互\n- 多道程序宏观上并行，微观上串行\n- 多道程序设计的道数不是任意的\n- **优缺点：** \n    - 提高了CPU的利用率\n    - 提高了内存和I/O设备的利用率\n    - 改进了系统的吞吐率\n    - 充分发挥了系统的并行性\n    - 其主要缺点是: 作业周转时间延长\n- **多重处理系统:   ** 指配置了多个物理CPU，能真正同时执行多道程序的系统。\n\n---\n\n==操作系统的三种基本类型：批处理操作系统、分时操作系统、实时操作系统== \n\n分时系统：允许多个联机用户同时使用一台计算机系统进行计算的操作系统称分时操作系统\n\n**分时技术：** 把处理机的运行时间分成很短的时间片，按时间片轮流把处理机分配给各联机作业使用。\n\n是多道程序设计的自然延伸\n\n采用调度算法，以快速切换作业，好像每个作业同时执行\n\n**特征：** \n\n- 多路性：也称同时性，一台计算机与若干台终端相连接，终端上的这些用户可以同时使用计算机。\n- 交互性：用户通过终端采用人机会话的方式直接控制程序运行，同程序进行交互。\n- 独立性：用户彼此之间都感觉不到别人也在使用这台计算机，好像只有自己独占计算机一样。\n- 及时性：用户请求能在很短时间内获得响应。\n\n## 4、操作系统的运行机制与体系结构\n\n![image-20220513203343485](https://s2.loli.net/2022/05/13/uCvXRb5ixgc4ep9.png)\n\n> 用程序状态字寄存器（PSW， program status word）中的某标志位来标识当前处理器处于什么状态。如0为用户态，1为核心态\n\n---\n\n内核是操作系统的构件，或称基本单位。 \n\n内核作用：  为进程提供管理 、为进程执行提供良好的运行环境\n\n==基本功能:==  \n\n- 中断处理：截获中断，转向中断处理例程\n- 短程调度：CPU调度，保存与恢复现场\n- 原语管理：原语是不可中断过程\n\n==基本属性:== \n\n- 内核是由中断驱动的\n- 内核的执行是连续的\n- 内核在屏蔽中断状态下执行\n- 内核可以使用特权指令\n\n==分类：==\n\n- **模块结构（整体式结构）**：将内核划分为一个个独立的模块，模块之间相互调用。效率高但是结构不清晰，访问控制困难\n\n- **层次结构**：一种特殊的模块结构。将内核划分为一系列相互依赖的层次，每个层次也可以分解为一系列更小的模块。\n\n    ![](https://s2.loli.net/2022/03/04/2PkGeSmIBXyOTai.png)\n\n- **微内核结构**\n\n![image-20220513202231353](https://s2.loli.net/2022/05/13/OzmplexJuwFcj24.png)\n\n![image-20220513202617422](https://s2.loli.net/2022/05/13/7S4E6d3gHUeNlpI.png)\n\n## 5、中断和异常\n\n![image-20220513205554625](https://s2.loli.net/2022/05/13/ojrdODLXqEezi3G.png)\n\n==用户态 → 核心态是通过中断实现的，并且中断是唯一途径==\n\n==核心态 → 用户态的切换是通过执行一个特权指令，将程序状态字（PSW）的标志位设置为“用户态”==\n\n![image-20220513205029547](https://s2.loli.net/2022/05/13/twndlTegkLJ6x9X.png)\n\n![image-20220513205136837](https://s2.loli.net/2022/05/13/EYTzjIOvW7drqfx.png)\n\n**外中断的处理过程：**\n\n![image-20220513205420243](https://s2.loli.net/2022/05/13/oRmXYrNvBUkTgfI.png)\n\n## 6、系统调用\n\n![image-20220513213014300](https://s2.loli.net/2022/05/13/xzmwb1KdrT5MIsp.png)\n\n系统调用是操作系统提供给应用程序（程序员/编程人员）使用的接口，可以理解为一种可供应用程序调用的特殊函数，应用程序可以发出系统调用请求来获得操作系统的服务。\n\n系统调用与库函数的区别：\n\n![image-20220513211951839](https://s2.loli.net/2022/05/13/tK9mNhM6OdzepCP.png)\n\n系统调用背后的过程：\n\n![image-20220513212751507](https://s2.loli.net/2022/05/13/obNKP1RrQt9sBuV.png)\n\n中断、异常和系统调用：\n\n|              | 产生原因                                         | 实现机制                     | 区别                                                         | 保存地址                                                 | 处理                                                         |\n| ------------ | ------------------------------------------------ | ---------------------------- | ------------------------------------------------------------ | -------------------------------------------------------- | ------------------------------------------------------------ |\n| **中断**     | 由定时器和I/O设备产生（来自硬件设备的处理请求）  | 中断机制                     | ①由与现行指令无关的中断信号触发的(异步的)；②中断的发生与CPU处在用户模式或内核模式无关，系统不能确定中断发生的时间 ；③一般来说，中断处理程序提供的服务不是为当前进程所需的 | 保存的是下一条指令的地址，以便在指令结束后检测有没有中断 | **硬件和软件结合** 。①定时器：定时器是OS回收控制的重要方式，可设置为在指定周期（固定或可变）后中断计算机。防止用户程序陷入死循环，或不调用系统服务并且不将控制返回给操作系统。在将控制交到用户之前，操作系统确保定时器已设置好以便产生中断；②中断装置（发生中断源并产生中断的**硬件** ）：发现中断源、保护现场、启动中断处理程序（IDTR寄存器中存放了中断描述符表在内存的起始地址）；③中断处理程序： 保护未被硬件保护的一些必需的处理状态 （CPU自动保存的只有EIP/EFLAGS/ESP/SS/CS） ；识别各个中断源，分析产生中断的原因；处理中断事件；恢复正常操作；④OS必须保证中断前后的同步性，必须保证现场保护的原子性（保护现场的过程不能被中断） |\n| **异常**     | 由程序错误产生，或者由内核必须处理的异常条件产生 | 中断机制                     | ① 由处理器正在执行现行指令而引起的； ②异常处理程序提供的服务是为当前进程所用的；③异常包括出错、陷入、终止和编程异常等等；④异常通常由意想不到的行为触发 | 出错保存的是当前指令的地址，陷入保存的是下一条指令的地址 | ①由硬件检测并处理（如除0）；②硬件自身出错产生的异常：通常会在检测错误之后重新执行该指令，CPU保存运行状态；③有些异常是修复后返回并重新执行出错的指令（如页错误）；有些异常是OS通知相应进程；④异常发生在内核会导致OS崩溃 |\n| **系统调用** | 程序主动请求操作系统服务                         | 通常通过一种特殊的异常来实现 | 程序主动请求系统服务                                         | 保存的是下一条指令的地址                                 | 提供给用户态程序执行特权操作的接口；触发事件，切换至内核态；传递系统调用的参数； 保存状态以便完成系统调用后恢复执行 |\n\n## 7、==可能的大题：多道程序运行、简答题==\n\n### 甘特图\n\n计算作业完成时间，CPU或者I/O设备的利用率等等\n\n资源利用率：CPU利用率 = CPU有效工作时间/CPU总的运行时间， CPU总的运行时间 = CPU有效工作时间+CPU空闲等待时间。\n\nI/O设备的利用率同理。\n\n==注意考虑优先级以及是否能够抢占==\n\n**（1）**在单CPU和两台I/O(I1,I2)设备的多道程序设计环境下，同时投入三个作业运行。它们的执行轨迹如下：\n\nJob1：I2(30ms)、CPU(10ms)、I1(30ms)、CPU(10ms)\n\nJob2：I1(20ms)、CPU(20ms)、I2(40ms)\n\nJob3：CPU(30ms)、I1(20ms)\n\n如果CPU、I1和I2都能并行工作，优先级从高到低为Job1、Job2和Job3，优先级高的作业可以抢占优先级低的作业的CPU。试求：(1)每个作业从投入到完成分别所需的时间。(2) 每个作业投入到完成CPU的利用率。(3)I/O设备利用率。\n\n**答：**画出三个作业并行工作图如下(图中着色部分为作业等待时间)：\n\n![img](https://s2.loli.net/2022/05/14/FxBnaZuVIQ8Nhe7.png)\n\n(1) Job1从投入到运行完成需80ms，Job2从投入到运行完成需90ms，Job3从投入到运行完成需90ms。\n\n(2) CPU空闲时间段为：60ms至70ms，80ms至90ms。所以CPU利用率为(90-20)/90=77.78%。\n\n(3) 设备I1空闲时间段为：20ms至40ms，故I1的利用率为(90-20)/90=77.78%。设备I2空闲时间段为：30ms至50ms，故I2的利用率为(90-20)/90=77.78%。\n\n \n\n2、 若内存中有3道程序A、B、C，它们按A、B、C优先次序运行（不考虑强占）。各程序的计算轨迹为：\n\nA：计算(20)、I/O(30)、计算(10) \n\nB：计算(40)、I/O(20)、计算(10)\n\nC：计算(10)、I/O(30)、计算(20)\n\n如果三道程序都使用相同设备进行I/O(即程序用串行方式使用设备，调度开销忽略不计)。试分别画出单道和多道运行的时间关系图。两种情况下，CPU的平均利用率各为多少?\n\n**答**：分别画出单道和多道运行的时间图\n\n(1) 单道运行时间关系图\n\n  ![img](https://s2.loli.net/2022/05/14/FhG1CTOSvzJu8EM.png)\n\n单道总运行时间为190ms。CPU利用率为(190-80)/190=57.9%\n\n(2) 多道运行时间关系图\n\n  ![img](https://s2.loli.net/2022/05/14/vworFI23sGiWeKp.png)\n\n多道总运行时间为140ms。CPU利用率为(140-30)/140=78.6%\n","slug":"os绪论","published":1,"updated":"2022-06-27T00:29:52.985Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4wvpgrc0003ugskci9d7me1","content":"<h1 id=\"一、操作系统绪论\"><a href=\"#一、操作系统绪论\" class=\"headerlink\" title=\"一、操作系统绪论\"></a>一、操作系统绪论</h1><h2 id=\"x3D-x3D-重点考察概念-x3D-x3D\"><a href=\"#x3D-x3D-重点考察概念-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;重点考察概念&#x3D;&#x3D;\"></a>&#x3D;&#x3D;重点考察概念&#x3D;&#x3D;</h2><p>操作系统的定义，操作系统在计算机系统中的地位，操作系统的主要功能，资源复用、虚化、抽象，操作系统的特征，多道程序设计，并发，中断，系统调用，CPU 的两种工作模式（用户态、内核态），特权指令和非特权指令 </p>\n<h2 id=\"1、操作系统概念、功能及提供的接口\"><a href=\"#1、操作系统概念、功能及提供的接口\" class=\"headerlink\" title=\"1、操作系统概念、功能及提供的接口\"></a>1、操作系统概念、功能及提供的接口</h2><p><strong>操作系统的概念</strong>：管理计算机硬件并提供应用程序运行环境的软件。操作系统是配置在计算机硬件上的第一层软件，是对硬件的首次扩充，形成了虚拟计算机&#x2F;扩展机。它位于硬件与其它软件之间，是所有其他软件运行的基础。</p>\n<span id=\"more\"></span>\n\n<p><strong>操作系统的作用：</strong></p>\n<p><strong>用户视角：</strong> 操作系统是用户与计算机硬件之间的接口。为用户使用计算机提供服务。</p>\n<p><strong>系统视角：</strong> </p>\n<ul>\n<li>&#x3D;&#x3D;资源管理器&#x3D;&#x3D; ：管理计算机系统的软硬件资源。<strong>资源复用、资源虚化以及资源抽象</strong> 。<ul>\n<li>资源复用：分为时间复用和空间复用。时间复用指的是多个用户或程序轮流使用某个资源，如CPU使用；空间复用指的是多个用户或程序同时使用资源的一部分，如内存使用。</li>\n<li>资源虚化：让一个物理设备变成多个相对独立的对应物</li>\n<li>资源抽象：对内封装细节，对外通过管理对象与访问接口，如：面向进程而不是CPU，面向文件而不是物理存储介质，面向窗口而不是屏幕</li>\n<li>&#x3D;&#x3D;复用与虚拟化解决的是资源不足的问题。资源抽象解决的是资源复杂的问题。&#x3D;&#x3D;</li>\n</ul>\n</li>\n<li>&#x3D;&#x3D;控制程序&#x3D;&#x3D; ：控制程序执行过程，防止错误和计算机的不当使用</li>\n</ul>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/msaGykqzLiVtrDT.png\" alt=\"image-20220513191418134\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/HKJvnRhTVw89bdC.png\" alt=\"image-20220513193433159\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/AQW3CRkS6fHpBNw.png\" alt=\"image-20220513192502110\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/LiEpfK6Awz8WFvs.png\" alt=\"image-20220513193123123\"></p>\n<p>联机命令接口 &#x3D; 交互命令接口，如命令行</p>\n<p>脱机命令接口 &#x3D; 批处理命令接口，如*.bat文件</p>\n<p>程序接口：如dll文件，调用dll文件即可进行系统调用，只能通过应用程序间接使用</p>\n<h2 id=\"2、操作系统的特征\"><a href=\"#2、操作系统的特征\" class=\"headerlink\" title=\"2、操作系统的特征\"></a>2、操作系统的特征</h2><ul>\n<li><p><strong>并发性：</strong> 多个事件在同一事件间隔内发生（并行：同一时刻）。并发的实质是一个物理CPU(也可以多个物理CPU) 在若干道程序之间多路复用，并发性是对有限物理资源强制行使多用户共享以提高效率。</p>\n</li>\n<li><p><strong>共享性：</strong> 系统中的资源可供多个并发执行的进程共同使用。有两种资源共享方式：</p>\n<ul>\n<li>互斥共享：一段时间只允许一个进程访问。如对摄像头设备的共享使用</li>\n<li>同时访问：一段时间允许多个进程访问。如对硬盘资源的共享使用</li>\n</ul>\n<p>  &#x3D;&#x3D;并发和共享是操作系统的两个最基本特征，二者之间互为存在条件。&#x3D;&#x3D; </p>\n</li>\n<li><p><strong>虚拟性：</strong> 把一个物理上的实体变为若干个逻辑上的对应物；或把物理上的多个实体变成逻辑上的一个对应物的技术。eg.虚拟存储器</p>\n<ul>\n<li><p>空分复用技术：如虚拟存储技术</p>\n</li>\n<li><p>时分复用技术：如虚拟处理器技术</p>\n<p>  并发性是虚拟性存在的基础</p>\n</li>\n</ul>\n</li>\n<li><p><strong>异步性（或不确定性）：</strong> 多个作业的执行过程是走走停停的，其执行顺序和每个作业的执行时间是不确定的。</p>\n</li>\n</ul>\n<h2 id=\"3、操作系统的发展与分类\"><a href=\"#3、操作系统的发展与分类\" class=\"headerlink\" title=\"3、操作系统的发展与分类\"></a>3、操作系统的发展与分类</h2><p><img data-src=\"https://s2.loli.net/2022/05/13/3AWQXpLSTGkobFC.png\" alt=\"image-20220513201053867\"></p>\n<p>批处理技术是指计算机系统对一批作业自动进行处理的一种技术。</p>\n<p>分类：</p>\n<ul>\n<li>联机批处理：采用联机输入&#x2F;输出，即输入&#x2F;输出操作在监督程序控制下，同步进行。 缺点：速度慢 </li>\n<li>脱机批处理：外围机：独立于主机，负责把作业任务写入磁带，以及从磁带输出到打印机。主机：负责从磁带上把作业调入内存，或者把结果写回磁带。实现了部分异步能力、减少了CPU的空闲时间、提高了I&#x2F;O速度</li>\n</ul>\n<hr>\n<p>多道程序设计：</p>\n<ul>\n<li><strong>核心思想：</strong> 将多个作业存放在主存中，这些程序在管理程序的控制下交替运行，共享处理机和系统中的其他资源。即通过安排作业（编码与数据）&#x3D;&#x3D;使得CPU无论何时都有进程执行，从而最大化CPU利用率&#x3D;&#x3D; </li>\n<li>没有提供用户与计算机系统的交互</li>\n<li>多道程序宏观上并行，微观上串行</li>\n<li>多道程序设计的道数不是任意的</li>\n<li><strong>优缺点：</strong> <ul>\n<li>提高了CPU的利用率</li>\n<li>提高了内存和I&#x2F;O设备的利用率</li>\n<li>改进了系统的吞吐率</li>\n<li>充分发挥了系统的并行性</li>\n<li>其主要缺点是: 作业周转时间延长</li>\n</ul>\n</li>\n<li>**多重处理系统:   ** 指配置了多个物理CPU，能真正同时执行多道程序的系统。</li>\n</ul>\n<hr>\n<p>&#x3D;&#x3D;操作系统的三种基本类型：批处理操作系统、分时操作系统、实时操作系统&#x3D;&#x3D; </p>\n<p>分时系统：允许多个联机用户同时使用一台计算机系统进行计算的操作系统称分时操作系统</p>\n<p><strong>分时技术：</strong> 把处理机的运行时间分成很短的时间片，按时间片轮流把处理机分配给各联机作业使用。</p>\n<p>是多道程序设计的自然延伸</p>\n<p>采用调度算法，以快速切换作业，好像每个作业同时执行</p>\n<p><strong>特征：</strong> </p>\n<ul>\n<li>多路性：也称同时性，一台计算机与若干台终端相连接，终端上的这些用户可以同时使用计算机。</li>\n<li>交互性：用户通过终端采用人机会话的方式直接控制程序运行，同程序进行交互。</li>\n<li>独立性：用户彼此之间都感觉不到别人也在使用这台计算机，好像只有自己独占计算机一样。</li>\n<li>及时性：用户请求能在很短时间内获得响应。</li>\n</ul>\n<h2 id=\"4、操作系统的运行机制与体系结构\"><a href=\"#4、操作系统的运行机制与体系结构\" class=\"headerlink\" title=\"4、操作系统的运行机制与体系结构\"></a>4、操作系统的运行机制与体系结构</h2><p><img data-src=\"https://s2.loli.net/2022/05/13/uCvXRb5ixgc4ep9.png\" alt=\"image-20220513203343485\"></p>\n<blockquote>\n<p>用程序状态字寄存器（PSW， program status word）中的某标志位来标识当前处理器处于什么状态。如0为用户态，1为核心态</p>\n</blockquote>\n<hr>\n<p>内核是操作系统的构件，或称基本单位。 </p>\n<p>内核作用：  为进程提供管理 、为进程执行提供良好的运行环境</p>\n<p>&#x3D;&#x3D;基本功能:&#x3D;&#x3D;  </p>\n<ul>\n<li>中断处理：截获中断，转向中断处理例程</li>\n<li>短程调度：CPU调度，保存与恢复现场</li>\n<li>原语管理：原语是不可中断过程</li>\n</ul>\n<p>&#x3D;&#x3D;基本属性:&#x3D;&#x3D; </p>\n<ul>\n<li>内核是由中断驱动的</li>\n<li>内核的执行是连续的</li>\n<li>内核在屏蔽中断状态下执行</li>\n<li>内核可以使用特权指令</li>\n</ul>\n<p>&#x3D;&#x3D;分类：&#x3D;&#x3D;</p>\n<ul>\n<li><p><strong>模块结构（整体式结构）</strong>：将内核划分为一个个独立的模块，模块之间相互调用。效率高但是结构不清晰，访问控制困难</p>\n</li>\n<li><p><strong>层次结构</strong>：一种特殊的模块结构。将内核划分为一系列相互依赖的层次，每个层次也可以分解为一系列更小的模块。</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/04/2PkGeSmIBXyOTai.png\"></p>\n</li>\n<li><p><strong>微内核结构</strong></p>\n</li>\n</ul>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/OzmplexJuwFcj24.png\" alt=\"image-20220513202231353\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/7S4E6d3gHUeNlpI.png\" alt=\"image-20220513202617422\"></p>\n<h2 id=\"5、中断和异常\"><a href=\"#5、中断和异常\" class=\"headerlink\" title=\"5、中断和异常\"></a>5、中断和异常</h2><p><img data-src=\"https://s2.loli.net/2022/05/13/ojrdODLXqEezi3G.png\" alt=\"image-20220513205554625\"></p>\n<p>&#x3D;&#x3D;用户态 → 核心态是通过中断实现的，并且中断是唯一途径&#x3D;&#x3D;</p>\n<p>&#x3D;&#x3D;核心态 → 用户态的切换是通过执行一个特权指令，将程序状态字（PSW）的标志位设置为“用户态”&#x3D;&#x3D;</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/twndlTegkLJ6x9X.png\" alt=\"image-20220513205029547\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/EYTzjIOvW7drqfx.png\" alt=\"image-20220513205136837\"></p>\n<p><strong>外中断的处理过程：</strong></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/oRmXYrNvBUkTgfI.png\" alt=\"image-20220513205420243\"></p>\n<h2 id=\"6、系统调用\"><a href=\"#6、系统调用\" class=\"headerlink\" title=\"6、系统调用\"></a>6、系统调用</h2><p><img data-src=\"https://s2.loli.net/2022/05/13/xzmwb1KdrT5MIsp.png\" alt=\"image-20220513213014300\"></p>\n<p>系统调用是操作系统提供给应用程序（程序员&#x2F;编程人员）使用的接口，可以理解为一种可供应用程序调用的特殊函数，应用程序可以发出系统调用请求来获得操作系统的服务。</p>\n<p>系统调用与库函数的区别：</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/tK9mNhM6OdzepCP.png\" alt=\"image-20220513211951839\"></p>\n<p>系统调用背后的过程：</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/obNKP1RrQt9sBuV.png\" alt=\"image-20220513212751507\"></p>\n<p>中断、异常和系统调用：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>产生原因</th>\n<th>实现机制</th>\n<th>区别</th>\n<th>保存地址</th>\n<th>处理</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>中断</strong></td>\n<td>由定时器和I&#x2F;O设备产生（来自硬件设备的处理请求）</td>\n<td>中断机制</td>\n<td>①由与现行指令无关的中断信号触发的(异步的)；②中断的发生与CPU处在用户模式或内核模式无关，系统不能确定中断发生的时间 ；③一般来说，中断处理程序提供的服务不是为当前进程所需的</td>\n<td>保存的是下一条指令的地址，以便在指令结束后检测有没有中断</td>\n<td><strong>硬件和软件结合</strong> 。①定时器：定时器是OS回收控制的重要方式，可设置为在指定周期（固定或可变）后中断计算机。防止用户程序陷入死循环，或不调用系统服务并且不将控制返回给操作系统。在将控制交到用户之前，操作系统确保定时器已设置好以便产生中断；②中断装置（发生中断源并产生中断的<strong>硬件</strong> ）：发现中断源、保护现场、启动中断处理程序（IDTR寄存器中存放了中断描述符表在内存的起始地址）；③中断处理程序： 保护未被硬件保护的一些必需的处理状态 （CPU自动保存的只有EIP&#x2F;EFLAGS&#x2F;ESP&#x2F;SS&#x2F;CS） ；识别各个中断源，分析产生中断的原因；处理中断事件；恢复正常操作；④OS必须保证中断前后的同步性，必须保证现场保护的原子性（保护现场的过程不能被中断）</td>\n</tr>\n<tr>\n<td><strong>异常</strong></td>\n<td>由程序错误产生，或者由内核必须处理的异常条件产生</td>\n<td>中断机制</td>\n<td>① 由处理器正在执行现行指令而引起的； ②异常处理程序提供的服务是为当前进程所用的；③异常包括出错、陷入、终止和编程异常等等；④异常通常由意想不到的行为触发</td>\n<td>出错保存的是当前指令的地址，陷入保存的是下一条指令的地址</td>\n<td>①由硬件检测并处理（如除0）；②硬件自身出错产生的异常：通常会在检测错误之后重新执行该指令，CPU保存运行状态；③有些异常是修复后返回并重新执行出错的指令（如页错误）；有些异常是OS通知相应进程；④异常发生在内核会导致OS崩溃</td>\n</tr>\n<tr>\n<td><strong>系统调用</strong></td>\n<td>程序主动请求操作系统服务</td>\n<td>通常通过一种特殊的异常来实现</td>\n<td>程序主动请求系统服务</td>\n<td>保存的是下一条指令的地址</td>\n<td>提供给用户态程序执行特权操作的接口；触发事件，切换至内核态；传递系统调用的参数； 保存状态以便完成系统调用后恢复执行</td>\n</tr>\n</tbody></table>\n<h2 id=\"7、-x3D-x3D-可能的大题：多道程序运行、简答题-x3D-x3D\"><a href=\"#7、-x3D-x3D-可能的大题：多道程序运行、简答题-x3D-x3D\" class=\"headerlink\" title=\"7、&#x3D;&#x3D;可能的大题：多道程序运行、简答题&#x3D;&#x3D;\"></a>7、&#x3D;&#x3D;可能的大题：多道程序运行、简答题&#x3D;&#x3D;</h2><h3 id=\"甘特图\"><a href=\"#甘特图\" class=\"headerlink\" title=\"甘特图\"></a>甘特图</h3><p>计算作业完成时间，CPU或者I&#x2F;O设备的利用率等等</p>\n<p>资源利用率：CPU利用率 &#x3D; CPU有效工作时间&#x2F;CPU总的运行时间， CPU总的运行时间 &#x3D; CPU有效工作时间+CPU空闲等待时间。</p>\n<p>I&#x2F;O设备的利用率同理。</p>\n<p>&#x3D;&#x3D;注意考虑优先级以及是否能够抢占&#x3D;&#x3D;</p>\n<p><strong>（1）</strong>在单CPU和两台I&#x2F;O(I1,I2)设备的多道程序设计环境下，同时投入三个作业运行。它们的执行轨迹如下：</p>\n<p>Job1：I2(30ms)、CPU(10ms)、I1(30ms)、CPU(10ms)</p>\n<p>Job2：I1(20ms)、CPU(20ms)、I2(40ms)</p>\n<p>Job3：CPU(30ms)、I1(20ms)</p>\n<p>如果CPU、I1和I2都能并行工作，优先级从高到低为Job1、Job2和Job3，优先级高的作业可以抢占优先级低的作业的CPU。试求：(1)每个作业从投入到完成分别所需的时间。(2) 每个作业投入到完成CPU的利用率。(3)I&#x2F;O设备利用率。</p>\n<p><strong>答：</strong>画出三个作业并行工作图如下(图中着色部分为作业等待时间)：</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/14/FxBnaZuVIQ8Nhe7.png\" alt=\"img\"></p>\n<p>(1) Job1从投入到运行完成需80ms，Job2从投入到运行完成需90ms，Job3从投入到运行完成需90ms。</p>\n<p>(2) CPU空闲时间段为：60ms至70ms，80ms至90ms。所以CPU利用率为(90-20)&#x2F;90&#x3D;77.78%。</p>\n<p>(3) 设备I1空闲时间段为：20ms至40ms，故I1的利用率为(90-20)&#x2F;90&#x3D;77.78%。设备I2空闲时间段为：30ms至50ms，故I2的利用率为(90-20)&#x2F;90&#x3D;77.78%。</p>\n<p>2、 若内存中有3道程序A、B、C，它们按A、B、C优先次序运行（不考虑强占）。各程序的计算轨迹为：</p>\n<p>A：计算(20)、I&#x2F;O(30)、计算(10) </p>\n<p>B：计算(40)、I&#x2F;O(20)、计算(10)</p>\n<p>C：计算(10)、I&#x2F;O(30)、计算(20)</p>\n<p>如果三道程序都使用相同设备进行I&#x2F;O(即程序用串行方式使用设备，调度开销忽略不计)。试分别画出单道和多道运行的时间关系图。两种情况下，CPU的平均利用率各为多少?</p>\n<p><strong>答</strong>：分别画出单道和多道运行的时间图</p>\n<p>(1) 单道运行时间关系图</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/05/14/FhG1CTOSvzJu8EM.png\" alt=\"img\"></p>\n<p>单道总运行时间为190ms。CPU利用率为(190-80)&#x2F;190&#x3D;57.9%</p>\n<p>(2) 多道运行时间关系图</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/05/14/vworFI23sGiWeKp.png\" alt=\"img\"></p>\n<p>多道总运行时间为140ms。CPU利用率为(140-30)&#x2F;140&#x3D;78.6%</p>\n","site":{"data":{"post-body-end":"<div>\n    \n</div>\n","styles":"body {\n  background: url(\"/images/background.png\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 100% 100%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.8);\n}\n.popup {\n  opacity: 0.8;\n}\n.post-block {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.comments {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.post {\n  margin-top: 60px;\n  padding: 20px;\n  margin-bottom: 60px;\n  -webkit-box-shadow: 0 0 0px #788072;\n  -moz-box-shadow: 0 0 0px rgba(202,203,204,0.5);\n}\n.post-button .btn {\n  color: #555 !important;\n  background-color: #fff;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  border: none !important;\n  transition-property: unset;\n  padding: 0px 15px;\n}\n.post-button .btn:hover {\n  color: #fff !important;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  background-image: linear-gradient(90deg, #a166ab 0%, #ef4e7b 25%, #f37055 50%, #ef4e7b 75%, #a166ab 100%);\n}\n","variables":""}},"length":4655,"excerpt":"<h1 id=\"一、操作系统绪论\"><a href=\"#一、操作系统绪论\" class=\"headerlink\" title=\"一、操作系统绪论\"></a>一、操作系统绪论</h1><h2 id=\"x3D-x3D-重点考察概念-x3D-x3D\"><a href=\"#x3D-x3D-重点考察概念-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;重点考察概念&#x3D;&#x3D;\"></a>&#x3D;&#x3D;重点考察概念&#x3D;&#x3D;</h2><p>操作系统的定义，操作系统在计算机系统中的地位，操作系统的主要功能，资源复用、虚化、抽象，操作系统的特征，多道程序设计，并发，中断，系统调用，CPU 的两种工作模式（用户态、内核态），特权指令和非特权指令 </p>\n<h2 id=\"1、操作系统概念、功能及提供的接口\"><a href=\"#1、操作系统概念、功能及提供的接口\" class=\"headerlink\" title=\"1、操作系统概念、功能及提供的接口\"></a>1、操作系统概念、功能及提供的接口</h2><p><strong>操作系统的概念</strong>：管理计算机硬件并提供应用程序运行环境的软件。操作系统是配置在计算机硬件上的第一层软件，是对硬件的首次扩充，形成了虚拟计算机&#x2F;扩展机。它位于硬件与其它软件之间，是所有其他软件运行的基础。</p>","more":"<p><strong>操作系统的作用：</strong></p>\n<p><strong>用户视角：</strong> 操作系统是用户与计算机硬件之间的接口。为用户使用计算机提供服务。</p>\n<p><strong>系统视角：</strong> </p>\n<ul>\n<li>&#x3D;&#x3D;资源管理器&#x3D;&#x3D; ：管理计算机系统的软硬件资源。<strong>资源复用、资源虚化以及资源抽象</strong> 。<ul>\n<li>资源复用：分为时间复用和空间复用。时间复用指的是多个用户或程序轮流使用某个资源，如CPU使用；空间复用指的是多个用户或程序同时使用资源的一部分，如内存使用。</li>\n<li>资源虚化：让一个物理设备变成多个相对独立的对应物</li>\n<li>资源抽象：对内封装细节，对外通过管理对象与访问接口，如：面向进程而不是CPU，面向文件而不是物理存储介质，面向窗口而不是屏幕</li>\n<li>&#x3D;&#x3D;复用与虚拟化解决的是资源不足的问题。资源抽象解决的是资源复杂的问题。&#x3D;&#x3D;</li>\n</ul>\n</li>\n<li>&#x3D;&#x3D;控制程序&#x3D;&#x3D; ：控制程序执行过程，防止错误和计算机的不当使用</li>\n</ul>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/msaGykqzLiVtrDT.png\" alt=\"image-20220513191418134\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/HKJvnRhTVw89bdC.png\" alt=\"image-20220513193433159\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/AQW3CRkS6fHpBNw.png\" alt=\"image-20220513192502110\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/LiEpfK6Awz8WFvs.png\" alt=\"image-20220513193123123\"></p>\n<p>联机命令接口 &#x3D; 交互命令接口，如命令行</p>\n<p>脱机命令接口 &#x3D; 批处理命令接口，如*.bat文件</p>\n<p>程序接口：如dll文件，调用dll文件即可进行系统调用，只能通过应用程序间接使用</p>\n<h2 id=\"2、操作系统的特征\"><a href=\"#2、操作系统的特征\" class=\"headerlink\" title=\"2、操作系统的特征\"></a>2、操作系统的特征</h2><ul>\n<li><p><strong>并发性：</strong> 多个事件在同一事件间隔内发生（并行：同一时刻）。并发的实质是一个物理CPU(也可以多个物理CPU) 在若干道程序之间多路复用，并发性是对有限物理资源强制行使多用户共享以提高效率。</p>\n</li>\n<li><p><strong>共享性：</strong> 系统中的资源可供多个并发执行的进程共同使用。有两种资源共享方式：</p>\n<ul>\n<li>互斥共享：一段时间只允许一个进程访问。如对摄像头设备的共享使用</li>\n<li>同时访问：一段时间允许多个进程访问。如对硬盘资源的共享使用</li>\n</ul>\n<p>  &#x3D;&#x3D;并发和共享是操作系统的两个最基本特征，二者之间互为存在条件。&#x3D;&#x3D; </p>\n</li>\n<li><p><strong>虚拟性：</strong> 把一个物理上的实体变为若干个逻辑上的对应物；或把物理上的多个实体变成逻辑上的一个对应物的技术。eg.虚拟存储器</p>\n<ul>\n<li><p>空分复用技术：如虚拟存储技术</p>\n</li>\n<li><p>时分复用技术：如虚拟处理器技术</p>\n<p>  并发性是虚拟性存在的基础</p>\n</li>\n</ul>\n</li>\n<li><p><strong>异步性（或不确定性）：</strong> 多个作业的执行过程是走走停停的，其执行顺序和每个作业的执行时间是不确定的。</p>\n</li>\n</ul>\n<h2 id=\"3、操作系统的发展与分类\"><a href=\"#3、操作系统的发展与分类\" class=\"headerlink\" title=\"3、操作系统的发展与分类\"></a>3、操作系统的发展与分类</h2><p><img data-src=\"https://s2.loli.net/2022/05/13/3AWQXpLSTGkobFC.png\" alt=\"image-20220513201053867\"></p>\n<p>批处理技术是指计算机系统对一批作业自动进行处理的一种技术。</p>\n<p>分类：</p>\n<ul>\n<li>联机批处理：采用联机输入&#x2F;输出，即输入&#x2F;输出操作在监督程序控制下，同步进行。 缺点：速度慢 </li>\n<li>脱机批处理：外围机：独立于主机，负责把作业任务写入磁带，以及从磁带输出到打印机。主机：负责从磁带上把作业调入内存，或者把结果写回磁带。实现了部分异步能力、减少了CPU的空闲时间、提高了I&#x2F;O速度</li>\n</ul>\n<hr>\n<p>多道程序设计：</p>\n<ul>\n<li><strong>核心思想：</strong> 将多个作业存放在主存中，这些程序在管理程序的控制下交替运行，共享处理机和系统中的其他资源。即通过安排作业（编码与数据）&#x3D;&#x3D;使得CPU无论何时都有进程执行，从而最大化CPU利用率&#x3D;&#x3D; </li>\n<li>没有提供用户与计算机系统的交互</li>\n<li>多道程序宏观上并行，微观上串行</li>\n<li>多道程序设计的道数不是任意的</li>\n<li><strong>优缺点：</strong> <ul>\n<li>提高了CPU的利用率</li>\n<li>提高了内存和I&#x2F;O设备的利用率</li>\n<li>改进了系统的吞吐率</li>\n<li>充分发挥了系统的并行性</li>\n<li>其主要缺点是: 作业周转时间延长</li>\n</ul>\n</li>\n<li>**多重处理系统:   ** 指配置了多个物理CPU，能真正同时执行多道程序的系统。</li>\n</ul>\n<hr>\n<p>&#x3D;&#x3D;操作系统的三种基本类型：批处理操作系统、分时操作系统、实时操作系统&#x3D;&#x3D; </p>\n<p>分时系统：允许多个联机用户同时使用一台计算机系统进行计算的操作系统称分时操作系统</p>\n<p><strong>分时技术：</strong> 把处理机的运行时间分成很短的时间片，按时间片轮流把处理机分配给各联机作业使用。</p>\n<p>是多道程序设计的自然延伸</p>\n<p>采用调度算法，以快速切换作业，好像每个作业同时执行</p>\n<p><strong>特征：</strong> </p>\n<ul>\n<li>多路性：也称同时性，一台计算机与若干台终端相连接，终端上的这些用户可以同时使用计算机。</li>\n<li>交互性：用户通过终端采用人机会话的方式直接控制程序运行，同程序进行交互。</li>\n<li>独立性：用户彼此之间都感觉不到别人也在使用这台计算机，好像只有自己独占计算机一样。</li>\n<li>及时性：用户请求能在很短时间内获得响应。</li>\n</ul>\n<h2 id=\"4、操作系统的运行机制与体系结构\"><a href=\"#4、操作系统的运行机制与体系结构\" class=\"headerlink\" title=\"4、操作系统的运行机制与体系结构\"></a>4、操作系统的运行机制与体系结构</h2><p><img data-src=\"https://s2.loli.net/2022/05/13/uCvXRb5ixgc4ep9.png\" alt=\"image-20220513203343485\"></p>\n<blockquote>\n<p>用程序状态字寄存器（PSW， program status word）中的某标志位来标识当前处理器处于什么状态。如0为用户态，1为核心态</p>\n</blockquote>\n<hr>\n<p>内核是操作系统的构件，或称基本单位。 </p>\n<p>内核作用：  为进程提供管理 、为进程执行提供良好的运行环境</p>\n<p>&#x3D;&#x3D;基本功能:&#x3D;&#x3D;  </p>\n<ul>\n<li>中断处理：截获中断，转向中断处理例程</li>\n<li>短程调度：CPU调度，保存与恢复现场</li>\n<li>原语管理：原语是不可中断过程</li>\n</ul>\n<p>&#x3D;&#x3D;基本属性:&#x3D;&#x3D; </p>\n<ul>\n<li>内核是由中断驱动的</li>\n<li>内核的执行是连续的</li>\n<li>内核在屏蔽中断状态下执行</li>\n<li>内核可以使用特权指令</li>\n</ul>\n<p>&#x3D;&#x3D;分类：&#x3D;&#x3D;</p>\n<ul>\n<li><p><strong>模块结构（整体式结构）</strong>：将内核划分为一个个独立的模块，模块之间相互调用。效率高但是结构不清晰，访问控制困难</p>\n</li>\n<li><p><strong>层次结构</strong>：一种特殊的模块结构。将内核划分为一系列相互依赖的层次，每个层次也可以分解为一系列更小的模块。</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/04/2PkGeSmIBXyOTai.png\"></p>\n</li>\n<li><p><strong>微内核结构</strong></p>\n</li>\n</ul>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/OzmplexJuwFcj24.png\" alt=\"image-20220513202231353\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/7S4E6d3gHUeNlpI.png\" alt=\"image-20220513202617422\"></p>\n<h2 id=\"5、中断和异常\"><a href=\"#5、中断和异常\" class=\"headerlink\" title=\"5、中断和异常\"></a>5、中断和异常</h2><p><img data-src=\"https://s2.loli.net/2022/05/13/ojrdODLXqEezi3G.png\" alt=\"image-20220513205554625\"></p>\n<p>&#x3D;&#x3D;用户态 → 核心态是通过中断实现的，并且中断是唯一途径&#x3D;&#x3D;</p>\n<p>&#x3D;&#x3D;核心态 → 用户态的切换是通过执行一个特权指令，将程序状态字（PSW）的标志位设置为“用户态”&#x3D;&#x3D;</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/twndlTegkLJ6x9X.png\" alt=\"image-20220513205029547\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/EYTzjIOvW7drqfx.png\" alt=\"image-20220513205136837\"></p>\n<p><strong>外中断的处理过程：</strong></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/oRmXYrNvBUkTgfI.png\" alt=\"image-20220513205420243\"></p>\n<h2 id=\"6、系统调用\"><a href=\"#6、系统调用\" class=\"headerlink\" title=\"6、系统调用\"></a>6、系统调用</h2><p><img data-src=\"https://s2.loli.net/2022/05/13/xzmwb1KdrT5MIsp.png\" alt=\"image-20220513213014300\"></p>\n<p>系统调用是操作系统提供给应用程序（程序员&#x2F;编程人员）使用的接口，可以理解为一种可供应用程序调用的特殊函数，应用程序可以发出系统调用请求来获得操作系统的服务。</p>\n<p>系统调用与库函数的区别：</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/tK9mNhM6OdzepCP.png\" alt=\"image-20220513211951839\"></p>\n<p>系统调用背后的过程：</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/obNKP1RrQt9sBuV.png\" alt=\"image-20220513212751507\"></p>\n<p>中断、异常和系统调用：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>产生原因</th>\n<th>实现机制</th>\n<th>区别</th>\n<th>保存地址</th>\n<th>处理</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>中断</strong></td>\n<td>由定时器和I&#x2F;O设备产生（来自硬件设备的处理请求）</td>\n<td>中断机制</td>\n<td>①由与现行指令无关的中断信号触发的(异步的)；②中断的发生与CPU处在用户模式或内核模式无关，系统不能确定中断发生的时间 ；③一般来说，中断处理程序提供的服务不是为当前进程所需的</td>\n<td>保存的是下一条指令的地址，以便在指令结束后检测有没有中断</td>\n<td><strong>硬件和软件结合</strong> 。①定时器：定时器是OS回收控制的重要方式，可设置为在指定周期（固定或可变）后中断计算机。防止用户程序陷入死循环，或不调用系统服务并且不将控制返回给操作系统。在将控制交到用户之前，操作系统确保定时器已设置好以便产生中断；②中断装置（发生中断源并产生中断的<strong>硬件</strong> ）：发现中断源、保护现场、启动中断处理程序（IDTR寄存器中存放了中断描述符表在内存的起始地址）；③中断处理程序： 保护未被硬件保护的一些必需的处理状态 （CPU自动保存的只有EIP&#x2F;EFLAGS&#x2F;ESP&#x2F;SS&#x2F;CS） ；识别各个中断源，分析产生中断的原因；处理中断事件；恢复正常操作；④OS必须保证中断前后的同步性，必须保证现场保护的原子性（保护现场的过程不能被中断）</td>\n</tr>\n<tr>\n<td><strong>异常</strong></td>\n<td>由程序错误产生，或者由内核必须处理的异常条件产生</td>\n<td>中断机制</td>\n<td>① 由处理器正在执行现行指令而引起的； ②异常处理程序提供的服务是为当前进程所用的；③异常包括出错、陷入、终止和编程异常等等；④异常通常由意想不到的行为触发</td>\n<td>出错保存的是当前指令的地址，陷入保存的是下一条指令的地址</td>\n<td>①由硬件检测并处理（如除0）；②硬件自身出错产生的异常：通常会在检测错误之后重新执行该指令，CPU保存运行状态；③有些异常是修复后返回并重新执行出错的指令（如页错误）；有些异常是OS通知相应进程；④异常发生在内核会导致OS崩溃</td>\n</tr>\n<tr>\n<td><strong>系统调用</strong></td>\n<td>程序主动请求操作系统服务</td>\n<td>通常通过一种特殊的异常来实现</td>\n<td>程序主动请求系统服务</td>\n<td>保存的是下一条指令的地址</td>\n<td>提供给用户态程序执行特权操作的接口；触发事件，切换至内核态；传递系统调用的参数； 保存状态以便完成系统调用后恢复执行</td>\n</tr>\n</tbody></table>\n<h2 id=\"7、-x3D-x3D-可能的大题：多道程序运行、简答题-x3D-x3D\"><a href=\"#7、-x3D-x3D-可能的大题：多道程序运行、简答题-x3D-x3D\" class=\"headerlink\" title=\"7、&#x3D;&#x3D;可能的大题：多道程序运行、简答题&#x3D;&#x3D;\"></a>7、&#x3D;&#x3D;可能的大题：多道程序运行、简答题&#x3D;&#x3D;</h2><h3 id=\"甘特图\"><a href=\"#甘特图\" class=\"headerlink\" title=\"甘特图\"></a>甘特图</h3><p>计算作业完成时间，CPU或者I&#x2F;O设备的利用率等等</p>\n<p>资源利用率：CPU利用率 &#x3D; CPU有效工作时间&#x2F;CPU总的运行时间， CPU总的运行时间 &#x3D; CPU有效工作时间+CPU空闲等待时间。</p>\n<p>I&#x2F;O设备的利用率同理。</p>\n<p>&#x3D;&#x3D;注意考虑优先级以及是否能够抢占&#x3D;&#x3D;</p>\n<p><strong>（1）</strong>在单CPU和两台I&#x2F;O(I1,I2)设备的多道程序设计环境下，同时投入三个作业运行。它们的执行轨迹如下：</p>\n<p>Job1：I2(30ms)、CPU(10ms)、I1(30ms)、CPU(10ms)</p>\n<p>Job2：I1(20ms)、CPU(20ms)、I2(40ms)</p>\n<p>Job3：CPU(30ms)、I1(20ms)</p>\n<p>如果CPU、I1和I2都能并行工作，优先级从高到低为Job1、Job2和Job3，优先级高的作业可以抢占优先级低的作业的CPU。试求：(1)每个作业从投入到完成分别所需的时间。(2) 每个作业投入到完成CPU的利用率。(3)I&#x2F;O设备利用率。</p>\n<p><strong>答：</strong>画出三个作业并行工作图如下(图中着色部分为作业等待时间)：</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/14/FxBnaZuVIQ8Nhe7.png\" alt=\"img\"></p>\n<p>(1) Job1从投入到运行完成需80ms，Job2从投入到运行完成需90ms，Job3从投入到运行完成需90ms。</p>\n<p>(2) CPU空闲时间段为：60ms至70ms，80ms至90ms。所以CPU利用率为(90-20)&#x2F;90&#x3D;77.78%。</p>\n<p>(3) 设备I1空闲时间段为：20ms至40ms，故I1的利用率为(90-20)&#x2F;90&#x3D;77.78%。设备I2空闲时间段为：30ms至50ms，故I2的利用率为(90-20)&#x2F;90&#x3D;77.78%。</p>\n<p>2、 若内存中有3道程序A、B、C，它们按A、B、C优先次序运行（不考虑强占）。各程序的计算轨迹为：</p>\n<p>A：计算(20)、I&#x2F;O(30)、计算(10) </p>\n<p>B：计算(40)、I&#x2F;O(20)、计算(10)</p>\n<p>C：计算(10)、I&#x2F;O(30)、计算(20)</p>\n<p>如果三道程序都使用相同设备进行I&#x2F;O(即程序用串行方式使用设备，调度开销忽略不计)。试分别画出单道和多道运行的时间关系图。两种情况下，CPU的平均利用率各为多少?</p>\n<p><strong>答</strong>：分别画出单道和多道运行的时间图</p>\n<p>(1) 单道运行时间关系图</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/05/14/FhG1CTOSvzJu8EM.png\" alt=\"img\"></p>\n<p>单道总运行时间为190ms。CPU利用率为(190-80)&#x2F;190&#x3D;57.9%</p>\n<p>(2) 多道运行时间关系图</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/05/14/vworFI23sGiWeKp.png\" alt=\"img\"></p>\n<p>多道总运行时间为140ms。CPU利用率为(140-30)&#x2F;140&#x3D;78.6%</p>"},{"title":"sql概述与sql定义语言","abbrlink":55700,"date":"2022-06-23T03:21:25.000Z","_content":"\n# 三、 sql概述与sql定义语言\n\n## 1、基本概念\n\n**sql的特点：**\n\n- 综合统一：集数据定义、数据操纵、数据控制语言的功能为一体\n- 高度非过程化\n- 面向集合的操作方式\n- 两种使用方式，统一的语法结构\n- 简洁易学、通用、功能强\n\n<!-- more -->\n\n**sql语言的分类**：数据定义语言DDL、数据操作语言DML、数据查询语言DQL、数据控制语言DCL\n\n**sql数据库的三级结构：**\n\n![image-20220517103508209](https://s2.loli.net/2022/05/17/3IjuTbYwHFQzdAp.png)\n\n子模式对应于视图和部分查询表，模式对应于基本表，内模式对应于存储文件\n\n**sql语句的分类**：模式定义语句、数据操纵语句（增删改查）、事务与控制语句、会话及诊断语句\n\n**sql的数据类型：**\n\n![image-20220517104732266](https://s2.loli.net/2022/05/17/fhJG9wazTZ1ydL5.png)\n\n> 在实验中发现，如果要显示001这种类型的数字，可以设置为*sno int(3) zerofill*\n\n## 2、sql的数据定义\n\n![image-20220517110612939](https://s2.loli.net/2022/05/17/5Qv3qyIM9TeJrXG.png)\n\n> 👉总结：\n>\n> 创建：create  对象类型 对象名\n>\n> 删除：drop 对象类型 对象名   [RESTRICT | CASCADE]\n>\n> RESTRICT：如果有其它对象依赖于该对象，则拒绝进行DROP操作\n>\n> CASCADE：级联删除该对象及所有依赖于该对象的对象\n\n### 模式\n\n- 模式的定义：\n\n    ```sql\n    CREATE SCHEMA <模式名> AUTHORIZATION <用户名>  #若不指定<模式名>，则隐含为<用户名>\n    \n    #eg\n    CREATE SCHEMA library_db AUTHORIZATION Guoqing;\n    ```\n\n- 模式的删除\n\n    ```sql\n    DROP SCHEMA <模式名> [RESTRICT | CASCADE];\n    #RESTRICT – 如果模式内没有对象，则删除该模式\n    #CASCADE – 删除模式中所有对象的内容和定义\n    \n    #eg.\n    DROP SCHEMA library RESTRICT;\n    ```\n\n### 域\n\n- 定义域：\n\n    ```sql\n    CREATE DOMAIN <域名> [AS] <数据类型> [DEFAULT <默认值>] [<域约束>] \n    \n    #eg\n    CREATE DOMAIN SexType AS CHAR(2) DEFAULT ‘M’ CHECK (VALUE IN (‘M’, ‘F’));\n    sex SexType NOT NULL;  #使用域\n    ```\n\n- 删除域：\n\n    ```sql\n    DROP DOMAIN <域名> [RESTRICT | CASCADE];\n    #如果指定RESTRICT，且域用于现有的表中，则删除失败\n    #如果指定CASCADE，基于域的任一表中的列都会自动地改变为基本域类型，该域的CHECK约束或默认值都会被列的约束或默认值代替\n    \n    #eg\n    DROP DOMAIN SexType；\n    ```\n\n### 表\n\n- 表的建立\n\n    ```sql\n    CREATE TABLE [模式名.] <表名> \n    (   \n        <列名><数据类型>[NOT NULL│NULL][UNIQUE]\n        [, <列名><数据类型>[NOT NULL│NULL][UNIQUE]]…\n        [, PRIMARY KEY （<列名>[，<列名>] …）]    #主键,主键属性列用括号括起来\n        [, FOREIGN KEY （<列名>[，<列名>] …）REFERENCES  <被参照表名>]#外键\n    );\n    \n    #eg\n    CREATE TABLE PropertyForRent \n    (\n        propertyNo PNumber NOT NULL,      #数据类型为用户定义的域\n        rooms PRooms NOT NULL DEFAULT 4, \n        rent PRent NOT NULL DEFAULT 600, \n        ownerNo OwnerNumber NOT NULL, \n        staffNo StaffNumber Constraint StaffNotHandlingTooMuch ….\n        branchNo BranchNumber NOT NULL,\n        PRIMARY KEY (propertyNo),   #主键属性和外键属性要用括号括起来\n        FOREIGN KEY (staffNo) REFERENCES Staff \n        ON DELETE SET NULL ON UPDATE CASCADE …. #可采取的行为\n    );\n    ```\n\n- 表的删除\n\n    ```sql\n    DROP TABLE <表名> [CASCADE | RESTRICT]\n    #既删除DD中表的结构定义，也删除DB中的数据文件\n    #RESTRICT：如果有其它对象依赖于该表，则拒绝进行DROP操作\n    #CASCADE：级联删除表及所有依赖于该表的对象\n    \n    #eg\n    DROP TABLE PropertyForRent;\n    ```\n\n- ==修改表==\n\n    ```sql\n    ALETR TABLE <表名>\n    [ADD <新列名> <数据类型> {NULL}]     #加新列，新增加的列默认为空值\n    [ADD <完整性约束条件>]\n    [DROP <完整性约束条件>]   #删除列的完整性约束条件，没有提供删除列的子句\n    [MODIFY <列名> <数据类型>]   #修改列，可能破坏已有数据\n    \n    #eg 增加学生姓名必须取唯一值的约束\n    ALTER TABLE student\n    ADD CONSTRAINT c1_name UNIQUE (SN)  #c1_name是约束的名字\n    \n    #eg 删除学生姓名必须取唯一值的约束\n    ALTER TABLE S \n    DROP UNIQUE（SN）;  \n    #或者 DROP CONSTRAINT c1_name\n    ```\n\n### 索引\n\n- 建立索引\n\n    一条语句建立一个索引\n\n    ```sql\n    #UNIQUE表示每个索引值只能对应唯一的数据记录，CLUSTER表示聚簇索引，即索引项的顺序与表中记录的物理顺序一致的有序索引，一个基本表最多只能建立一个聚簇索引\n    CREATE [UNIQUE] [CLUSTER] INDEX <索引名>  \n    ON <表名> (<列名1>[ASC|DESC], <列名2>[ASC|DESC], ...);\n    #ASC表示升序，DESC表示降序。默认为升序。\n    \n    #eg:在SC中按sno升序cno降序建唯一索引\n    CREATE UNIQUE INDEX SC_index ON SC( sno ASC，cno DESC);\n    ```\n\n- 删除索引\n\n    ```sql\n    DROP INDEX [ON <表名>]<索引名>\n    \n    #eg\n    DROP INDEX SC_index;\n    ```\n\n## ==3、⚠⚠⚠sql数据查询==\n\n### 一般格式\n\n```sql\nSELECT [ALL|DISTINCT] <目标列表达式>[,<目标列表达式>]...      #ALL为默认设置，即不取消重复值，DISTINCT表示取消重复值\nFROM <表名或视图名>[,表名或视图名]...     #SELECT子句与FROM子句是必选子句\n[WHERE <条件表达式>]\n[GROUP BY <列名1>[HAVING<条件表达式>]]\n[ORDER BY <列名2>[ASC|DESC]];     #其中，列名2也可以用SELECT子句中相应列的序号\n```\n\n**含义：**\n\n![image-20220517114258444](https://s2.loli.net/2022/05/17/GUvQItYzXHpeOmW.png)\n\n**概念性的执行步骤：**\n\n- 计算出现在FROM后面的表之间的笛卡儿积\n- 实施由WHERE后面的条件规定的选择操作\n- 根据GROUP BY后面的属性的值进行分组\n- 对于分组出来的每一个小组，实施由HAVING后面的条件规定的选择操作，保留满足条件的小组\n- 将出现在SELECT后面的属性投影成结果表\n- 将结果表中的元组根据ORDER BY后面的属性及指定的顺序（升序或降序）输出\n\n### SELECT子句：\n\n*SELECT [ALL|DISTINCT] <目标列表达式>[,<目标列表达式>]...*\n\n- *代表指定表的所有列，一般用在exists和not exists里面\n\n- ALL为默认设置 ，即不取消重复值，DISTINCT表示取消重复值\n\n- ==聚集函数（只能用于SELECT子句和HAVING子句中 ）==\n\n    ![image-20220305102158697](https://s2.loli.net/2022/03/05/YGrdqMfam4Qhb8P.png)\n\n    ![image-20220307231705848](https://s2.loli.net/2022/03/07/xj6qmHkOhKrcvag.png)\n\n    > 当这些函数遇到空值时，除COUNT(*)外，都跳过空值而只处理非空值。\n\n    例子：\n\n    <img src=\"https://s2.loli.net/2022/05/17/5Yvk4aWe1JPLMOw.png\" alt=\"image-20220517115836637\" style=\"zoom: 67%;\" />\n\n- ==算术表达式：==  \n\n    +、-、*、/、%、INTEGER（取整）、SQRT（求平方根）、三角函数（SIN、COS）、字符串函数SUBSTRING（取子串）、UPPER（大写字符）、MONTHS_BETWEEN（月份差）\n\n    ---\n\n- 用AS子句为列命名 \n\n    ```sql\n    SELECT staffNo, fName, lName, salary/12 AS monthlySalary FROM Staff;\n    ```\n\n### FROM子句：\n\n可以给表指定别名：多个表放在FROM子句中，代表多表进行笛卡尔积\n\n![image-20220517120134854](https://s2.loli.net/2022/05/17/4bpXBmUsKrI3CdH.png)\n\n### WHERE子句：\n\nWHERE子句的查询条件可以用多种形式表示： \n\n<img src=\"https://s2.loli.net/2022/05/18/X4nGHxUtsuZCcio.png\" style=\"zoom:67%;\" />\n\n- 比较运算作为查找条件 (>,  <,  >=,  <=,  =,  <>(不等于))\n\n    ```sql\n    WHERE salary > 10000\n    ```\n\n- 复合比较运算作为查找条件 (AND, OR, NOT ) \n\n    ```sql\n    WHERE city = ‘London’ OR city = ‘Glasgow’\n    ```\n\n- 范围作为查找条件（BETWEEN / NOT BETWEEN）。==BETWEEN包含端点==\n\n    ```sql\n    WHERE grade BETWEEN 85 AND 95\n    ```\n\n- 集合成员测试作为查找条件（IN / NOT IN）\n\n    ```sql\n    WHERE place IN('湖南','湖北')\n    ```\n\n- 模式匹配作为查找条件（LIKE / NOT LIKE）\n\n    SQL中的两种特殊的模式匹配符号：\n\n    - %: 百分号表示零或多个字符序列（通配符）\n\n    - _: 下划线表示任意单个字符\n\n        <img src=\"https://s2.loli.net/2022/03/07/Z52TOHjLlb6tivJ.png\" alt=\"image-20220307230435181\" style=\"zoom:67%;\" />\n\n    ```sql\n    WHERE sname LIKE '刘%' OR SNAME LIKE '__晓%'   #一个汉字占两个字符位\n    ```\n\n- 空查找条件（IS NULL  /  IS NOT NULL）\n\n    ```sql\n    WHERE propertyNo = ‘PG4’ AND comment IS NULL\n    ```\n\n### GROUP BY子句 ：\n\n将查询结果按指定列名的取值分组，并选取满足HAVING中的内部函数表达式所指定条件的组。目的：细化聚集函数的作用对象。 ==HAVING子句是包含在GROUP BY子句中的== \n\n> WHERE子句是在表中选择满足条件的元组，而HAVING子句是在各组中选择满足条件的小组\n\n> ISO标准规定，应用GROUP BY时，两个空值被认为是相等的\n\n> ==当使用GROUP BY时， SELECT列表中的项必须每组都有单一值(因为最终一个组会变成一个元组)== \n\n> 当使用GROUP BY时， SELECT子句中除集合函数外，其它所有列必须在GROUP BY子句中出现；反之，GROUP BY子句出现的列不一定出现在SELECT列表中；\n>\n> HAVING子句使用的列名必须出现在GROUP BY 子句列表中，或者包括在集合函数中。实践中，HAVING子句的条件表达式至少包括一个集合函数\n\n### ORDER BY子句\n\norder by子句必须放最后用于对最终的查询结果进行排序，<u>不能用在子查询中</u>\n\n该子句后可以跟多个排序的变量名，第一个变量为主序，下面依次类推。==ASC（升序）为默认设置== 。它也可以用SELECT子句中相应列的序号。\n\n<img src=\"https://s2.loli.net/2022/05/17/5Yvk4aWe1JPLMOw.png\" alt=\"image-20220517115836637\" style=\"zoom: 67%;\" />\n\n<img src=\"https://s2.loli.net/2022/05/17/GeHg8L1yBXIUpJt.png\" alt=\"image-20220517120939452\" style=\"zoom: 80%;\" />\n\n### 简单查询\n\n单表查询\n\n- 查询指定的列：通过在SELECT子句的<目标列表达式>中指定要查询的列来实现。可以使用*、聚集函数、算术表达式等\n- 查询表中行：通过WHERE子句的查询条件来实现\n\n### 复杂查询\n\n#### 连接查询：\n\n```sql\nSELECT student.sno, sname, cno, grade FROM student, s_c WHERE student.sno = s_c.sno;\n```\n\n==注意在多表查询中，当两个列名相同时，需采用表名.列名以示区别==\n\n#### 嵌套查询（子查询）：\n\n子查询可以被使用在外部SELECT语句的WHERE子句、HAVING子句甚至SELECT子句中\n\n==子查询应遵循如下规则：== \n\n- ORDER BY子句不能用于子查询（因为ORDER BY子句是对最终显示的结果进行排序）\n\n- 子查询总是**括在圆括号** 中，作为表达式的一部分出现在条件比较运算符的右边，并且可以有选择的跟在IN，SOME（ANY），ALL和EXIST等谓词后面。\n\n- 子查询select列表必须由**单个列名或表达式** （如集合函数）组成，除非子查询使用了关键字EXISTS（多列多行时使用）\n\n- 默认情况下，子查询中列名取自子查询的FROM子句中给定的表，也可以通过限定列名的办法指定取自外查询的FROM子句中的表（不相关子查询和相关子查询）\n\n- 带有比较运算符的子查询（==此时子查询返回单个值==，可以使用集合函数 ）\n\n    ```sql\n    #列出个人工资高于平均工资的所有职员，并求出多于平均数的值。\n    SELECT staffNo, fName, lName, position, salary–(SELECT AVG(salary) FROM Staff) AS SalDiff\n    FROM Staff\n    WHERE salary > (SELECT AVG(salary) FROM Staff);\n    ```\n\n- 带有IN谓词的子查询（子查询返回单个值或单个列多个行）\n\n    ```sql\n    #查询选修了课程“C2”的学生的学号和姓名\n    SELECT sno, sname FROM S WHERE sno IN ( SELECT sno FROM SC WHERE cno = ‘C2’ );\n    ```\n\n- 多层嵌套：子查询中又嵌套子查询\n\n- ==不相关子查询和相关子查询== \n\n    - 不相关子查询：内层的子查询完全独立于外层的SELECT语句。==m + n== （只执行了一次子查询，在检查外层的元组时，无需再执行子查询）\n\n        > 执行过程：1）执行子查询，其结果不被显示，而是传递给外部查询，作为外部查询的条件使用。2）执行外部查询，并显示整个结果。\n\n    - 相关子查询：子查询的判断条件涉及外层父查询的属性。要用到存在谓词EXISTS和NOT EXISTS，或者ALL、SOME等。==m * n== （每检查一个元组，都要执行一次子查询）\n\n        > 执行过程：1）从外层查询中取出一个元组，将元组相关列（被内层子查询引用）的值传给内层查询。2）执行内层查询，得到子查询操作的值。3）外查询根据子查询返回的结果或结果集得到满足条件的行。4）然后外层查询取出下一个元组重复做步骤1-3，直到外层的元组全部处理完毕。\n\n        ```sql\n        #找出每个学生超过他自己已选修课程平均成绩的课程号\n        SELECT sno, cno FROM SC x WHERE G>= (SELECT AVG(G) FROM SC y WHERE x.sno = y.sno);\n        ```\n\n- 量化比较谓词\n\n    - 作用：产生单个列的子查询\n\n    - 通用形式：`expr Θ { SOME | ANY | ALL } (Subquery)其中Θ∈{<,<=,=,<>,>,>=} `。expr为表达式。该形式中的SOME与ANY含义相同，但用SOME而不用ANY。SOME某些，ALL全部。\n\n        ```sql\n        #查询其它系中比信息系某一学生年龄小的学生姓名和年龄\n        SELECT SN, SA FROM S WHERE SA < SOME (SELECT SA FROM S WHERE SD =‘IS’) AND SD <>‘IS’;\n        ```\n\n    > expr Θ （子查询）  子查询返回单个值\n    >\n    > expr IN （子查询）\n    >\n    > expr Θ { SOME | ANY | ALL } (子查询)，>= ALL可以用于求最大值\n\n- ==EXISTS谓词== \n\n    - 通用形式：[NOT] EXISTS （Subquery）\n\n    - 作用：测试被子查询检索到的行集(子查询可以返回多行多列)**是否为空** 。谓词 EXISTS （Subquery）为真当且仅当子查询返回一个非空的集合。NOT_EXISTS则相反\n\n    - NOT EXISTS谓词可以实现**关系代数的差运算**\n\n        ```sql\n        #查询没有选修‘C1’号课程的学生的姓名。\n        SELECT sname FROM S WHERE NOT EXISTS (SELECT * FROM SC WHERE sno = S.sno AND cno = ‘C1’);\n        ```\n\n    - 所有带IN谓词、比较运算符、SOME和ALL谓词的子查询都可以用带EXISTS谓词的子查询等价替换，反过来就不一定\n\n    - 可以采用双嵌套NOT_EXISTS来实现**带全称量词的查询**。<img src=\"https://s2.loli.net/2022/03/15/Km17HNji9vZAeGV.png\" alt=\"image-20220315110415416\" style=\"zoom:50%;\" />\n\n        ```sql\n        #查询选修了全部课程的学生姓名\n        #转化为查询这样的学生x，没有一门课程y 是x不选修的\n        SELECT SN\n        FROM S     #查询学生x\n        WHERE NOT EXISTS  #不存在课程y\n            （SELECT ﹡\n            FROM C\n            WHERE NOT EXISTS  #x不选修课程y\n                （SELECT ﹡\n                FROM SC\n                WHERE S# = S.S#\n                AND C# = C.C#））\n        ```\n\n    - 可以采用NOT EXISTS谓词实现**关系代数的除运算**\n\n        ```sql\n        #查询至少选修了学生‘95002’选修的全部课程的学生号码\n        #转换为查询学号为x的学生，不存在这样的课程y，学生95002选修了y，而学生x没有选\n        SELECT S#\n        FROM S          #查询学生x\n        WHERE NOT EXISTS\n            （SELECT ﹡\n            FROM C       #不存在课程y\n            WHERE EXISTS   #95002选修了课程y\n                (SELECT ﹡\n                FROM SC SCX\n                WHERE SCX.C# = C.C# AND SCX.S#=‘95002’）\n            AND NOT EXISTS   #x没有选修y\n                (SELECT *\n                FROM SC SCY\n                WHERE SCY.C# = C.C# AND SCY.S#=S.S#)\n            );\n            \n        SELECT DISTINCT S#    #因为是从SC里选的学号，故需要DISTINCT\n        FROM SC SCX         #查询学生x\n        WHERE NOT EXISTS\n            （SELECT ﹡\n            FROM SC SCY    #不存在课程y\n            WHERE SCY.S# = ‘95002’  #95002选修了课程y\n            AND NOT EXISTS    #x没有选修y\n                （SELECT ﹡  \n                FROM SC SCZ\n                WHERE SCZ.S# = SCX.S#\n                AND SCZ.C# = SCY.C#））；\n        ```\n\n![image-20220314232322210](https://s2.loli.net/2022/03/14/2srATEC8QOWUzM4.png)\n\n## 4、数据更新\n\n### 插入数据：INSERT （元组级）\n\n==插入数据时，表定义中说明了NOT NULL的列不能取空值== \n\n- 用**子句**向表中插入数据：将新元组插入表中\n\n    ```sql\n    INSERT \n    INTO <表名> [(<列名1>[, <列名2>]...)] \n    VALUES(<常量1>[, <常量2>]...)  \n     #未指定任何列名时，新插入的属性必须在每个属性列上均有值，仅指定部分列名时，新元组的其他列为空值\n     \n    #eg 插入一条选课记录（‘95020’，‘C1’）\n    INSERT INTO SC（S#, C#）VALUES （‘95020’, ‘C1’）; \n    ```\n\n- 用**子查询**向表中插入数据\n\n    ```sql\n    INSERT \n    INTO <表名> [(<列名1>[, <列名2>]...)] \n    SELECT语句;  #SELECT语句的返回列要和INFO里的对应\n    \n    #eg  对每个系，求学生的平均年龄，并把结果存入数据库\n    INSERT INTO Deptage (SD, Avgage) SELECT SD, AVG(SA) FROM S GROUP BY SD;\n    ```\n\n### 修改数据：UPDATE\n\n一条UPDATE语句在某一时刻只能更新**一张表**，但可以更新一张表中的**多列**，也可以更新**多行**数据。\n\n- 用**子句**修改表中数据\n\n    修改表中满足WHERE条件的元组：\n\n    ```sql\n    UPDATE <表名>\n    SET <列名> = <表达式>[, <列名> = <表达式>] #用表达式的值取代相应的属性列值\n    [WHERE <条件表达式>]\t\t\t\t#省略WHERE语句则修改全部元组\n    \n    #eg 将学生95001的年龄改为22岁\n    UPDATE S SET SA = 22 WHERE S# = ‘95001’;\n    \n    #eg 将所有学生的年龄增加1岁\n    UPDATE S SET SA = SA + 1；\n    ```\n\n- 用**子查询**修改表中数据：子查询可以嵌套在WHERE语句的条件表达式中，用于构造修改的条件。相关子查询\n\n    ```sql\n    #将计算机科学系全体学生的成绩置零\n    #相关子查询，每次拿出SC中的一个元组，得到它的系，如果为CS则将成绩置0\n    UPDATE SC SET G = 0 WHERE ‘CS’ = ( SELECT SD FROM S WHERE S.S# = SC.S#);\n    ```\n\n### 删除数据：DELETE （元组级）\n\nDELETE用于**从指定表中删除满足条件的元组**，但不能用来从特定的列中删除数据。一条DELETE语句可以从表中删除一个或多个元组。\n\n- 用**子句**删除表中数据\n\n    删除表中满足WHERE条件的元组：\n\n    ```sql\n    DELETE \n    FROM <表名>\n    [WHERE <条件表达式>]  \n    \n    #eg 删除学号为95001的学生记录\n    DELETE FROM S WHERE S# = ‘95001’;\n    ```\n\n    > 省略WHERE语句则删除全部元组，但**只删除了表中的数据**，而不是表的定义，表的定义仍在DD中。**删除表应当用DROP**\n\n- **子查询**可以嵌套在WHERE语句的条件表达式中。相关子查询\n\n    ```sql\n    #删除计算机科学系全体学生的选课记录\n    #相关子查询\n    DELETE FROM SC WHERE ‘CS’ = ( SELECT SD FROM S WHERE S.S# = SC.S#);\n    ```\n\n\n## 5、视图\n\n- **概念：**\n    - 视图是==动态结果==：对一个或多个基本关系进行关系操作得到的动态结果，是从一个或几个基本表（或视图）导出的表。而且对基本表的操作将在视图可见的范围内映射到视图上。==视图对应的内容是实时的、最新的内容== \n    - 视图是==虚关系==：它不包含真正存储的数据，其内容不占用存储空间。\n    - **视图的内容被定义成基于一个或多个基本关系的查询**\n    - 视图是在==外模式==这一层，为用户所用\n- **操作：**视图可以和基本表一样被查询、被删除。也可以在一个视图之上再定义新的视图，但==对视图的更新（增、删、改）操作则有一定的限制==。==对视图的一切操作最终也要转换为对基本表的操作。==\n\n### 视图的创建及种类\n\n- 视图可以从一张表、几张表或其他视图中创建。 \n\n    ```sql\n    CREATE VIEW <视图名> [(<列名1>[,<列名2>]...)]\n    AS \n    SELECT 语句\n    [WITH CHECK OPTION]  \n    ```\n\n    > **几点说明：**\n    >\n    > - ==创建视图只是将视图的定义存入DD（数据字典），并不会真的执行SELECT语句，当对视图查询时，才根据视图的定义从基本表中将数据查出。==\n    >\n    > - **省略视图名后的列名表时**，默认该视图由子查询中SELECT子句目标列中的诸属性列组成\n    > - 若使用==WITH CHECK OPTION==，则对视图进行UPDATE和INSERT操作时，保证更新行满足视图定义中的WHERE子句指定的条件，否则将被DBMS拒绝\n    > - 当目标列不是单一的属性列(如集合函数)、存在同名列以及需启用更合适的名字时，需要指定组成视图的所有列名\n    > - 可以在视图中增加虚拟列（派生列），即基本表中并不存在的列，如avg(grade)\n\n- **视图的种类**\n\n    - 水平视图：从单个基本表导出，并且只是**去掉了**基本表的**某些行**\n\n        ```sql\n        #创建一个视图，让分支机构B003的经理只看到他所在分支机构的职员的信息\n        CREATE VIEW Manager3Staff\n        AS SELECT *\n        FROM Staff\n        WHERE branchNo = ‘B003’;\n        ```\n\n    - 垂直视图：从单个基本表导出，并且只是**去掉了**基本表的**某些列** \n\n        ```sql\n        #建立关于分支机构B003职员信息但不包括工资信息的视图\n        CREATE VIEW Staff3\n        AS SELECT staffNo, fName, lName, position, sex\n        FROM Manager3Staff;\t\t#视图可以从其他视图中创建\n        ```\n\n    - 分组视图：用**GROUP BY 子句**定义的视图\n\n    - 连接视图：用**连接运算**得到的视图\n\n        ![image-20220322094759185](https://s2.loli.net/2022/03/22/CA4TkBawSpnsgIi.png)\n\n### 删除视图\n\n- ```sql\n    DROP VIEW <视图名>{CASCADE|RESTRICT} \n    ```\n\n- 视图是虚表，**删除的是DD中的视图的定义**，**对产生视图数据的基本表中的数据没有影响**\n\n- 默认RESTRICT ，如果存在依赖被删除视图的其他对象，则不允许删除\n\n    如果指定CASCADE**，**删除视图可能产生级联删除\n\n### 查询视图\n\n- **步骤**\n\n```mermaid\ngraph LR\n    a[有效性检查]-->|有效|b[从DD中取出视图定义]\n    b[从DD中取出视图定义]-->|视图消解|c[对基本表的查询]\n    c[对基本表的查询]-->d[执行查询]\n```\n\n- ==视图消解==：将对视图的查询**转换为对基本表的查询**。执行对视图的查询时，从数据字典中取出视图的定义，将定义中的子查询和用户的查询结合起来，转换成等价的对基本表的查询的过程\n\n    > 简单转换的过程：\n    >\n    > - 将SELECT列表中给出的列名转换为视图定义中对应的列名\n    >\n    > - FROM子句的视图名可以视图定义中的FROM列表代替\n    >\n    > - 用AND将WHERE子句和视图定义中的WHERE子句合并\n    >\n    > - 从视图定义中复制GROUP BY和HAVING子句\n    >\n    > - 将 ORDER BY列名转换为视图定义中对应的列名\n    >\n    >     例子：\n    >\n    >     <img src=\"https://s2.loli.net/2022/03/22/jVlQaEdt8FD5HcW.png\" alt=\"image-20220322221341006\" style=\"zoom:67%;\" />\n    >\n    >     <img src=\"https://s2.loli.net/2022/03/22/I5TvHtQE4RCPSlk.png\" alt=\"image-20220322221538427\" style=\"zoom: 67%;\" />\n    >\n    >     <img src=\"https://s2.loli.net/2022/03/22/HOEKyJ3X26nhGs9.png\" alt=\"image-20220322221558073\" style=\"zoom:67%;\" />\n\n> 复杂转换：涉及集合函数，考虑HAVING子句等等\n>\n> <img src=\"https://s2.loli.net/2022/03/22/7WcqENUudBsYIMg.png\" alt=\"image-20220322222248720\" style=\"zoom:67%;\" />\n\n- **查询视图的约束：**\n\n    - 如果视图中某个列是基于集合函数的，那么，该列只能出现在访问视图的SELECT和ORDER BY子句中，特别是，该列不能出现在WHERE子句中，并且不能作为集合函数的参数\n\n        ```sql\n        SELECT * FROM StaffPropCnt WHERE cnt > 2; //错误\n        SELECT COUNT (cnt) FROM StaffPropCnt;  //错误\n        ```\n\n    - 分组视图不能与基本表或视图进行连接操作\n\n### 更新视图\n\n- 👉**对视图的更新最终要转换为对表的更新**，但有些更新不能有意义地转换成对基本表S的更新，如修改一个集合函数得到的列，因此==对视图的更新操作有一定的限制==\n- 在视图定义时加上WITH CHECK OPTION子句可以使得对视图进行更新操作时需满足视图定义中子查询的条件\n- ==视图可更新的充要条件==\n    - 没有指定DISTINCT,即重复元组未从查询结果中消除；\n    - 定义查询的SELECT列表中的每个元素均为列名（而不是常量，表达式或聚合函数），且列名不能出现多于一次；\n    - FROM子句只能指定一个表，即视图必须有一个源表且用户有请求该表的权限。如果源表本身就是一个视图，那么视图必须满足这些条件。因此，排除了基于连接、并（UNION）、交（INTERSECT）或差（EXCEPT）操作的所有视图；\n    - WHERE子句不能包括任何引用了FROM子句中的表的嵌套SELECT操作，即不能出现相关子查询\n    - 定义查询不能有GROUP BY或HAVING子句。\n    - 添加到视图中的每一行都不能违反基本表的完整性约束\n- 分类\n    - 可更新视图：满足上面的六个条件，即对视图的更新能唯一的有意义的转换为对基本表的更新\n    - （理论上）不可更新的视图\n    - 不允许更新的视图`(*>﹏<*)′\n\n### 视图的优缺点\n\n- **优点：**①提高逻辑独立性、②实时性、③提高安全性、④简化结构及复杂操作、⑤多角度地、更灵活地共享、⑥数据完整性\n\n- **缺点：**①更新的局限性、②结构的局限性、③性能开销（查询时需要转化）\n\n    > **视图维护：**更新基本表引起视图更新的过程称为视图维护\n    >\n    > **视图物化：**把第一次访问视图的结果存储为数据库的临时表；这样，基于物化视图的查询比每次重新计算视图要快的多。但会带来视图维护的代价\n\n## ==6、sql的完整性约束==\n\n### **基本概念：**\n\n- **完整性：**指数据库中数据的正确性、有效性和相容性（表示同一对象的两个或多个数据必须一致）\n- **完整性约束**：数据库中数据应满足的条件\n\n### 非过程性完整性约束\n\n- **数据取值要求：**非空约束（NOT NULL）、唯一性约束（UNIQUE）、CHECK约束（CHECK(searchcondition)）\n\n    > CHECK子句只对定义它的关系起约束作用，对其他关系没有任何作用\n\n    ```sql\n    sex CHAR NOT NULL CHECK (sex IN (‘M’, ‘F’))\n    ```\n\n    ```sql\n    #eg 增加学生姓名必须取唯一值的约束\n    ALTER TABLE student\n    ADD CONSTRAINT c1_name UNIQUE (SN)  #c1_name是约束的名字\n    \n    #eg 删除学生姓名必须取唯一值的约束\n    ALTER TABLE S \n    DROP UNIQUE（SN）;  \n    #或者 DROP CONSTRAINT c1_name\n    ```\n\n- **域约束：**通过自定义域来实现\n\n    ```sql\n    CREATE DOMAIN DomainName [AS] dataType\n    [DEFAULT defaultOption]\n    [CHECK (searchCondition)]  #searchCondition 可以用SELECT语句表达\n    \n    #eg\n    CREATE DOMAIN SexType AS CHAR(2)\n    DEFAULT ‘M’\n    CHECK (VALUE IN (‘M’, ‘F’));\n    \n    #使用域来定义列\n    sex SexType NOT NULL;\n    ```\n\n- **实体完整性：**主键属性不空。DBMS自动支持实体完整性（拒绝破坏实体完整性的操作（不合法的插入和更新））\n\n    ```sql\n    PRIMARY KEY(<列名表>)  #主键定义   \n    UNIQUE(<列名表>)   #候选键定义\n    ```\n\n- **参照完整性**：DBMS自动支持参照完整性（拒绝破坏参照完整性的操作，如不合法的对子表（参照表）的插入和更新操作，不合法的对父表（被参照表）的删除和更新操作）。注意SQL语句的顺序。\n\n    ```sql\n    FOREIGN KEY （<列名>[，<列名>] …）REFERENCES <被参照表名> \n    [ON DELETE [CASCADE | SET DEFAULT | SET NULL | NO ACTION] ]\n    [ON UPDATE [CASCADE | SET DEFAULT | SET NULL |NO ACTION] ]\n    ```\n\n    > 参照完整性被破坏时可选择的策略：\n    >\n    > <img src=\"https://s2.loli.net/2022/03/22/N9xBsZtjn5iSdO4.png\" alt=\"image-20220322230658737\" style=\"zoom: 80%;\" />\n\n- **一般约束（企业约束）**\n\n    在创建和修改表时使用CHECK/UNIQUE，还可以==CREATE ASSERTION（设置断言）==\n\n    当完整性约束涉及多个关系或者与聚合操作有关，则可以采用SQL的断言机制来完成\n\n    ```sql\n    CREATE ASSERTION AssertionName\n    CHECK (searchCondition)\n    \n    #限制staff不能管理太多的房产\n    CREATE ASSERTION StaffNotHandlingTooMuch\n    CHECK (NOT EXISTS \n               (SELECT *\n                FROM PropertyForRent\n                GROUP BY staffNo\n                HAVING COUNT(*) > 100));\n    ```\n\n<img src=\"https://s2.loli.net/2022/03/22/Ihst97CnifNJAq1.png\" alt=\"image-20220322231603163\" style=\"zoom: 67%;\" />\n\n\n\n### 过程性完整性约束：触发器\n\n- 概念：一类靠事件驱动的特殊过程，一旦由某个用户定义，任何触发该触发器的事件发生时，均由**服务器**自动激活相应的触发器。\n\n- 三要素：触发事件（包括Insert、delete、update等）、触发条件、触发动作\n\n- 作用：示警（给出提示信息）；满足特定条件时自动执行某项任务以消除负面影响\n\n- 定义(Full SQL-99的Create Trigger语法)\n\n    ```sql\n    CREATE TRIGGER trigger_name \n    {BEFORE | AFTER} {INSERT | DELETE | UPDATE [OF columnname{,columnname…}]} ON tablename #触发事件[REFERENCING corr_name_def {, corr_name_def…}]  #旧值或新值名表\n    [FOR EACH ROW | FOR EACH STATEMENT]  \n    [WHEN (search_condition)]   #触发条件\n    {\t\n    \tstatement |          #触发动作，为单个或一系列SQL语句\n    \tBEGIN ATOMIC statement; \n    \t{statement; …} \n    \tEND\n    } ;\n    \n    #eg 设计一个用于s_c的触发器，该触发器规定，如果需要修改成绩，则需要保证修改之后的成绩不得低于之前的成绩，否则拒绝修改\n    CREATE TRIGGER trig_grade\n    AFTER UPDATE OF grade ON s_c\n    REFERENCING OLD AS oldg, NEW AS newg\n    FOR EACH ROW\n    WHEN (oldg.grade > newg.grade)\n    \tUPDATE s_c\n    \tSET GRADE = oldg.grade\n    \tWHERE cno = oldg.cno AND sno = oldg.sno;  #根据主键找到该元组\n    ```\n\n    > 几点说明：\n    >\n    > - 触发器名是一个标识符，在其所属的模式里是唯一的\n    >\n    > - ON<表名>子句里的表必须和触发器位于同一个模式中\n    >\n    > - 定义行的相关名字的corr_name_def 如下:\n    >\n    >     {OLD [ROW] [AS] old_row_corr_name\n    >\n    >     | NEW [ROW] [AS] new_row_corr_name\n    >\n    >     | OLD TABLE [AS] old_table_corr_name\n    >\n    >     | NEW TABLE [AS] new_table_corr_name}\n    >\n    > - 如果在触发器定义中省略WHEN子句，即省略触发条件，则触发动作在触发器被激活后立即发生\n    >\n    > - 触发动作可以是单个或一系列SQL语句，若为一系列，需要使用BEGIN ATOMIC...END子句，语句之间用分号隔开\n    >\n    > - 注意触发器级联问题，防止一个触发动作引发一系列连锁反应（一个触发器的动作引发另一个触发器的动作）以致失控\n\n### 两种完整性约束的对比\n\n- 非过程性完整性约束：种类和能力有限但易于理解；直接为系统所知；难以给出约束不满足时的相应动作\n\n- 过程性完整性约束：给出了约束不满足时的相应动作；保证事物的一致性\n","source":"_posts/sql概述与sql定义语言.md","raw":"---\ntitle: sql概述与sql定义语言\ntags: \n- 数据库\ncategory: \n- 数据库\nabbrlink: 55700\ndate: 2022-06-23 11:21:25\n---\n\n# 三、 sql概述与sql定义语言\n\n## 1、基本概念\n\n**sql的特点：**\n\n- 综合统一：集数据定义、数据操纵、数据控制语言的功能为一体\n- 高度非过程化\n- 面向集合的操作方式\n- 两种使用方式，统一的语法结构\n- 简洁易学、通用、功能强\n\n<!-- more -->\n\n**sql语言的分类**：数据定义语言DDL、数据操作语言DML、数据查询语言DQL、数据控制语言DCL\n\n**sql数据库的三级结构：**\n\n![image-20220517103508209](https://s2.loli.net/2022/05/17/3IjuTbYwHFQzdAp.png)\n\n子模式对应于视图和部分查询表，模式对应于基本表，内模式对应于存储文件\n\n**sql语句的分类**：模式定义语句、数据操纵语句（增删改查）、事务与控制语句、会话及诊断语句\n\n**sql的数据类型：**\n\n![image-20220517104732266](https://s2.loli.net/2022/05/17/fhJG9wazTZ1ydL5.png)\n\n> 在实验中发现，如果要显示001这种类型的数字，可以设置为*sno int(3) zerofill*\n\n## 2、sql的数据定义\n\n![image-20220517110612939](https://s2.loli.net/2022/05/17/5Qv3qyIM9TeJrXG.png)\n\n> 👉总结：\n>\n> 创建：create  对象类型 对象名\n>\n> 删除：drop 对象类型 对象名   [RESTRICT | CASCADE]\n>\n> RESTRICT：如果有其它对象依赖于该对象，则拒绝进行DROP操作\n>\n> CASCADE：级联删除该对象及所有依赖于该对象的对象\n\n### 模式\n\n- 模式的定义：\n\n    ```sql\n    CREATE SCHEMA <模式名> AUTHORIZATION <用户名>  #若不指定<模式名>，则隐含为<用户名>\n    \n    #eg\n    CREATE SCHEMA library_db AUTHORIZATION Guoqing;\n    ```\n\n- 模式的删除\n\n    ```sql\n    DROP SCHEMA <模式名> [RESTRICT | CASCADE];\n    #RESTRICT – 如果模式内没有对象，则删除该模式\n    #CASCADE – 删除模式中所有对象的内容和定义\n    \n    #eg.\n    DROP SCHEMA library RESTRICT;\n    ```\n\n### 域\n\n- 定义域：\n\n    ```sql\n    CREATE DOMAIN <域名> [AS] <数据类型> [DEFAULT <默认值>] [<域约束>] \n    \n    #eg\n    CREATE DOMAIN SexType AS CHAR(2) DEFAULT ‘M’ CHECK (VALUE IN (‘M’, ‘F’));\n    sex SexType NOT NULL;  #使用域\n    ```\n\n- 删除域：\n\n    ```sql\n    DROP DOMAIN <域名> [RESTRICT | CASCADE];\n    #如果指定RESTRICT，且域用于现有的表中，则删除失败\n    #如果指定CASCADE，基于域的任一表中的列都会自动地改变为基本域类型，该域的CHECK约束或默认值都会被列的约束或默认值代替\n    \n    #eg\n    DROP DOMAIN SexType；\n    ```\n\n### 表\n\n- 表的建立\n\n    ```sql\n    CREATE TABLE [模式名.] <表名> \n    (   \n        <列名><数据类型>[NOT NULL│NULL][UNIQUE]\n        [, <列名><数据类型>[NOT NULL│NULL][UNIQUE]]…\n        [, PRIMARY KEY （<列名>[，<列名>] …）]    #主键,主键属性列用括号括起来\n        [, FOREIGN KEY （<列名>[，<列名>] …）REFERENCES  <被参照表名>]#外键\n    );\n    \n    #eg\n    CREATE TABLE PropertyForRent \n    (\n        propertyNo PNumber NOT NULL,      #数据类型为用户定义的域\n        rooms PRooms NOT NULL DEFAULT 4, \n        rent PRent NOT NULL DEFAULT 600, \n        ownerNo OwnerNumber NOT NULL, \n        staffNo StaffNumber Constraint StaffNotHandlingTooMuch ….\n        branchNo BranchNumber NOT NULL,\n        PRIMARY KEY (propertyNo),   #主键属性和外键属性要用括号括起来\n        FOREIGN KEY (staffNo) REFERENCES Staff \n        ON DELETE SET NULL ON UPDATE CASCADE …. #可采取的行为\n    );\n    ```\n\n- 表的删除\n\n    ```sql\n    DROP TABLE <表名> [CASCADE | RESTRICT]\n    #既删除DD中表的结构定义，也删除DB中的数据文件\n    #RESTRICT：如果有其它对象依赖于该表，则拒绝进行DROP操作\n    #CASCADE：级联删除表及所有依赖于该表的对象\n    \n    #eg\n    DROP TABLE PropertyForRent;\n    ```\n\n- ==修改表==\n\n    ```sql\n    ALETR TABLE <表名>\n    [ADD <新列名> <数据类型> {NULL}]     #加新列，新增加的列默认为空值\n    [ADD <完整性约束条件>]\n    [DROP <完整性约束条件>]   #删除列的完整性约束条件，没有提供删除列的子句\n    [MODIFY <列名> <数据类型>]   #修改列，可能破坏已有数据\n    \n    #eg 增加学生姓名必须取唯一值的约束\n    ALTER TABLE student\n    ADD CONSTRAINT c1_name UNIQUE (SN)  #c1_name是约束的名字\n    \n    #eg 删除学生姓名必须取唯一值的约束\n    ALTER TABLE S \n    DROP UNIQUE（SN）;  \n    #或者 DROP CONSTRAINT c1_name\n    ```\n\n### 索引\n\n- 建立索引\n\n    一条语句建立一个索引\n\n    ```sql\n    #UNIQUE表示每个索引值只能对应唯一的数据记录，CLUSTER表示聚簇索引，即索引项的顺序与表中记录的物理顺序一致的有序索引，一个基本表最多只能建立一个聚簇索引\n    CREATE [UNIQUE] [CLUSTER] INDEX <索引名>  \n    ON <表名> (<列名1>[ASC|DESC], <列名2>[ASC|DESC], ...);\n    #ASC表示升序，DESC表示降序。默认为升序。\n    \n    #eg:在SC中按sno升序cno降序建唯一索引\n    CREATE UNIQUE INDEX SC_index ON SC( sno ASC，cno DESC);\n    ```\n\n- 删除索引\n\n    ```sql\n    DROP INDEX [ON <表名>]<索引名>\n    \n    #eg\n    DROP INDEX SC_index;\n    ```\n\n## ==3、⚠⚠⚠sql数据查询==\n\n### 一般格式\n\n```sql\nSELECT [ALL|DISTINCT] <目标列表达式>[,<目标列表达式>]...      #ALL为默认设置，即不取消重复值，DISTINCT表示取消重复值\nFROM <表名或视图名>[,表名或视图名]...     #SELECT子句与FROM子句是必选子句\n[WHERE <条件表达式>]\n[GROUP BY <列名1>[HAVING<条件表达式>]]\n[ORDER BY <列名2>[ASC|DESC]];     #其中，列名2也可以用SELECT子句中相应列的序号\n```\n\n**含义：**\n\n![image-20220517114258444](https://s2.loli.net/2022/05/17/GUvQItYzXHpeOmW.png)\n\n**概念性的执行步骤：**\n\n- 计算出现在FROM后面的表之间的笛卡儿积\n- 实施由WHERE后面的条件规定的选择操作\n- 根据GROUP BY后面的属性的值进行分组\n- 对于分组出来的每一个小组，实施由HAVING后面的条件规定的选择操作，保留满足条件的小组\n- 将出现在SELECT后面的属性投影成结果表\n- 将结果表中的元组根据ORDER BY后面的属性及指定的顺序（升序或降序）输出\n\n### SELECT子句：\n\n*SELECT [ALL|DISTINCT] <目标列表达式>[,<目标列表达式>]...*\n\n- *代表指定表的所有列，一般用在exists和not exists里面\n\n- ALL为默认设置 ，即不取消重复值，DISTINCT表示取消重复值\n\n- ==聚集函数（只能用于SELECT子句和HAVING子句中 ）==\n\n    ![image-20220305102158697](https://s2.loli.net/2022/03/05/YGrdqMfam4Qhb8P.png)\n\n    ![image-20220307231705848](https://s2.loli.net/2022/03/07/xj6qmHkOhKrcvag.png)\n\n    > 当这些函数遇到空值时，除COUNT(*)外，都跳过空值而只处理非空值。\n\n    例子：\n\n    <img src=\"https://s2.loli.net/2022/05/17/5Yvk4aWe1JPLMOw.png\" alt=\"image-20220517115836637\" style=\"zoom: 67%;\" />\n\n- ==算术表达式：==  \n\n    +、-、*、/、%、INTEGER（取整）、SQRT（求平方根）、三角函数（SIN、COS）、字符串函数SUBSTRING（取子串）、UPPER（大写字符）、MONTHS_BETWEEN（月份差）\n\n    ---\n\n- 用AS子句为列命名 \n\n    ```sql\n    SELECT staffNo, fName, lName, salary/12 AS monthlySalary FROM Staff;\n    ```\n\n### FROM子句：\n\n可以给表指定别名：多个表放在FROM子句中，代表多表进行笛卡尔积\n\n![image-20220517120134854](https://s2.loli.net/2022/05/17/4bpXBmUsKrI3CdH.png)\n\n### WHERE子句：\n\nWHERE子句的查询条件可以用多种形式表示： \n\n<img src=\"https://s2.loli.net/2022/05/18/X4nGHxUtsuZCcio.png\" style=\"zoom:67%;\" />\n\n- 比较运算作为查找条件 (>,  <,  >=,  <=,  =,  <>(不等于))\n\n    ```sql\n    WHERE salary > 10000\n    ```\n\n- 复合比较运算作为查找条件 (AND, OR, NOT ) \n\n    ```sql\n    WHERE city = ‘London’ OR city = ‘Glasgow’\n    ```\n\n- 范围作为查找条件（BETWEEN / NOT BETWEEN）。==BETWEEN包含端点==\n\n    ```sql\n    WHERE grade BETWEEN 85 AND 95\n    ```\n\n- 集合成员测试作为查找条件（IN / NOT IN）\n\n    ```sql\n    WHERE place IN('湖南','湖北')\n    ```\n\n- 模式匹配作为查找条件（LIKE / NOT LIKE）\n\n    SQL中的两种特殊的模式匹配符号：\n\n    - %: 百分号表示零或多个字符序列（通配符）\n\n    - _: 下划线表示任意单个字符\n\n        <img src=\"https://s2.loli.net/2022/03/07/Z52TOHjLlb6tivJ.png\" alt=\"image-20220307230435181\" style=\"zoom:67%;\" />\n\n    ```sql\n    WHERE sname LIKE '刘%' OR SNAME LIKE '__晓%'   #一个汉字占两个字符位\n    ```\n\n- 空查找条件（IS NULL  /  IS NOT NULL）\n\n    ```sql\n    WHERE propertyNo = ‘PG4’ AND comment IS NULL\n    ```\n\n### GROUP BY子句 ：\n\n将查询结果按指定列名的取值分组，并选取满足HAVING中的内部函数表达式所指定条件的组。目的：细化聚集函数的作用对象。 ==HAVING子句是包含在GROUP BY子句中的== \n\n> WHERE子句是在表中选择满足条件的元组，而HAVING子句是在各组中选择满足条件的小组\n\n> ISO标准规定，应用GROUP BY时，两个空值被认为是相等的\n\n> ==当使用GROUP BY时， SELECT列表中的项必须每组都有单一值(因为最终一个组会变成一个元组)== \n\n> 当使用GROUP BY时， SELECT子句中除集合函数外，其它所有列必须在GROUP BY子句中出现；反之，GROUP BY子句出现的列不一定出现在SELECT列表中；\n>\n> HAVING子句使用的列名必须出现在GROUP BY 子句列表中，或者包括在集合函数中。实践中，HAVING子句的条件表达式至少包括一个集合函数\n\n### ORDER BY子句\n\norder by子句必须放最后用于对最终的查询结果进行排序，<u>不能用在子查询中</u>\n\n该子句后可以跟多个排序的变量名，第一个变量为主序，下面依次类推。==ASC（升序）为默认设置== 。它也可以用SELECT子句中相应列的序号。\n\n<img src=\"https://s2.loli.net/2022/05/17/5Yvk4aWe1JPLMOw.png\" alt=\"image-20220517115836637\" style=\"zoom: 67%;\" />\n\n<img src=\"https://s2.loli.net/2022/05/17/GeHg8L1yBXIUpJt.png\" alt=\"image-20220517120939452\" style=\"zoom: 80%;\" />\n\n### 简单查询\n\n单表查询\n\n- 查询指定的列：通过在SELECT子句的<目标列表达式>中指定要查询的列来实现。可以使用*、聚集函数、算术表达式等\n- 查询表中行：通过WHERE子句的查询条件来实现\n\n### 复杂查询\n\n#### 连接查询：\n\n```sql\nSELECT student.sno, sname, cno, grade FROM student, s_c WHERE student.sno = s_c.sno;\n```\n\n==注意在多表查询中，当两个列名相同时，需采用表名.列名以示区别==\n\n#### 嵌套查询（子查询）：\n\n子查询可以被使用在外部SELECT语句的WHERE子句、HAVING子句甚至SELECT子句中\n\n==子查询应遵循如下规则：== \n\n- ORDER BY子句不能用于子查询（因为ORDER BY子句是对最终显示的结果进行排序）\n\n- 子查询总是**括在圆括号** 中，作为表达式的一部分出现在条件比较运算符的右边，并且可以有选择的跟在IN，SOME（ANY），ALL和EXIST等谓词后面。\n\n- 子查询select列表必须由**单个列名或表达式** （如集合函数）组成，除非子查询使用了关键字EXISTS（多列多行时使用）\n\n- 默认情况下，子查询中列名取自子查询的FROM子句中给定的表，也可以通过限定列名的办法指定取自外查询的FROM子句中的表（不相关子查询和相关子查询）\n\n- 带有比较运算符的子查询（==此时子查询返回单个值==，可以使用集合函数 ）\n\n    ```sql\n    #列出个人工资高于平均工资的所有职员，并求出多于平均数的值。\n    SELECT staffNo, fName, lName, position, salary–(SELECT AVG(salary) FROM Staff) AS SalDiff\n    FROM Staff\n    WHERE salary > (SELECT AVG(salary) FROM Staff);\n    ```\n\n- 带有IN谓词的子查询（子查询返回单个值或单个列多个行）\n\n    ```sql\n    #查询选修了课程“C2”的学生的学号和姓名\n    SELECT sno, sname FROM S WHERE sno IN ( SELECT sno FROM SC WHERE cno = ‘C2’ );\n    ```\n\n- 多层嵌套：子查询中又嵌套子查询\n\n- ==不相关子查询和相关子查询== \n\n    - 不相关子查询：内层的子查询完全独立于外层的SELECT语句。==m + n== （只执行了一次子查询，在检查外层的元组时，无需再执行子查询）\n\n        > 执行过程：1）执行子查询，其结果不被显示，而是传递给外部查询，作为外部查询的条件使用。2）执行外部查询，并显示整个结果。\n\n    - 相关子查询：子查询的判断条件涉及外层父查询的属性。要用到存在谓词EXISTS和NOT EXISTS，或者ALL、SOME等。==m * n== （每检查一个元组，都要执行一次子查询）\n\n        > 执行过程：1）从外层查询中取出一个元组，将元组相关列（被内层子查询引用）的值传给内层查询。2）执行内层查询，得到子查询操作的值。3）外查询根据子查询返回的结果或结果集得到满足条件的行。4）然后外层查询取出下一个元组重复做步骤1-3，直到外层的元组全部处理完毕。\n\n        ```sql\n        #找出每个学生超过他自己已选修课程平均成绩的课程号\n        SELECT sno, cno FROM SC x WHERE G>= (SELECT AVG(G) FROM SC y WHERE x.sno = y.sno);\n        ```\n\n- 量化比较谓词\n\n    - 作用：产生单个列的子查询\n\n    - 通用形式：`expr Θ { SOME | ANY | ALL } (Subquery)其中Θ∈{<,<=,=,<>,>,>=} `。expr为表达式。该形式中的SOME与ANY含义相同，但用SOME而不用ANY。SOME某些，ALL全部。\n\n        ```sql\n        #查询其它系中比信息系某一学生年龄小的学生姓名和年龄\n        SELECT SN, SA FROM S WHERE SA < SOME (SELECT SA FROM S WHERE SD =‘IS’) AND SD <>‘IS’;\n        ```\n\n    > expr Θ （子查询）  子查询返回单个值\n    >\n    > expr IN （子查询）\n    >\n    > expr Θ { SOME | ANY | ALL } (子查询)，>= ALL可以用于求最大值\n\n- ==EXISTS谓词== \n\n    - 通用形式：[NOT] EXISTS （Subquery）\n\n    - 作用：测试被子查询检索到的行集(子查询可以返回多行多列)**是否为空** 。谓词 EXISTS （Subquery）为真当且仅当子查询返回一个非空的集合。NOT_EXISTS则相反\n\n    - NOT EXISTS谓词可以实现**关系代数的差运算**\n\n        ```sql\n        #查询没有选修‘C1’号课程的学生的姓名。\n        SELECT sname FROM S WHERE NOT EXISTS (SELECT * FROM SC WHERE sno = S.sno AND cno = ‘C1’);\n        ```\n\n    - 所有带IN谓词、比较运算符、SOME和ALL谓词的子查询都可以用带EXISTS谓词的子查询等价替换，反过来就不一定\n\n    - 可以采用双嵌套NOT_EXISTS来实现**带全称量词的查询**。<img src=\"https://s2.loli.net/2022/03/15/Km17HNji9vZAeGV.png\" alt=\"image-20220315110415416\" style=\"zoom:50%;\" />\n\n        ```sql\n        #查询选修了全部课程的学生姓名\n        #转化为查询这样的学生x，没有一门课程y 是x不选修的\n        SELECT SN\n        FROM S     #查询学生x\n        WHERE NOT EXISTS  #不存在课程y\n            （SELECT ﹡\n            FROM C\n            WHERE NOT EXISTS  #x不选修课程y\n                （SELECT ﹡\n                FROM SC\n                WHERE S# = S.S#\n                AND C# = C.C#））\n        ```\n\n    - 可以采用NOT EXISTS谓词实现**关系代数的除运算**\n\n        ```sql\n        #查询至少选修了学生‘95002’选修的全部课程的学生号码\n        #转换为查询学号为x的学生，不存在这样的课程y，学生95002选修了y，而学生x没有选\n        SELECT S#\n        FROM S          #查询学生x\n        WHERE NOT EXISTS\n            （SELECT ﹡\n            FROM C       #不存在课程y\n            WHERE EXISTS   #95002选修了课程y\n                (SELECT ﹡\n                FROM SC SCX\n                WHERE SCX.C# = C.C# AND SCX.S#=‘95002’）\n            AND NOT EXISTS   #x没有选修y\n                (SELECT *\n                FROM SC SCY\n                WHERE SCY.C# = C.C# AND SCY.S#=S.S#)\n            );\n            \n        SELECT DISTINCT S#    #因为是从SC里选的学号，故需要DISTINCT\n        FROM SC SCX         #查询学生x\n        WHERE NOT EXISTS\n            （SELECT ﹡\n            FROM SC SCY    #不存在课程y\n            WHERE SCY.S# = ‘95002’  #95002选修了课程y\n            AND NOT EXISTS    #x没有选修y\n                （SELECT ﹡  \n                FROM SC SCZ\n                WHERE SCZ.S# = SCX.S#\n                AND SCZ.C# = SCY.C#））；\n        ```\n\n![image-20220314232322210](https://s2.loli.net/2022/03/14/2srATEC8QOWUzM4.png)\n\n## 4、数据更新\n\n### 插入数据：INSERT （元组级）\n\n==插入数据时，表定义中说明了NOT NULL的列不能取空值== \n\n- 用**子句**向表中插入数据：将新元组插入表中\n\n    ```sql\n    INSERT \n    INTO <表名> [(<列名1>[, <列名2>]...)] \n    VALUES(<常量1>[, <常量2>]...)  \n     #未指定任何列名时，新插入的属性必须在每个属性列上均有值，仅指定部分列名时，新元组的其他列为空值\n     \n    #eg 插入一条选课记录（‘95020’，‘C1’）\n    INSERT INTO SC（S#, C#）VALUES （‘95020’, ‘C1’）; \n    ```\n\n- 用**子查询**向表中插入数据\n\n    ```sql\n    INSERT \n    INTO <表名> [(<列名1>[, <列名2>]...)] \n    SELECT语句;  #SELECT语句的返回列要和INFO里的对应\n    \n    #eg  对每个系，求学生的平均年龄，并把结果存入数据库\n    INSERT INTO Deptage (SD, Avgage) SELECT SD, AVG(SA) FROM S GROUP BY SD;\n    ```\n\n### 修改数据：UPDATE\n\n一条UPDATE语句在某一时刻只能更新**一张表**，但可以更新一张表中的**多列**，也可以更新**多行**数据。\n\n- 用**子句**修改表中数据\n\n    修改表中满足WHERE条件的元组：\n\n    ```sql\n    UPDATE <表名>\n    SET <列名> = <表达式>[, <列名> = <表达式>] #用表达式的值取代相应的属性列值\n    [WHERE <条件表达式>]\t\t\t\t#省略WHERE语句则修改全部元组\n    \n    #eg 将学生95001的年龄改为22岁\n    UPDATE S SET SA = 22 WHERE S# = ‘95001’;\n    \n    #eg 将所有学生的年龄增加1岁\n    UPDATE S SET SA = SA + 1；\n    ```\n\n- 用**子查询**修改表中数据：子查询可以嵌套在WHERE语句的条件表达式中，用于构造修改的条件。相关子查询\n\n    ```sql\n    #将计算机科学系全体学生的成绩置零\n    #相关子查询，每次拿出SC中的一个元组，得到它的系，如果为CS则将成绩置0\n    UPDATE SC SET G = 0 WHERE ‘CS’ = ( SELECT SD FROM S WHERE S.S# = SC.S#);\n    ```\n\n### 删除数据：DELETE （元组级）\n\nDELETE用于**从指定表中删除满足条件的元组**，但不能用来从特定的列中删除数据。一条DELETE语句可以从表中删除一个或多个元组。\n\n- 用**子句**删除表中数据\n\n    删除表中满足WHERE条件的元组：\n\n    ```sql\n    DELETE \n    FROM <表名>\n    [WHERE <条件表达式>]  \n    \n    #eg 删除学号为95001的学生记录\n    DELETE FROM S WHERE S# = ‘95001’;\n    ```\n\n    > 省略WHERE语句则删除全部元组，但**只删除了表中的数据**，而不是表的定义，表的定义仍在DD中。**删除表应当用DROP**\n\n- **子查询**可以嵌套在WHERE语句的条件表达式中。相关子查询\n\n    ```sql\n    #删除计算机科学系全体学生的选课记录\n    #相关子查询\n    DELETE FROM SC WHERE ‘CS’ = ( SELECT SD FROM S WHERE S.S# = SC.S#);\n    ```\n\n\n## 5、视图\n\n- **概念：**\n    - 视图是==动态结果==：对一个或多个基本关系进行关系操作得到的动态结果，是从一个或几个基本表（或视图）导出的表。而且对基本表的操作将在视图可见的范围内映射到视图上。==视图对应的内容是实时的、最新的内容== \n    - 视图是==虚关系==：它不包含真正存储的数据，其内容不占用存储空间。\n    - **视图的内容被定义成基于一个或多个基本关系的查询**\n    - 视图是在==外模式==这一层，为用户所用\n- **操作：**视图可以和基本表一样被查询、被删除。也可以在一个视图之上再定义新的视图，但==对视图的更新（增、删、改）操作则有一定的限制==。==对视图的一切操作最终也要转换为对基本表的操作。==\n\n### 视图的创建及种类\n\n- 视图可以从一张表、几张表或其他视图中创建。 \n\n    ```sql\n    CREATE VIEW <视图名> [(<列名1>[,<列名2>]...)]\n    AS \n    SELECT 语句\n    [WITH CHECK OPTION]  \n    ```\n\n    > **几点说明：**\n    >\n    > - ==创建视图只是将视图的定义存入DD（数据字典），并不会真的执行SELECT语句，当对视图查询时，才根据视图的定义从基本表中将数据查出。==\n    >\n    > - **省略视图名后的列名表时**，默认该视图由子查询中SELECT子句目标列中的诸属性列组成\n    > - 若使用==WITH CHECK OPTION==，则对视图进行UPDATE和INSERT操作时，保证更新行满足视图定义中的WHERE子句指定的条件，否则将被DBMS拒绝\n    > - 当目标列不是单一的属性列(如集合函数)、存在同名列以及需启用更合适的名字时，需要指定组成视图的所有列名\n    > - 可以在视图中增加虚拟列（派生列），即基本表中并不存在的列，如avg(grade)\n\n- **视图的种类**\n\n    - 水平视图：从单个基本表导出，并且只是**去掉了**基本表的**某些行**\n\n        ```sql\n        #创建一个视图，让分支机构B003的经理只看到他所在分支机构的职员的信息\n        CREATE VIEW Manager3Staff\n        AS SELECT *\n        FROM Staff\n        WHERE branchNo = ‘B003’;\n        ```\n\n    - 垂直视图：从单个基本表导出，并且只是**去掉了**基本表的**某些列** \n\n        ```sql\n        #建立关于分支机构B003职员信息但不包括工资信息的视图\n        CREATE VIEW Staff3\n        AS SELECT staffNo, fName, lName, position, sex\n        FROM Manager3Staff;\t\t#视图可以从其他视图中创建\n        ```\n\n    - 分组视图：用**GROUP BY 子句**定义的视图\n\n    - 连接视图：用**连接运算**得到的视图\n\n        ![image-20220322094759185](https://s2.loli.net/2022/03/22/CA4TkBawSpnsgIi.png)\n\n### 删除视图\n\n- ```sql\n    DROP VIEW <视图名>{CASCADE|RESTRICT} \n    ```\n\n- 视图是虚表，**删除的是DD中的视图的定义**，**对产生视图数据的基本表中的数据没有影响**\n\n- 默认RESTRICT ，如果存在依赖被删除视图的其他对象，则不允许删除\n\n    如果指定CASCADE**，**删除视图可能产生级联删除\n\n### 查询视图\n\n- **步骤**\n\n```mermaid\ngraph LR\n    a[有效性检查]-->|有效|b[从DD中取出视图定义]\n    b[从DD中取出视图定义]-->|视图消解|c[对基本表的查询]\n    c[对基本表的查询]-->d[执行查询]\n```\n\n- ==视图消解==：将对视图的查询**转换为对基本表的查询**。执行对视图的查询时，从数据字典中取出视图的定义，将定义中的子查询和用户的查询结合起来，转换成等价的对基本表的查询的过程\n\n    > 简单转换的过程：\n    >\n    > - 将SELECT列表中给出的列名转换为视图定义中对应的列名\n    >\n    > - FROM子句的视图名可以视图定义中的FROM列表代替\n    >\n    > - 用AND将WHERE子句和视图定义中的WHERE子句合并\n    >\n    > - 从视图定义中复制GROUP BY和HAVING子句\n    >\n    > - 将 ORDER BY列名转换为视图定义中对应的列名\n    >\n    >     例子：\n    >\n    >     <img src=\"https://s2.loli.net/2022/03/22/jVlQaEdt8FD5HcW.png\" alt=\"image-20220322221341006\" style=\"zoom:67%;\" />\n    >\n    >     <img src=\"https://s2.loli.net/2022/03/22/I5TvHtQE4RCPSlk.png\" alt=\"image-20220322221538427\" style=\"zoom: 67%;\" />\n    >\n    >     <img src=\"https://s2.loli.net/2022/03/22/HOEKyJ3X26nhGs9.png\" alt=\"image-20220322221558073\" style=\"zoom:67%;\" />\n\n> 复杂转换：涉及集合函数，考虑HAVING子句等等\n>\n> <img src=\"https://s2.loli.net/2022/03/22/7WcqENUudBsYIMg.png\" alt=\"image-20220322222248720\" style=\"zoom:67%;\" />\n\n- **查询视图的约束：**\n\n    - 如果视图中某个列是基于集合函数的，那么，该列只能出现在访问视图的SELECT和ORDER BY子句中，特别是，该列不能出现在WHERE子句中，并且不能作为集合函数的参数\n\n        ```sql\n        SELECT * FROM StaffPropCnt WHERE cnt > 2; //错误\n        SELECT COUNT (cnt) FROM StaffPropCnt;  //错误\n        ```\n\n    - 分组视图不能与基本表或视图进行连接操作\n\n### 更新视图\n\n- 👉**对视图的更新最终要转换为对表的更新**，但有些更新不能有意义地转换成对基本表S的更新，如修改一个集合函数得到的列，因此==对视图的更新操作有一定的限制==\n- 在视图定义时加上WITH CHECK OPTION子句可以使得对视图进行更新操作时需满足视图定义中子查询的条件\n- ==视图可更新的充要条件==\n    - 没有指定DISTINCT,即重复元组未从查询结果中消除；\n    - 定义查询的SELECT列表中的每个元素均为列名（而不是常量，表达式或聚合函数），且列名不能出现多于一次；\n    - FROM子句只能指定一个表，即视图必须有一个源表且用户有请求该表的权限。如果源表本身就是一个视图，那么视图必须满足这些条件。因此，排除了基于连接、并（UNION）、交（INTERSECT）或差（EXCEPT）操作的所有视图；\n    - WHERE子句不能包括任何引用了FROM子句中的表的嵌套SELECT操作，即不能出现相关子查询\n    - 定义查询不能有GROUP BY或HAVING子句。\n    - 添加到视图中的每一行都不能违反基本表的完整性约束\n- 分类\n    - 可更新视图：满足上面的六个条件，即对视图的更新能唯一的有意义的转换为对基本表的更新\n    - （理论上）不可更新的视图\n    - 不允许更新的视图`(*>﹏<*)′\n\n### 视图的优缺点\n\n- **优点：**①提高逻辑独立性、②实时性、③提高安全性、④简化结构及复杂操作、⑤多角度地、更灵活地共享、⑥数据完整性\n\n- **缺点：**①更新的局限性、②结构的局限性、③性能开销（查询时需要转化）\n\n    > **视图维护：**更新基本表引起视图更新的过程称为视图维护\n    >\n    > **视图物化：**把第一次访问视图的结果存储为数据库的临时表；这样，基于物化视图的查询比每次重新计算视图要快的多。但会带来视图维护的代价\n\n## ==6、sql的完整性约束==\n\n### **基本概念：**\n\n- **完整性：**指数据库中数据的正确性、有效性和相容性（表示同一对象的两个或多个数据必须一致）\n- **完整性约束**：数据库中数据应满足的条件\n\n### 非过程性完整性约束\n\n- **数据取值要求：**非空约束（NOT NULL）、唯一性约束（UNIQUE）、CHECK约束（CHECK(searchcondition)）\n\n    > CHECK子句只对定义它的关系起约束作用，对其他关系没有任何作用\n\n    ```sql\n    sex CHAR NOT NULL CHECK (sex IN (‘M’, ‘F’))\n    ```\n\n    ```sql\n    #eg 增加学生姓名必须取唯一值的约束\n    ALTER TABLE student\n    ADD CONSTRAINT c1_name UNIQUE (SN)  #c1_name是约束的名字\n    \n    #eg 删除学生姓名必须取唯一值的约束\n    ALTER TABLE S \n    DROP UNIQUE（SN）;  \n    #或者 DROP CONSTRAINT c1_name\n    ```\n\n- **域约束：**通过自定义域来实现\n\n    ```sql\n    CREATE DOMAIN DomainName [AS] dataType\n    [DEFAULT defaultOption]\n    [CHECK (searchCondition)]  #searchCondition 可以用SELECT语句表达\n    \n    #eg\n    CREATE DOMAIN SexType AS CHAR(2)\n    DEFAULT ‘M’\n    CHECK (VALUE IN (‘M’, ‘F’));\n    \n    #使用域来定义列\n    sex SexType NOT NULL;\n    ```\n\n- **实体完整性：**主键属性不空。DBMS自动支持实体完整性（拒绝破坏实体完整性的操作（不合法的插入和更新））\n\n    ```sql\n    PRIMARY KEY(<列名表>)  #主键定义   \n    UNIQUE(<列名表>)   #候选键定义\n    ```\n\n- **参照完整性**：DBMS自动支持参照完整性（拒绝破坏参照完整性的操作，如不合法的对子表（参照表）的插入和更新操作，不合法的对父表（被参照表）的删除和更新操作）。注意SQL语句的顺序。\n\n    ```sql\n    FOREIGN KEY （<列名>[，<列名>] …）REFERENCES <被参照表名> \n    [ON DELETE [CASCADE | SET DEFAULT | SET NULL | NO ACTION] ]\n    [ON UPDATE [CASCADE | SET DEFAULT | SET NULL |NO ACTION] ]\n    ```\n\n    > 参照完整性被破坏时可选择的策略：\n    >\n    > <img src=\"https://s2.loli.net/2022/03/22/N9xBsZtjn5iSdO4.png\" alt=\"image-20220322230658737\" style=\"zoom: 80%;\" />\n\n- **一般约束（企业约束）**\n\n    在创建和修改表时使用CHECK/UNIQUE，还可以==CREATE ASSERTION（设置断言）==\n\n    当完整性约束涉及多个关系或者与聚合操作有关，则可以采用SQL的断言机制来完成\n\n    ```sql\n    CREATE ASSERTION AssertionName\n    CHECK (searchCondition)\n    \n    #限制staff不能管理太多的房产\n    CREATE ASSERTION StaffNotHandlingTooMuch\n    CHECK (NOT EXISTS \n               (SELECT *\n                FROM PropertyForRent\n                GROUP BY staffNo\n                HAVING COUNT(*) > 100));\n    ```\n\n<img src=\"https://s2.loli.net/2022/03/22/Ihst97CnifNJAq1.png\" alt=\"image-20220322231603163\" style=\"zoom: 67%;\" />\n\n\n\n### 过程性完整性约束：触发器\n\n- 概念：一类靠事件驱动的特殊过程，一旦由某个用户定义，任何触发该触发器的事件发生时，均由**服务器**自动激活相应的触发器。\n\n- 三要素：触发事件（包括Insert、delete、update等）、触发条件、触发动作\n\n- 作用：示警（给出提示信息）；满足特定条件时自动执行某项任务以消除负面影响\n\n- 定义(Full SQL-99的Create Trigger语法)\n\n    ```sql\n    CREATE TRIGGER trigger_name \n    {BEFORE | AFTER} {INSERT | DELETE | UPDATE [OF columnname{,columnname…}]} ON tablename #触发事件[REFERENCING corr_name_def {, corr_name_def…}]  #旧值或新值名表\n    [FOR EACH ROW | FOR EACH STATEMENT]  \n    [WHEN (search_condition)]   #触发条件\n    {\t\n    \tstatement |          #触发动作，为单个或一系列SQL语句\n    \tBEGIN ATOMIC statement; \n    \t{statement; …} \n    \tEND\n    } ;\n    \n    #eg 设计一个用于s_c的触发器，该触发器规定，如果需要修改成绩，则需要保证修改之后的成绩不得低于之前的成绩，否则拒绝修改\n    CREATE TRIGGER trig_grade\n    AFTER UPDATE OF grade ON s_c\n    REFERENCING OLD AS oldg, NEW AS newg\n    FOR EACH ROW\n    WHEN (oldg.grade > newg.grade)\n    \tUPDATE s_c\n    \tSET GRADE = oldg.grade\n    \tWHERE cno = oldg.cno AND sno = oldg.sno;  #根据主键找到该元组\n    ```\n\n    > 几点说明：\n    >\n    > - 触发器名是一个标识符，在其所属的模式里是唯一的\n    >\n    > - ON<表名>子句里的表必须和触发器位于同一个模式中\n    >\n    > - 定义行的相关名字的corr_name_def 如下:\n    >\n    >     {OLD [ROW] [AS] old_row_corr_name\n    >\n    >     | NEW [ROW] [AS] new_row_corr_name\n    >\n    >     | OLD TABLE [AS] old_table_corr_name\n    >\n    >     | NEW TABLE [AS] new_table_corr_name}\n    >\n    > - 如果在触发器定义中省略WHEN子句，即省略触发条件，则触发动作在触发器被激活后立即发生\n    >\n    > - 触发动作可以是单个或一系列SQL语句，若为一系列，需要使用BEGIN ATOMIC...END子句，语句之间用分号隔开\n    >\n    > - 注意触发器级联问题，防止一个触发动作引发一系列连锁反应（一个触发器的动作引发另一个触发器的动作）以致失控\n\n### 两种完整性约束的对比\n\n- 非过程性完整性约束：种类和能力有限但易于理解；直接为系统所知；难以给出约束不满足时的相应动作\n\n- 过程性完整性约束：给出了约束不满足时的相应动作；保证事物的一致性\n","slug":"sql概述与sql定义语言","published":1,"updated":"2022-06-24T00:44:47.199Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4wvpgrf0005ugsk58ll5qk8","content":"<h1 id=\"三、-sql概述与sql定义语言\"><a href=\"#三、-sql概述与sql定义语言\" class=\"headerlink\" title=\"三、 sql概述与sql定义语言\"></a>三、 sql概述与sql定义语言</h1><h2 id=\"1、基本概念\"><a href=\"#1、基本概念\" class=\"headerlink\" title=\"1、基本概念\"></a>1、基本概念</h2><p><strong>sql的特点：</strong></p>\n<ul>\n<li>综合统一：集数据定义、数据操纵、数据控制语言的功能为一体</li>\n<li>高度非过程化</li>\n<li>面向集合的操作方式</li>\n<li>两种使用方式，统一的语法结构</li>\n<li>简洁易学、通用、功能强</li>\n</ul>\n<span id=\"more\"></span>\n\n<p><strong>sql语言的分类</strong>：数据定义语言DDL、数据操作语言DML、数据查询语言DQL、数据控制语言DCL</p>\n<p><strong>sql数据库的三级结构：</strong></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/17/3IjuTbYwHFQzdAp.png\" alt=\"image-20220517103508209\"></p>\n<p>子模式对应于视图和部分查询表，模式对应于基本表，内模式对应于存储文件</p>\n<p><strong>sql语句的分类</strong>：模式定义语句、数据操纵语句（增删改查）、事务与控制语句、会话及诊断语句</p>\n<p><strong>sql的数据类型：</strong></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/17/fhJG9wazTZ1ydL5.png\" alt=\"image-20220517104732266\"></p>\n<blockquote>\n<p>在实验中发现，如果要显示001这种类型的数字，可以设置为<em>sno int(3) zerofill</em></p>\n</blockquote>\n<h2 id=\"2、sql的数据定义\"><a href=\"#2、sql的数据定义\" class=\"headerlink\" title=\"2、sql的数据定义\"></a>2、sql的数据定义</h2><p><img data-src=\"https://s2.loli.net/2022/05/17/5Qv3qyIM9TeJrXG.png\" alt=\"image-20220517110612939\"></p>\n<blockquote>\n<p>👉总结：</p>\n<p>创建：create  对象类型 对象名</p>\n<p>删除：drop 对象类型 对象名   [RESTRICT | CASCADE]</p>\n<p>RESTRICT：如果有其它对象依赖于该对象，则拒绝进行DROP操作</p>\n<p>CASCADE：级联删除该对象及所有依赖于该对象的对象</p>\n</blockquote>\n<h3 id=\"模式\"><a href=\"#模式\" class=\"headerlink\" title=\"模式\"></a>模式</h3><ul>\n<li><p>模式的定义：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> SCHEMA <span class=\"operator\">&lt;</span>模式名<span class=\"operator\">&gt;</span> <span class=\"keyword\">AUTHORIZATION</span> <span class=\"operator\">&lt;</span>用户名<span class=\"operator\">&gt;</span>  #若不指定<span class=\"operator\">&lt;</span>模式名<span class=\"operator\">&gt;</span>，则隐含为<span class=\"operator\">&lt;</span>用户名<span class=\"operator\">&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">#eg</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> SCHEMA library_db <span class=\"keyword\">AUTHORIZATION</span> Guoqing;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>模式的删除</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> SCHEMA <span class=\"operator\">&lt;</span>模式名<span class=\"operator\">&gt;</span> [RESTRICT <span class=\"operator\">|</span> CASCADE];</span><br><span class=\"line\">#RESTRICT – 如果模式内没有对象，则删除该模式</span><br><span class=\"line\">#CASCADE – 删除模式中所有对象的内容和定义</span><br><span class=\"line\"></span><br><span class=\"line\">#eg.</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> SCHEMA library RESTRICT;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"域\"><a href=\"#域\" class=\"headerlink\" title=\"域\"></a>域</h3><ul>\n<li><p>定义域：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> DOMAIN <span class=\"operator\">&lt;</span>域名<span class=\"operator\">&gt;</span> [<span class=\"keyword\">AS</span>] <span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span> [<span class=\"keyword\">DEFAULT</span> <span class=\"operator\">&lt;</span>默认值<span class=\"operator\">&gt;</span>] [<span class=\"operator\">&lt;</span>域约束<span class=\"operator\">&gt;</span>] </span><br><span class=\"line\"></span><br><span class=\"line\">#eg</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> DOMAIN SexType <span class=\"keyword\">AS</span> <span class=\"type\">CHAR</span>(<span class=\"number\">2</span>) <span class=\"keyword\">DEFAULT</span> ‘M’ <span class=\"keyword\">CHECK</span> (<span class=\"keyword\">VALUE</span> <span class=\"keyword\">IN</span> (‘M’, ‘F’));</span><br><span class=\"line\">sex SexType <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>;  #使用域</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除域：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> DOMAIN <span class=\"operator\">&lt;</span>域名<span class=\"operator\">&gt;</span> [RESTRICT <span class=\"operator\">|</span> CASCADE];</span><br><span class=\"line\">#如果指定RESTRICT，且域用于现有的表中，则删除失败</span><br><span class=\"line\">#如果指定CASCADE，基于域的任一表中的列都会自动地改变为基本域类型，该域的<span class=\"keyword\">CHECK</span>约束或默认值都会被列的约束或默认值代替</span><br><span class=\"line\"></span><br><span class=\"line\">#eg</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> DOMAIN SexType；</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"表\"><a href=\"#表\" class=\"headerlink\" title=\"表\"></a>表</h3><ul>\n<li><p>表的建立</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> [模式名.] <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> </span><br><span class=\"line\">(   </span><br><span class=\"line\">    <span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span><span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span>[<span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>│<span class=\"keyword\">NULL</span>][<span class=\"keyword\">UNIQUE</span>]</span><br><span class=\"line\">    [, <span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span><span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span>[<span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>│<span class=\"keyword\">NULL</span>][<span class=\"keyword\">UNIQUE</span>]]…</span><br><span class=\"line\">    [, <span class=\"keyword\">PRIMARY</span> KEY （<span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span>[，<span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span>] …）]    #主键,主键属性列用括号括起来</span><br><span class=\"line\">    [, <span class=\"keyword\">FOREIGN</span> KEY （<span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span>[，<span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span>] …）<span class=\"keyword\">REFERENCES</span>  <span class=\"operator\">&lt;</span>被参照表名<span class=\"operator\">&gt;</span>]#外键</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">#eg</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> PropertyForRent </span><br><span class=\"line\">(</span><br><span class=\"line\">    propertyNo PNumber <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,      #数据类型为用户定义的域</span><br><span class=\"line\">    rooms PRooms <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"number\">4</span>, </span><br><span class=\"line\">    rent PRent <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"number\">600</span>, </span><br><span class=\"line\">    ownerNo OwnerNumber <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>, </span><br><span class=\"line\">    staffNo StaffNumber <span class=\"keyword\">Constraint</span> StaffNotHandlingTooMuch ….</span><br><span class=\"line\">    branchNo BranchNumber <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">    <span class=\"keyword\">PRIMARY</span> KEY (propertyNo),   #主键属性和外键属性要用括号括起来</span><br><span class=\"line\">    <span class=\"keyword\">FOREIGN</span> KEY (staffNo) <span class=\"keyword\">REFERENCES</span> Staff </span><br><span class=\"line\">    <span class=\"keyword\">ON</span> <span class=\"keyword\">DELETE</span> <span class=\"keyword\">SET</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">ON</span> <span class=\"keyword\">UPDATE</span> CASCADE …. #可采取的行为</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>表的删除</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> [CASCADE <span class=\"operator\">|</span> RESTRICT]</span><br><span class=\"line\">#既删除DD中表的结构定义，也删除DB中的数据文件</span><br><span class=\"line\">#RESTRICT：如果有其它对象依赖于该表，则拒绝进行<span class=\"keyword\">DROP</span>操作</span><br><span class=\"line\">#CASCADE：级联删除表及所有依赖于该表的对象</span><br><span class=\"line\"></span><br><span class=\"line\">#eg</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> PropertyForRent;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>&#x3D;&#x3D;修改表&#x3D;&#x3D;</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALETR <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span></span><br><span class=\"line\">[<span class=\"keyword\">ADD</span> <span class=\"operator\">&lt;</span>新列名<span class=\"operator\">&gt;</span> <span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span> &#123;<span class=\"keyword\">NULL</span>&#125;]     #加新列，新增加的列默认为空值</span><br><span class=\"line\">[<span class=\"keyword\">ADD</span> <span class=\"operator\">&lt;</span>完整性约束条件<span class=\"operator\">&gt;</span>]</span><br><span class=\"line\">[<span class=\"keyword\">DROP</span> <span class=\"operator\">&lt;</span>完整性约束条件<span class=\"operator\">&gt;</span>]   #删除列的完整性约束条件，没有提供删除列的子句</span><br><span class=\"line\">[MODIFY <span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span> <span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span>]   #修改列，可能破坏已有数据</span><br><span class=\"line\"></span><br><span class=\"line\">#eg 增加学生姓名必须取唯一值的约束</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> student</span><br><span class=\"line\"><span class=\"keyword\">ADD</span> <span class=\"keyword\">CONSTRAINT</span> c1_name <span class=\"keyword\">UNIQUE</span> (SN)  #c1_name是约束的名字</span><br><span class=\"line\"></span><br><span class=\"line\">#eg 删除学生姓名必须取唯一值的约束</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> S </span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">UNIQUE</span>（SN）;  </span><br><span class=\"line\">#或者 <span class=\"keyword\">DROP</span> <span class=\"keyword\">CONSTRAINT</span> c1_name</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h3><ul>\n<li><p>建立索引</p>\n<p>  一条语句建立一个索引</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#<span class=\"keyword\">UNIQUE</span>表示每个索引值只能对应唯一的数据记录，CLUSTER表示聚簇索引，即索引项的顺序与表中记录的物理顺序一致的有序索引，一个基本表最多只能建立一个聚簇索引</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> [<span class=\"keyword\">UNIQUE</span>] [CLUSTER] INDEX <span class=\"operator\">&lt;</span>索引名<span class=\"operator\">&gt;</span>  </span><br><span class=\"line\"><span class=\"keyword\">ON</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> (<span class=\"operator\">&lt;</span>列名<span class=\"number\">1</span><span class=\"operator\">&gt;</span>[<span class=\"keyword\">ASC</span><span class=\"operator\">|</span><span class=\"keyword\">DESC</span>], <span class=\"operator\">&lt;</span>列名<span class=\"number\">2</span><span class=\"operator\">&gt;</span>[<span class=\"keyword\">ASC</span><span class=\"operator\">|</span><span class=\"keyword\">DESC</span>], ...);</span><br><span class=\"line\">#<span class=\"keyword\">ASC</span>表示升序，<span class=\"keyword\">DESC</span>表示降序。默认为升序。</span><br><span class=\"line\"></span><br><span class=\"line\">#eg:在SC中按sno升序cno降序建唯一索引</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">UNIQUE</span> INDEX SC_index <span class=\"keyword\">ON</span> SC( sno <span class=\"keyword\">ASC</span>，cno <span class=\"keyword\">DESC</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除索引</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> INDEX [<span class=\"keyword\">ON</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span>]<span class=\"operator\">&lt;</span>索引名<span class=\"operator\">&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">#eg</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> INDEX SC_index;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"x3D-x3D-3、⚠⚠⚠sql数据查询-x3D-x3D\"><a href=\"#x3D-x3D-3、⚠⚠⚠sql数据查询-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;3、⚠⚠⚠sql数据查询&#x3D;&#x3D;\"></a>&#x3D;&#x3D;3、⚠⚠⚠sql数据查询&#x3D;&#x3D;</h2><h3 id=\"一般格式\"><a href=\"#一般格式\" class=\"headerlink\" title=\"一般格式\"></a>一般格式</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> [<span class=\"keyword\">ALL</span><span class=\"operator\">|</span><span class=\"keyword\">DISTINCT</span>] <span class=\"operator\">&lt;</span>目标列表达式<span class=\"operator\">&gt;</span>[,<span class=\"operator\">&lt;</span>目标列表达式<span class=\"operator\">&gt;</span>]...      #<span class=\"keyword\">ALL</span>为默认设置，即不取消重复值，<span class=\"keyword\">DISTINCT</span>表示取消重复值</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> <span class=\"operator\">&lt;</span>表名或视图名<span class=\"operator\">&gt;</span>[,表名或视图名]...     #<span class=\"keyword\">SELECT</span>子句与<span class=\"keyword\">FROM</span>子句是必选子句</span><br><span class=\"line\">[<span class=\"keyword\">WHERE</span> <span class=\"operator\">&lt;</span>条件表达式<span class=\"operator\">&gt;</span>]</span><br><span class=\"line\">[<span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> <span class=\"operator\">&lt;</span>列名<span class=\"number\">1</span><span class=\"operator\">&gt;</span>[<span class=\"keyword\">HAVING</span><span class=\"operator\">&lt;</span>条件表达式<span class=\"operator\">&gt;</span>]]</span><br><span class=\"line\">[<span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> <span class=\"operator\">&lt;</span>列名<span class=\"number\">2</span><span class=\"operator\">&gt;</span>[<span class=\"keyword\">ASC</span><span class=\"operator\">|</span><span class=\"keyword\">DESC</span>]];     #其中，列名<span class=\"number\">2</span>也可以用<span class=\"keyword\">SELECT</span>子句中相应列的序号</span><br></pre></td></tr></table></figure>\n\n<p><strong>含义：</strong></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/17/GUvQItYzXHpeOmW.png\" alt=\"image-20220517114258444\"></p>\n<p><strong>概念性的执行步骤：</strong></p>\n<ul>\n<li>计算出现在FROM后面的表之间的笛卡儿积</li>\n<li>实施由WHERE后面的条件规定的选择操作</li>\n<li>根据GROUP BY后面的属性的值进行分组</li>\n<li>对于分组出来的每一个小组，实施由HAVING后面的条件规定的选择操作，保留满足条件的小组</li>\n<li>将出现在SELECT后面的属性投影成结果表</li>\n<li>将结果表中的元组根据ORDER BY后面的属性及指定的顺序（升序或降序）输出</li>\n</ul>\n<h3 id=\"SELECT子句：\"><a href=\"#SELECT子句：\" class=\"headerlink\" title=\"SELECT子句：\"></a>SELECT子句：</h3><p><em>SELECT [ALL|DISTINCT] &lt;目标列表达式&gt;[,&lt;目标列表达式&gt;]…</em></p>\n<ul>\n<li><p>*代表指定表的所有列，一般用在exists和not exists里面</p>\n</li>\n<li><p>ALL为默认设置 ，即不取消重复值，DISTINCT表示取消重复值</p>\n</li>\n<li><p>&#x3D;&#x3D;聚集函数（只能用于SELECT子句和HAVING子句中 ）&#x3D;&#x3D;</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/05/YGrdqMfam4Qhb8P.png\" alt=\"image-20220305102158697\"></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/07/xj6qmHkOhKrcvag.png\" alt=\"image-20220307231705848\"></p>\n<blockquote>\n<p>当这些函数遇到空值时，除COUNT(*)外，都跳过空值而只处理非空值。</p>\n</blockquote>\n<p>  例子：</p>\n  <img data-src=\"https://s2.loli.net/2022/05/17/5Yvk4aWe1JPLMOw.png\" alt=\"image-20220517115836637\" style=\"zoom: 67%;\" />\n</li>\n<li><p>&#x3D;&#x3D;算术表达式：&#x3D;&#x3D;  </p>\n<p>  +、-、*、&#x2F;、%、INTEGER（取整）、SQRT（求平方根）、三角函数（SIN、COS）、字符串函数SUBSTRING（取子串）、UPPER（大写字符）、MONTHS_BETWEEN（月份差）</p>\n<hr>\n</li>\n<li><p>用AS子句为列命名 </p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> staffNo, fName, lName, salary<span class=\"operator\">/</span><span class=\"number\">12</span> <span class=\"keyword\">AS</span> monthlySalary <span class=\"keyword\">FROM</span> Staff;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"FROM子句：\"><a href=\"#FROM子句：\" class=\"headerlink\" title=\"FROM子句：\"></a>FROM子句：</h3><p>可以给表指定别名：多个表放在FROM子句中，代表多表进行笛卡尔积</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/17/4bpXBmUsKrI3CdH.png\" alt=\"image-20220517120134854\"></p>\n<h3 id=\"WHERE子句：\"><a href=\"#WHERE子句：\" class=\"headerlink\" title=\"WHERE子句：\"></a>WHERE子句：</h3><p>WHERE子句的查询条件可以用多种形式表示： </p>\n<img data-src=\"https://s2.loli.net/2022/05/18/X4nGHxUtsuZCcio.png\" style=\"zoom:67%;\" />\n\n<ul>\n<li><p>比较运算作为查找条件 (&gt;,  &lt;,  &gt;&#x3D;,  &lt;&#x3D;,  &#x3D;,  &lt;&gt;(不等于))</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WHERE</span> salary <span class=\"operator\">&gt;</span> <span class=\"number\">10000</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>复合比较运算作为查找条件 (AND, OR, NOT ) </p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WHERE</span> city <span class=\"operator\">=</span> ‘London’ <span class=\"keyword\">OR</span> city <span class=\"operator\">=</span> ‘Glasgow’</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>范围作为查找条件（BETWEEN &#x2F; NOT BETWEEN）。&#x3D;&#x3D;BETWEEN包含端点&#x3D;&#x3D;</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WHERE</span> grade <span class=\"keyword\">BETWEEN</span> <span class=\"number\">85</span> <span class=\"keyword\">AND</span> <span class=\"number\">95</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>集合成员测试作为查找条件（IN &#x2F; NOT IN）</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WHERE</span> place <span class=\"keyword\">IN</span>(<span class=\"string\">&#x27;湖南&#x27;</span>,<span class=\"string\">&#x27;湖北&#x27;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>模式匹配作为查找条件（LIKE &#x2F; NOT LIKE）</p>\n<p>  SQL中的两种特殊的模式匹配符号：</p>\n<ul>\n<li><p>%: 百分号表示零或多个字符序列（通配符）</p>\n</li>\n<li><p>_: 下划线表示任意单个字符</p>\n  <img data-src=\"https://s2.loli.net/2022/03/07/Z52TOHjLlb6tivJ.png\" alt=\"image-20220307230435181\" style=\"zoom:67%;\" /></li>\n</ul>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WHERE</span> sname <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;刘%&#x27;</span> <span class=\"keyword\">OR</span> SNAME <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;__晓%&#x27;</span>   #一个汉字占两个字符位</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>空查找条件（IS NULL  &#x2F;  IS NOT NULL）</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WHERE</span> propertyNo <span class=\"operator\">=</span> ‘PG4’ <span class=\"keyword\">AND</span> comment <span class=\"keyword\">IS</span> <span class=\"keyword\">NULL</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"GROUP-BY子句-：\"><a href=\"#GROUP-BY子句-：\" class=\"headerlink\" title=\"GROUP BY子句 ：\"></a>GROUP BY子句 ：</h3><p>将查询结果按指定列名的取值分组，并选取满足HAVING中的内部函数表达式所指定条件的组。目的：细化聚集函数的作用对象。 &#x3D;&#x3D;HAVING子句是包含在GROUP BY子句中的&#x3D;&#x3D; </p>\n<blockquote>\n<p>WHERE子句是在表中选择满足条件的元组，而HAVING子句是在各组中选择满足条件的小组</p>\n</blockquote>\n<blockquote>\n<p>ISO标准规定，应用GROUP BY时，两个空值被认为是相等的</p>\n</blockquote>\n<blockquote>\n<p>&#x3D;&#x3D;当使用GROUP BY时， SELECT列表中的项必须每组都有单一值(因为最终一个组会变成一个元组)&#x3D;&#x3D; </p>\n</blockquote>\n<blockquote>\n<p>当使用GROUP BY时， SELECT子句中除集合函数外，其它所有列必须在GROUP BY子句中出现；反之，GROUP BY子句出现的列不一定出现在SELECT列表中；</p>\n<p>HAVING子句使用的列名必须出现在GROUP BY 子句列表中，或者包括在集合函数中。实践中，HAVING子句的条件表达式至少包括一个集合函数</p>\n</blockquote>\n<h3 id=\"ORDER-BY子句\"><a href=\"#ORDER-BY子句\" class=\"headerlink\" title=\"ORDER BY子句\"></a>ORDER BY子句</h3><p>order by子句必须放最后用于对最终的查询结果进行排序，<u>不能用在子查询中</u></p>\n<p>该子句后可以跟多个排序的变量名，第一个变量为主序，下面依次类推。&#x3D;&#x3D;ASC（升序）为默认设置&#x3D;&#x3D; 。它也可以用SELECT子句中相应列的序号。</p>\n<img data-src=\"https://s2.loli.net/2022/05/17/5Yvk4aWe1JPLMOw.png\" alt=\"image-20220517115836637\" style=\"zoom: 67%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/05/17/GeHg8L1yBXIUpJt.png\" alt=\"image-20220517120939452\" style=\"zoom: 80%;\" />\n\n<h3 id=\"简单查询\"><a href=\"#简单查询\" class=\"headerlink\" title=\"简单查询\"></a>简单查询</h3><p>单表查询</p>\n<ul>\n<li>查询指定的列：通过在SELECT子句的&lt;目标列表达式&gt;中指定要查询的列来实现。可以使用*、聚集函数、算术表达式等</li>\n<li>查询表中行：通过WHERE子句的查询条件来实现</li>\n</ul>\n<h3 id=\"复杂查询\"><a href=\"#复杂查询\" class=\"headerlink\" title=\"复杂查询\"></a>复杂查询</h3><h4 id=\"连接查询：\"><a href=\"#连接查询：\" class=\"headerlink\" title=\"连接查询：\"></a>连接查询：</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> student.sno, sname, cno, grade <span class=\"keyword\">FROM</span> student, s_c <span class=\"keyword\">WHERE</span> student.sno <span class=\"operator\">=</span> s_c.sno;</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;注意在多表查询中，当两个列名相同时，需采用表名.列名以示区别&#x3D;&#x3D;</p>\n<h4 id=\"嵌套查询（子查询）：\"><a href=\"#嵌套查询（子查询）：\" class=\"headerlink\" title=\"嵌套查询（子查询）：\"></a>嵌套查询（子查询）：</h4><p>子查询可以被使用在外部SELECT语句的WHERE子句、HAVING子句甚至SELECT子句中</p>\n<p>&#x3D;&#x3D;子查询应遵循如下规则：&#x3D;&#x3D; </p>\n<ul>\n<li><p>ORDER BY子句不能用于子查询（因为ORDER BY子句是对最终显示的结果进行排序）</p>\n</li>\n<li><p>子查询总是<strong>括在圆括号</strong> 中，作为表达式的一部分出现在条件比较运算符的右边，并且可以有选择的跟在IN，SOME（ANY），ALL和EXIST等谓词后面。</p>\n</li>\n<li><p>子查询select列表必须由<strong>单个列名或表达式</strong> （如集合函数）组成，除非子查询使用了关键字EXISTS（多列多行时使用）</p>\n</li>\n<li><p>默认情况下，子查询中列名取自子查询的FROM子句中给定的表，也可以通过限定列名的办法指定取自外查询的FROM子句中的表（不相关子查询和相关子查询）</p>\n</li>\n<li><p>带有比较运算符的子查询（&#x3D;&#x3D;此时子查询返回单个值&#x3D;&#x3D;，可以使用集合函数 ）</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#列出个人工资高于平均工资的所有职员，并求出多于平均数的值。</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> staffNo, fName, lName, position, salary–(<span class=\"keyword\">SELECT</span> <span class=\"built_in\">AVG</span>(salary) <span class=\"keyword\">FROM</span> Staff) <span class=\"keyword\">AS</span> SalDiff</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Staff</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> salary <span class=\"operator\">&gt;</span> (<span class=\"keyword\">SELECT</span> <span class=\"built_in\">AVG</span>(salary) <span class=\"keyword\">FROM</span> Staff);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>带有IN谓词的子查询（子查询返回单个值或单个列多个行）</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查询选修了课程“C2”的学生的学号和姓名</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> sno, sname <span class=\"keyword\">FROM</span> S <span class=\"keyword\">WHERE</span> sno <span class=\"keyword\">IN</span> ( <span class=\"keyword\">SELECT</span> sno <span class=\"keyword\">FROM</span> SC <span class=\"keyword\">WHERE</span> cno <span class=\"operator\">=</span> ‘C2’ );</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>多层嵌套：子查询中又嵌套子查询</p>\n</li>\n<li><p>&#x3D;&#x3D;不相关子查询和相关子查询&#x3D;&#x3D; </p>\n<ul>\n<li><p>不相关子查询：内层的子查询完全独立于外层的SELECT语句。&#x3D;&#x3D;m + n&#x3D;&#x3D; （只执行了一次子查询，在检查外层的元组时，无需再执行子查询）</p>\n<blockquote>\n<p>执行过程：1）执行子查询，其结果不被显示，而是传递给外部查询，作为外部查询的条件使用。2）执行外部查询，并显示整个结果。</p>\n</blockquote>\n</li>\n<li><p>相关子查询：子查询的判断条件涉及外层父查询的属性。要用到存在谓词EXISTS和NOT EXISTS，或者ALL、SOME等。&#x3D;&#x3D;m * n&#x3D;&#x3D; （每检查一个元组，都要执行一次子查询）</p>\n<blockquote>\n<p>执行过程：1）从外层查询中取出一个元组，将元组相关列（被内层子查询引用）的值传给内层查询。2）执行内层查询，得到子查询操作的值。3）外查询根据子查询返回的结果或结果集得到满足条件的行。4）然后外层查询取出下一个元组重复做步骤1-3，直到外层的元组全部处理完毕。</p>\n</blockquote>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#找出每个学生超过他自己已选修课程平均成绩的课程号</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> sno, cno <span class=\"keyword\">FROM</span> SC x <span class=\"keyword\">WHERE</span> G<span class=\"operator\">&gt;=</span> (<span class=\"keyword\">SELECT</span> <span class=\"built_in\">AVG</span>(G) <span class=\"keyword\">FROM</span> SC y <span class=\"keyword\">WHERE</span> x.sno <span class=\"operator\">=</span> y.sno);</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>量化比较谓词</p>\n<ul>\n<li><p>作用：产生单个列的子查询</p>\n</li>\n<li><p>通用形式：<code>expr Θ &#123; SOME | ANY | ALL &#125; (Subquery)其中Θ∈&#123;&lt;,&lt;=,=,&lt;&gt;,&gt;,&gt;=&#125; </code>。expr为表达式。该形式中的SOME与ANY含义相同，但用SOME而不用ANY。SOME某些，ALL全部。</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查询其它系中比信息系某一学生年龄小的学生姓名和年龄</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> SN, SA <span class=\"keyword\">FROM</span> S <span class=\"keyword\">WHERE</span> SA <span class=\"operator\">&lt;</span> <span class=\"keyword\">SOME</span> (<span class=\"keyword\">SELECT</span> SA <span class=\"keyword\">FROM</span> S <span class=\"keyword\">WHERE</span> SD <span class=\"operator\">=</span>‘<span class=\"keyword\">IS</span>’) <span class=\"keyword\">AND</span> SD <span class=\"operator\">&lt;&gt;</span>‘<span class=\"keyword\">IS</span>’;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<blockquote>\n<p>expr Θ （子查询）  子查询返回单个值</p>\n<p>expr IN （子查询）</p>\n<p>expr Θ { SOME | ANY | ALL } (子查询)，&gt;&#x3D; ALL可以用于求最大值</p>\n</blockquote>\n</li>\n<li><p>&#x3D;&#x3D;EXISTS谓词&#x3D;&#x3D; </p>\n<ul>\n<li><p>通用形式：[NOT] EXISTS （Subquery）</p>\n</li>\n<li><p>作用：测试被子查询检索到的行集(子查询可以返回多行多列)<strong>是否为空</strong> 。谓词 EXISTS （Subquery）为真当且仅当子查询返回一个非空的集合。NOT_EXISTS则相反</p>\n</li>\n<li><p>NOT EXISTS谓词可以实现<strong>关系代数的差运算</strong></p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查询没有选修‘C1’号课程的学生的姓名。</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> sname <span class=\"keyword\">FROM</span> S <span class=\"keyword\">WHERE</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> (<span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> SC <span class=\"keyword\">WHERE</span> sno <span class=\"operator\">=</span> S.sno <span class=\"keyword\">AND</span> cno <span class=\"operator\">=</span> ‘C1’);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>所有带IN谓词、比较运算符、SOME和ALL谓词的子查询都可以用带EXISTS谓词的子查询等价替换，反过来就不一定</p>\n</li>\n<li><p>可以采用双嵌套NOT_EXISTS来实现<strong>带全称量词的查询</strong>。<img data-src=\"https://s2.loli.net/2022/03/15/Km17HNji9vZAeGV.png\" alt=\"image-20220315110415416\" style=\"zoom:50%;\" /></p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查询选修了全部课程的学生姓名</span><br><span class=\"line\">#转化为查询这样的学生x，没有一门课程y 是x不选修的</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> SN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> S     #查询学生x</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span>  #不存在课程y</span><br><span class=\"line\">    （<span class=\"keyword\">SELECT</span> ﹡</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> C</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span>  #x不选修课程y</span><br><span class=\"line\">        （<span class=\"keyword\">SELECT</span> ﹡</span><br><span class=\"line\">        <span class=\"keyword\">FROM</span> SC</span><br><span class=\"line\">        <span class=\"keyword\">WHERE</span> S# <span class=\"operator\">=</span> S.S#</span><br><span class=\"line\">        <span class=\"keyword\">AND</span> C# <span class=\"operator\">=</span> C.C#））</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可以采用NOT EXISTS谓词实现<strong>关系代数的除运算</strong></p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查询至少选修了学生‘<span class=\"number\">95002</span>’选修的全部课程的学生号码</span><br><span class=\"line\">#转换为查询学号为x的学生，不存在这样的课程y，学生<span class=\"number\">95002</span>选修了y，而学生x没有选</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> S#</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> S          #查询学生x</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span></span><br><span class=\"line\">    （<span class=\"keyword\">SELECT</span> ﹡</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> C       #不存在课程y</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> <span class=\"keyword\">EXISTS</span>   #<span class=\"number\">95002</span>选修了课程y</span><br><span class=\"line\">        (<span class=\"keyword\">SELECT</span> ﹡</span><br><span class=\"line\">        <span class=\"keyword\">FROM</span> SC SCX</span><br><span class=\"line\">        <span class=\"keyword\">WHERE</span> SCX.C# <span class=\"operator\">=</span> C.C# <span class=\"keyword\">AND</span> SCX.S#<span class=\"operator\">=</span>‘<span class=\"number\">95002</span>’）</span><br><span class=\"line\">    <span class=\"keyword\">AND</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span>   #x没有选修y</span><br><span class=\"line\">        (<span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span></span><br><span class=\"line\">        <span class=\"keyword\">FROM</span> SC SCY</span><br><span class=\"line\">        <span class=\"keyword\">WHERE</span> SCY.C# <span class=\"operator\">=</span> C.C# <span class=\"keyword\">AND</span> SCY.S#<span class=\"operator\">=</span>S.S#)</span><br><span class=\"line\">    );</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> S#    #因为是从SC里选的学号，故需要<span class=\"keyword\">DISTINCT</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SC SCX         #查询学生x</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span></span><br><span class=\"line\">    （<span class=\"keyword\">SELECT</span> ﹡</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> SC SCY    #不存在课程y</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> SCY.S# <span class=\"operator\">=</span> ‘<span class=\"number\">95002</span>’  #<span class=\"number\">95002</span>选修了课程y</span><br><span class=\"line\">    <span class=\"keyword\">AND</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span>    #x没有选修y</span><br><span class=\"line\">        （<span class=\"keyword\">SELECT</span> ﹡  </span><br><span class=\"line\">        <span class=\"keyword\">FROM</span> SC SCZ</span><br><span class=\"line\">        <span class=\"keyword\">WHERE</span> SCZ.S# <span class=\"operator\">=</span> SCX.S#</span><br><span class=\"line\">        <span class=\"keyword\">AND</span> SCZ.C# <span class=\"operator\">=</span> SCY.C#））；</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://s2.loli.net/2022/03/14/2srATEC8QOWUzM4.png\" alt=\"image-20220314232322210\"></p>\n<h2 id=\"4、数据更新\"><a href=\"#4、数据更新\" class=\"headerlink\" title=\"4、数据更新\"></a>4、数据更新</h2><h3 id=\"插入数据：INSERT-（元组级）\"><a href=\"#插入数据：INSERT-（元组级）\" class=\"headerlink\" title=\"插入数据：INSERT （元组级）\"></a>插入数据：INSERT （元组级）</h3><p>&#x3D;&#x3D;插入数据时，表定义中说明了NOT NULL的列不能取空值&#x3D;&#x3D; </p>\n<ul>\n<li><p>用<strong>子句</strong>向表中插入数据：将新元组插入表中</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> </span><br><span class=\"line\"><span class=\"keyword\">INTO</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> [(<span class=\"operator\">&lt;</span>列名<span class=\"number\">1</span><span class=\"operator\">&gt;</span>[, <span class=\"operator\">&lt;</span>列名<span class=\"number\">2</span><span class=\"operator\">&gt;</span>]...)] </span><br><span class=\"line\"><span class=\"keyword\">VALUES</span>(<span class=\"operator\">&lt;</span>常量<span class=\"number\">1</span><span class=\"operator\">&gt;</span>[, <span class=\"operator\">&lt;</span>常量<span class=\"number\">2</span><span class=\"operator\">&gt;</span>]...)  </span><br><span class=\"line\"> #未指定任何列名时，新插入的属性必须在每个属性列上均有值，仅指定部分列名时，新元组的其他列为空值</span><br><span class=\"line\"> </span><br><span class=\"line\">#eg 插入一条选课记录（‘<span class=\"number\">95020</span>’，‘C1’）</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> SC（S#, C#）<span class=\"keyword\">VALUES</span> （‘<span class=\"number\">95020</span>’, ‘C1’）; </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用<strong>子查询</strong>向表中插入数据</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> </span><br><span class=\"line\"><span class=\"keyword\">INTO</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> [(<span class=\"operator\">&lt;</span>列名<span class=\"number\">1</span><span class=\"operator\">&gt;</span>[, <span class=\"operator\">&lt;</span>列名<span class=\"number\">2</span><span class=\"operator\">&gt;</span>]...)] </span><br><span class=\"line\"><span class=\"keyword\">SELECT</span>语句;  #<span class=\"keyword\">SELECT</span>语句的返回列要和INFO里的对应</span><br><span class=\"line\"></span><br><span class=\"line\">#eg  对每个系，求学生的平均年龄，并把结果存入数据库</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> Deptage (SD, Avgage) <span class=\"keyword\">SELECT</span> SD, <span class=\"built_in\">AVG</span>(SA) <span class=\"keyword\">FROM</span> S <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> SD;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"修改数据：UPDATE\"><a href=\"#修改数据：UPDATE\" class=\"headerlink\" title=\"修改数据：UPDATE\"></a>修改数据：UPDATE</h3><p>一条UPDATE语句在某一时刻只能更新<strong>一张表</strong>，但可以更新一张表中的<strong>多列</strong>，也可以更新<strong>多行</strong>数据。</p>\n<ul>\n<li><p>用<strong>子句</strong>修改表中数据</p>\n<p>  修改表中满足WHERE条件的元组：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">UPDATE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">SET</span> <span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span> <span class=\"operator\">=</span> <span class=\"operator\">&lt;</span>表达式<span class=\"operator\">&gt;</span>[, <span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span> <span class=\"operator\">=</span> <span class=\"operator\">&lt;</span>表达式<span class=\"operator\">&gt;</span>] #用表达式的值取代相应的属性列值</span><br><span class=\"line\">[<span class=\"keyword\">WHERE</span> <span class=\"operator\">&lt;</span>条件表达式<span class=\"operator\">&gt;</span>]\t\t\t\t#省略<span class=\"keyword\">WHERE</span>语句则修改全部元组</span><br><span class=\"line\"></span><br><span class=\"line\">#eg 将学生<span class=\"number\">95001</span>的年龄改为<span class=\"number\">22</span>岁</span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> S <span class=\"keyword\">SET</span> SA <span class=\"operator\">=</span> <span class=\"number\">22</span> <span class=\"keyword\">WHERE</span> S# <span class=\"operator\">=</span> ‘<span class=\"number\">95001</span>’;</span><br><span class=\"line\"></span><br><span class=\"line\">#eg 将所有学生的年龄增加<span class=\"number\">1</span>岁</span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> S <span class=\"keyword\">SET</span> SA <span class=\"operator\">=</span> SA <span class=\"operator\">+</span> <span class=\"number\">1</span>；</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用<strong>子查询</strong>修改表中数据：子查询可以嵌套在WHERE语句的条件表达式中，用于构造修改的条件。相关子查询</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#将计算机科学系全体学生的成绩置零</span><br><span class=\"line\">#相关子查询，每次拿出SC中的一个元组，得到它的系，如果为CS则将成绩置<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> SC <span class=\"keyword\">SET</span> G <span class=\"operator\">=</span> <span class=\"number\">0</span> <span class=\"keyword\">WHERE</span> ‘CS’ <span class=\"operator\">=</span> ( <span class=\"keyword\">SELECT</span> SD <span class=\"keyword\">FROM</span> S <span class=\"keyword\">WHERE</span> S.S# <span class=\"operator\">=</span> SC.S#);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"删除数据：DELETE-（元组级）\"><a href=\"#删除数据：DELETE-（元组级）\" class=\"headerlink\" title=\"删除数据：DELETE （元组级）\"></a>删除数据：DELETE （元组级）</h3><p>DELETE用于<strong>从指定表中删除满足条件的元组</strong>，但不能用来从特定的列中删除数据。一条DELETE语句可以从表中删除一个或多个元组。</p>\n<ul>\n<li><p>用<strong>子句</strong>删除表中数据</p>\n<p>  删除表中满足WHERE条件的元组：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DELETE</span> </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span></span><br><span class=\"line\">[<span class=\"keyword\">WHERE</span> <span class=\"operator\">&lt;</span>条件表达式<span class=\"operator\">&gt;</span>]  </span><br><span class=\"line\"></span><br><span class=\"line\">#eg 删除学号为<span class=\"number\">95001</span>的学生记录</span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> S <span class=\"keyword\">WHERE</span> S# <span class=\"operator\">=</span> ‘<span class=\"number\">95001</span>’;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>省略WHERE语句则删除全部元组，但<strong>只删除了表中的数据</strong>，而不是表的定义，表的定义仍在DD中。<strong>删除表应当用DROP</strong></p>\n</blockquote>\n</li>\n<li><p><strong>子查询</strong>可以嵌套在WHERE语句的条件表达式中。相关子查询</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#删除计算机科学系全体学生的选课记录</span><br><span class=\"line\">#相关子查询</span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> SC <span class=\"keyword\">WHERE</span> ‘CS’ <span class=\"operator\">=</span> ( <span class=\"keyword\">SELECT</span> SD <span class=\"keyword\">FROM</span> S <span class=\"keyword\">WHERE</span> S.S# <span class=\"operator\">=</span> SC.S#);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"5、视图\"><a href=\"#5、视图\" class=\"headerlink\" title=\"5、视图\"></a>5、视图</h2><ul>\n<li><strong>概念：</strong><ul>\n<li>视图是&#x3D;&#x3D;动态结果&#x3D;&#x3D;：对一个或多个基本关系进行关系操作得到的动态结果，是从一个或几个基本表（或视图）导出的表。而且对基本表的操作将在视图可见的范围内映射到视图上。&#x3D;&#x3D;视图对应的内容是实时的、最新的内容&#x3D;&#x3D; </li>\n<li>视图是&#x3D;&#x3D;虚关系&#x3D;&#x3D;：它不包含真正存储的数据，其内容不占用存储空间。</li>\n<li><strong>视图的内容被定义成基于一个或多个基本关系的查询</strong></li>\n<li>视图是在&#x3D;&#x3D;外模式&#x3D;&#x3D;这一层，为用户所用</li>\n</ul>\n</li>\n<li><strong>操作：</strong>视图可以和基本表一样被查询、被删除。也可以在一个视图之上再定义新的视图，但&#x3D;&#x3D;对视图的更新（增、删、改）操作则有一定的限制&#x3D;&#x3D;。&#x3D;&#x3D;对视图的一切操作最终也要转换为对基本表的操作。&#x3D;&#x3D;</li>\n</ul>\n<h3 id=\"视图的创建及种类\"><a href=\"#视图的创建及种类\" class=\"headerlink\" title=\"视图的创建及种类\"></a>视图的创建及种类</h3><ul>\n<li><p>视图可以从一张表、几张表或其他视图中创建。 </p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span> <span class=\"operator\">&lt;</span>视图名<span class=\"operator\">&gt;</span> [(<span class=\"operator\">&lt;</span>列名<span class=\"number\">1</span><span class=\"operator\">&gt;</span>[,<span class=\"operator\">&lt;</span>列名<span class=\"number\">2</span><span class=\"operator\">&gt;</span>]...)]</span><br><span class=\"line\"><span class=\"keyword\">AS</span> </span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> 语句</span><br><span class=\"line\">[<span class=\"keyword\">WITH</span> <span class=\"keyword\">CHECK</span> OPTION]  </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>几点说明：</strong></p>\n<ul>\n<li><p>&#x3D;&#x3D;创建视图只是将视图的定义存入DD（数据字典），并不会真的执行SELECT语句，当对视图查询时，才根据视图的定义从基本表中将数据查出。&#x3D;&#x3D;</p>\n</li>\n<li><p><strong>省略视图名后的列名表时</strong>，默认该视图由子查询中SELECT子句目标列中的诸属性列组成</p>\n</li>\n<li><p>若使用&#x3D;&#x3D;WITH CHECK OPTION&#x3D;&#x3D;，则对视图进行UPDATE和INSERT操作时，保证更新行满足视图定义中的WHERE子句指定的条件，否则将被DBMS拒绝</p>\n</li>\n<li><p>当目标列不是单一的属性列(如集合函数)、存在同名列以及需启用更合适的名字时，需要指定组成视图的所有列名</p>\n</li>\n<li><p>可以在视图中增加虚拟列（派生列），即基本表中并不存在的列，如avg(grade)</p>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p><strong>视图的种类</strong></p>\n<ul>\n<li><p>水平视图：从单个基本表导出，并且只是<strong>去掉了</strong>基本表的<strong>某些行</strong></p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#创建一个视图，让分支机构B003的经理只看到他所在分支机构的职员的信息</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span> Manager3Staff</span><br><span class=\"line\"><span class=\"keyword\">AS</span> <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Staff</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> branchNo <span class=\"operator\">=</span> ‘B003’;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>垂直视图：从单个基本表导出，并且只是<strong>去掉了</strong>基本表的<strong>某些列</strong> </p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#建立关于分支机构B003职员信息但不包括工资信息的视图</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span> Staff3</span><br><span class=\"line\"><span class=\"keyword\">AS</span> <span class=\"keyword\">SELECT</span> staffNo, fName, lName, position, sex</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Manager3Staff;\t\t#视图可以从其他视图中创建</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>分组视图：用<strong>GROUP BY 子句</strong>定义的视图</p>\n</li>\n<li><p>连接视图：用<strong>连接运算</strong>得到的视图</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/22/CA4TkBawSpnsgIi.png\" alt=\"image-20220322094759185\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"删除视图\"><a href=\"#删除视图\" class=\"headerlink\" title=\"删除视图\"></a>删除视图</h3><ul>\n<li><pre><code class=\"sql\">  DROP VIEW &lt;视图名&gt;&#123;CASCADE|RESTRICT&#125; \n  <figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">-</span> 视图是虚表，**删除的是<span class=\"selector-tag\">DD</span>中的视图的定义**，**对产生视图数据的基本表中的数据没有影响**</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">-</span> 默认<span class=\"selector-tag\">RESTRICT</span> ，如果存在依赖被删除视图的其他对象，则不允许删除</span><br><span class=\"line\"></span><br><span class=\"line\">    如果指定<span class=\"selector-tag\">CASCADE</span>**，**删除视图可能产生级联删除</span><br><span class=\"line\"></span><br><span class=\"line\">### 查询视图</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">-</span> **步骤**</span><br><span class=\"line\"></span><br><span class=\"line\">```<span class=\"selector-tag\">mermaid</span></span><br><span class=\"line\"><span class=\"selector-tag\">graph</span> <span class=\"selector-tag\">LR</span></span><br><span class=\"line\">    <span class=\"selector-tag\">a</span><span class=\"selector-attr\">[有效性检查]</span><span class=\"selector-tag\">--</span>&gt;|有效|<span class=\"selector-tag\">b</span><span class=\"selector-attr\">[从DD中取出视图定义]</span></span><br><span class=\"line\">    <span class=\"selector-tag\">b</span><span class=\"selector-attr\">[从DD中取出视图定义]</span><span class=\"selector-tag\">--</span>&gt;|视图消解|<span class=\"selector-tag\">c</span><span class=\"selector-attr\">[对基本表的查询]</span></span><br><span class=\"line\">    <span class=\"selector-tag\">c</span><span class=\"selector-attr\">[对基本表的查询]</span><span class=\"selector-tag\">--</span>&gt;<span class=\"selector-tag\">d</span><span class=\"selector-attr\">[执行查询]</span></span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n<li><p>&#x3D;&#x3D;视图消解&#x3D;&#x3D;：将对视图的查询<strong>转换为对基本表的查询</strong>。执行对视图的查询时，从数据字典中取出视图的定义，将定义中的子查询和用户的查询结合起来，转换成等价的对基本表的查询的过程</p>\n<blockquote>\n<p>简单转换的过程：</p>\n<ul>\n<li><p>将SELECT列表中给出的列名转换为视图定义中对应的列名</p>\n</li>\n<li><p>FROM子句的视图名可以视图定义中的FROM列表代替</p>\n</li>\n<li><p>用AND将WHERE子句和视图定义中的WHERE子句合并</p>\n</li>\n<li><p>从视图定义中复制GROUP BY和HAVING子句</p>\n</li>\n<li><p>将 ORDER BY列名转换为视图定义中对应的列名</p>\n<p>  例子：</p>\n  <img data-src=\"https://s2.loli.net/2022/03/22/jVlQaEdt8FD5HcW.png\" alt=\"image-20220322221341006\" style=\"zoom:67%;\" />\n\n  <img data-src=\"https://s2.loli.net/2022/03/22/I5TvHtQE4RCPSlk.png\" alt=\"image-20220322221538427\" style=\"zoom: 67%;\" />\n\n  <img data-src=\"https://s2.loli.net/2022/03/22/HOEKyJ3X26nhGs9.png\" alt=\"image-20220322221558073\" style=\"zoom:67%;\" /></li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>复杂转换：涉及集合函数，考虑HAVING子句等等</p>\n<img data-src=\"https://s2.loli.net/2022/03/22/7WcqENUudBsYIMg.png\" alt=\"image-20220322222248720\" style=\"zoom:67%;\" />\n</blockquote>\n<ul>\n<li><p><strong>查询视图的约束：</strong></p>\n<ul>\n<li><p>如果视图中某个列是基于集合函数的，那么，该列只能出现在访问视图的SELECT和ORDER BY子句中，特别是，该列不能出现在WHERE子句中，并且不能作为集合函数的参数</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> StaffPropCnt <span class=\"keyword\">WHERE</span> cnt <span class=\"operator\">&gt;</span> <span class=\"number\">2</span>; <span class=\"operator\">/</span><span class=\"operator\">/</span>错误</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">COUNT</span> (cnt) <span class=\"keyword\">FROM</span> StaffPropCnt;  <span class=\"operator\">/</span><span class=\"operator\">/</span>错误</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>分组视图不能与基本表或视图进行连接操作</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"更新视图\"><a href=\"#更新视图\" class=\"headerlink\" title=\"更新视图\"></a>更新视图</h3><ul>\n<li>👉<strong>对视图的更新最终要转换为对表的更新</strong>，但有些更新不能有意义地转换成对基本表S的更新，如修改一个集合函数得到的列，因此&#x3D;&#x3D;对视图的更新操作有一定的限制&#x3D;&#x3D;</li>\n<li>在视图定义时加上WITH CHECK OPTION子句可以使得对视图进行更新操作时需满足视图定义中子查询的条件</li>\n<li>&#x3D;&#x3D;视图可更新的充要条件&#x3D;&#x3D;<ul>\n<li>没有指定DISTINCT,即重复元组未从查询结果中消除；</li>\n<li>定义查询的SELECT列表中的每个元素均为列名（而不是常量，表达式或聚合函数），且列名不能出现多于一次；</li>\n<li>FROM子句只能指定一个表，即视图必须有一个源表且用户有请求该表的权限。如果源表本身就是一个视图，那么视图必须满足这些条件。因此，排除了基于连接、并（UNION）、交（INTERSECT）或差（EXCEPT）操作的所有视图；</li>\n<li>WHERE子句不能包括任何引用了FROM子句中的表的嵌套SELECT操作，即不能出现相关子查询</li>\n<li>定义查询不能有GROUP BY或HAVING子句。</li>\n<li>添加到视图中的每一行都不能违反基本表的完整性约束</li>\n</ul>\n</li>\n<li>分类<ul>\n<li>可更新视图：满足上面的六个条件，即对视图的更新能唯一的有意义的转换为对基本表的更新</li>\n<li>（理论上）不可更新的视图</li>\n<li>不允许更新的视图&#96;(<em>&gt;﹏&lt;</em>)′</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"视图的优缺点\"><a href=\"#视图的优缺点\" class=\"headerlink\" title=\"视图的优缺点\"></a>视图的优缺点</h3><ul>\n<li><p><strong>优点：</strong>①提高逻辑独立性、②实时性、③提高安全性、④简化结构及复杂操作、⑤多角度地、更灵活地共享、⑥数据完整性</p>\n</li>\n<li><p><strong>缺点：</strong>①更新的局限性、②结构的局限性、③性能开销（查询时需要转化）</p>\n<blockquote>\n<p><strong>视图维护：</strong>更新基本表引起视图更新的过程称为视图维护</p>\n<p><strong>视图物化：</strong>把第一次访问视图的结果存储为数据库的临时表；这样，基于物化视图的查询比每次重新计算视图要快的多。但会带来视图维护的代价</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"x3D-x3D-6、sql的完整性约束-x3D-x3D\"><a href=\"#x3D-x3D-6、sql的完整性约束-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;6、sql的完整性约束&#x3D;&#x3D;\"></a>&#x3D;&#x3D;6、sql的完整性约束&#x3D;&#x3D;</h2><h3 id=\"基本概念：\"><a href=\"#基本概念：\" class=\"headerlink\" title=\"基本概念：\"></a><strong>基本概念：</strong></h3><ul>\n<li><strong>完整性：</strong>指数据库中数据的正确性、有效性和相容性（表示同一对象的两个或多个数据必须一致）</li>\n<li><strong>完整性约束</strong>：数据库中数据应满足的条件</li>\n</ul>\n<h3 id=\"非过程性完整性约束\"><a href=\"#非过程性完整性约束\" class=\"headerlink\" title=\"非过程性完整性约束\"></a>非过程性完整性约束</h3><ul>\n<li><p><strong>数据取值要求：</strong>非空约束（NOT NULL）、唯一性约束（UNIQUE）、CHECK约束（CHECK(searchcondition)）</p>\n<blockquote>\n<p>CHECK子句只对定义它的关系起约束作用，对其他关系没有任何作用</p>\n</blockquote>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sex <span class=\"type\">CHAR</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">CHECK</span> (sex <span class=\"keyword\">IN</span> (‘M’, ‘F’))</span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#eg 增加学生姓名必须取唯一值的约束</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> student</span><br><span class=\"line\"><span class=\"keyword\">ADD</span> <span class=\"keyword\">CONSTRAINT</span> c1_name <span class=\"keyword\">UNIQUE</span> (SN)  #c1_name是约束的名字</span><br><span class=\"line\"></span><br><span class=\"line\">#eg 删除学生姓名必须取唯一值的约束</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> S </span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">UNIQUE</span>（SN）;  </span><br><span class=\"line\">#或者 <span class=\"keyword\">DROP</span> <span class=\"keyword\">CONSTRAINT</span> c1_name</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>域约束：</strong>通过自定义域来实现</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> DOMAIN DomainName [<span class=\"keyword\">AS</span>] dataType</span><br><span class=\"line\">[<span class=\"keyword\">DEFAULT</span> defaultOption]</span><br><span class=\"line\">[<span class=\"keyword\">CHECK</span> (searchCondition)]  #searchCondition 可以用<span class=\"keyword\">SELECT</span>语句表达</span><br><span class=\"line\"></span><br><span class=\"line\">#eg</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> DOMAIN SexType <span class=\"keyword\">AS</span> <span class=\"type\">CHAR</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">DEFAULT</span> ‘M’</span><br><span class=\"line\"><span class=\"keyword\">CHECK</span> (<span class=\"keyword\">VALUE</span> <span class=\"keyword\">IN</span> (‘M’, ‘F’));</span><br><span class=\"line\"></span><br><span class=\"line\">#使用域来定义列</span><br><span class=\"line\">sex SexType <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>实体完整性：</strong>主键属性不空。DBMS自动支持实体完整性（拒绝破坏实体完整性的操作（不合法的插入和更新））</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">PRIMARY</span> KEY(<span class=\"operator\">&lt;</span>列名表<span class=\"operator\">&gt;</span>)  #主键定义   </span><br><span class=\"line\"><span class=\"keyword\">UNIQUE</span>(<span class=\"operator\">&lt;</span>列名表<span class=\"operator\">&gt;</span>)   #候选键定义</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>参照完整性</strong>：DBMS自动支持参照完整性（拒绝破坏参照完整性的操作，如不合法的对子表（参照表）的插入和更新操作，不合法的对父表（被参照表）的删除和更新操作）。注意SQL语句的顺序。</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FOREIGN</span> KEY （<span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span>[，<span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span>] …）<span class=\"keyword\">REFERENCES</span> <span class=\"operator\">&lt;</span>被参照表名<span class=\"operator\">&gt;</span> </span><br><span class=\"line\">[<span class=\"keyword\">ON</span> <span class=\"keyword\">DELETE</span> [CASCADE <span class=\"operator\">|</span> <span class=\"keyword\">SET</span> <span class=\"keyword\">DEFAULT</span> <span class=\"operator\">|</span> <span class=\"keyword\">SET</span> <span class=\"keyword\">NULL</span> <span class=\"operator\">|</span> <span class=\"keyword\">NO</span> ACTION] ]</span><br><span class=\"line\">[<span class=\"keyword\">ON</span> <span class=\"keyword\">UPDATE</span> [CASCADE <span class=\"operator\">|</span> <span class=\"keyword\">SET</span> <span class=\"keyword\">DEFAULT</span> <span class=\"operator\">|</span> <span class=\"keyword\">SET</span> <span class=\"keyword\">NULL</span> <span class=\"operator\">|</span><span class=\"keyword\">NO</span> ACTION] ]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>参照完整性被破坏时可选择的策略：</p>\n<img data-src=\"https://s2.loli.net/2022/03/22/N9xBsZtjn5iSdO4.png\" alt=\"image-20220322230658737\" style=\"zoom: 80%;\" />\n</blockquote>\n</li>\n<li><p><strong>一般约束（企业约束）</strong></p>\n<p>  在创建和修改表时使用CHECK&#x2F;UNIQUE，还可以&#x3D;&#x3D;CREATE ASSERTION（设置断言）&#x3D;&#x3D;</p>\n<p>  当完整性约束涉及多个关系或者与聚合操作有关，则可以采用SQL的断言机制来完成</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> ASSERTION AssertionName</span><br><span class=\"line\"><span class=\"keyword\">CHECK</span> (searchCondition)</span><br><span class=\"line\"></span><br><span class=\"line\">#限制staff不能管理太多的房产</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> ASSERTION StaffNotHandlingTooMuch</span><br><span class=\"line\"><span class=\"keyword\">CHECK</span> (<span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> </span><br><span class=\"line\">           (<span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span></span><br><span class=\"line\">            <span class=\"keyword\">FROM</span> PropertyForRent</span><br><span class=\"line\">            <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> staffNo</span><br><span class=\"line\">            <span class=\"keyword\">HAVING</span> <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"operator\">&gt;</span> <span class=\"number\">100</span>));</span><br></pre></td></tr></table></figure></li>\n</ul>\n<img data-src=\"https://s2.loli.net/2022/03/22/Ihst97CnifNJAq1.png\" alt=\"image-20220322231603163\" style=\"zoom: 67%;\" />\n\n\n\n<h3 id=\"过程性完整性约束：触发器\"><a href=\"#过程性完整性约束：触发器\" class=\"headerlink\" title=\"过程性完整性约束：触发器\"></a>过程性完整性约束：触发器</h3><ul>\n<li><p>概念：一类靠事件驱动的特殊过程，一旦由某个用户定义，任何触发该触发器的事件发生时，均由<strong>服务器</strong>自动激活相应的触发器。</p>\n</li>\n<li><p>三要素：触发事件（包括Insert、delete、update等）、触发条件、触发动作</p>\n</li>\n<li><p>作用：示警（给出提示信息）；满足特定条件时自动执行某项任务以消除负面影响</p>\n</li>\n<li><p>定义(Full SQL-99的Create Trigger语法)</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TRIGGER</span> trigger_name </span><br><span class=\"line\">&#123;BEFORE <span class=\"operator\">|</span> AFTER&#125; &#123;<span class=\"keyword\">INSERT</span> <span class=\"operator\">|</span> <span class=\"keyword\">DELETE</span> <span class=\"operator\">|</span> <span class=\"keyword\">UPDATE</span> [<span class=\"keyword\">OF</span> columnname&#123;,columnname…&#125;]&#125; <span class=\"keyword\">ON</span> tablename #触发事件[<span class=\"keyword\">REFERENCING</span> corr_name_def &#123;, corr_name_def…&#125;]  #旧值或新值名表</span><br><span class=\"line\">[<span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> <span class=\"type\">ROW</span> <span class=\"operator\">|</span> <span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> STATEMENT]  </span><br><span class=\"line\">[<span class=\"keyword\">WHEN</span> (search_condition)]   #触发条件</span><br><span class=\"line\">&#123;\t</span><br><span class=\"line\">\tstatement <span class=\"operator\">|</span>          #触发动作，为单个或一系列<span class=\"keyword\">SQL</span>语句</span><br><span class=\"line\">\t<span class=\"keyword\">BEGIN</span> <span class=\"keyword\">ATOMIC</span> statement; </span><br><span class=\"line\">\t&#123;statement; …&#125; </span><br><span class=\"line\">\t<span class=\"keyword\">END</span></span><br><span class=\"line\">&#125; ;</span><br><span class=\"line\"></span><br><span class=\"line\">#eg 设计一个用于s_c的触发器，该触发器规定，如果需要修改成绩，则需要保证修改之后的成绩不得低于之前的成绩，否则拒绝修改</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TRIGGER</span> trig_grade</span><br><span class=\"line\">AFTER <span class=\"keyword\">UPDATE</span> <span class=\"keyword\">OF</span> grade <span class=\"keyword\">ON</span> s_c</span><br><span class=\"line\"><span class=\"keyword\">REFERENCING</span> <span class=\"keyword\">OLD</span> <span class=\"keyword\">AS</span> oldg, <span class=\"keyword\">NEW</span> <span class=\"keyword\">AS</span> newg</span><br><span class=\"line\"><span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> <span class=\"type\">ROW</span></span><br><span class=\"line\"><span class=\"keyword\">WHEN</span> (oldg.grade <span class=\"operator\">&gt;</span> newg.grade)</span><br><span class=\"line\">\t<span class=\"keyword\">UPDATE</span> s_c</span><br><span class=\"line\">\t<span class=\"keyword\">SET</span> GRADE <span class=\"operator\">=</span> oldg.grade</span><br><span class=\"line\">\t<span class=\"keyword\">WHERE</span> cno <span class=\"operator\">=</span> oldg.cno <span class=\"keyword\">AND</span> sno <span class=\"operator\">=</span> oldg.sno;  #根据主键找到该元组</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>几点说明：</p>\n<ul>\n<li><p>触发器名是一个标识符，在其所属的模式里是唯一的</p>\n</li>\n<li><p>ON&lt;表名&gt;子句里的表必须和触发器位于同一个模式中</p>\n</li>\n<li><p>定义行的相关名字的corr_name_def 如下:</p>\n<p>  {OLD [ROW] [AS] old_row_corr_name</p>\n<p>  | NEW [ROW] [AS] new_row_corr_name</p>\n<p>  | OLD TABLE [AS] old_table_corr_name</p>\n<p>  | NEW TABLE [AS] new_table_corr_name}</p>\n</li>\n<li><p>如果在触发器定义中省略WHEN子句，即省略触发条件，则触发动作在触发器被激活后立即发生</p>\n</li>\n<li><p>触发动作可以是单个或一系列SQL语句，若为一系列，需要使用BEGIN ATOMIC…END子句，语句之间用分号隔开</p>\n</li>\n<li><p>注意触发器级联问题，防止一个触发动作引发一系列连锁反应（一个触发器的动作引发另一个触发器的动作）以致失控</p>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"两种完整性约束的对比\"><a href=\"#两种完整性约束的对比\" class=\"headerlink\" title=\"两种完整性约束的对比\"></a>两种完整性约束的对比</h3><ul>\n<li><p>非过程性完整性约束：种类和能力有限但易于理解；直接为系统所知；难以给出约束不满足时的相应动作</p>\n</li>\n<li><p>过程性完整性约束：给出了约束不满足时的相应动作；保证事物的一致性</p>\n</li>\n</ul>\n","site":{"data":{"post-body-end":"<div>\n    \n</div>\n","styles":"body {\n  background: url(\"/images/background.png\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 100% 100%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.8);\n}\n.popup {\n  opacity: 0.8;\n}\n.post-block {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.comments {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.post {\n  margin-top: 60px;\n  padding: 20px;\n  margin-bottom: 60px;\n  -webkit-box-shadow: 0 0 0px #788072;\n  -moz-box-shadow: 0 0 0px rgba(202,203,204,0.5);\n}\n.post-button .btn {\n  color: #555 !important;\n  background-color: #fff;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  border: none !important;\n  transition-property: unset;\n  padding: 0px 15px;\n}\n.post-button .btn:hover {\n  color: #fff !important;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  background-image: linear-gradient(90deg, #a166ab 0%, #ef4e7b 25%, #f37055 50%, #ef4e7b 75%, #a166ab 100%);\n}\n","variables":""}},"length":15321,"excerpt":"<h1 id=\"三、-sql概述与sql定义语言\"><a href=\"#三、-sql概述与sql定义语言\" class=\"headerlink\" title=\"三、 sql概述与sql定义语言\"></a>三、 sql概述与sql定义语言</h1><h2 id=\"1、基本概念\"><a href=\"#1、基本概念\" class=\"headerlink\" title=\"1、基本概念\"></a>1、基本概念</h2><p><strong>sql的特点：</strong></p>\n<ul>\n<li>综合统一：集数据定义、数据操纵、数据控制语言的功能为一体</li>\n<li>高度非过程化</li>\n<li>面向集合的操作方式</li>\n<li>两种使用方式，统一的语法结构</li>\n<li>简洁易学、通用、功能强</li>\n</ul>","more":"<p><strong>sql语言的分类</strong>：数据定义语言DDL、数据操作语言DML、数据查询语言DQL、数据控制语言DCL</p>\n<p><strong>sql数据库的三级结构：</strong></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/17/3IjuTbYwHFQzdAp.png\" alt=\"image-20220517103508209\"></p>\n<p>子模式对应于视图和部分查询表，模式对应于基本表，内模式对应于存储文件</p>\n<p><strong>sql语句的分类</strong>：模式定义语句、数据操纵语句（增删改查）、事务与控制语句、会话及诊断语句</p>\n<p><strong>sql的数据类型：</strong></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/17/fhJG9wazTZ1ydL5.png\" alt=\"image-20220517104732266\"></p>\n<blockquote>\n<p>在实验中发现，如果要显示001这种类型的数字，可以设置为<em>sno int(3) zerofill</em></p>\n</blockquote>\n<h2 id=\"2、sql的数据定义\"><a href=\"#2、sql的数据定义\" class=\"headerlink\" title=\"2、sql的数据定义\"></a>2、sql的数据定义</h2><p><img data-src=\"https://s2.loli.net/2022/05/17/5Qv3qyIM9TeJrXG.png\" alt=\"image-20220517110612939\"></p>\n<blockquote>\n<p>👉总结：</p>\n<p>创建：create  对象类型 对象名</p>\n<p>删除：drop 对象类型 对象名   [RESTRICT | CASCADE]</p>\n<p>RESTRICT：如果有其它对象依赖于该对象，则拒绝进行DROP操作</p>\n<p>CASCADE：级联删除该对象及所有依赖于该对象的对象</p>\n</blockquote>\n<h3 id=\"模式\"><a href=\"#模式\" class=\"headerlink\" title=\"模式\"></a>模式</h3><ul>\n<li><p>模式的定义：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> SCHEMA <span class=\"operator\">&lt;</span>模式名<span class=\"operator\">&gt;</span> <span class=\"keyword\">AUTHORIZATION</span> <span class=\"operator\">&lt;</span>用户名<span class=\"operator\">&gt;</span>  #若不指定<span class=\"operator\">&lt;</span>模式名<span class=\"operator\">&gt;</span>，则隐含为<span class=\"operator\">&lt;</span>用户名<span class=\"operator\">&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">#eg</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> SCHEMA library_db <span class=\"keyword\">AUTHORIZATION</span> Guoqing;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>模式的删除</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> SCHEMA <span class=\"operator\">&lt;</span>模式名<span class=\"operator\">&gt;</span> [RESTRICT <span class=\"operator\">|</span> CASCADE];</span><br><span class=\"line\">#RESTRICT – 如果模式内没有对象，则删除该模式</span><br><span class=\"line\">#CASCADE – 删除模式中所有对象的内容和定义</span><br><span class=\"line\"></span><br><span class=\"line\">#eg.</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> SCHEMA library RESTRICT;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"域\"><a href=\"#域\" class=\"headerlink\" title=\"域\"></a>域</h3><ul>\n<li><p>定义域：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> DOMAIN <span class=\"operator\">&lt;</span>域名<span class=\"operator\">&gt;</span> [<span class=\"keyword\">AS</span>] <span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span> [<span class=\"keyword\">DEFAULT</span> <span class=\"operator\">&lt;</span>默认值<span class=\"operator\">&gt;</span>] [<span class=\"operator\">&lt;</span>域约束<span class=\"operator\">&gt;</span>] </span><br><span class=\"line\"></span><br><span class=\"line\">#eg</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> DOMAIN SexType <span class=\"keyword\">AS</span> <span class=\"type\">CHAR</span>(<span class=\"number\">2</span>) <span class=\"keyword\">DEFAULT</span> ‘M’ <span class=\"keyword\">CHECK</span> (<span class=\"keyword\">VALUE</span> <span class=\"keyword\">IN</span> (‘M’, ‘F’));</span><br><span class=\"line\">sex SexType <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>;  #使用域</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除域：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> DOMAIN <span class=\"operator\">&lt;</span>域名<span class=\"operator\">&gt;</span> [RESTRICT <span class=\"operator\">|</span> CASCADE];</span><br><span class=\"line\">#如果指定RESTRICT，且域用于现有的表中，则删除失败</span><br><span class=\"line\">#如果指定CASCADE，基于域的任一表中的列都会自动地改变为基本域类型，该域的<span class=\"keyword\">CHECK</span>约束或默认值都会被列的约束或默认值代替</span><br><span class=\"line\"></span><br><span class=\"line\">#eg</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> DOMAIN SexType；</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"表\"><a href=\"#表\" class=\"headerlink\" title=\"表\"></a>表</h3><ul>\n<li><p>表的建立</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> [模式名.] <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> </span><br><span class=\"line\">(   </span><br><span class=\"line\">    <span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span><span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span>[<span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>│<span class=\"keyword\">NULL</span>][<span class=\"keyword\">UNIQUE</span>]</span><br><span class=\"line\">    [, <span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span><span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span>[<span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>│<span class=\"keyword\">NULL</span>][<span class=\"keyword\">UNIQUE</span>]]…</span><br><span class=\"line\">    [, <span class=\"keyword\">PRIMARY</span> KEY （<span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span>[，<span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span>] …）]    #主键,主键属性列用括号括起来</span><br><span class=\"line\">    [, <span class=\"keyword\">FOREIGN</span> KEY （<span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span>[，<span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span>] …）<span class=\"keyword\">REFERENCES</span>  <span class=\"operator\">&lt;</span>被参照表名<span class=\"operator\">&gt;</span>]#外键</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">#eg</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> PropertyForRent </span><br><span class=\"line\">(</span><br><span class=\"line\">    propertyNo PNumber <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,      #数据类型为用户定义的域</span><br><span class=\"line\">    rooms PRooms <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"number\">4</span>, </span><br><span class=\"line\">    rent PRent <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"number\">600</span>, </span><br><span class=\"line\">    ownerNo OwnerNumber <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>, </span><br><span class=\"line\">    staffNo StaffNumber <span class=\"keyword\">Constraint</span> StaffNotHandlingTooMuch ….</span><br><span class=\"line\">    branchNo BranchNumber <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">    <span class=\"keyword\">PRIMARY</span> KEY (propertyNo),   #主键属性和外键属性要用括号括起来</span><br><span class=\"line\">    <span class=\"keyword\">FOREIGN</span> KEY (staffNo) <span class=\"keyword\">REFERENCES</span> Staff </span><br><span class=\"line\">    <span class=\"keyword\">ON</span> <span class=\"keyword\">DELETE</span> <span class=\"keyword\">SET</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">ON</span> <span class=\"keyword\">UPDATE</span> CASCADE …. #可采取的行为</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>表的删除</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> [CASCADE <span class=\"operator\">|</span> RESTRICT]</span><br><span class=\"line\">#既删除DD中表的结构定义，也删除DB中的数据文件</span><br><span class=\"line\">#RESTRICT：如果有其它对象依赖于该表，则拒绝进行<span class=\"keyword\">DROP</span>操作</span><br><span class=\"line\">#CASCADE：级联删除表及所有依赖于该表的对象</span><br><span class=\"line\"></span><br><span class=\"line\">#eg</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> PropertyForRent;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>&#x3D;&#x3D;修改表&#x3D;&#x3D;</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALETR <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span></span><br><span class=\"line\">[<span class=\"keyword\">ADD</span> <span class=\"operator\">&lt;</span>新列名<span class=\"operator\">&gt;</span> <span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span> &#123;<span class=\"keyword\">NULL</span>&#125;]     #加新列，新增加的列默认为空值</span><br><span class=\"line\">[<span class=\"keyword\">ADD</span> <span class=\"operator\">&lt;</span>完整性约束条件<span class=\"operator\">&gt;</span>]</span><br><span class=\"line\">[<span class=\"keyword\">DROP</span> <span class=\"operator\">&lt;</span>完整性约束条件<span class=\"operator\">&gt;</span>]   #删除列的完整性约束条件，没有提供删除列的子句</span><br><span class=\"line\">[MODIFY <span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span> <span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span>]   #修改列，可能破坏已有数据</span><br><span class=\"line\"></span><br><span class=\"line\">#eg 增加学生姓名必须取唯一值的约束</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> student</span><br><span class=\"line\"><span class=\"keyword\">ADD</span> <span class=\"keyword\">CONSTRAINT</span> c1_name <span class=\"keyword\">UNIQUE</span> (SN)  #c1_name是约束的名字</span><br><span class=\"line\"></span><br><span class=\"line\">#eg 删除学生姓名必须取唯一值的约束</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> S </span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">UNIQUE</span>（SN）;  </span><br><span class=\"line\">#或者 <span class=\"keyword\">DROP</span> <span class=\"keyword\">CONSTRAINT</span> c1_name</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h3><ul>\n<li><p>建立索引</p>\n<p>  一条语句建立一个索引</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#<span class=\"keyword\">UNIQUE</span>表示每个索引值只能对应唯一的数据记录，CLUSTER表示聚簇索引，即索引项的顺序与表中记录的物理顺序一致的有序索引，一个基本表最多只能建立一个聚簇索引</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> [<span class=\"keyword\">UNIQUE</span>] [CLUSTER] INDEX <span class=\"operator\">&lt;</span>索引名<span class=\"operator\">&gt;</span>  </span><br><span class=\"line\"><span class=\"keyword\">ON</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> (<span class=\"operator\">&lt;</span>列名<span class=\"number\">1</span><span class=\"operator\">&gt;</span>[<span class=\"keyword\">ASC</span><span class=\"operator\">|</span><span class=\"keyword\">DESC</span>], <span class=\"operator\">&lt;</span>列名<span class=\"number\">2</span><span class=\"operator\">&gt;</span>[<span class=\"keyword\">ASC</span><span class=\"operator\">|</span><span class=\"keyword\">DESC</span>], ...);</span><br><span class=\"line\">#<span class=\"keyword\">ASC</span>表示升序，<span class=\"keyword\">DESC</span>表示降序。默认为升序。</span><br><span class=\"line\"></span><br><span class=\"line\">#eg:在SC中按sno升序cno降序建唯一索引</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">UNIQUE</span> INDEX SC_index <span class=\"keyword\">ON</span> SC( sno <span class=\"keyword\">ASC</span>，cno <span class=\"keyword\">DESC</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除索引</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> INDEX [<span class=\"keyword\">ON</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span>]<span class=\"operator\">&lt;</span>索引名<span class=\"operator\">&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">#eg</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> INDEX SC_index;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"x3D-x3D-3、⚠⚠⚠sql数据查询-x3D-x3D\"><a href=\"#x3D-x3D-3、⚠⚠⚠sql数据查询-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;3、⚠⚠⚠sql数据查询&#x3D;&#x3D;\"></a>&#x3D;&#x3D;3、⚠⚠⚠sql数据查询&#x3D;&#x3D;</h2><h3 id=\"一般格式\"><a href=\"#一般格式\" class=\"headerlink\" title=\"一般格式\"></a>一般格式</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> [<span class=\"keyword\">ALL</span><span class=\"operator\">|</span><span class=\"keyword\">DISTINCT</span>] <span class=\"operator\">&lt;</span>目标列表达式<span class=\"operator\">&gt;</span>[,<span class=\"operator\">&lt;</span>目标列表达式<span class=\"operator\">&gt;</span>]...      #<span class=\"keyword\">ALL</span>为默认设置，即不取消重复值，<span class=\"keyword\">DISTINCT</span>表示取消重复值</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> <span class=\"operator\">&lt;</span>表名或视图名<span class=\"operator\">&gt;</span>[,表名或视图名]...     #<span class=\"keyword\">SELECT</span>子句与<span class=\"keyword\">FROM</span>子句是必选子句</span><br><span class=\"line\">[<span class=\"keyword\">WHERE</span> <span class=\"operator\">&lt;</span>条件表达式<span class=\"operator\">&gt;</span>]</span><br><span class=\"line\">[<span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> <span class=\"operator\">&lt;</span>列名<span class=\"number\">1</span><span class=\"operator\">&gt;</span>[<span class=\"keyword\">HAVING</span><span class=\"operator\">&lt;</span>条件表达式<span class=\"operator\">&gt;</span>]]</span><br><span class=\"line\">[<span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> <span class=\"operator\">&lt;</span>列名<span class=\"number\">2</span><span class=\"operator\">&gt;</span>[<span class=\"keyword\">ASC</span><span class=\"operator\">|</span><span class=\"keyword\">DESC</span>]];     #其中，列名<span class=\"number\">2</span>也可以用<span class=\"keyword\">SELECT</span>子句中相应列的序号</span><br></pre></td></tr></table></figure>\n\n<p><strong>含义：</strong></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/17/GUvQItYzXHpeOmW.png\" alt=\"image-20220517114258444\"></p>\n<p><strong>概念性的执行步骤：</strong></p>\n<ul>\n<li>计算出现在FROM后面的表之间的笛卡儿积</li>\n<li>实施由WHERE后面的条件规定的选择操作</li>\n<li>根据GROUP BY后面的属性的值进行分组</li>\n<li>对于分组出来的每一个小组，实施由HAVING后面的条件规定的选择操作，保留满足条件的小组</li>\n<li>将出现在SELECT后面的属性投影成结果表</li>\n<li>将结果表中的元组根据ORDER BY后面的属性及指定的顺序（升序或降序）输出</li>\n</ul>\n<h3 id=\"SELECT子句：\"><a href=\"#SELECT子句：\" class=\"headerlink\" title=\"SELECT子句：\"></a>SELECT子句：</h3><p><em>SELECT [ALL|DISTINCT] &lt;目标列表达式&gt;[,&lt;目标列表达式&gt;]…</em></p>\n<ul>\n<li><p>*代表指定表的所有列，一般用在exists和not exists里面</p>\n</li>\n<li><p>ALL为默认设置 ，即不取消重复值，DISTINCT表示取消重复值</p>\n</li>\n<li><p>&#x3D;&#x3D;聚集函数（只能用于SELECT子句和HAVING子句中 ）&#x3D;&#x3D;</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/05/YGrdqMfam4Qhb8P.png\" alt=\"image-20220305102158697\"></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/07/xj6qmHkOhKrcvag.png\" alt=\"image-20220307231705848\"></p>\n<blockquote>\n<p>当这些函数遇到空值时，除COUNT(*)外，都跳过空值而只处理非空值。</p>\n</blockquote>\n<p>  例子：</p>\n  <img data-src=\"https://s2.loli.net/2022/05/17/5Yvk4aWe1JPLMOw.png\" alt=\"image-20220517115836637\" style=\"zoom: 67%;\" />\n</li>\n<li><p>&#x3D;&#x3D;算术表达式：&#x3D;&#x3D;  </p>\n<p>  +、-、*、&#x2F;、%、INTEGER（取整）、SQRT（求平方根）、三角函数（SIN、COS）、字符串函数SUBSTRING（取子串）、UPPER（大写字符）、MONTHS_BETWEEN（月份差）</p>\n<hr>\n</li>\n<li><p>用AS子句为列命名 </p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> staffNo, fName, lName, salary<span class=\"operator\">/</span><span class=\"number\">12</span> <span class=\"keyword\">AS</span> monthlySalary <span class=\"keyword\">FROM</span> Staff;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"FROM子句：\"><a href=\"#FROM子句：\" class=\"headerlink\" title=\"FROM子句：\"></a>FROM子句：</h3><p>可以给表指定别名：多个表放在FROM子句中，代表多表进行笛卡尔积</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/17/4bpXBmUsKrI3CdH.png\" alt=\"image-20220517120134854\"></p>\n<h3 id=\"WHERE子句：\"><a href=\"#WHERE子句：\" class=\"headerlink\" title=\"WHERE子句：\"></a>WHERE子句：</h3><p>WHERE子句的查询条件可以用多种形式表示： </p>\n<img data-src=\"https://s2.loli.net/2022/05/18/X4nGHxUtsuZCcio.png\" style=\"zoom:67%;\" />\n\n<ul>\n<li><p>比较运算作为查找条件 (&gt;,  &lt;,  &gt;&#x3D;,  &lt;&#x3D;,  &#x3D;,  &lt;&gt;(不等于))</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WHERE</span> salary <span class=\"operator\">&gt;</span> <span class=\"number\">10000</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>复合比较运算作为查找条件 (AND, OR, NOT ) </p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WHERE</span> city <span class=\"operator\">=</span> ‘London’ <span class=\"keyword\">OR</span> city <span class=\"operator\">=</span> ‘Glasgow’</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>范围作为查找条件（BETWEEN &#x2F; NOT BETWEEN）。&#x3D;&#x3D;BETWEEN包含端点&#x3D;&#x3D;</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WHERE</span> grade <span class=\"keyword\">BETWEEN</span> <span class=\"number\">85</span> <span class=\"keyword\">AND</span> <span class=\"number\">95</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>集合成员测试作为查找条件（IN &#x2F; NOT IN）</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WHERE</span> place <span class=\"keyword\">IN</span>(<span class=\"string\">&#x27;湖南&#x27;</span>,<span class=\"string\">&#x27;湖北&#x27;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>模式匹配作为查找条件（LIKE &#x2F; NOT LIKE）</p>\n<p>  SQL中的两种特殊的模式匹配符号：</p>\n<ul>\n<li><p>%: 百分号表示零或多个字符序列（通配符）</p>\n</li>\n<li><p>_: 下划线表示任意单个字符</p>\n  <img data-src=\"https://s2.loli.net/2022/03/07/Z52TOHjLlb6tivJ.png\" alt=\"image-20220307230435181\" style=\"zoom:67%;\" /></li>\n</ul>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WHERE</span> sname <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;刘%&#x27;</span> <span class=\"keyword\">OR</span> SNAME <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;__晓%&#x27;</span>   #一个汉字占两个字符位</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>空查找条件（IS NULL  &#x2F;  IS NOT NULL）</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WHERE</span> propertyNo <span class=\"operator\">=</span> ‘PG4’ <span class=\"keyword\">AND</span> comment <span class=\"keyword\">IS</span> <span class=\"keyword\">NULL</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"GROUP-BY子句-：\"><a href=\"#GROUP-BY子句-：\" class=\"headerlink\" title=\"GROUP BY子句 ：\"></a>GROUP BY子句 ：</h3><p>将查询结果按指定列名的取值分组，并选取满足HAVING中的内部函数表达式所指定条件的组。目的：细化聚集函数的作用对象。 &#x3D;&#x3D;HAVING子句是包含在GROUP BY子句中的&#x3D;&#x3D; </p>\n<blockquote>\n<p>WHERE子句是在表中选择满足条件的元组，而HAVING子句是在各组中选择满足条件的小组</p>\n</blockquote>\n<blockquote>\n<p>ISO标准规定，应用GROUP BY时，两个空值被认为是相等的</p>\n</blockquote>\n<blockquote>\n<p>&#x3D;&#x3D;当使用GROUP BY时， SELECT列表中的项必须每组都有单一值(因为最终一个组会变成一个元组)&#x3D;&#x3D; </p>\n</blockquote>\n<blockquote>\n<p>当使用GROUP BY时， SELECT子句中除集合函数外，其它所有列必须在GROUP BY子句中出现；反之，GROUP BY子句出现的列不一定出现在SELECT列表中；</p>\n<p>HAVING子句使用的列名必须出现在GROUP BY 子句列表中，或者包括在集合函数中。实践中，HAVING子句的条件表达式至少包括一个集合函数</p>\n</blockquote>\n<h3 id=\"ORDER-BY子句\"><a href=\"#ORDER-BY子句\" class=\"headerlink\" title=\"ORDER BY子句\"></a>ORDER BY子句</h3><p>order by子句必须放最后用于对最终的查询结果进行排序，<u>不能用在子查询中</u></p>\n<p>该子句后可以跟多个排序的变量名，第一个变量为主序，下面依次类推。&#x3D;&#x3D;ASC（升序）为默认设置&#x3D;&#x3D; 。它也可以用SELECT子句中相应列的序号。</p>\n<img data-src=\"https://s2.loli.net/2022/05/17/5Yvk4aWe1JPLMOw.png\" alt=\"image-20220517115836637\" style=\"zoom: 67%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/05/17/GeHg8L1yBXIUpJt.png\" alt=\"image-20220517120939452\" style=\"zoom: 80%;\" />\n\n<h3 id=\"简单查询\"><a href=\"#简单查询\" class=\"headerlink\" title=\"简单查询\"></a>简单查询</h3><p>单表查询</p>\n<ul>\n<li>查询指定的列：通过在SELECT子句的&lt;目标列表达式&gt;中指定要查询的列来实现。可以使用*、聚集函数、算术表达式等</li>\n<li>查询表中行：通过WHERE子句的查询条件来实现</li>\n</ul>\n<h3 id=\"复杂查询\"><a href=\"#复杂查询\" class=\"headerlink\" title=\"复杂查询\"></a>复杂查询</h3><h4 id=\"连接查询：\"><a href=\"#连接查询：\" class=\"headerlink\" title=\"连接查询：\"></a>连接查询：</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> student.sno, sname, cno, grade <span class=\"keyword\">FROM</span> student, s_c <span class=\"keyword\">WHERE</span> student.sno <span class=\"operator\">=</span> s_c.sno;</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;注意在多表查询中，当两个列名相同时，需采用表名.列名以示区别&#x3D;&#x3D;</p>\n<h4 id=\"嵌套查询（子查询）：\"><a href=\"#嵌套查询（子查询）：\" class=\"headerlink\" title=\"嵌套查询（子查询）：\"></a>嵌套查询（子查询）：</h4><p>子查询可以被使用在外部SELECT语句的WHERE子句、HAVING子句甚至SELECT子句中</p>\n<p>&#x3D;&#x3D;子查询应遵循如下规则：&#x3D;&#x3D; </p>\n<ul>\n<li><p>ORDER BY子句不能用于子查询（因为ORDER BY子句是对最终显示的结果进行排序）</p>\n</li>\n<li><p>子查询总是<strong>括在圆括号</strong> 中，作为表达式的一部分出现在条件比较运算符的右边，并且可以有选择的跟在IN，SOME（ANY），ALL和EXIST等谓词后面。</p>\n</li>\n<li><p>子查询select列表必须由<strong>单个列名或表达式</strong> （如集合函数）组成，除非子查询使用了关键字EXISTS（多列多行时使用）</p>\n</li>\n<li><p>默认情况下，子查询中列名取自子查询的FROM子句中给定的表，也可以通过限定列名的办法指定取自外查询的FROM子句中的表（不相关子查询和相关子查询）</p>\n</li>\n<li><p>带有比较运算符的子查询（&#x3D;&#x3D;此时子查询返回单个值&#x3D;&#x3D;，可以使用集合函数 ）</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#列出个人工资高于平均工资的所有职员，并求出多于平均数的值。</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> staffNo, fName, lName, position, salary–(<span class=\"keyword\">SELECT</span> <span class=\"built_in\">AVG</span>(salary) <span class=\"keyword\">FROM</span> Staff) <span class=\"keyword\">AS</span> SalDiff</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Staff</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> salary <span class=\"operator\">&gt;</span> (<span class=\"keyword\">SELECT</span> <span class=\"built_in\">AVG</span>(salary) <span class=\"keyword\">FROM</span> Staff);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>带有IN谓词的子查询（子查询返回单个值或单个列多个行）</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查询选修了课程“C2”的学生的学号和姓名</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> sno, sname <span class=\"keyword\">FROM</span> S <span class=\"keyword\">WHERE</span> sno <span class=\"keyword\">IN</span> ( <span class=\"keyword\">SELECT</span> sno <span class=\"keyword\">FROM</span> SC <span class=\"keyword\">WHERE</span> cno <span class=\"operator\">=</span> ‘C2’ );</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>多层嵌套：子查询中又嵌套子查询</p>\n</li>\n<li><p>&#x3D;&#x3D;不相关子查询和相关子查询&#x3D;&#x3D; </p>\n<ul>\n<li><p>不相关子查询：内层的子查询完全独立于外层的SELECT语句。&#x3D;&#x3D;m + n&#x3D;&#x3D; （只执行了一次子查询，在检查外层的元组时，无需再执行子查询）</p>\n<blockquote>\n<p>执行过程：1）执行子查询，其结果不被显示，而是传递给外部查询，作为外部查询的条件使用。2）执行外部查询，并显示整个结果。</p>\n</blockquote>\n</li>\n<li><p>相关子查询：子查询的判断条件涉及外层父查询的属性。要用到存在谓词EXISTS和NOT EXISTS，或者ALL、SOME等。&#x3D;&#x3D;m * n&#x3D;&#x3D; （每检查一个元组，都要执行一次子查询）</p>\n<blockquote>\n<p>执行过程：1）从外层查询中取出一个元组，将元组相关列（被内层子查询引用）的值传给内层查询。2）执行内层查询，得到子查询操作的值。3）外查询根据子查询返回的结果或结果集得到满足条件的行。4）然后外层查询取出下一个元组重复做步骤1-3，直到外层的元组全部处理完毕。</p>\n</blockquote>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#找出每个学生超过他自己已选修课程平均成绩的课程号</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> sno, cno <span class=\"keyword\">FROM</span> SC x <span class=\"keyword\">WHERE</span> G<span class=\"operator\">&gt;=</span> (<span class=\"keyword\">SELECT</span> <span class=\"built_in\">AVG</span>(G) <span class=\"keyword\">FROM</span> SC y <span class=\"keyword\">WHERE</span> x.sno <span class=\"operator\">=</span> y.sno);</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>量化比较谓词</p>\n<ul>\n<li><p>作用：产生单个列的子查询</p>\n</li>\n<li><p>通用形式：<code>expr Θ &#123; SOME | ANY | ALL &#125; (Subquery)其中Θ∈&#123;&lt;,&lt;=,=,&lt;&gt;,&gt;,&gt;=&#125; </code>。expr为表达式。该形式中的SOME与ANY含义相同，但用SOME而不用ANY。SOME某些，ALL全部。</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查询其它系中比信息系某一学生年龄小的学生姓名和年龄</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> SN, SA <span class=\"keyword\">FROM</span> S <span class=\"keyword\">WHERE</span> SA <span class=\"operator\">&lt;</span> <span class=\"keyword\">SOME</span> (<span class=\"keyword\">SELECT</span> SA <span class=\"keyword\">FROM</span> S <span class=\"keyword\">WHERE</span> SD <span class=\"operator\">=</span>‘<span class=\"keyword\">IS</span>’) <span class=\"keyword\">AND</span> SD <span class=\"operator\">&lt;&gt;</span>‘<span class=\"keyword\">IS</span>’;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<blockquote>\n<p>expr Θ （子查询）  子查询返回单个值</p>\n<p>expr IN （子查询）</p>\n<p>expr Θ { SOME | ANY | ALL } (子查询)，&gt;&#x3D; ALL可以用于求最大值</p>\n</blockquote>\n</li>\n<li><p>&#x3D;&#x3D;EXISTS谓词&#x3D;&#x3D; </p>\n<ul>\n<li><p>通用形式：[NOT] EXISTS （Subquery）</p>\n</li>\n<li><p>作用：测试被子查询检索到的行集(子查询可以返回多行多列)<strong>是否为空</strong> 。谓词 EXISTS （Subquery）为真当且仅当子查询返回一个非空的集合。NOT_EXISTS则相反</p>\n</li>\n<li><p>NOT EXISTS谓词可以实现<strong>关系代数的差运算</strong></p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查询没有选修‘C1’号课程的学生的姓名。</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> sname <span class=\"keyword\">FROM</span> S <span class=\"keyword\">WHERE</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> (<span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> SC <span class=\"keyword\">WHERE</span> sno <span class=\"operator\">=</span> S.sno <span class=\"keyword\">AND</span> cno <span class=\"operator\">=</span> ‘C1’);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>所有带IN谓词、比较运算符、SOME和ALL谓词的子查询都可以用带EXISTS谓词的子查询等价替换，反过来就不一定</p>\n</li>\n<li><p>可以采用双嵌套NOT_EXISTS来实现<strong>带全称量词的查询</strong>。<img data-src=\"https://s2.loli.net/2022/03/15/Km17HNji9vZAeGV.png\" alt=\"image-20220315110415416\" style=\"zoom:50%;\" /></p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查询选修了全部课程的学生姓名</span><br><span class=\"line\">#转化为查询这样的学生x，没有一门课程y 是x不选修的</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> SN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> S     #查询学生x</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span>  #不存在课程y</span><br><span class=\"line\">    （<span class=\"keyword\">SELECT</span> ﹡</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> C</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span>  #x不选修课程y</span><br><span class=\"line\">        （<span class=\"keyword\">SELECT</span> ﹡</span><br><span class=\"line\">        <span class=\"keyword\">FROM</span> SC</span><br><span class=\"line\">        <span class=\"keyword\">WHERE</span> S# <span class=\"operator\">=</span> S.S#</span><br><span class=\"line\">        <span class=\"keyword\">AND</span> C# <span class=\"operator\">=</span> C.C#））</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可以采用NOT EXISTS谓词实现<strong>关系代数的除运算</strong></p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查询至少选修了学生‘<span class=\"number\">95002</span>’选修的全部课程的学生号码</span><br><span class=\"line\">#转换为查询学号为x的学生，不存在这样的课程y，学生<span class=\"number\">95002</span>选修了y，而学生x没有选</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> S#</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> S          #查询学生x</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span></span><br><span class=\"line\">    （<span class=\"keyword\">SELECT</span> ﹡</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> C       #不存在课程y</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> <span class=\"keyword\">EXISTS</span>   #<span class=\"number\">95002</span>选修了课程y</span><br><span class=\"line\">        (<span class=\"keyword\">SELECT</span> ﹡</span><br><span class=\"line\">        <span class=\"keyword\">FROM</span> SC SCX</span><br><span class=\"line\">        <span class=\"keyword\">WHERE</span> SCX.C# <span class=\"operator\">=</span> C.C# <span class=\"keyword\">AND</span> SCX.S#<span class=\"operator\">=</span>‘<span class=\"number\">95002</span>’）</span><br><span class=\"line\">    <span class=\"keyword\">AND</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span>   #x没有选修y</span><br><span class=\"line\">        (<span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span></span><br><span class=\"line\">        <span class=\"keyword\">FROM</span> SC SCY</span><br><span class=\"line\">        <span class=\"keyword\">WHERE</span> SCY.C# <span class=\"operator\">=</span> C.C# <span class=\"keyword\">AND</span> SCY.S#<span class=\"operator\">=</span>S.S#)</span><br><span class=\"line\">    );</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> S#    #因为是从SC里选的学号，故需要<span class=\"keyword\">DISTINCT</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SC SCX         #查询学生x</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span></span><br><span class=\"line\">    （<span class=\"keyword\">SELECT</span> ﹡</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> SC SCY    #不存在课程y</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> SCY.S# <span class=\"operator\">=</span> ‘<span class=\"number\">95002</span>’  #<span class=\"number\">95002</span>选修了课程y</span><br><span class=\"line\">    <span class=\"keyword\">AND</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span>    #x没有选修y</span><br><span class=\"line\">        （<span class=\"keyword\">SELECT</span> ﹡  </span><br><span class=\"line\">        <span class=\"keyword\">FROM</span> SC SCZ</span><br><span class=\"line\">        <span class=\"keyword\">WHERE</span> SCZ.S# <span class=\"operator\">=</span> SCX.S#</span><br><span class=\"line\">        <span class=\"keyword\">AND</span> SCZ.C# <span class=\"operator\">=</span> SCY.C#））；</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://s2.loli.net/2022/03/14/2srATEC8QOWUzM4.png\" alt=\"image-20220314232322210\"></p>\n<h2 id=\"4、数据更新\"><a href=\"#4、数据更新\" class=\"headerlink\" title=\"4、数据更新\"></a>4、数据更新</h2><h3 id=\"插入数据：INSERT-（元组级）\"><a href=\"#插入数据：INSERT-（元组级）\" class=\"headerlink\" title=\"插入数据：INSERT （元组级）\"></a>插入数据：INSERT （元组级）</h3><p>&#x3D;&#x3D;插入数据时，表定义中说明了NOT NULL的列不能取空值&#x3D;&#x3D; </p>\n<ul>\n<li><p>用<strong>子句</strong>向表中插入数据：将新元组插入表中</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> </span><br><span class=\"line\"><span class=\"keyword\">INTO</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> [(<span class=\"operator\">&lt;</span>列名<span class=\"number\">1</span><span class=\"operator\">&gt;</span>[, <span class=\"operator\">&lt;</span>列名<span class=\"number\">2</span><span class=\"operator\">&gt;</span>]...)] </span><br><span class=\"line\"><span class=\"keyword\">VALUES</span>(<span class=\"operator\">&lt;</span>常量<span class=\"number\">1</span><span class=\"operator\">&gt;</span>[, <span class=\"operator\">&lt;</span>常量<span class=\"number\">2</span><span class=\"operator\">&gt;</span>]...)  </span><br><span class=\"line\"> #未指定任何列名时，新插入的属性必须在每个属性列上均有值，仅指定部分列名时，新元组的其他列为空值</span><br><span class=\"line\"> </span><br><span class=\"line\">#eg 插入一条选课记录（‘<span class=\"number\">95020</span>’，‘C1’）</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> SC（S#, C#）<span class=\"keyword\">VALUES</span> （‘<span class=\"number\">95020</span>’, ‘C1’）; </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用<strong>子查询</strong>向表中插入数据</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> </span><br><span class=\"line\"><span class=\"keyword\">INTO</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> [(<span class=\"operator\">&lt;</span>列名<span class=\"number\">1</span><span class=\"operator\">&gt;</span>[, <span class=\"operator\">&lt;</span>列名<span class=\"number\">2</span><span class=\"operator\">&gt;</span>]...)] </span><br><span class=\"line\"><span class=\"keyword\">SELECT</span>语句;  #<span class=\"keyword\">SELECT</span>语句的返回列要和INFO里的对应</span><br><span class=\"line\"></span><br><span class=\"line\">#eg  对每个系，求学生的平均年龄，并把结果存入数据库</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> Deptage (SD, Avgage) <span class=\"keyword\">SELECT</span> SD, <span class=\"built_in\">AVG</span>(SA) <span class=\"keyword\">FROM</span> S <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> SD;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"修改数据：UPDATE\"><a href=\"#修改数据：UPDATE\" class=\"headerlink\" title=\"修改数据：UPDATE\"></a>修改数据：UPDATE</h3><p>一条UPDATE语句在某一时刻只能更新<strong>一张表</strong>，但可以更新一张表中的<strong>多列</strong>，也可以更新<strong>多行</strong>数据。</p>\n<ul>\n<li><p>用<strong>子句</strong>修改表中数据</p>\n<p>  修改表中满足WHERE条件的元组：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">UPDATE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">SET</span> <span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span> <span class=\"operator\">=</span> <span class=\"operator\">&lt;</span>表达式<span class=\"operator\">&gt;</span>[, <span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span> <span class=\"operator\">=</span> <span class=\"operator\">&lt;</span>表达式<span class=\"operator\">&gt;</span>] #用表达式的值取代相应的属性列值</span><br><span class=\"line\">[<span class=\"keyword\">WHERE</span> <span class=\"operator\">&lt;</span>条件表达式<span class=\"operator\">&gt;</span>]\t\t\t\t#省略<span class=\"keyword\">WHERE</span>语句则修改全部元组</span><br><span class=\"line\"></span><br><span class=\"line\">#eg 将学生<span class=\"number\">95001</span>的年龄改为<span class=\"number\">22</span>岁</span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> S <span class=\"keyword\">SET</span> SA <span class=\"operator\">=</span> <span class=\"number\">22</span> <span class=\"keyword\">WHERE</span> S# <span class=\"operator\">=</span> ‘<span class=\"number\">95001</span>’;</span><br><span class=\"line\"></span><br><span class=\"line\">#eg 将所有学生的年龄增加<span class=\"number\">1</span>岁</span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> S <span class=\"keyword\">SET</span> SA <span class=\"operator\">=</span> SA <span class=\"operator\">+</span> <span class=\"number\">1</span>；</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用<strong>子查询</strong>修改表中数据：子查询可以嵌套在WHERE语句的条件表达式中，用于构造修改的条件。相关子查询</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#将计算机科学系全体学生的成绩置零</span><br><span class=\"line\">#相关子查询，每次拿出SC中的一个元组，得到它的系，如果为CS则将成绩置<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> SC <span class=\"keyword\">SET</span> G <span class=\"operator\">=</span> <span class=\"number\">0</span> <span class=\"keyword\">WHERE</span> ‘CS’ <span class=\"operator\">=</span> ( <span class=\"keyword\">SELECT</span> SD <span class=\"keyword\">FROM</span> S <span class=\"keyword\">WHERE</span> S.S# <span class=\"operator\">=</span> SC.S#);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"删除数据：DELETE-（元组级）\"><a href=\"#删除数据：DELETE-（元组级）\" class=\"headerlink\" title=\"删除数据：DELETE （元组级）\"></a>删除数据：DELETE （元组级）</h3><p>DELETE用于<strong>从指定表中删除满足条件的元组</strong>，但不能用来从特定的列中删除数据。一条DELETE语句可以从表中删除一个或多个元组。</p>\n<ul>\n<li><p>用<strong>子句</strong>删除表中数据</p>\n<p>  删除表中满足WHERE条件的元组：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DELETE</span> </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span></span><br><span class=\"line\">[<span class=\"keyword\">WHERE</span> <span class=\"operator\">&lt;</span>条件表达式<span class=\"operator\">&gt;</span>]  </span><br><span class=\"line\"></span><br><span class=\"line\">#eg 删除学号为<span class=\"number\">95001</span>的学生记录</span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> S <span class=\"keyword\">WHERE</span> S# <span class=\"operator\">=</span> ‘<span class=\"number\">95001</span>’;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>省略WHERE语句则删除全部元组，但<strong>只删除了表中的数据</strong>，而不是表的定义，表的定义仍在DD中。<strong>删除表应当用DROP</strong></p>\n</blockquote>\n</li>\n<li><p><strong>子查询</strong>可以嵌套在WHERE语句的条件表达式中。相关子查询</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#删除计算机科学系全体学生的选课记录</span><br><span class=\"line\">#相关子查询</span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> SC <span class=\"keyword\">WHERE</span> ‘CS’ <span class=\"operator\">=</span> ( <span class=\"keyword\">SELECT</span> SD <span class=\"keyword\">FROM</span> S <span class=\"keyword\">WHERE</span> S.S# <span class=\"operator\">=</span> SC.S#);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"5、视图\"><a href=\"#5、视图\" class=\"headerlink\" title=\"5、视图\"></a>5、视图</h2><ul>\n<li><strong>概念：</strong><ul>\n<li>视图是&#x3D;&#x3D;动态结果&#x3D;&#x3D;：对一个或多个基本关系进行关系操作得到的动态结果，是从一个或几个基本表（或视图）导出的表。而且对基本表的操作将在视图可见的范围内映射到视图上。&#x3D;&#x3D;视图对应的内容是实时的、最新的内容&#x3D;&#x3D; </li>\n<li>视图是&#x3D;&#x3D;虚关系&#x3D;&#x3D;：它不包含真正存储的数据，其内容不占用存储空间。</li>\n<li><strong>视图的内容被定义成基于一个或多个基本关系的查询</strong></li>\n<li>视图是在&#x3D;&#x3D;外模式&#x3D;&#x3D;这一层，为用户所用</li>\n</ul>\n</li>\n<li><strong>操作：</strong>视图可以和基本表一样被查询、被删除。也可以在一个视图之上再定义新的视图，但&#x3D;&#x3D;对视图的更新（增、删、改）操作则有一定的限制&#x3D;&#x3D;。&#x3D;&#x3D;对视图的一切操作最终也要转换为对基本表的操作。&#x3D;&#x3D;</li>\n</ul>\n<h3 id=\"视图的创建及种类\"><a href=\"#视图的创建及种类\" class=\"headerlink\" title=\"视图的创建及种类\"></a>视图的创建及种类</h3><ul>\n<li><p>视图可以从一张表、几张表或其他视图中创建。 </p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span> <span class=\"operator\">&lt;</span>视图名<span class=\"operator\">&gt;</span> [(<span class=\"operator\">&lt;</span>列名<span class=\"number\">1</span><span class=\"operator\">&gt;</span>[,<span class=\"operator\">&lt;</span>列名<span class=\"number\">2</span><span class=\"operator\">&gt;</span>]...)]</span><br><span class=\"line\"><span class=\"keyword\">AS</span> </span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> 语句</span><br><span class=\"line\">[<span class=\"keyword\">WITH</span> <span class=\"keyword\">CHECK</span> OPTION]  </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>几点说明：</strong></p>\n<ul>\n<li><p>&#x3D;&#x3D;创建视图只是将视图的定义存入DD（数据字典），并不会真的执行SELECT语句，当对视图查询时，才根据视图的定义从基本表中将数据查出。&#x3D;&#x3D;</p>\n</li>\n<li><p><strong>省略视图名后的列名表时</strong>，默认该视图由子查询中SELECT子句目标列中的诸属性列组成</p>\n</li>\n<li><p>若使用&#x3D;&#x3D;WITH CHECK OPTION&#x3D;&#x3D;，则对视图进行UPDATE和INSERT操作时，保证更新行满足视图定义中的WHERE子句指定的条件，否则将被DBMS拒绝</p>\n</li>\n<li><p>当目标列不是单一的属性列(如集合函数)、存在同名列以及需启用更合适的名字时，需要指定组成视图的所有列名</p>\n</li>\n<li><p>可以在视图中增加虚拟列（派生列），即基本表中并不存在的列，如avg(grade)</p>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p><strong>视图的种类</strong></p>\n<ul>\n<li><p>水平视图：从单个基本表导出，并且只是<strong>去掉了</strong>基本表的<strong>某些行</strong></p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#创建一个视图，让分支机构B003的经理只看到他所在分支机构的职员的信息</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span> Manager3Staff</span><br><span class=\"line\"><span class=\"keyword\">AS</span> <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Staff</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> branchNo <span class=\"operator\">=</span> ‘B003’;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>垂直视图：从单个基本表导出，并且只是<strong>去掉了</strong>基本表的<strong>某些列</strong> </p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#建立关于分支机构B003职员信息但不包括工资信息的视图</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span> Staff3</span><br><span class=\"line\"><span class=\"keyword\">AS</span> <span class=\"keyword\">SELECT</span> staffNo, fName, lName, position, sex</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Manager3Staff;\t\t#视图可以从其他视图中创建</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>分组视图：用<strong>GROUP BY 子句</strong>定义的视图</p>\n</li>\n<li><p>连接视图：用<strong>连接运算</strong>得到的视图</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/22/CA4TkBawSpnsgIi.png\" alt=\"image-20220322094759185\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"删除视图\"><a href=\"#删除视图\" class=\"headerlink\" title=\"删除视图\"></a>删除视图</h3><ul>\n<li><pre><code class=\"sql\">  DROP VIEW &lt;视图名&gt;&#123;CASCADE|RESTRICT&#125; \n  <figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">-</span> 视图是虚表，**删除的是<span class=\"selector-tag\">DD</span>中的视图的定义**，**对产生视图数据的基本表中的数据没有影响**</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">-</span> 默认<span class=\"selector-tag\">RESTRICT</span> ，如果存在依赖被删除视图的其他对象，则不允许删除</span><br><span class=\"line\"></span><br><span class=\"line\">    如果指定<span class=\"selector-tag\">CASCADE</span>**，**删除视图可能产生级联删除</span><br><span class=\"line\"></span><br><span class=\"line\">### 查询视图</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">-</span> **步骤**</span><br><span class=\"line\"></span><br><span class=\"line\">```<span class=\"selector-tag\">mermaid</span></span><br><span class=\"line\"><span class=\"selector-tag\">graph</span> <span class=\"selector-tag\">LR</span></span><br><span class=\"line\">    <span class=\"selector-tag\">a</span><span class=\"selector-attr\">[有效性检查]</span><span class=\"selector-tag\">--</span>&gt;|有效|<span class=\"selector-tag\">b</span><span class=\"selector-attr\">[从DD中取出视图定义]</span></span><br><span class=\"line\">    <span class=\"selector-tag\">b</span><span class=\"selector-attr\">[从DD中取出视图定义]</span><span class=\"selector-tag\">--</span>&gt;|视图消解|<span class=\"selector-tag\">c</span><span class=\"selector-attr\">[对基本表的查询]</span></span><br><span class=\"line\">    <span class=\"selector-tag\">c</span><span class=\"selector-attr\">[对基本表的查询]</span><span class=\"selector-tag\">--</span>&gt;<span class=\"selector-tag\">d</span><span class=\"selector-attr\">[执行查询]</span></span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n<li><p>&#x3D;&#x3D;视图消解&#x3D;&#x3D;：将对视图的查询<strong>转换为对基本表的查询</strong>。执行对视图的查询时，从数据字典中取出视图的定义，将定义中的子查询和用户的查询结合起来，转换成等价的对基本表的查询的过程</p>\n<blockquote>\n<p>简单转换的过程：</p>\n<ul>\n<li><p>将SELECT列表中给出的列名转换为视图定义中对应的列名</p>\n</li>\n<li><p>FROM子句的视图名可以视图定义中的FROM列表代替</p>\n</li>\n<li><p>用AND将WHERE子句和视图定义中的WHERE子句合并</p>\n</li>\n<li><p>从视图定义中复制GROUP BY和HAVING子句</p>\n</li>\n<li><p>将 ORDER BY列名转换为视图定义中对应的列名</p>\n<p>  例子：</p>\n  <img data-src=\"https://s2.loli.net/2022/03/22/jVlQaEdt8FD5HcW.png\" alt=\"image-20220322221341006\" style=\"zoom:67%;\" />\n\n  <img data-src=\"https://s2.loli.net/2022/03/22/I5TvHtQE4RCPSlk.png\" alt=\"image-20220322221538427\" style=\"zoom: 67%;\" />\n\n  <img data-src=\"https://s2.loli.net/2022/03/22/HOEKyJ3X26nhGs9.png\" alt=\"image-20220322221558073\" style=\"zoom:67%;\" /></li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>复杂转换：涉及集合函数，考虑HAVING子句等等</p>\n<img data-src=\"https://s2.loli.net/2022/03/22/7WcqENUudBsYIMg.png\" alt=\"image-20220322222248720\" style=\"zoom:67%;\" />\n</blockquote>\n<ul>\n<li><p><strong>查询视图的约束：</strong></p>\n<ul>\n<li><p>如果视图中某个列是基于集合函数的，那么，该列只能出现在访问视图的SELECT和ORDER BY子句中，特别是，该列不能出现在WHERE子句中，并且不能作为集合函数的参数</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> StaffPropCnt <span class=\"keyword\">WHERE</span> cnt <span class=\"operator\">&gt;</span> <span class=\"number\">2</span>; <span class=\"operator\">/</span><span class=\"operator\">/</span>错误</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">COUNT</span> (cnt) <span class=\"keyword\">FROM</span> StaffPropCnt;  <span class=\"operator\">/</span><span class=\"operator\">/</span>错误</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>分组视图不能与基本表或视图进行连接操作</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"更新视图\"><a href=\"#更新视图\" class=\"headerlink\" title=\"更新视图\"></a>更新视图</h3><ul>\n<li>👉<strong>对视图的更新最终要转换为对表的更新</strong>，但有些更新不能有意义地转换成对基本表S的更新，如修改一个集合函数得到的列，因此&#x3D;&#x3D;对视图的更新操作有一定的限制&#x3D;&#x3D;</li>\n<li>在视图定义时加上WITH CHECK OPTION子句可以使得对视图进行更新操作时需满足视图定义中子查询的条件</li>\n<li>&#x3D;&#x3D;视图可更新的充要条件&#x3D;&#x3D;<ul>\n<li>没有指定DISTINCT,即重复元组未从查询结果中消除；</li>\n<li>定义查询的SELECT列表中的每个元素均为列名（而不是常量，表达式或聚合函数），且列名不能出现多于一次；</li>\n<li>FROM子句只能指定一个表，即视图必须有一个源表且用户有请求该表的权限。如果源表本身就是一个视图，那么视图必须满足这些条件。因此，排除了基于连接、并（UNION）、交（INTERSECT）或差（EXCEPT）操作的所有视图；</li>\n<li>WHERE子句不能包括任何引用了FROM子句中的表的嵌套SELECT操作，即不能出现相关子查询</li>\n<li>定义查询不能有GROUP BY或HAVING子句。</li>\n<li>添加到视图中的每一行都不能违反基本表的完整性约束</li>\n</ul>\n</li>\n<li>分类<ul>\n<li>可更新视图：满足上面的六个条件，即对视图的更新能唯一的有意义的转换为对基本表的更新</li>\n<li>（理论上）不可更新的视图</li>\n<li>不允许更新的视图&#96;(<em>&gt;﹏&lt;</em>)′</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"视图的优缺点\"><a href=\"#视图的优缺点\" class=\"headerlink\" title=\"视图的优缺点\"></a>视图的优缺点</h3><ul>\n<li><p><strong>优点：</strong>①提高逻辑独立性、②实时性、③提高安全性、④简化结构及复杂操作、⑤多角度地、更灵活地共享、⑥数据完整性</p>\n</li>\n<li><p><strong>缺点：</strong>①更新的局限性、②结构的局限性、③性能开销（查询时需要转化）</p>\n<blockquote>\n<p><strong>视图维护：</strong>更新基本表引起视图更新的过程称为视图维护</p>\n<p><strong>视图物化：</strong>把第一次访问视图的结果存储为数据库的临时表；这样，基于物化视图的查询比每次重新计算视图要快的多。但会带来视图维护的代价</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"x3D-x3D-6、sql的完整性约束-x3D-x3D\"><a href=\"#x3D-x3D-6、sql的完整性约束-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;6、sql的完整性约束&#x3D;&#x3D;\"></a>&#x3D;&#x3D;6、sql的完整性约束&#x3D;&#x3D;</h2><h3 id=\"基本概念：\"><a href=\"#基本概念：\" class=\"headerlink\" title=\"基本概念：\"></a><strong>基本概念：</strong></h3><ul>\n<li><strong>完整性：</strong>指数据库中数据的正确性、有效性和相容性（表示同一对象的两个或多个数据必须一致）</li>\n<li><strong>完整性约束</strong>：数据库中数据应满足的条件</li>\n</ul>\n<h3 id=\"非过程性完整性约束\"><a href=\"#非过程性完整性约束\" class=\"headerlink\" title=\"非过程性完整性约束\"></a>非过程性完整性约束</h3><ul>\n<li><p><strong>数据取值要求：</strong>非空约束（NOT NULL）、唯一性约束（UNIQUE）、CHECK约束（CHECK(searchcondition)）</p>\n<blockquote>\n<p>CHECK子句只对定义它的关系起约束作用，对其他关系没有任何作用</p>\n</blockquote>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sex <span class=\"type\">CHAR</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">CHECK</span> (sex <span class=\"keyword\">IN</span> (‘M’, ‘F’))</span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#eg 增加学生姓名必须取唯一值的约束</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> student</span><br><span class=\"line\"><span class=\"keyword\">ADD</span> <span class=\"keyword\">CONSTRAINT</span> c1_name <span class=\"keyword\">UNIQUE</span> (SN)  #c1_name是约束的名字</span><br><span class=\"line\"></span><br><span class=\"line\">#eg 删除学生姓名必须取唯一值的约束</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> S </span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">UNIQUE</span>（SN）;  </span><br><span class=\"line\">#或者 <span class=\"keyword\">DROP</span> <span class=\"keyword\">CONSTRAINT</span> c1_name</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>域约束：</strong>通过自定义域来实现</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> DOMAIN DomainName [<span class=\"keyword\">AS</span>] dataType</span><br><span class=\"line\">[<span class=\"keyword\">DEFAULT</span> defaultOption]</span><br><span class=\"line\">[<span class=\"keyword\">CHECK</span> (searchCondition)]  #searchCondition 可以用<span class=\"keyword\">SELECT</span>语句表达</span><br><span class=\"line\"></span><br><span class=\"line\">#eg</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> DOMAIN SexType <span class=\"keyword\">AS</span> <span class=\"type\">CHAR</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">DEFAULT</span> ‘M’</span><br><span class=\"line\"><span class=\"keyword\">CHECK</span> (<span class=\"keyword\">VALUE</span> <span class=\"keyword\">IN</span> (‘M’, ‘F’));</span><br><span class=\"line\"></span><br><span class=\"line\">#使用域来定义列</span><br><span class=\"line\">sex SexType <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>实体完整性：</strong>主键属性不空。DBMS自动支持实体完整性（拒绝破坏实体完整性的操作（不合法的插入和更新））</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">PRIMARY</span> KEY(<span class=\"operator\">&lt;</span>列名表<span class=\"operator\">&gt;</span>)  #主键定义   </span><br><span class=\"line\"><span class=\"keyword\">UNIQUE</span>(<span class=\"operator\">&lt;</span>列名表<span class=\"operator\">&gt;</span>)   #候选键定义</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>参照完整性</strong>：DBMS自动支持参照完整性（拒绝破坏参照完整性的操作，如不合法的对子表（参照表）的插入和更新操作，不合法的对父表（被参照表）的删除和更新操作）。注意SQL语句的顺序。</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FOREIGN</span> KEY （<span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span>[，<span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span>] …）<span class=\"keyword\">REFERENCES</span> <span class=\"operator\">&lt;</span>被参照表名<span class=\"operator\">&gt;</span> </span><br><span class=\"line\">[<span class=\"keyword\">ON</span> <span class=\"keyword\">DELETE</span> [CASCADE <span class=\"operator\">|</span> <span class=\"keyword\">SET</span> <span class=\"keyword\">DEFAULT</span> <span class=\"operator\">|</span> <span class=\"keyword\">SET</span> <span class=\"keyword\">NULL</span> <span class=\"operator\">|</span> <span class=\"keyword\">NO</span> ACTION] ]</span><br><span class=\"line\">[<span class=\"keyword\">ON</span> <span class=\"keyword\">UPDATE</span> [CASCADE <span class=\"operator\">|</span> <span class=\"keyword\">SET</span> <span class=\"keyword\">DEFAULT</span> <span class=\"operator\">|</span> <span class=\"keyword\">SET</span> <span class=\"keyword\">NULL</span> <span class=\"operator\">|</span><span class=\"keyword\">NO</span> ACTION] ]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>参照完整性被破坏时可选择的策略：</p>\n<img data-src=\"https://s2.loli.net/2022/03/22/N9xBsZtjn5iSdO4.png\" alt=\"image-20220322230658737\" style=\"zoom: 80%;\" />\n</blockquote>\n</li>\n<li><p><strong>一般约束（企业约束）</strong></p>\n<p>  在创建和修改表时使用CHECK&#x2F;UNIQUE，还可以&#x3D;&#x3D;CREATE ASSERTION（设置断言）&#x3D;&#x3D;</p>\n<p>  当完整性约束涉及多个关系或者与聚合操作有关，则可以采用SQL的断言机制来完成</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> ASSERTION AssertionName</span><br><span class=\"line\"><span class=\"keyword\">CHECK</span> (searchCondition)</span><br><span class=\"line\"></span><br><span class=\"line\">#限制staff不能管理太多的房产</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> ASSERTION StaffNotHandlingTooMuch</span><br><span class=\"line\"><span class=\"keyword\">CHECK</span> (<span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> </span><br><span class=\"line\">           (<span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span></span><br><span class=\"line\">            <span class=\"keyword\">FROM</span> PropertyForRent</span><br><span class=\"line\">            <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> staffNo</span><br><span class=\"line\">            <span class=\"keyword\">HAVING</span> <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"operator\">&gt;</span> <span class=\"number\">100</span>));</span><br></pre></td></tr></table></figure></li>\n</ul>\n<img data-src=\"https://s2.loli.net/2022/03/22/Ihst97CnifNJAq1.png\" alt=\"image-20220322231603163\" style=\"zoom: 67%;\" />\n\n\n\n<h3 id=\"过程性完整性约束：触发器\"><a href=\"#过程性完整性约束：触发器\" class=\"headerlink\" title=\"过程性完整性约束：触发器\"></a>过程性完整性约束：触发器</h3><ul>\n<li><p>概念：一类靠事件驱动的特殊过程，一旦由某个用户定义，任何触发该触发器的事件发生时，均由<strong>服务器</strong>自动激活相应的触发器。</p>\n</li>\n<li><p>三要素：触发事件（包括Insert、delete、update等）、触发条件、触发动作</p>\n</li>\n<li><p>作用：示警（给出提示信息）；满足特定条件时自动执行某项任务以消除负面影响</p>\n</li>\n<li><p>定义(Full SQL-99的Create Trigger语法)</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TRIGGER</span> trigger_name </span><br><span class=\"line\">&#123;BEFORE <span class=\"operator\">|</span> AFTER&#125; &#123;<span class=\"keyword\">INSERT</span> <span class=\"operator\">|</span> <span class=\"keyword\">DELETE</span> <span class=\"operator\">|</span> <span class=\"keyword\">UPDATE</span> [<span class=\"keyword\">OF</span> columnname&#123;,columnname…&#125;]&#125; <span class=\"keyword\">ON</span> tablename #触发事件[<span class=\"keyword\">REFERENCING</span> corr_name_def &#123;, corr_name_def…&#125;]  #旧值或新值名表</span><br><span class=\"line\">[<span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> <span class=\"type\">ROW</span> <span class=\"operator\">|</span> <span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> STATEMENT]  </span><br><span class=\"line\">[<span class=\"keyword\">WHEN</span> (search_condition)]   #触发条件</span><br><span class=\"line\">&#123;\t</span><br><span class=\"line\">\tstatement <span class=\"operator\">|</span>          #触发动作，为单个或一系列<span class=\"keyword\">SQL</span>语句</span><br><span class=\"line\">\t<span class=\"keyword\">BEGIN</span> <span class=\"keyword\">ATOMIC</span> statement; </span><br><span class=\"line\">\t&#123;statement; …&#125; </span><br><span class=\"line\">\t<span class=\"keyword\">END</span></span><br><span class=\"line\">&#125; ;</span><br><span class=\"line\"></span><br><span class=\"line\">#eg 设计一个用于s_c的触发器，该触发器规定，如果需要修改成绩，则需要保证修改之后的成绩不得低于之前的成绩，否则拒绝修改</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TRIGGER</span> trig_grade</span><br><span class=\"line\">AFTER <span class=\"keyword\">UPDATE</span> <span class=\"keyword\">OF</span> grade <span class=\"keyword\">ON</span> s_c</span><br><span class=\"line\"><span class=\"keyword\">REFERENCING</span> <span class=\"keyword\">OLD</span> <span class=\"keyword\">AS</span> oldg, <span class=\"keyword\">NEW</span> <span class=\"keyword\">AS</span> newg</span><br><span class=\"line\"><span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> <span class=\"type\">ROW</span></span><br><span class=\"line\"><span class=\"keyword\">WHEN</span> (oldg.grade <span class=\"operator\">&gt;</span> newg.grade)</span><br><span class=\"line\">\t<span class=\"keyword\">UPDATE</span> s_c</span><br><span class=\"line\">\t<span class=\"keyword\">SET</span> GRADE <span class=\"operator\">=</span> oldg.grade</span><br><span class=\"line\">\t<span class=\"keyword\">WHERE</span> cno <span class=\"operator\">=</span> oldg.cno <span class=\"keyword\">AND</span> sno <span class=\"operator\">=</span> oldg.sno;  #根据主键找到该元组</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>几点说明：</p>\n<ul>\n<li><p>触发器名是一个标识符，在其所属的模式里是唯一的</p>\n</li>\n<li><p>ON&lt;表名&gt;子句里的表必须和触发器位于同一个模式中</p>\n</li>\n<li><p>定义行的相关名字的corr_name_def 如下:</p>\n<p>  {OLD [ROW] [AS] old_row_corr_name</p>\n<p>  | NEW [ROW] [AS] new_row_corr_name</p>\n<p>  | OLD TABLE [AS] old_table_corr_name</p>\n<p>  | NEW TABLE [AS] new_table_corr_name}</p>\n</li>\n<li><p>如果在触发器定义中省略WHEN子句，即省略触发条件，则触发动作在触发器被激活后立即发生</p>\n</li>\n<li><p>触发动作可以是单个或一系列SQL语句，若为一系列，需要使用BEGIN ATOMIC…END子句，语句之间用分号隔开</p>\n</li>\n<li><p>注意触发器级联问题，防止一个触发动作引发一系列连锁反应（一个触发器的动作引发另一个触发器的动作）以致失控</p>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"两种完整性约束的对比\"><a href=\"#两种完整性约束的对比\" class=\"headerlink\" title=\"两种完整性约束的对比\"></a>两种完整性约束的对比</h3><ul>\n<li><p>非过程性完整性约束：种类和能力有限但易于理解；直接为系统所知；难以给出约束不满足时的相应动作</p>\n</li>\n<li><p>过程性完整性约束：给出了约束不满足时的相应动作；保证事物的一致性</p>\n</li>\n</ul>"},{"title":"数据库安全","abbrlink":65355,"date":"2022-06-27T14:51:26.000Z","_content":"\n# 四、数据库安全\n\n数据库安全性的定义：对数据库进行安全控制，保护数据库以防止==不合法的使用==（包括对数据库的查询和修改）所造成的数据泄露、更改或破坏。\n\n数据库系统的安全模型：层层设防\n\n<img src=\"https://s2.loli.net/2022/03/29/Rd34US7IDsHQFx6.png\" alt=\"image-20220329101709334\" style=\"zoom:67%;\" />\n\n## 1、用户标识与鉴别\n\n- 概念：一种用来判断用户身份是否属实的机制，是系统提供的**最外层安全保护措施**\n\n    > 标识（Identification）：身份声明。用户标识由用户名和用户标识号组成（用户标识号在系统整个生命周期内唯一）\n    >\n    > 鉴别（Authentication ）：检验身份声明的有效性\n\n- 用户身份鉴别的方法：\n\n    - 静态口令鉴别：口令一经设置不再改变，静态口令一般由用户自己设定。易于实现也易泄露，不能对抗穷举攻击等等。\n\n    - 动态口令鉴别：口令是动态变化的，一次一密。eg. 手机验证码\n\n    - 生物特征鉴别：通过每个用户所独有的生物特征进行认证的技术\n\n    - 智能卡鉴别：智能卡是一种不可复制的硬件，内置集成电路的芯片，具有硬件加密功能\n\n        可以考虑多种方法并举\n\n- 数据库系统用户认证\n\n    - 系统管理员通过创建用户帐号来管理用户对计算机系统资源的访问.给定==每一位用户一个唯一的标识符和口令==,操作系统通过它来判断用户的身份。\n    - DBA负责为DBMS用户建立用户帐号和口令\n    - 用户认证的位置和方法：一张有效用户标识符和相关口令清单\n    - 方式：通过操作系统/数据库/网络服务认证\n\n## 2、DBMS的存取控制子系统\n\n- 不同的用户有不同的权限，这由数据库的存取控制机制实现.      eg.DBA拥有所有权限\n\n- **所有权：**对象的创建者拥有对象,并能够分配对象的相应特权\n\n- **特权：**\n\n    ==一个策略 两种原则==\n\n    - **最小特权策略**：只有一个人工作需要的才是他应该知道的\n    - **“封闭系统”原则**：==默认拒绝==。虽然给予用户访问DBMS的权利，但当==访问特定数据库对象时需要显式的授权==，由DBA或对象的拥有者来执行这个授权过程\n    - **“开放系统”原则**：==默认允许==。与封闭系统原则正好相反，允许用户对数据库的所有对象都拥有访问权限，这时,访问控制可通过==显式地去除用户的特权==来实现。简单但不够安全\n\n- **授权控制/访问控制/存取控制：**\n\n    - 概念：授予一个主体权利或特权,使其能够实现对系统或者系统对象的合法访问\n\n    - 组成：定义用户权限、合法权限检查\n\n        <img src=\"https://s2.loli.net/2022/03/28/yQN8WExhAqHluCX.png\" alt=\"image-20220328184353188\" style=\"zoom:67%;\" />\n\n- ==存取控制的策略：==\n\n    - ==自主存取策略：==（Discretionary Access Control , DAC）\n\n        - 概念：是基于用户身份或所属工作组来进行访问控制的一种手段。用户**对于不同的数据对象有相应的存取权限**，而且用户还可以将其拥有的存取权限**转授**给其他用户。\n\n        - 用户分类与权限：\n\n            - 系统用户（或DBA）：拥有全部权限\n\n            - 数据对象的属主：是创建某个数据对象的用户表，拥有该对象的权限\n\n            - 一般用户：经过授权被允许进行特定操作的用户 \n\n            - 公共用户（PUBLIC）：全体用户，便于共享操作而设置\n\n            > SQL中提供CREATE USER 等语句管理用户\n\n        - 授权粒度（用户访问的数据对象的粒度）：数据库/表/字段。\n\n            > 授权粒度越细，授权子系统越灵活，但系统定义与检查权限的开销也越大\n\n        - ![image-20220328185545227](https://s2.loli.net/2022/03/28/v8HkOgAE6nYMCox.png)\n\n            > 谓词是计算结果为逻辑值（为：TRUE、FALSE、UNKNOWN）的逻辑表达式。\n            > 不直接支持存取谓词的系统中，通过视图可以间接地实现支持存取谓词的用户权限定义。\n\n        - 自主存取控制是与数据值有关的授权，灵活且易于实现，但由于数据本身并无安全性标志，可能会有无意泄漏问题\n\n    - ==强制存取策略== (Mandatory Access Control, MAC)\n\n        - 定义：是基于被访问对象的信任度进行权限控制的一种手段。每一个数据对象被标以一定的密级，每一个用户也被授予某一个级别的许可证。对于任意一个对象，只有具有合法许可证的用户才可以存取。**对数据本身进行密级标记，无论数据如何复制，标记与数据是一个不可分的整体。**\n\n        - 强制访问控制的实施由DBMS完成，但许可证与密级标记由专门的安全管理员设置\n\n        - 主体：系统中的活动实体，包含用户和用户的进程\n\n        - 客体：系统中的被动实体，被主体操纵\n\n        - 敏感度标记：主体的敏感度标记称为许可证级别；客体的敏感度标记称为密级。\n\n            > 仅当主体的许可证级别大于或等于客体的密级时，该主体才能读取相应的客体；仅当主体的许可证级别（小于或）等于客体的密级时，该主体才能写相应的客体。 **“下读上写”**\n            >\n            > <img src=\"https://s2.loli.net/2022/03/28/iWFbB3pIgTkR4GC.png\" alt=\"image-20220328190807758\" style=\"zoom:67%;\" />\n\n        - 比较严格和安全\n\n    - ==基于角色的存取控制== (RBAC)\n\n        - 定义：用户通过角色与权限进行关联。每一种角色对应一组相应的权限。一旦用户被分配了适当的角色后，该用户就拥有此角色的所有操作权限。 ==角色本质上是权限的集合== \n\n            <img src=\"https://s2.loli.net/2022/03/28/QPHZD64NiTeCOM5.png\" alt=\"image-20220328193107662\" style=\"zoom:67%;\" />\n\n        - 优点：简化用户的权限管理，减少系统的开销\n\n            > **SQL中提供CREAT ROLE等语句进行角色管理**\n\n## ==3、授权与回收==\n\n- ==授权：SQL中的GRANT语句==\n\n    - 作用：表(基本表或视图)的所有者授予一个或一类用户访问表的各种权利\n\n    - 局限性：不能根据数据内容进行授权\n\n    - 形式：\n\n        ```sql\n        GRANT {ALL PRIVILEGES | privilege[, privilege] ...} #多种权利\n        ON [TABLE]{〈tablename〉| 〈viewname〉} #一次针对一个对象\n        TO {PUBLIC |〈username〉[,〈username〉] ...} #多个用户，其中PUBLIC是公共用户\n        [WITH GRANT OPTION];\n        \n        #eg\n        GRANT SELECT, UPDATE(sno)\n        ON TABLE s_c\n        TO U1, U2;\n        ```\n\n        > 一些说明：\n        >\n        > - `privilege`包括`SELECT、DELETE、INSERT、UPDATE [columnname [, columnnane]…]、REFERENCES [columnname [, columnnane]…]、ALTER、INDEX等等`，对于视图只有`SELECT、DELETE、INSERT、UPDATE`\n        > - `WITH GRANT OPTION`用于实现转授，即被授权的用户还可以将权利授予其他用户，但不允许循环授权\n        > - **每条GRANT语句只能针对一个对象（表）**\n        > - 可同时向**多个用户**授予对同一对象的**多种权力**\n        > - 访问列/行的安全性可以通过视图来实现；在视图上授予更新权限时，视图必须是可更新的；表的所有者自动拥有表的所有权限,而且不能被取消\n\n    ---\n\n- ==回收：SQL中的REVOKE语句== ==GRANT的反操作==\n\n    - 作用：收回已授予给用户的特权\n\n    - 形式： \n\n        ```sql\n        #X/Open SQL的REVOKE语句的语法（基本SQL目前不支持{CASCADE | RESTRICT} 子句）\n        REVOKE [GRANT OPTION FOR]\n        {ALL PRIVILEGES | privilege[，privilege] ...}\n        ON [TABLE]{〈tablename〉| 〈viewname〉}\n        FROM {PUBLIC |〈username〉[，〈username〉] ...}\n        {CASCADE | RESTRICT};\n        \n        #eg\n        REVOKE INSERT\n        ON Staff\n        CASCADE\n        ```\n\n        > 一些说明：\n        >\n        > - `GRANT OPTION FOR`指撤销 允许转授 的这种特权\n        >\n        > - `ALL PRIVIEGES`指该用户被授予的对指定对象所拥有的所有特权\n        >\n        > - `CASCADE`的作用是删除与当前被撤消的权限有依赖关系的视图或删除依赖于`REFERENCES`权限的外键约束；如果有这样的依赖关系，`RESTRICT`将不允许执行`REVOKE`语句\n        >\n        > - 其他用户授予该用户的特权不受影响\n        >\n        >     <img src=\"https://s2.loli.net/2022/03/29/HAcK2Nrinv83DBR.png\" alt=\"image-20220329112258945\" style=\"zoom:67%;\" />\n\n## ==4、角色==\n\n参考链接：[MySQL角色(role)功能介绍 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/367873840)\n\n- 概念：==操作权限的集合==，eg.学生、老师。一个用户可以有不同的角色\n\n    <img src=\"https://s2.loli.net/2022/03/28/QPHZD64NiTeCOM5.png\" style=\"zoom:67%;\" />\n\n- 数据库预定义角色：指数据库建立时，系统自动创建的角色。如CONNECT（允许进入数据库）、RESOURCE（允许创建数据库对象）、DBA\n\n- 与角色相关的SQL语句\n\n    ```sql\n    #角色的创建\n    CREATE ROLE <角色名> \n    \n    #eg\n    CREATE ROLE R1;\n    ```\n\n    ```sql\n    #角色的删除\n    DROP ROLE <角色名> \n    ```\n\n    ```sql\n    #给角色授权，跟给普通用户的授权是一样的\n    GRANT <权限>[,<权限>]...\n    ON <对象类型>对象名   #一个对象\n    TO <角色>[,<角色>]...\n    \n    #eg\n    GRANT SELECT, UPDATE, INSERT \n    ON TABLE Student \n    TO R1;\n    ```\n\n    ```sql\n    #查看角色的授权\n    mysql> show grants for 'dev_role'@'%';\n    +-------------------------------------------+\n    | Grants for dev_role@%                     |\n    +-------------------------------------------+\n    | GRANT USAGE ON *.* TO `dev_role`@`%`      |\n    | GRANT SELECT ON `db1`.* TO `dev_role`@`%` |\n    +-------------------------------------------+\n    ```\n\n    ```sql\n    #确定当前会话中哪些角色处于活动状态\n    select CURRENT_ROLE();\n    ```\n\n    ```sql\n    # 使用 set default role 命令激活角色\n    mysql> SET DEFAULT ROLE ALL TO dev1;\n    Query OK, 0 rows affected (0.77 sec)\n    ```\n\n    ```sql\n    #将一个角色授予其他的角色或用户，授予者是角色的创建者或拥有在这个角色上的ADMIN OPTION\n    GRANT <角色1>[,<角色2>]…\n    TO <角色3>[,<用户1>]… \n    [WITH ADMIN OPTION]  #允许转授\n    \n    #eg\n    GRANT R1 \n    TO 王平,张明,赵玲;\n    ```\n\n    ```sql\n    #角色权限的收回，REVOKE的执行者是角色的创建者或者拥有在这个（些）角色上的ADMIN OPTION\n    #可以通过回收角色的权限来修改角色的权限\n    REVOKE <权限>[,<权限>]…\n    ON <对象类型> <对象名>\n    FROM <角色>[,<角色>]…\n    \n    #eg\n    REVOKE R1    #本质上，角色就是权限的集合\n    FROM 王平;\n    \n    REVOKE SELECT \n    ON TABLE Student\n    FROM R1；\n    ```\n\n    > 指定了WITH ADMIN OPTION则获得某种权限的角色或用户还可以把这种权限授予其他角色\n    >\n    > 一个角色的权限是指直接授予这个角色的全部权限加上其他角色授予这个角色的全部权限\n\n》查询用户权限：SELECT FROM USER …\n\n## 5、视图与权限\n\n- 把要保密的数据对无权存取这些数据的用户隐藏起来，对数据提供一定程度的安全保护\n\n- 进行存取权限控制时可以给不同用户定义不同的视图，把数据对象限制在一定范围内\n\n- 间接地实现支持存取谓词的用户权限定义\n\n    ```sql\n    #建立视图\n    CREATE VIEW CS_Student\n    AS \n    SELECT *\n    FROM Student\n    WHERE Sdept='CS';\n    \n    #在视图上进一步定义存取权限\n    GRANT SELECT\n    ON CS_Student\n    TO 王平;\n    \n    GRANT ALL PRIVILIGES\n    ON CS_Student\n    TO 张明;\n    ```\n\n## 6、审计\n\n- **概念：**把用户对数据库的**所有操作**自动记录下来放入**审计日志**中，DBA可以利用审计跟踪的信息，找出非法存取数据的人、时间和内容等。 \n\n    > 审计日志与恢复机制中的日志的区别：\n    >\n    > |                    | 审计日志     | 恢复日志       |\n    > | ------------------ | ------------ | -------------- |\n    > | **记录的内容**     | 所有操作     | 只记录更新操作 |\n    > | **记录的组织方式** | 按操作的对象 | 按时间顺序     |\n\n- **作用**：调查可疑的活动；监视并收集某类数据库活动的信息\n\n- **可选性**：DBA可以根据应用对安全性的要求，灵活地打开或关闭审计功能以及选择对哪些操作进行审计\n\n    > 审计很费时间和空间，主要用于安全性要求较高的部门\n\n- **审计事件**：服务器事件、系统权限（对系统拥有的结构或模式对象进行操作的审计）、语句事件、模式对象事件\n\n- **审计功能**：审计分析和报表功能、审计日志管理功能（审计日志必须先转储后删除；只允许审计员查阅和转储审计记录；…）、提供专门视图等等\n\n## 7、数据加密与统计数据库的安全\n\n- 数据加密\n\n    - 作用：通过将明文转换为密文来防止数据库中数据在存储和传输中失密\n    - 两种加密方法：替换、置换（更改明文顺序）\n- 统计数据库的安全性\n\n    - 统计数据库允许用户查询**聚集类型**的信息（例如合计、平均值等），但是不允许查询单个记录信息。\n    - 统计数据库中的安全性问题：可能存在着隐蔽的信息通道，使得可以从合法的查询中推导出不合法的信息。\n    - 解决办法：\n\n        - 规定任何查询至少涉及N个以上的记录\n        - 规定两个查询的相交数据项不能超过M个\n","source":"_posts/数据库安全.md","raw":"---\ntitle: 数据库安全\ntags:\n  - 数据库\ncategory:\n  - 数据库\nabbrlink: 65355\ndate: 2022-06-27 22:51:26\n---\n\n# 四、数据库安全\n\n数据库安全性的定义：对数据库进行安全控制，保护数据库以防止==不合法的使用==（包括对数据库的查询和修改）所造成的数据泄露、更改或破坏。\n\n数据库系统的安全模型：层层设防\n\n<img src=\"https://s2.loli.net/2022/03/29/Rd34US7IDsHQFx6.png\" alt=\"image-20220329101709334\" style=\"zoom:67%;\" />\n\n## 1、用户标识与鉴别\n\n- 概念：一种用来判断用户身份是否属实的机制，是系统提供的**最外层安全保护措施**\n\n    > 标识（Identification）：身份声明。用户标识由用户名和用户标识号组成（用户标识号在系统整个生命周期内唯一）\n    >\n    > 鉴别（Authentication ）：检验身份声明的有效性\n\n- 用户身份鉴别的方法：\n\n    - 静态口令鉴别：口令一经设置不再改变，静态口令一般由用户自己设定。易于实现也易泄露，不能对抗穷举攻击等等。\n\n    - 动态口令鉴别：口令是动态变化的，一次一密。eg. 手机验证码\n\n    - 生物特征鉴别：通过每个用户所独有的生物特征进行认证的技术\n\n    - 智能卡鉴别：智能卡是一种不可复制的硬件，内置集成电路的芯片，具有硬件加密功能\n\n        可以考虑多种方法并举\n\n- 数据库系统用户认证\n\n    - 系统管理员通过创建用户帐号来管理用户对计算机系统资源的访问.给定==每一位用户一个唯一的标识符和口令==,操作系统通过它来判断用户的身份。\n    - DBA负责为DBMS用户建立用户帐号和口令\n    - 用户认证的位置和方法：一张有效用户标识符和相关口令清单\n    - 方式：通过操作系统/数据库/网络服务认证\n\n## 2、DBMS的存取控制子系统\n\n- 不同的用户有不同的权限，这由数据库的存取控制机制实现.      eg.DBA拥有所有权限\n\n- **所有权：**对象的创建者拥有对象,并能够分配对象的相应特权\n\n- **特权：**\n\n    ==一个策略 两种原则==\n\n    - **最小特权策略**：只有一个人工作需要的才是他应该知道的\n    - **“封闭系统”原则**：==默认拒绝==。虽然给予用户访问DBMS的权利，但当==访问特定数据库对象时需要显式的授权==，由DBA或对象的拥有者来执行这个授权过程\n    - **“开放系统”原则**：==默认允许==。与封闭系统原则正好相反，允许用户对数据库的所有对象都拥有访问权限，这时,访问控制可通过==显式地去除用户的特权==来实现。简单但不够安全\n\n- **授权控制/访问控制/存取控制：**\n\n    - 概念：授予一个主体权利或特权,使其能够实现对系统或者系统对象的合法访问\n\n    - 组成：定义用户权限、合法权限检查\n\n        <img src=\"https://s2.loli.net/2022/03/28/yQN8WExhAqHluCX.png\" alt=\"image-20220328184353188\" style=\"zoom:67%;\" />\n\n- ==存取控制的策略：==\n\n    - ==自主存取策略：==（Discretionary Access Control , DAC）\n\n        - 概念：是基于用户身份或所属工作组来进行访问控制的一种手段。用户**对于不同的数据对象有相应的存取权限**，而且用户还可以将其拥有的存取权限**转授**给其他用户。\n\n        - 用户分类与权限：\n\n            - 系统用户（或DBA）：拥有全部权限\n\n            - 数据对象的属主：是创建某个数据对象的用户表，拥有该对象的权限\n\n            - 一般用户：经过授权被允许进行特定操作的用户 \n\n            - 公共用户（PUBLIC）：全体用户，便于共享操作而设置\n\n            > SQL中提供CREATE USER 等语句管理用户\n\n        - 授权粒度（用户访问的数据对象的粒度）：数据库/表/字段。\n\n            > 授权粒度越细，授权子系统越灵活，但系统定义与检查权限的开销也越大\n\n        - ![image-20220328185545227](https://s2.loli.net/2022/03/28/v8HkOgAE6nYMCox.png)\n\n            > 谓词是计算结果为逻辑值（为：TRUE、FALSE、UNKNOWN）的逻辑表达式。\n            > 不直接支持存取谓词的系统中，通过视图可以间接地实现支持存取谓词的用户权限定义。\n\n        - 自主存取控制是与数据值有关的授权，灵活且易于实现，但由于数据本身并无安全性标志，可能会有无意泄漏问题\n\n    - ==强制存取策略== (Mandatory Access Control, MAC)\n\n        - 定义：是基于被访问对象的信任度进行权限控制的一种手段。每一个数据对象被标以一定的密级，每一个用户也被授予某一个级别的许可证。对于任意一个对象，只有具有合法许可证的用户才可以存取。**对数据本身进行密级标记，无论数据如何复制，标记与数据是一个不可分的整体。**\n\n        - 强制访问控制的实施由DBMS完成，但许可证与密级标记由专门的安全管理员设置\n\n        - 主体：系统中的活动实体，包含用户和用户的进程\n\n        - 客体：系统中的被动实体，被主体操纵\n\n        - 敏感度标记：主体的敏感度标记称为许可证级别；客体的敏感度标记称为密级。\n\n            > 仅当主体的许可证级别大于或等于客体的密级时，该主体才能读取相应的客体；仅当主体的许可证级别（小于或）等于客体的密级时，该主体才能写相应的客体。 **“下读上写”**\n            >\n            > <img src=\"https://s2.loli.net/2022/03/28/iWFbB3pIgTkR4GC.png\" alt=\"image-20220328190807758\" style=\"zoom:67%;\" />\n\n        - 比较严格和安全\n\n    - ==基于角色的存取控制== (RBAC)\n\n        - 定义：用户通过角色与权限进行关联。每一种角色对应一组相应的权限。一旦用户被分配了适当的角色后，该用户就拥有此角色的所有操作权限。 ==角色本质上是权限的集合== \n\n            <img src=\"https://s2.loli.net/2022/03/28/QPHZD64NiTeCOM5.png\" alt=\"image-20220328193107662\" style=\"zoom:67%;\" />\n\n        - 优点：简化用户的权限管理，减少系统的开销\n\n            > **SQL中提供CREAT ROLE等语句进行角色管理**\n\n## ==3、授权与回收==\n\n- ==授权：SQL中的GRANT语句==\n\n    - 作用：表(基本表或视图)的所有者授予一个或一类用户访问表的各种权利\n\n    - 局限性：不能根据数据内容进行授权\n\n    - 形式：\n\n        ```sql\n        GRANT {ALL PRIVILEGES | privilege[, privilege] ...} #多种权利\n        ON [TABLE]{〈tablename〉| 〈viewname〉} #一次针对一个对象\n        TO {PUBLIC |〈username〉[,〈username〉] ...} #多个用户，其中PUBLIC是公共用户\n        [WITH GRANT OPTION];\n        \n        #eg\n        GRANT SELECT, UPDATE(sno)\n        ON TABLE s_c\n        TO U1, U2;\n        ```\n\n        > 一些说明：\n        >\n        > - `privilege`包括`SELECT、DELETE、INSERT、UPDATE [columnname [, columnnane]…]、REFERENCES [columnname [, columnnane]…]、ALTER、INDEX等等`，对于视图只有`SELECT、DELETE、INSERT、UPDATE`\n        > - `WITH GRANT OPTION`用于实现转授，即被授权的用户还可以将权利授予其他用户，但不允许循环授权\n        > - **每条GRANT语句只能针对一个对象（表）**\n        > - 可同时向**多个用户**授予对同一对象的**多种权力**\n        > - 访问列/行的安全性可以通过视图来实现；在视图上授予更新权限时，视图必须是可更新的；表的所有者自动拥有表的所有权限,而且不能被取消\n\n    ---\n\n- ==回收：SQL中的REVOKE语句== ==GRANT的反操作==\n\n    - 作用：收回已授予给用户的特权\n\n    - 形式： \n\n        ```sql\n        #X/Open SQL的REVOKE语句的语法（基本SQL目前不支持{CASCADE | RESTRICT} 子句）\n        REVOKE [GRANT OPTION FOR]\n        {ALL PRIVILEGES | privilege[，privilege] ...}\n        ON [TABLE]{〈tablename〉| 〈viewname〉}\n        FROM {PUBLIC |〈username〉[，〈username〉] ...}\n        {CASCADE | RESTRICT};\n        \n        #eg\n        REVOKE INSERT\n        ON Staff\n        CASCADE\n        ```\n\n        > 一些说明：\n        >\n        > - `GRANT OPTION FOR`指撤销 允许转授 的这种特权\n        >\n        > - `ALL PRIVIEGES`指该用户被授予的对指定对象所拥有的所有特权\n        >\n        > - `CASCADE`的作用是删除与当前被撤消的权限有依赖关系的视图或删除依赖于`REFERENCES`权限的外键约束；如果有这样的依赖关系，`RESTRICT`将不允许执行`REVOKE`语句\n        >\n        > - 其他用户授予该用户的特权不受影响\n        >\n        >     <img src=\"https://s2.loli.net/2022/03/29/HAcK2Nrinv83DBR.png\" alt=\"image-20220329112258945\" style=\"zoom:67%;\" />\n\n## ==4、角色==\n\n参考链接：[MySQL角色(role)功能介绍 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/367873840)\n\n- 概念：==操作权限的集合==，eg.学生、老师。一个用户可以有不同的角色\n\n    <img src=\"https://s2.loli.net/2022/03/28/QPHZD64NiTeCOM5.png\" style=\"zoom:67%;\" />\n\n- 数据库预定义角色：指数据库建立时，系统自动创建的角色。如CONNECT（允许进入数据库）、RESOURCE（允许创建数据库对象）、DBA\n\n- 与角色相关的SQL语句\n\n    ```sql\n    #角色的创建\n    CREATE ROLE <角色名> \n    \n    #eg\n    CREATE ROLE R1;\n    ```\n\n    ```sql\n    #角色的删除\n    DROP ROLE <角色名> \n    ```\n\n    ```sql\n    #给角色授权，跟给普通用户的授权是一样的\n    GRANT <权限>[,<权限>]...\n    ON <对象类型>对象名   #一个对象\n    TO <角色>[,<角色>]...\n    \n    #eg\n    GRANT SELECT, UPDATE, INSERT \n    ON TABLE Student \n    TO R1;\n    ```\n\n    ```sql\n    #查看角色的授权\n    mysql> show grants for 'dev_role'@'%';\n    +-------------------------------------------+\n    | Grants for dev_role@%                     |\n    +-------------------------------------------+\n    | GRANT USAGE ON *.* TO `dev_role`@`%`      |\n    | GRANT SELECT ON `db1`.* TO `dev_role`@`%` |\n    +-------------------------------------------+\n    ```\n\n    ```sql\n    #确定当前会话中哪些角色处于活动状态\n    select CURRENT_ROLE();\n    ```\n\n    ```sql\n    # 使用 set default role 命令激活角色\n    mysql> SET DEFAULT ROLE ALL TO dev1;\n    Query OK, 0 rows affected (0.77 sec)\n    ```\n\n    ```sql\n    #将一个角色授予其他的角色或用户，授予者是角色的创建者或拥有在这个角色上的ADMIN OPTION\n    GRANT <角色1>[,<角色2>]…\n    TO <角色3>[,<用户1>]… \n    [WITH ADMIN OPTION]  #允许转授\n    \n    #eg\n    GRANT R1 \n    TO 王平,张明,赵玲;\n    ```\n\n    ```sql\n    #角色权限的收回，REVOKE的执行者是角色的创建者或者拥有在这个（些）角色上的ADMIN OPTION\n    #可以通过回收角色的权限来修改角色的权限\n    REVOKE <权限>[,<权限>]…\n    ON <对象类型> <对象名>\n    FROM <角色>[,<角色>]…\n    \n    #eg\n    REVOKE R1    #本质上，角色就是权限的集合\n    FROM 王平;\n    \n    REVOKE SELECT \n    ON TABLE Student\n    FROM R1；\n    ```\n\n    > 指定了WITH ADMIN OPTION则获得某种权限的角色或用户还可以把这种权限授予其他角色\n    >\n    > 一个角色的权限是指直接授予这个角色的全部权限加上其他角色授予这个角色的全部权限\n\n》查询用户权限：SELECT FROM USER …\n\n## 5、视图与权限\n\n- 把要保密的数据对无权存取这些数据的用户隐藏起来，对数据提供一定程度的安全保护\n\n- 进行存取权限控制时可以给不同用户定义不同的视图，把数据对象限制在一定范围内\n\n- 间接地实现支持存取谓词的用户权限定义\n\n    ```sql\n    #建立视图\n    CREATE VIEW CS_Student\n    AS \n    SELECT *\n    FROM Student\n    WHERE Sdept='CS';\n    \n    #在视图上进一步定义存取权限\n    GRANT SELECT\n    ON CS_Student\n    TO 王平;\n    \n    GRANT ALL PRIVILIGES\n    ON CS_Student\n    TO 张明;\n    ```\n\n## 6、审计\n\n- **概念：**把用户对数据库的**所有操作**自动记录下来放入**审计日志**中，DBA可以利用审计跟踪的信息，找出非法存取数据的人、时间和内容等。 \n\n    > 审计日志与恢复机制中的日志的区别：\n    >\n    > |                    | 审计日志     | 恢复日志       |\n    > | ------------------ | ------------ | -------------- |\n    > | **记录的内容**     | 所有操作     | 只记录更新操作 |\n    > | **记录的组织方式** | 按操作的对象 | 按时间顺序     |\n\n- **作用**：调查可疑的活动；监视并收集某类数据库活动的信息\n\n- **可选性**：DBA可以根据应用对安全性的要求，灵活地打开或关闭审计功能以及选择对哪些操作进行审计\n\n    > 审计很费时间和空间，主要用于安全性要求较高的部门\n\n- **审计事件**：服务器事件、系统权限（对系统拥有的结构或模式对象进行操作的审计）、语句事件、模式对象事件\n\n- **审计功能**：审计分析和报表功能、审计日志管理功能（审计日志必须先转储后删除；只允许审计员查阅和转储审计记录；…）、提供专门视图等等\n\n## 7、数据加密与统计数据库的安全\n\n- 数据加密\n\n    - 作用：通过将明文转换为密文来防止数据库中数据在存储和传输中失密\n    - 两种加密方法：替换、置换（更改明文顺序）\n- 统计数据库的安全性\n\n    - 统计数据库允许用户查询**聚集类型**的信息（例如合计、平均值等），但是不允许查询单个记录信息。\n    - 统计数据库中的安全性问题：可能存在着隐蔽的信息通道，使得可以从合法的查询中推导出不合法的信息。\n    - 解决办法：\n\n        - 规定任何查询至少涉及N个以上的记录\n        - 规定两个查询的相交数据项不能超过M个\n","slug":"数据库安全","published":1,"updated":"2022-06-27T15:12:30.880Z","_id":"cl4wvpgsd0010ugsk0ckifra1","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"四、数据库安全\"><a href=\"#四、数据库安全\" class=\"headerlink\" title=\"四、数据库安全\"></a>四、数据库安全</h1><p>数据库安全性的定义：对数据库进行安全控制，保护数据库以防止&#x3D;&#x3D;不合法的使用&#x3D;&#x3D;（包括对数据库的查询和修改）所造成的数据泄露、更改或破坏。</p>\n<p>数据库系统的安全模型：层层设防</p>\n<img data-src=\"https://s2.loli.net/2022/03/29/Rd34US7IDsHQFx6.png\" alt=\"image-20220329101709334\" style=\"zoom:67%;\" />\n\n<h2 id=\"1、用户标识与鉴别\"><a href=\"#1、用户标识与鉴别\" class=\"headerlink\" title=\"1、用户标识与鉴别\"></a>1、用户标识与鉴别</h2><ul>\n<li><p>概念：一种用来判断用户身份是否属实的机制，是系统提供的<strong>最外层安全保护措施</strong></p>\n<blockquote>\n<p>标识（Identification）：身份声明。用户标识由用户名和用户标识号组成（用户标识号在系统整个生命周期内唯一）</p>\n<p>鉴别（Authentication ）：检验身份声明的有效性</p>\n</blockquote>\n</li>\n<li><p>用户身份鉴别的方法：</p>\n<ul>\n<li><p>静态口令鉴别：口令一经设置不再改变，静态口令一般由用户自己设定。易于实现也易泄露，不能对抗穷举攻击等等。</p>\n</li>\n<li><p>动态口令鉴别：口令是动态变化的，一次一密。eg. 手机验证码</p>\n</li>\n<li><p>生物特征鉴别：通过每个用户所独有的生物特征进行认证的技术</p>\n</li>\n<li><p>智能卡鉴别：智能卡是一种不可复制的硬件，内置集成电路的芯片，具有硬件加密功能</p>\n<p>  可以考虑多种方法并举</p>\n</li>\n</ul>\n</li>\n<li><p>数据库系统用户认证</p>\n<ul>\n<li>系统管理员通过创建用户帐号来管理用户对计算机系统资源的访问.给定&#x3D;&#x3D;每一位用户一个唯一的标识符和口令&#x3D;&#x3D;,操作系统通过它来判断用户的身份。</li>\n<li>DBA负责为DBMS用户建立用户帐号和口令</li>\n<li>用户认证的位置和方法：一张有效用户标识符和相关口令清单</li>\n<li>方式：通过操作系统&#x2F;数据库&#x2F;网络服务认证</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2、DBMS的存取控制子系统\"><a href=\"#2、DBMS的存取控制子系统\" class=\"headerlink\" title=\"2、DBMS的存取控制子系统\"></a>2、DBMS的存取控制子系统</h2><ul>\n<li><p>不同的用户有不同的权限，这由数据库的存取控制机制实现.      eg.DBA拥有所有权限</p>\n</li>\n<li><p><strong>所有权：</strong>对象的创建者拥有对象,并能够分配对象的相应特权</p>\n</li>\n<li><p><strong>特权：</strong></p>\n<p>  &#x3D;&#x3D;一个策略 两种原则&#x3D;&#x3D;</p>\n<ul>\n<li><strong>最小特权策略</strong>：只有一个人工作需要的才是他应该知道的</li>\n<li><strong>“封闭系统”原则</strong>：&#x3D;&#x3D;默认拒绝&#x3D;&#x3D;。虽然给予用户访问DBMS的权利，但当&#x3D;&#x3D;访问特定数据库对象时需要显式的授权&#x3D;&#x3D;，由DBA或对象的拥有者来执行这个授权过程</li>\n<li><strong>“开放系统”原则</strong>：&#x3D;&#x3D;默认允许&#x3D;&#x3D;。与封闭系统原则正好相反，允许用户对数据库的所有对象都拥有访问权限，这时,访问控制可通过&#x3D;&#x3D;显式地去除用户的特权&#x3D;&#x3D;来实现。简单但不够安全</li>\n</ul>\n</li>\n<li><p><strong>授权控制&#x2F;访问控制&#x2F;存取控制：</strong></p>\n<ul>\n<li><p>概念：授予一个主体权利或特权,使其能够实现对系统或者系统对象的合法访问</p>\n</li>\n<li><p>组成：定义用户权限、合法权限检查</p>\n  <img data-src=\"https://s2.loli.net/2022/03/28/yQN8WExhAqHluCX.png\" alt=\"image-20220328184353188\" style=\"zoom:67%;\" /></li>\n</ul>\n</li>\n<li><p>&#x3D;&#x3D;存取控制的策略：&#x3D;&#x3D;</p>\n<ul>\n<li><p>&#x3D;&#x3D;自主存取策略：&#x3D;&#x3D;（Discretionary Access Control , DAC）</p>\n<ul>\n<li><p>概念：是基于用户身份或所属工作组来进行访问控制的一种手段。用户<strong>对于不同的数据对象有相应的存取权限</strong>，而且用户还可以将其拥有的存取权限<strong>转授</strong>给其他用户。</p>\n</li>\n<li><p>用户分类与权限：</p>\n<ul>\n<li><p>系统用户（或DBA）：拥有全部权限</p>\n</li>\n<li><p>数据对象的属主：是创建某个数据对象的用户表，拥有该对象的权限</p>\n</li>\n<li><p>一般用户：经过授权被允许进行特定操作的用户 </p>\n</li>\n<li><p>公共用户（PUBLIC）：全体用户，便于共享操作而设置</p>\n</li>\n</ul>\n<blockquote>\n<p>SQL中提供CREATE USER 等语句管理用户</p>\n</blockquote>\n</li>\n<li><p>授权粒度（用户访问的数据对象的粒度）：数据库&#x2F;表&#x2F;字段。</p>\n<blockquote>\n<p>授权粒度越细，授权子系统越灵活，但系统定义与检查权限的开销也越大</p>\n</blockquote>\n</li>\n<li><p><img data-src=\"https://s2.loli.net/2022/03/28/v8HkOgAE6nYMCox.png\" alt=\"image-20220328185545227\"></p>\n<blockquote>\n<p>谓词是计算结果为逻辑值（为：TRUE、FALSE、UNKNOWN）的逻辑表达式。<br>不直接支持存取谓词的系统中，通过视图可以间接地实现支持存取谓词的用户权限定义。</p>\n</blockquote>\n</li>\n<li><p>自主存取控制是与数据值有关的授权，灵活且易于实现，但由于数据本身并无安全性标志，可能会有无意泄漏问题</p>\n</li>\n</ul>\n</li>\n<li><p>&#x3D;&#x3D;强制存取策略&#x3D;&#x3D; (Mandatory Access Control, MAC)</p>\n<ul>\n<li><p>定义：是基于被访问对象的信任度进行权限控制的一种手段。每一个数据对象被标以一定的密级，每一个用户也被授予某一个级别的许可证。对于任意一个对象，只有具有合法许可证的用户才可以存取。<strong>对数据本身进行密级标记，无论数据如何复制，标记与数据是一个不可分的整体。</strong></p>\n</li>\n<li><p>强制访问控制的实施由DBMS完成，但许可证与密级标记由专门的安全管理员设置</p>\n</li>\n<li><p>主体：系统中的活动实体，包含用户和用户的进程</p>\n</li>\n<li><p>客体：系统中的被动实体，被主体操纵</p>\n</li>\n<li><p>敏感度标记：主体的敏感度标记称为许可证级别；客体的敏感度标记称为密级。</p>\n<blockquote>\n<p>仅当主体的许可证级别大于或等于客体的密级时，该主体才能读取相应的客体；仅当主体的许可证级别（小于或）等于客体的密级时，该主体才能写相应的客体。 <strong>“下读上写”</strong></p>\n<img data-src=\"https://s2.loli.net/2022/03/28/iWFbB3pIgTkR4GC.png\" alt=\"image-20220328190807758\" style=\"zoom:67%;\" />\n</blockquote>\n</li>\n<li><p>比较严格和安全</p>\n</li>\n</ul>\n</li>\n<li><p>&#x3D;&#x3D;基于角色的存取控制&#x3D;&#x3D; (RBAC)</p>\n<ul>\n<li><p>定义：用户通过角色与权限进行关联。每一种角色对应一组相应的权限。一旦用户被分配了适当的角色后，该用户就拥有此角色的所有操作权限。 &#x3D;&#x3D;角色本质上是权限的集合&#x3D;&#x3D; </p>\n  <img data-src=\"https://s2.loli.net/2022/03/28/QPHZD64NiTeCOM5.png\" alt=\"image-20220328193107662\" style=\"zoom:67%;\" />\n</li>\n<li><p>优点：简化用户的权限管理，减少系统的开销</p>\n<blockquote>\n<p><strong>SQL中提供CREAT ROLE等语句进行角色管理</strong></p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"x3D-x3D-3、授权与回收-x3D-x3D\"><a href=\"#x3D-x3D-3、授权与回收-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;3、授权与回收&#x3D;&#x3D;\"></a>&#x3D;&#x3D;3、授权与回收&#x3D;&#x3D;</h2><ul>\n<li><p>&#x3D;&#x3D;授权：SQL中的GRANT语句&#x3D;&#x3D;</p>\n<ul>\n<li><p>作用：表(基本表或视图)的所有者授予一个或一类用户访问表的各种权利</p>\n</li>\n<li><p>局限性：不能根据数据内容进行授权</p>\n</li>\n<li><p>形式：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GRANT</span> &#123;<span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"operator\">|</span> privilege[, privilege] ...&#125; #多种权利</span><br><span class=\"line\"><span class=\"keyword\">ON</span> [<span class=\"keyword\">TABLE</span>]&#123;〈tablename〉<span class=\"operator\">|</span> 〈viewname〉&#125; #一次针对一个对象</span><br><span class=\"line\"><span class=\"keyword\">TO</span> &#123;PUBLIC <span class=\"operator\">|</span>〈username〉[,〈username〉] ...&#125; #多个用户，其中PUBLIC是公共用户</span><br><span class=\"line\">[<span class=\"keyword\">WITH</span> <span class=\"keyword\">GRANT</span> OPTION];</span><br><span class=\"line\"></span><br><span class=\"line\">#eg</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">SELECT</span>, <span class=\"keyword\">UPDATE</span>(sno)</span><br><span class=\"line\"><span class=\"keyword\">ON</span> <span class=\"keyword\">TABLE</span> s_c</span><br><span class=\"line\"><span class=\"keyword\">TO</span> U1, U2;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>一些说明：</p>\n<ul>\n<li><code>privilege</code>包括<code>SELECT、DELETE、INSERT、UPDATE [columnname [, columnnane]…]、REFERENCES [columnname [, columnnane]…]、ALTER、INDEX等等</code>，对于视图只有<code>SELECT、DELETE、INSERT、UPDATE</code></li>\n<li><code>WITH GRANT OPTION</code>用于实现转授，即被授权的用户还可以将权利授予其他用户，但不允许循环授权</li>\n<li><strong>每条GRANT语句只能针对一个对象（表）</strong></li>\n<li>可同时向<strong>多个用户</strong>授予对同一对象的<strong>多种权力</strong></li>\n<li>访问列&#x2F;行的安全性可以通过视图来实现；在视图上授予更新权限时，视图必须是可更新的；表的所有者自动拥有表的所有权限,而且不能被取消</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<hr>\n</li>\n<li><p>&#x3D;&#x3D;回收：SQL中的REVOKE语句&#x3D;&#x3D; &#x3D;&#x3D;GRANT的反操作&#x3D;&#x3D;</p>\n<ul>\n<li><p>作用：收回已授予给用户的特权</p>\n</li>\n<li><p>形式： </p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#X<span class=\"operator\">/</span><span class=\"keyword\">Open</span> <span class=\"keyword\">SQL</span>的<span class=\"keyword\">REVOKE</span>语句的语法（基本<span class=\"keyword\">SQL</span>目前不支持&#123;CASCADE <span class=\"operator\">|</span> RESTRICT&#125; 子句）</span><br><span class=\"line\"><span class=\"keyword\">REVOKE</span> [<span class=\"keyword\">GRANT</span> OPTION <span class=\"keyword\">FOR</span>]</span><br><span class=\"line\">&#123;<span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"operator\">|</span> privilege[，privilege] ...&#125;</span><br><span class=\"line\"><span class=\"keyword\">ON</span> [<span class=\"keyword\">TABLE</span>]&#123;〈tablename〉<span class=\"operator\">|</span> 〈viewname〉&#125;</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> &#123;PUBLIC <span class=\"operator\">|</span>〈username〉[，〈username〉] ...&#125;</span><br><span class=\"line\">&#123;CASCADE <span class=\"operator\">|</span> RESTRICT&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">#eg</span><br><span class=\"line\"><span class=\"keyword\">REVOKE</span> <span class=\"keyword\">INSERT</span></span><br><span class=\"line\"><span class=\"keyword\">ON</span> Staff</span><br><span class=\"line\">CASCADE</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>一些说明：</p>\n<ul>\n<li><p><code>GRANT OPTION FOR</code>指撤销 允许转授 的这种特权</p>\n</li>\n<li><p><code>ALL PRIVIEGES</code>指该用户被授予的对指定对象所拥有的所有特权</p>\n</li>\n<li><p><code>CASCADE</code>的作用是删除与当前被撤消的权限有依赖关系的视图或删除依赖于<code>REFERENCES</code>权限的外键约束；如果有这样的依赖关系，<code>RESTRICT</code>将不允许执行<code>REVOKE</code>语句</p>\n</li>\n<li><p>其他用户授予该用户的特权不受影响</p>\n  <img data-src=\"https://s2.loli.net/2022/03/29/HAcK2Nrinv83DBR.png\" alt=\"image-20220329112258945\" style=\"zoom:67%;\" /></li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"x3D-x3D-4、角色-x3D-x3D\"><a href=\"#x3D-x3D-4、角色-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;4、角色&#x3D;&#x3D;\"></a>&#x3D;&#x3D;4、角色&#x3D;&#x3D;</h2><p>参考链接：<a href=\"https://zhuanlan.zhihu.com/p/367873840\">MySQL角色(role)功能介绍 - 知乎 (zhihu.com)</a></p>\n<ul>\n<li><p>概念：&#x3D;&#x3D;操作权限的集合&#x3D;&#x3D;，eg.学生、老师。一个用户可以有不同的角色</p>\n  <img data-src=\"https://s2.loli.net/2022/03/28/QPHZD64NiTeCOM5.png\" style=\"zoom:67%;\" />\n</li>\n<li><p>数据库预定义角色：指数据库建立时，系统自动创建的角色。如CONNECT（允许进入数据库）、RESOURCE（允许创建数据库对象）、DBA</p>\n</li>\n<li><p>与角色相关的SQL语句</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#角色的创建</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> ROLE <span class=\"operator\">&lt;</span>角色名<span class=\"operator\">&gt;</span> </span><br><span class=\"line\"></span><br><span class=\"line\">#eg</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> ROLE R1;</span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#角色的删除</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> ROLE <span class=\"operator\">&lt;</span>角色名<span class=\"operator\">&gt;</span> </span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#给角色授权，跟给普通用户的授权是一样的</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"operator\">&lt;</span>权限<span class=\"operator\">&gt;</span>[,<span class=\"operator\">&lt;</span>权限<span class=\"operator\">&gt;</span>]...</span><br><span class=\"line\"><span class=\"keyword\">ON</span> <span class=\"operator\">&lt;</span>对象类型<span class=\"operator\">&gt;</span>对象名   #一个对象</span><br><span class=\"line\"><span class=\"keyword\">TO</span> <span class=\"operator\">&lt;</span>角色<span class=\"operator\">&gt;</span>[,<span class=\"operator\">&lt;</span>角色<span class=\"operator\">&gt;</span>]...</span><br><span class=\"line\"></span><br><span class=\"line\">#eg</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">SELECT</span>, <span class=\"keyword\">UPDATE</span>, <span class=\"keyword\">INSERT</span> </span><br><span class=\"line\"><span class=\"keyword\">ON</span> <span class=\"keyword\">TABLE</span> Student </span><br><span class=\"line\"><span class=\"keyword\">TO</span> R1;</span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查看角色的授权</span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">show</span> grants <span class=\"keyword\">for</span> <span class=\"string\">&#x27;dev_role&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span>;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">-------------------------------------------+</span></span><br><span class=\"line\"><span class=\"operator\">|</span> Grants <span class=\"keyword\">for</span> dev_role@<span class=\"operator\">%</span>                     <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">-------------------------------------------+</span></span><br><span class=\"line\"><span class=\"operator\">|</span> <span class=\"keyword\">GRANT</span> USAGE <span class=\"keyword\">ON</span> <span class=\"operator\">*</span>.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> `dev_role`@`<span class=\"operator\">%</span>`      <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">|</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">SELECT</span> <span class=\"keyword\">ON</span> `db1`.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> `dev_role`@`<span class=\"operator\">%</span>` <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">-------------------------------------------+</span></span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#确定当前会话中哪些角色处于活动状态</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"built_in\">CURRENT_ROLE</span>();</span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用 <span class=\"keyword\">set</span> <span class=\"keyword\">default</span> role 命令激活角色</span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">SET</span> <span class=\"keyword\">DEFAULT</span> ROLE <span class=\"keyword\">ALL</span> <span class=\"keyword\">TO</span> dev1;</span><br><span class=\"line\">Query OK, <span class=\"number\">0</span> <span class=\"keyword\">rows</span> affected (<span class=\"number\">0.77</span> sec)</span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#将一个角色授予其他的角色或用户，授予者是角色的创建者或拥有在这个角色上的ADMIN OPTION</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"operator\">&lt;</span>角色<span class=\"number\">1</span><span class=\"operator\">&gt;</span>[,<span class=\"operator\">&lt;</span>角色<span class=\"number\">2</span><span class=\"operator\">&gt;</span>]…</span><br><span class=\"line\"><span class=\"keyword\">TO</span> <span class=\"operator\">&lt;</span>角色<span class=\"number\">3</span><span class=\"operator\">&gt;</span>[,<span class=\"operator\">&lt;</span>用户<span class=\"number\">1</span><span class=\"operator\">&gt;</span>]… </span><br><span class=\"line\">[<span class=\"keyword\">WITH</span> ADMIN OPTION]  #允许转授</span><br><span class=\"line\"></span><br><span class=\"line\">#eg</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> R1 </span><br><span class=\"line\"><span class=\"keyword\">TO</span> 王平,张明,赵玲;</span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#角色权限的收回，<span class=\"keyword\">REVOKE</span>的执行者是角色的创建者或者拥有在这个（些）角色上的ADMIN OPTION</span><br><span class=\"line\">#可以通过回收角色的权限来修改角色的权限</span><br><span class=\"line\"><span class=\"keyword\">REVOKE</span> <span class=\"operator\">&lt;</span>权限<span class=\"operator\">&gt;</span>[,<span class=\"operator\">&lt;</span>权限<span class=\"operator\">&gt;</span>]…</span><br><span class=\"line\"><span class=\"keyword\">ON</span> <span class=\"operator\">&lt;</span>对象类型<span class=\"operator\">&gt;</span> <span class=\"operator\">&lt;</span>对象名<span class=\"operator\">&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> <span class=\"operator\">&lt;</span>角色<span class=\"operator\">&gt;</span>[,<span class=\"operator\">&lt;</span>角色<span class=\"operator\">&gt;</span>]…</span><br><span class=\"line\"></span><br><span class=\"line\">#eg</span><br><span class=\"line\"><span class=\"keyword\">REVOKE</span> R1    #本质上，角色就是权限的集合</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> 王平;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">REVOKE</span> <span class=\"keyword\">SELECT</span> </span><br><span class=\"line\"><span class=\"keyword\">ON</span> <span class=\"keyword\">TABLE</span> Student</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> R1；</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>指定了WITH ADMIN OPTION则获得某种权限的角色或用户还可以把这种权限授予其他角色</p>\n<p>一个角色的权限是指直接授予这个角色的全部权限加上其他角色授予这个角色的全部权限</p>\n</blockquote>\n</li>\n</ul>\n<p>》查询用户权限：SELECT FROM USER …</p>\n<h2 id=\"5、视图与权限\"><a href=\"#5、视图与权限\" class=\"headerlink\" title=\"5、视图与权限\"></a>5、视图与权限</h2><ul>\n<li><p>把要保密的数据对无权存取这些数据的用户隐藏起来，对数据提供一定程度的安全保护</p>\n</li>\n<li><p>进行存取权限控制时可以给不同用户定义不同的视图，把数据对象限制在一定范围内</p>\n</li>\n<li><p>间接地实现支持存取谓词的用户权限定义</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#建立视图</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span> CS_Student</span><br><span class=\"line\"><span class=\"keyword\">AS</span> </span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Student</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> Sdept<span class=\"operator\">=</span><span class=\"string\">&#x27;CS&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">#在视图上进一步定义存取权限</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">SELECT</span></span><br><span class=\"line\"><span class=\"keyword\">ON</span> CS_Student</span><br><span class=\"line\"><span class=\"keyword\">TO</span> 王平;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILIGES</span><br><span class=\"line\"><span class=\"keyword\">ON</span> CS_Student</span><br><span class=\"line\"><span class=\"keyword\">TO</span> 张明;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"6、审计\"><a href=\"#6、审计\" class=\"headerlink\" title=\"6、审计\"></a>6、审计</h2><ul>\n<li><p><strong>概念：</strong>把用户对数据库的<strong>所有操作</strong>自动记录下来放入<strong>审计日志</strong>中，DBA可以利用审计跟踪的信息，找出非法存取数据的人、时间和内容等。 </p>\n<blockquote>\n<p>审计日志与恢复机制中的日志的区别：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>审计日志</th>\n<th>恢复日志</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>记录的内容</strong></td>\n<td>所有操作</td>\n<td>只记录更新操作</td>\n</tr>\n<tr>\n<td><strong>记录的组织方式</strong></td>\n<td>按操作的对象</td>\n<td>按时间顺序</td>\n</tr>\n</tbody></table>\n</blockquote>\n</li>\n<li><p><strong>作用</strong>：调查可疑的活动；监视并收集某类数据库活动的信息</p>\n</li>\n<li><p><strong>可选性</strong>：DBA可以根据应用对安全性的要求，灵活地打开或关闭审计功能以及选择对哪些操作进行审计</p>\n<blockquote>\n<p>审计很费时间和空间，主要用于安全性要求较高的部门</p>\n</blockquote>\n</li>\n<li><p><strong>审计事件</strong>：服务器事件、系统权限（对系统拥有的结构或模式对象进行操作的审计）、语句事件、模式对象事件</p>\n</li>\n<li><p><strong>审计功能</strong>：审计分析和报表功能、审计日志管理功能（审计日志必须先转储后删除；只允许审计员查阅和转储审计记录；…）、提供专门视图等等</p>\n</li>\n</ul>\n<h2 id=\"7、数据加密与统计数据库的安全\"><a href=\"#7、数据加密与统计数据库的安全\" class=\"headerlink\" title=\"7、数据加密与统计数据库的安全\"></a>7、数据加密与统计数据库的安全</h2><ul>\n<li><p>数据加密</p>\n<ul>\n<li>作用：通过将明文转换为密文来防止数据库中数据在存储和传输中失密</li>\n<li>两种加密方法：替换、置换（更改明文顺序）</li>\n</ul>\n</li>\n<li><p>统计数据库的安全性</p>\n<ul>\n<li><p>统计数据库允许用户查询<strong>聚集类型</strong>的信息（例如合计、平均值等），但是不允许查询单个记录信息。</p>\n</li>\n<li><p>统计数据库中的安全性问题：可能存在着隐蔽的信息通道，使得可以从合法的查询中推导出不合法的信息。</p>\n</li>\n<li><p>解决办法：</p>\n<ul>\n<li>规定任何查询至少涉及N个以上的记录</li>\n<li>规定两个查询的相交数据项不能超过M个</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{"post-body-end":"<div>\n    \n</div>\n","styles":"body {\n  background: url(\"/images/background.png\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 100% 100%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.8);\n}\n.popup {\n  opacity: 0.8;\n}\n.post-block {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.comments {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.post {\n  margin-top: 60px;\n  padding: 20px;\n  margin-bottom: 60px;\n  -webkit-box-shadow: 0 0 0px #788072;\n  -moz-box-shadow: 0 0 0px rgba(202,203,204,0.5);\n}\n.post-button .btn {\n  color: #555 !important;\n  background-color: #fff;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  border: none !important;\n  transition-property: unset;\n  padding: 0px 15px;\n}\n.post-button .btn:hover {\n  color: #fff !important;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  background-image: linear-gradient(90deg, #a166ab 0%, #ef4e7b 25%, #f37055 50%, #ef4e7b 75%, #a166ab 100%);\n}\n","variables":""}},"length":5766,"excerpt":"","more":"<h1 id=\"四、数据库安全\"><a href=\"#四、数据库安全\" class=\"headerlink\" title=\"四、数据库安全\"></a>四、数据库安全</h1><p>数据库安全性的定义：对数据库进行安全控制，保护数据库以防止&#x3D;&#x3D;不合法的使用&#x3D;&#x3D;（包括对数据库的查询和修改）所造成的数据泄露、更改或破坏。</p>\n<p>数据库系统的安全模型：层层设防</p>\n<img data-src=\"https://s2.loli.net/2022/03/29/Rd34US7IDsHQFx6.png\" alt=\"image-20220329101709334\" style=\"zoom:67%;\" />\n\n<h2 id=\"1、用户标识与鉴别\"><a href=\"#1、用户标识与鉴别\" class=\"headerlink\" title=\"1、用户标识与鉴别\"></a>1、用户标识与鉴别</h2><ul>\n<li><p>概念：一种用来判断用户身份是否属实的机制，是系统提供的<strong>最外层安全保护措施</strong></p>\n<blockquote>\n<p>标识（Identification）：身份声明。用户标识由用户名和用户标识号组成（用户标识号在系统整个生命周期内唯一）</p>\n<p>鉴别（Authentication ）：检验身份声明的有效性</p>\n</blockquote>\n</li>\n<li><p>用户身份鉴别的方法：</p>\n<ul>\n<li><p>静态口令鉴别：口令一经设置不再改变，静态口令一般由用户自己设定。易于实现也易泄露，不能对抗穷举攻击等等。</p>\n</li>\n<li><p>动态口令鉴别：口令是动态变化的，一次一密。eg. 手机验证码</p>\n</li>\n<li><p>生物特征鉴别：通过每个用户所独有的生物特征进行认证的技术</p>\n</li>\n<li><p>智能卡鉴别：智能卡是一种不可复制的硬件，内置集成电路的芯片，具有硬件加密功能</p>\n<p>  可以考虑多种方法并举</p>\n</li>\n</ul>\n</li>\n<li><p>数据库系统用户认证</p>\n<ul>\n<li>系统管理员通过创建用户帐号来管理用户对计算机系统资源的访问.给定&#x3D;&#x3D;每一位用户一个唯一的标识符和口令&#x3D;&#x3D;,操作系统通过它来判断用户的身份。</li>\n<li>DBA负责为DBMS用户建立用户帐号和口令</li>\n<li>用户认证的位置和方法：一张有效用户标识符和相关口令清单</li>\n<li>方式：通过操作系统&#x2F;数据库&#x2F;网络服务认证</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2、DBMS的存取控制子系统\"><a href=\"#2、DBMS的存取控制子系统\" class=\"headerlink\" title=\"2、DBMS的存取控制子系统\"></a>2、DBMS的存取控制子系统</h2><ul>\n<li><p>不同的用户有不同的权限，这由数据库的存取控制机制实现.      eg.DBA拥有所有权限</p>\n</li>\n<li><p><strong>所有权：</strong>对象的创建者拥有对象,并能够分配对象的相应特权</p>\n</li>\n<li><p><strong>特权：</strong></p>\n<p>  &#x3D;&#x3D;一个策略 两种原则&#x3D;&#x3D;</p>\n<ul>\n<li><strong>最小特权策略</strong>：只有一个人工作需要的才是他应该知道的</li>\n<li><strong>“封闭系统”原则</strong>：&#x3D;&#x3D;默认拒绝&#x3D;&#x3D;。虽然给予用户访问DBMS的权利，但当&#x3D;&#x3D;访问特定数据库对象时需要显式的授权&#x3D;&#x3D;，由DBA或对象的拥有者来执行这个授权过程</li>\n<li><strong>“开放系统”原则</strong>：&#x3D;&#x3D;默认允许&#x3D;&#x3D;。与封闭系统原则正好相反，允许用户对数据库的所有对象都拥有访问权限，这时,访问控制可通过&#x3D;&#x3D;显式地去除用户的特权&#x3D;&#x3D;来实现。简单但不够安全</li>\n</ul>\n</li>\n<li><p><strong>授权控制&#x2F;访问控制&#x2F;存取控制：</strong></p>\n<ul>\n<li><p>概念：授予一个主体权利或特权,使其能够实现对系统或者系统对象的合法访问</p>\n</li>\n<li><p>组成：定义用户权限、合法权限检查</p>\n  <img data-src=\"https://s2.loli.net/2022/03/28/yQN8WExhAqHluCX.png\" alt=\"image-20220328184353188\" style=\"zoom:67%;\" /></li>\n</ul>\n</li>\n<li><p>&#x3D;&#x3D;存取控制的策略：&#x3D;&#x3D;</p>\n<ul>\n<li><p>&#x3D;&#x3D;自主存取策略：&#x3D;&#x3D;（Discretionary Access Control , DAC）</p>\n<ul>\n<li><p>概念：是基于用户身份或所属工作组来进行访问控制的一种手段。用户<strong>对于不同的数据对象有相应的存取权限</strong>，而且用户还可以将其拥有的存取权限<strong>转授</strong>给其他用户。</p>\n</li>\n<li><p>用户分类与权限：</p>\n<ul>\n<li><p>系统用户（或DBA）：拥有全部权限</p>\n</li>\n<li><p>数据对象的属主：是创建某个数据对象的用户表，拥有该对象的权限</p>\n</li>\n<li><p>一般用户：经过授权被允许进行特定操作的用户 </p>\n</li>\n<li><p>公共用户（PUBLIC）：全体用户，便于共享操作而设置</p>\n</li>\n</ul>\n<blockquote>\n<p>SQL中提供CREATE USER 等语句管理用户</p>\n</blockquote>\n</li>\n<li><p>授权粒度（用户访问的数据对象的粒度）：数据库&#x2F;表&#x2F;字段。</p>\n<blockquote>\n<p>授权粒度越细，授权子系统越灵活，但系统定义与检查权限的开销也越大</p>\n</blockquote>\n</li>\n<li><p><img data-src=\"https://s2.loli.net/2022/03/28/v8HkOgAE6nYMCox.png\" alt=\"image-20220328185545227\"></p>\n<blockquote>\n<p>谓词是计算结果为逻辑值（为：TRUE、FALSE、UNKNOWN）的逻辑表达式。<br>不直接支持存取谓词的系统中，通过视图可以间接地实现支持存取谓词的用户权限定义。</p>\n</blockquote>\n</li>\n<li><p>自主存取控制是与数据值有关的授权，灵活且易于实现，但由于数据本身并无安全性标志，可能会有无意泄漏问题</p>\n</li>\n</ul>\n</li>\n<li><p>&#x3D;&#x3D;强制存取策略&#x3D;&#x3D; (Mandatory Access Control, MAC)</p>\n<ul>\n<li><p>定义：是基于被访问对象的信任度进行权限控制的一种手段。每一个数据对象被标以一定的密级，每一个用户也被授予某一个级别的许可证。对于任意一个对象，只有具有合法许可证的用户才可以存取。<strong>对数据本身进行密级标记，无论数据如何复制，标记与数据是一个不可分的整体。</strong></p>\n</li>\n<li><p>强制访问控制的实施由DBMS完成，但许可证与密级标记由专门的安全管理员设置</p>\n</li>\n<li><p>主体：系统中的活动实体，包含用户和用户的进程</p>\n</li>\n<li><p>客体：系统中的被动实体，被主体操纵</p>\n</li>\n<li><p>敏感度标记：主体的敏感度标记称为许可证级别；客体的敏感度标记称为密级。</p>\n<blockquote>\n<p>仅当主体的许可证级别大于或等于客体的密级时，该主体才能读取相应的客体；仅当主体的许可证级别（小于或）等于客体的密级时，该主体才能写相应的客体。 <strong>“下读上写”</strong></p>\n<img data-src=\"https://s2.loli.net/2022/03/28/iWFbB3pIgTkR4GC.png\" alt=\"image-20220328190807758\" style=\"zoom:67%;\" />\n</blockquote>\n</li>\n<li><p>比较严格和安全</p>\n</li>\n</ul>\n</li>\n<li><p>&#x3D;&#x3D;基于角色的存取控制&#x3D;&#x3D; (RBAC)</p>\n<ul>\n<li><p>定义：用户通过角色与权限进行关联。每一种角色对应一组相应的权限。一旦用户被分配了适当的角色后，该用户就拥有此角色的所有操作权限。 &#x3D;&#x3D;角色本质上是权限的集合&#x3D;&#x3D; </p>\n  <img data-src=\"https://s2.loli.net/2022/03/28/QPHZD64NiTeCOM5.png\" alt=\"image-20220328193107662\" style=\"zoom:67%;\" />\n</li>\n<li><p>优点：简化用户的权限管理，减少系统的开销</p>\n<blockquote>\n<p><strong>SQL中提供CREAT ROLE等语句进行角色管理</strong></p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"x3D-x3D-3、授权与回收-x3D-x3D\"><a href=\"#x3D-x3D-3、授权与回收-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;3、授权与回收&#x3D;&#x3D;\"></a>&#x3D;&#x3D;3、授权与回收&#x3D;&#x3D;</h2><ul>\n<li><p>&#x3D;&#x3D;授权：SQL中的GRANT语句&#x3D;&#x3D;</p>\n<ul>\n<li><p>作用：表(基本表或视图)的所有者授予一个或一类用户访问表的各种权利</p>\n</li>\n<li><p>局限性：不能根据数据内容进行授权</p>\n</li>\n<li><p>形式：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GRANT</span> &#123;<span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"operator\">|</span> privilege[, privilege] ...&#125; #多种权利</span><br><span class=\"line\"><span class=\"keyword\">ON</span> [<span class=\"keyword\">TABLE</span>]&#123;〈tablename〉<span class=\"operator\">|</span> 〈viewname〉&#125; #一次针对一个对象</span><br><span class=\"line\"><span class=\"keyword\">TO</span> &#123;PUBLIC <span class=\"operator\">|</span>〈username〉[,〈username〉] ...&#125; #多个用户，其中PUBLIC是公共用户</span><br><span class=\"line\">[<span class=\"keyword\">WITH</span> <span class=\"keyword\">GRANT</span> OPTION];</span><br><span class=\"line\"></span><br><span class=\"line\">#eg</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">SELECT</span>, <span class=\"keyword\">UPDATE</span>(sno)</span><br><span class=\"line\"><span class=\"keyword\">ON</span> <span class=\"keyword\">TABLE</span> s_c</span><br><span class=\"line\"><span class=\"keyword\">TO</span> U1, U2;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>一些说明：</p>\n<ul>\n<li><code>privilege</code>包括<code>SELECT、DELETE、INSERT、UPDATE [columnname [, columnnane]…]、REFERENCES [columnname [, columnnane]…]、ALTER、INDEX等等</code>，对于视图只有<code>SELECT、DELETE、INSERT、UPDATE</code></li>\n<li><code>WITH GRANT OPTION</code>用于实现转授，即被授权的用户还可以将权利授予其他用户，但不允许循环授权</li>\n<li><strong>每条GRANT语句只能针对一个对象（表）</strong></li>\n<li>可同时向<strong>多个用户</strong>授予对同一对象的<strong>多种权力</strong></li>\n<li>访问列&#x2F;行的安全性可以通过视图来实现；在视图上授予更新权限时，视图必须是可更新的；表的所有者自动拥有表的所有权限,而且不能被取消</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<hr>\n</li>\n<li><p>&#x3D;&#x3D;回收：SQL中的REVOKE语句&#x3D;&#x3D; &#x3D;&#x3D;GRANT的反操作&#x3D;&#x3D;</p>\n<ul>\n<li><p>作用：收回已授予给用户的特权</p>\n</li>\n<li><p>形式： </p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#X<span class=\"operator\">/</span><span class=\"keyword\">Open</span> <span class=\"keyword\">SQL</span>的<span class=\"keyword\">REVOKE</span>语句的语法（基本<span class=\"keyword\">SQL</span>目前不支持&#123;CASCADE <span class=\"operator\">|</span> RESTRICT&#125; 子句）</span><br><span class=\"line\"><span class=\"keyword\">REVOKE</span> [<span class=\"keyword\">GRANT</span> OPTION <span class=\"keyword\">FOR</span>]</span><br><span class=\"line\">&#123;<span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"operator\">|</span> privilege[，privilege] ...&#125;</span><br><span class=\"line\"><span class=\"keyword\">ON</span> [<span class=\"keyword\">TABLE</span>]&#123;〈tablename〉<span class=\"operator\">|</span> 〈viewname〉&#125;</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> &#123;PUBLIC <span class=\"operator\">|</span>〈username〉[，〈username〉] ...&#125;</span><br><span class=\"line\">&#123;CASCADE <span class=\"operator\">|</span> RESTRICT&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">#eg</span><br><span class=\"line\"><span class=\"keyword\">REVOKE</span> <span class=\"keyword\">INSERT</span></span><br><span class=\"line\"><span class=\"keyword\">ON</span> Staff</span><br><span class=\"line\">CASCADE</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>一些说明：</p>\n<ul>\n<li><p><code>GRANT OPTION FOR</code>指撤销 允许转授 的这种特权</p>\n</li>\n<li><p><code>ALL PRIVIEGES</code>指该用户被授予的对指定对象所拥有的所有特权</p>\n</li>\n<li><p><code>CASCADE</code>的作用是删除与当前被撤消的权限有依赖关系的视图或删除依赖于<code>REFERENCES</code>权限的外键约束；如果有这样的依赖关系，<code>RESTRICT</code>将不允许执行<code>REVOKE</code>语句</p>\n</li>\n<li><p>其他用户授予该用户的特权不受影响</p>\n  <img data-src=\"https://s2.loli.net/2022/03/29/HAcK2Nrinv83DBR.png\" alt=\"image-20220329112258945\" style=\"zoom:67%;\" /></li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"x3D-x3D-4、角色-x3D-x3D\"><a href=\"#x3D-x3D-4、角色-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;4、角色&#x3D;&#x3D;\"></a>&#x3D;&#x3D;4、角色&#x3D;&#x3D;</h2><p>参考链接：<a href=\"https://zhuanlan.zhihu.com/p/367873840\">MySQL角色(role)功能介绍 - 知乎 (zhihu.com)</a></p>\n<ul>\n<li><p>概念：&#x3D;&#x3D;操作权限的集合&#x3D;&#x3D;，eg.学生、老师。一个用户可以有不同的角色</p>\n  <img data-src=\"https://s2.loli.net/2022/03/28/QPHZD64NiTeCOM5.png\" style=\"zoom:67%;\" />\n</li>\n<li><p>数据库预定义角色：指数据库建立时，系统自动创建的角色。如CONNECT（允许进入数据库）、RESOURCE（允许创建数据库对象）、DBA</p>\n</li>\n<li><p>与角色相关的SQL语句</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#角色的创建</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> ROLE <span class=\"operator\">&lt;</span>角色名<span class=\"operator\">&gt;</span> </span><br><span class=\"line\"></span><br><span class=\"line\">#eg</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> ROLE R1;</span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#角色的删除</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> ROLE <span class=\"operator\">&lt;</span>角色名<span class=\"operator\">&gt;</span> </span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#给角色授权，跟给普通用户的授权是一样的</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"operator\">&lt;</span>权限<span class=\"operator\">&gt;</span>[,<span class=\"operator\">&lt;</span>权限<span class=\"operator\">&gt;</span>]...</span><br><span class=\"line\"><span class=\"keyword\">ON</span> <span class=\"operator\">&lt;</span>对象类型<span class=\"operator\">&gt;</span>对象名   #一个对象</span><br><span class=\"line\"><span class=\"keyword\">TO</span> <span class=\"operator\">&lt;</span>角色<span class=\"operator\">&gt;</span>[,<span class=\"operator\">&lt;</span>角色<span class=\"operator\">&gt;</span>]...</span><br><span class=\"line\"></span><br><span class=\"line\">#eg</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">SELECT</span>, <span class=\"keyword\">UPDATE</span>, <span class=\"keyword\">INSERT</span> </span><br><span class=\"line\"><span class=\"keyword\">ON</span> <span class=\"keyword\">TABLE</span> Student </span><br><span class=\"line\"><span class=\"keyword\">TO</span> R1;</span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查看角色的授权</span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">show</span> grants <span class=\"keyword\">for</span> <span class=\"string\">&#x27;dev_role&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span>;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">-------------------------------------------+</span></span><br><span class=\"line\"><span class=\"operator\">|</span> Grants <span class=\"keyword\">for</span> dev_role@<span class=\"operator\">%</span>                     <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">-------------------------------------------+</span></span><br><span class=\"line\"><span class=\"operator\">|</span> <span class=\"keyword\">GRANT</span> USAGE <span class=\"keyword\">ON</span> <span class=\"operator\">*</span>.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> `dev_role`@`<span class=\"operator\">%</span>`      <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">|</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">SELECT</span> <span class=\"keyword\">ON</span> `db1`.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> `dev_role`@`<span class=\"operator\">%</span>` <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">-------------------------------------------+</span></span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#确定当前会话中哪些角色处于活动状态</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"built_in\">CURRENT_ROLE</span>();</span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用 <span class=\"keyword\">set</span> <span class=\"keyword\">default</span> role 命令激活角色</span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">SET</span> <span class=\"keyword\">DEFAULT</span> ROLE <span class=\"keyword\">ALL</span> <span class=\"keyword\">TO</span> dev1;</span><br><span class=\"line\">Query OK, <span class=\"number\">0</span> <span class=\"keyword\">rows</span> affected (<span class=\"number\">0.77</span> sec)</span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#将一个角色授予其他的角色或用户，授予者是角色的创建者或拥有在这个角色上的ADMIN OPTION</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"operator\">&lt;</span>角色<span class=\"number\">1</span><span class=\"operator\">&gt;</span>[,<span class=\"operator\">&lt;</span>角色<span class=\"number\">2</span><span class=\"operator\">&gt;</span>]…</span><br><span class=\"line\"><span class=\"keyword\">TO</span> <span class=\"operator\">&lt;</span>角色<span class=\"number\">3</span><span class=\"operator\">&gt;</span>[,<span class=\"operator\">&lt;</span>用户<span class=\"number\">1</span><span class=\"operator\">&gt;</span>]… </span><br><span class=\"line\">[<span class=\"keyword\">WITH</span> ADMIN OPTION]  #允许转授</span><br><span class=\"line\"></span><br><span class=\"line\">#eg</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> R1 </span><br><span class=\"line\"><span class=\"keyword\">TO</span> 王平,张明,赵玲;</span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#角色权限的收回，<span class=\"keyword\">REVOKE</span>的执行者是角色的创建者或者拥有在这个（些）角色上的ADMIN OPTION</span><br><span class=\"line\">#可以通过回收角色的权限来修改角色的权限</span><br><span class=\"line\"><span class=\"keyword\">REVOKE</span> <span class=\"operator\">&lt;</span>权限<span class=\"operator\">&gt;</span>[,<span class=\"operator\">&lt;</span>权限<span class=\"operator\">&gt;</span>]…</span><br><span class=\"line\"><span class=\"keyword\">ON</span> <span class=\"operator\">&lt;</span>对象类型<span class=\"operator\">&gt;</span> <span class=\"operator\">&lt;</span>对象名<span class=\"operator\">&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> <span class=\"operator\">&lt;</span>角色<span class=\"operator\">&gt;</span>[,<span class=\"operator\">&lt;</span>角色<span class=\"operator\">&gt;</span>]…</span><br><span class=\"line\"></span><br><span class=\"line\">#eg</span><br><span class=\"line\"><span class=\"keyword\">REVOKE</span> R1    #本质上，角色就是权限的集合</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> 王平;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">REVOKE</span> <span class=\"keyword\">SELECT</span> </span><br><span class=\"line\"><span class=\"keyword\">ON</span> <span class=\"keyword\">TABLE</span> Student</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> R1；</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>指定了WITH ADMIN OPTION则获得某种权限的角色或用户还可以把这种权限授予其他角色</p>\n<p>一个角色的权限是指直接授予这个角色的全部权限加上其他角色授予这个角色的全部权限</p>\n</blockquote>\n</li>\n</ul>\n<p>》查询用户权限：SELECT FROM USER …</p>\n<h2 id=\"5、视图与权限\"><a href=\"#5、视图与权限\" class=\"headerlink\" title=\"5、视图与权限\"></a>5、视图与权限</h2><ul>\n<li><p>把要保密的数据对无权存取这些数据的用户隐藏起来，对数据提供一定程度的安全保护</p>\n</li>\n<li><p>进行存取权限控制时可以给不同用户定义不同的视图，把数据对象限制在一定范围内</p>\n</li>\n<li><p>间接地实现支持存取谓词的用户权限定义</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#建立视图</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span> CS_Student</span><br><span class=\"line\"><span class=\"keyword\">AS</span> </span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Student</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> Sdept<span class=\"operator\">=</span><span class=\"string\">&#x27;CS&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">#在视图上进一步定义存取权限</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">SELECT</span></span><br><span class=\"line\"><span class=\"keyword\">ON</span> CS_Student</span><br><span class=\"line\"><span class=\"keyword\">TO</span> 王平;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILIGES</span><br><span class=\"line\"><span class=\"keyword\">ON</span> CS_Student</span><br><span class=\"line\"><span class=\"keyword\">TO</span> 张明;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"6、审计\"><a href=\"#6、审计\" class=\"headerlink\" title=\"6、审计\"></a>6、审计</h2><ul>\n<li><p><strong>概念：</strong>把用户对数据库的<strong>所有操作</strong>自动记录下来放入<strong>审计日志</strong>中，DBA可以利用审计跟踪的信息，找出非法存取数据的人、时间和内容等。 </p>\n<blockquote>\n<p>审计日志与恢复机制中的日志的区别：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>审计日志</th>\n<th>恢复日志</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>记录的内容</strong></td>\n<td>所有操作</td>\n<td>只记录更新操作</td>\n</tr>\n<tr>\n<td><strong>记录的组织方式</strong></td>\n<td>按操作的对象</td>\n<td>按时间顺序</td>\n</tr>\n</tbody></table>\n</blockquote>\n</li>\n<li><p><strong>作用</strong>：调查可疑的活动；监视并收集某类数据库活动的信息</p>\n</li>\n<li><p><strong>可选性</strong>：DBA可以根据应用对安全性的要求，灵活地打开或关闭审计功能以及选择对哪些操作进行审计</p>\n<blockquote>\n<p>审计很费时间和空间，主要用于安全性要求较高的部门</p>\n</blockquote>\n</li>\n<li><p><strong>审计事件</strong>：服务器事件、系统权限（对系统拥有的结构或模式对象进行操作的审计）、语句事件、模式对象事件</p>\n</li>\n<li><p><strong>审计功能</strong>：审计分析和报表功能、审计日志管理功能（审计日志必须先转储后删除；只允许审计员查阅和转储审计记录；…）、提供专门视图等等</p>\n</li>\n</ul>\n<h2 id=\"7、数据加密与统计数据库的安全\"><a href=\"#7、数据加密与统计数据库的安全\" class=\"headerlink\" title=\"7、数据加密与统计数据库的安全\"></a>7、数据加密与统计数据库的安全</h2><ul>\n<li><p>数据加密</p>\n<ul>\n<li>作用：通过将明文转换为密文来防止数据库中数据在存储和传输中失密</li>\n<li>两种加密方法：替换、置换（更改明文顺序）</li>\n</ul>\n</li>\n<li><p>统计数据库的安全性</p>\n<ul>\n<li><p>统计数据库允许用户查询<strong>聚集类型</strong>的信息（例如合计、平均值等），但是不允许查询单个记录信息。</p>\n</li>\n<li><p>统计数据库中的安全性问题：可能存在着隐蔽的信息通道，使得可以从合法的查询中推导出不合法的信息。</p>\n</li>\n<li><p>解决办法：</p>\n<ul>\n<li>规定任何查询至少涉及N个以上的记录</li>\n<li>规定两个查询的相交数据项不能超过M个</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"绪论","abbrlink":62383,"date":"2022-06-23T03:10:12.000Z","_content":"\n# 一、绪论\n\n## 1、概念\n\n**DB：数据库**，是按照一定结构组织并长期存储在计算机内的可共享的大量数据的有机集合。\n\n**DBMS：数据库管理系统**，是管理和维护数据库的系统软件，是数据库和用户之间的一个接口，其主要作用是在数据库建立、运行和维护时对数据库进行统一的管理控制和提供数据服务。\n\n<!-- more -->\n\n`DBMS的功能：`数据定义、数据操作、数据组织和管理、数据库运行管理（核心工作）、数据库的建立和维护、数据接口\n\n**DBA：数据库管理人员**，其职责包括决定DB中的信息内容和结构；决定DB的存储结构和存取策略；定义数据的安全性要求和完整性约束条件；监控数据库的使用和运行。\n\n**DBS：数据库系统**，是实现有组织地、动态地存储大量关联数据、方便多用户访问的计算机软件、硬件和人组成的系统。\n\n`DBS的特点：`①数据的高度结构化；②数据的高共享性；③程序与数据的高独立性；④数据控制力度大（DBMS统一管理和控制数据）\n$$\nDBS = 计算机系统(硬件、软件平台、人)+DBMS+DB\\\\\n或\\\\\nDBS = 硬件 + 软件（OS、DB、DBMS、语言及开发工具、DB应用程序）+ 人（DBA、设计者、用户）\n$$\n\n![](https://s2.loli.net/2022/03/04/7zNQasLYrVqw1px.png)\n\n## 2、信息模型\n\n也称概念模型，主要用于数据库设计\n\n表示方法：ER图\n\n基本成分：实体集、属性、联系\n\n![](https://s2.loli.net/2022/03/04/oMmlnGpIqh5iDXO.png)\n\n## 3、数据模型\n\n三要素：数据结构、数据操作、数据的完整性约束\n\n三种基本数据模型：层次模型、网状模型、关系模型\n\n**3种基本数据模型的比较**\n\n| 特点\\模型          | 层次模型                                                     | 网状模型                                                     | 关系模型（==最重要== ）                                      |\n| ------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| **数据结构**       | 树结构                                                       | 图结构                                                       | 表结构                                                       |\n| **存储方法**       | 按先根顺序存储及用左孩子右兄弟链式存储                       | 链接法                                                       | 文件                                                         |\n| **数据操作**       | 增删改查。按层次顺序查询、按层次路径查询。且每次操作只能取一个记录 | 操作时必须说明做什么、如何做                                 | 增删改查。集合操作，操作对象和操作结果都是关系，即若干元组的集合。存取路径对用户隐藏（安全的同时效率低），用户只需指出干什么。 |\n| **数据完整性约束** | 父子约束、一致性约束、数据的型和值需保持树形结构等           | 父子约束、主从约束                                           | 实体完整性、参照完整性和用户定义的完整性                     |\n| **联系表示的特点** | 适合1：n                                                     | 可以间接表示m：n                                             | 便于表示m：n                                                 |\n| **联系的方式**     | 通过指针（或路径）                                           | 通过指针（或路径）                                           | 通过表格自然联系及创建联系                                   |\n| **使用与效率**     | 较难使用、效率较高                                           | 使用复杂、效率较高                                           | 容易使用，效率较低                                           |\n| **数据操作语言**   | 过程化                                                       | 过程化                                                       | 非过程化及过程扩展                                           |\n| **理论基础**       | 无                                                           | 无                                                           | 关系理论                                                     |\n| **优缺点**         | ①数据结构较简单、查询效率高；②提供良好的完整性支持；③不易表示多对多的联系；④数据操作限制多，独立性较差 | ①较为直接地描述现实世界；②存取效率较高；③结构较复杂，不易使用；④数据独立性较差 | ①有坚实的理论基础；②结构简单、易用；③数据独立性及安全性好；④查询效率较低 |\n\n## 4、三级模式结构\n\n**模式**：（也称概念模式/逻辑模式）是数据库中全体数据的逻辑结构和特征的描述，是所有用户的公用数据结构。\n\n**子模式**：（也称外模式/用户模式）是数据库用户所见和使用的局部数据的逻辑结构和特征的描述，是用户所用的数据库结构。子模式是模式的子集，它主要描述用户视图的各记录的组成、相互联系、数据项的特征等。\n\n**内模式**：（也称存储模式）是数据物理结构和存储方法的描述，是整个数据库的最低层结构的标识。\n\n三级模式结构示意如下图所示：\n\n![image-20220508100815575](https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205081008688.png)\n\n## 5、二级映像功能\n\n**映像1：子模式/模式映像**，是指由模式生成子模式的规则，它定义了各个子模式和模式之间的对应关系。（不唯一）\n\n**映像2：模式/内模式映像**，是说明模式在物理设备中的存储结构，定义了模式和内模式之间的对应关系。（唯一）\n\n**三级模式结构和二级映像的作用：保证了数据库系统的数据能够具有较高的逻辑独立性和物理独立性**\n\n> 数据冗余：\n>\n> ![image-20220514221005579](https://s2.loli.net/2022/05/14/pExd5HsrKunezmM.png)\n\n","source":"_posts/绪论.md","raw":"---\ntitle: 绪论\ntags: \n- 数据库\ncategory: \n- 数据库\nabbrlink: 62383\ndate: 2022-06-23 11:10:12\n---\n\n# 一、绪论\n\n## 1、概念\n\n**DB：数据库**，是按照一定结构组织并长期存储在计算机内的可共享的大量数据的有机集合。\n\n**DBMS：数据库管理系统**，是管理和维护数据库的系统软件，是数据库和用户之间的一个接口，其主要作用是在数据库建立、运行和维护时对数据库进行统一的管理控制和提供数据服务。\n\n<!-- more -->\n\n`DBMS的功能：`数据定义、数据操作、数据组织和管理、数据库运行管理（核心工作）、数据库的建立和维护、数据接口\n\n**DBA：数据库管理人员**，其职责包括决定DB中的信息内容和结构；决定DB的存储结构和存取策略；定义数据的安全性要求和完整性约束条件；监控数据库的使用和运行。\n\n**DBS：数据库系统**，是实现有组织地、动态地存储大量关联数据、方便多用户访问的计算机软件、硬件和人组成的系统。\n\n`DBS的特点：`①数据的高度结构化；②数据的高共享性；③程序与数据的高独立性；④数据控制力度大（DBMS统一管理和控制数据）\n$$\nDBS = 计算机系统(硬件、软件平台、人)+DBMS+DB\\\\\n或\\\\\nDBS = 硬件 + 软件（OS、DB、DBMS、语言及开发工具、DB应用程序）+ 人（DBA、设计者、用户）\n$$\n\n![](https://s2.loli.net/2022/03/04/7zNQasLYrVqw1px.png)\n\n## 2、信息模型\n\n也称概念模型，主要用于数据库设计\n\n表示方法：ER图\n\n基本成分：实体集、属性、联系\n\n![](https://s2.loli.net/2022/03/04/oMmlnGpIqh5iDXO.png)\n\n## 3、数据模型\n\n三要素：数据结构、数据操作、数据的完整性约束\n\n三种基本数据模型：层次模型、网状模型、关系模型\n\n**3种基本数据模型的比较**\n\n| 特点\\模型          | 层次模型                                                     | 网状模型                                                     | 关系模型（==最重要== ）                                      |\n| ------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| **数据结构**       | 树结构                                                       | 图结构                                                       | 表结构                                                       |\n| **存储方法**       | 按先根顺序存储及用左孩子右兄弟链式存储                       | 链接法                                                       | 文件                                                         |\n| **数据操作**       | 增删改查。按层次顺序查询、按层次路径查询。且每次操作只能取一个记录 | 操作时必须说明做什么、如何做                                 | 增删改查。集合操作，操作对象和操作结果都是关系，即若干元组的集合。存取路径对用户隐藏（安全的同时效率低），用户只需指出干什么。 |\n| **数据完整性约束** | 父子约束、一致性约束、数据的型和值需保持树形结构等           | 父子约束、主从约束                                           | 实体完整性、参照完整性和用户定义的完整性                     |\n| **联系表示的特点** | 适合1：n                                                     | 可以间接表示m：n                                             | 便于表示m：n                                                 |\n| **联系的方式**     | 通过指针（或路径）                                           | 通过指针（或路径）                                           | 通过表格自然联系及创建联系                                   |\n| **使用与效率**     | 较难使用、效率较高                                           | 使用复杂、效率较高                                           | 容易使用，效率较低                                           |\n| **数据操作语言**   | 过程化                                                       | 过程化                                                       | 非过程化及过程扩展                                           |\n| **理论基础**       | 无                                                           | 无                                                           | 关系理论                                                     |\n| **优缺点**         | ①数据结构较简单、查询效率高；②提供良好的完整性支持；③不易表示多对多的联系；④数据操作限制多，独立性较差 | ①较为直接地描述现实世界；②存取效率较高；③结构较复杂，不易使用；④数据独立性较差 | ①有坚实的理论基础；②结构简单、易用；③数据独立性及安全性好；④查询效率较低 |\n\n## 4、三级模式结构\n\n**模式**：（也称概念模式/逻辑模式）是数据库中全体数据的逻辑结构和特征的描述，是所有用户的公用数据结构。\n\n**子模式**：（也称外模式/用户模式）是数据库用户所见和使用的局部数据的逻辑结构和特征的描述，是用户所用的数据库结构。子模式是模式的子集，它主要描述用户视图的各记录的组成、相互联系、数据项的特征等。\n\n**内模式**：（也称存储模式）是数据物理结构和存储方法的描述，是整个数据库的最低层结构的标识。\n\n三级模式结构示意如下图所示：\n\n![image-20220508100815575](https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205081008688.png)\n\n## 5、二级映像功能\n\n**映像1：子模式/模式映像**，是指由模式生成子模式的规则，它定义了各个子模式和模式之间的对应关系。（不唯一）\n\n**映像2：模式/内模式映像**，是说明模式在物理设备中的存储结构，定义了模式和内模式之间的对应关系。（唯一）\n\n**三级模式结构和二级映像的作用：保证了数据库系统的数据能够具有较高的逻辑独立性和物理独立性**\n\n> 数据冗余：\n>\n> ![image-20220514221005579](https://s2.loli.net/2022/05/14/pExd5HsrKunezmM.png)\n\n","slug":"绪论","published":1,"updated":"2022-06-24T00:44:55.900Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4wvpgsh0016ugsk86yag3jf","content":"<h1 id=\"一、绪论\"><a href=\"#一、绪论\" class=\"headerlink\" title=\"一、绪论\"></a>一、绪论</h1><h2 id=\"1、概念\"><a href=\"#1、概念\" class=\"headerlink\" title=\"1、概念\"></a>1、概念</h2><p><strong>DB：数据库</strong>，是按照一定结构组织并长期存储在计算机内的可共享的大量数据的有机集合。</p>\n<p><strong>DBMS：数据库管理系统</strong>，是管理和维护数据库的系统软件，是数据库和用户之间的一个接口，其主要作用是在数据库建立、运行和维护时对数据库进行统一的管理控制和提供数据服务。</p>\n<span id=\"more\"></span>\n\n<p><code>DBMS的功能：</code>数据定义、数据操作、数据组织和管理、数据库运行管理（核心工作）、数据库的建立和维护、数据接口</p>\n<p><strong>DBA：数据库管理人员</strong>，其职责包括决定DB中的信息内容和结构；决定DB的存储结构和存取策略；定义数据的安全性要求和完整性约束条件；监控数据库的使用和运行。</p>\n<p><strong>DBS：数据库系统</strong>，是实现有组织地、动态地存储大量关联数据、方便多用户访问的计算机软件、硬件和人组成的系统。</p>\n<p><code>DBS的特点：</code>①数据的高度结构化；②数据的高共享性；③程序与数据的高独立性；④数据控制力度大（DBMS统一管理和控制数据）<br>$$<br>DBS &#x3D; 计算机系统(硬件、软件平台、人)+DBMS+DB\\<br>或\\<br>DBS &#x3D; 硬件 + 软件（OS、DB、DBMS、语言及开发工具、DB应用程序）+ 人（DBA、设计者、用户）<br>$$</p>\n<p><img data-src=\"https://s2.loli.net/2022/03/04/7zNQasLYrVqw1px.png\"></p>\n<h2 id=\"2、信息模型\"><a href=\"#2、信息模型\" class=\"headerlink\" title=\"2、信息模型\"></a>2、信息模型</h2><p>也称概念模型，主要用于数据库设计</p>\n<p>表示方法：ER图</p>\n<p>基本成分：实体集、属性、联系</p>\n<p><img data-src=\"https://s2.loli.net/2022/03/04/oMmlnGpIqh5iDXO.png\"></p>\n<h2 id=\"3、数据模型\"><a href=\"#3、数据模型\" class=\"headerlink\" title=\"3、数据模型\"></a>3、数据模型</h2><p>三要素：数据结构、数据操作、数据的完整性约束</p>\n<p>三种基本数据模型：层次模型、网状模型、关系模型</p>\n<p><strong>3种基本数据模型的比较</strong></p>\n<table>\n<thead>\n<tr>\n<th>特点\\模型</th>\n<th>层次模型</th>\n<th>网状模型</th>\n<th>关系模型（&#x3D;&#x3D;最重要&#x3D;&#x3D; ）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>数据结构</strong></td>\n<td>树结构</td>\n<td>图结构</td>\n<td>表结构</td>\n</tr>\n<tr>\n<td><strong>存储方法</strong></td>\n<td>按先根顺序存储及用左孩子右兄弟链式存储</td>\n<td>链接法</td>\n<td>文件</td>\n</tr>\n<tr>\n<td><strong>数据操作</strong></td>\n<td>增删改查。按层次顺序查询、按层次路径查询。且每次操作只能取一个记录</td>\n<td>操作时必须说明做什么、如何做</td>\n<td>增删改查。集合操作，操作对象和操作结果都是关系，即若干元组的集合。存取路径对用户隐藏（安全的同时效率低），用户只需指出干什么。</td>\n</tr>\n<tr>\n<td><strong>数据完整性约束</strong></td>\n<td>父子约束、一致性约束、数据的型和值需保持树形结构等</td>\n<td>父子约束、主从约束</td>\n<td>实体完整性、参照完整性和用户定义的完整性</td>\n</tr>\n<tr>\n<td><strong>联系表示的特点</strong></td>\n<td>适合1：n</td>\n<td>可以间接表示m：n</td>\n<td>便于表示m：n</td>\n</tr>\n<tr>\n<td><strong>联系的方式</strong></td>\n<td>通过指针（或路径）</td>\n<td>通过指针（或路径）</td>\n<td>通过表格自然联系及创建联系</td>\n</tr>\n<tr>\n<td><strong>使用与效率</strong></td>\n<td>较难使用、效率较高</td>\n<td>使用复杂、效率较高</td>\n<td>容易使用，效率较低</td>\n</tr>\n<tr>\n<td><strong>数据操作语言</strong></td>\n<td>过程化</td>\n<td>过程化</td>\n<td>非过程化及过程扩展</td>\n</tr>\n<tr>\n<td><strong>理论基础</strong></td>\n<td>无</td>\n<td>无</td>\n<td>关系理论</td>\n</tr>\n<tr>\n<td><strong>优缺点</strong></td>\n<td>①数据结构较简单、查询效率高；②提供良好的完整性支持；③不易表示多对多的联系；④数据操作限制多，独立性较差</td>\n<td>①较为直接地描述现实世界；②存取效率较高；③结构较复杂，不易使用；④数据独立性较差</td>\n<td>①有坚实的理论基础；②结构简单、易用；③数据独立性及安全性好；④查询效率较低</td>\n</tr>\n</tbody></table>\n<h2 id=\"4、三级模式结构\"><a href=\"#4、三级模式结构\" class=\"headerlink\" title=\"4、三级模式结构\"></a>4、三级模式结构</h2><p><strong>模式</strong>：（也称概念模式&#x2F;逻辑模式）是数据库中全体数据的逻辑结构和特征的描述，是所有用户的公用数据结构。</p>\n<p><strong>子模式</strong>：（也称外模式&#x2F;用户模式）是数据库用户所见和使用的局部数据的逻辑结构和特征的描述，是用户所用的数据库结构。子模式是模式的子集，它主要描述用户视图的各记录的组成、相互联系、数据项的特征等。</p>\n<p><strong>内模式</strong>：（也称存储模式）是数据物理结构和存储方法的描述，是整个数据库的最低层结构的标识。</p>\n<p>三级模式结构示意如下图所示：</p>\n<p><img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205081008688.png\" alt=\"image-20220508100815575\"></p>\n<h2 id=\"5、二级映像功能\"><a href=\"#5、二级映像功能\" class=\"headerlink\" title=\"5、二级映像功能\"></a>5、二级映像功能</h2><p><strong>映像1：子模式&#x2F;模式映像</strong>，是指由模式生成子模式的规则，它定义了各个子模式和模式之间的对应关系。（不唯一）</p>\n<p><strong>映像2：模式&#x2F;内模式映像</strong>，是说明模式在物理设备中的存储结构，定义了模式和内模式之间的对应关系。（唯一）</p>\n<p><strong>三级模式结构和二级映像的作用：保证了数据库系统的数据能够具有较高的逻辑独立性和物理独立性</strong></p>\n<blockquote>\n<p>数据冗余：</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/14/pExd5HsrKunezmM.png\" alt=\"image-20220514221005579\"></p>\n</blockquote>\n","site":{"data":{"post-body-end":"<div>\n    \n</div>\n","styles":"body {\n  background: url(\"/images/background.png\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 100% 100%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.8);\n}\n.popup {\n  opacity: 0.8;\n}\n.post-block {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.comments {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.post {\n  margin-top: 60px;\n  padding: 20px;\n  margin-bottom: 60px;\n  -webkit-box-shadow: 0 0 0px #788072;\n  -moz-box-shadow: 0 0 0px rgba(202,203,204,0.5);\n}\n.post-button .btn {\n  color: #555 !important;\n  background-color: #fff;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  border: none !important;\n  transition-property: unset;\n  padding: 0px 15px;\n}\n.post-button .btn:hover {\n  color: #fff !important;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  background-image: linear-gradient(90deg, #a166ab 0%, #ef4e7b 25%, #f37055 50%, #ef4e7b 75%, #a166ab 100%);\n}\n","variables":""}},"length":1503,"excerpt":"<h1 id=\"一、绪论\"><a href=\"#一、绪论\" class=\"headerlink\" title=\"一、绪论\"></a>一、绪论</h1><h2 id=\"1、概念\"><a href=\"#1、概念\" class=\"headerlink\" title=\"1、概念\"></a>1、概念</h2><p><strong>DB：数据库</strong>，是按照一定结构组织并长期存储在计算机内的可共享的大量数据的有机集合。</p>\n<p><strong>DBMS：数据库管理系统</strong>，是管理和维护数据库的系统软件，是数据库和用户之间的一个接口，其主要作用是在数据库建立、运行和维护时对数据库进行统一的管理控制和提供数据服务。</p>","more":"<p><code>DBMS的功能：</code>数据定义、数据操作、数据组织和管理、数据库运行管理（核心工作）、数据库的建立和维护、数据接口</p>\n<p><strong>DBA：数据库管理人员</strong>，其职责包括决定DB中的信息内容和结构；决定DB的存储结构和存取策略；定义数据的安全性要求和完整性约束条件；监控数据库的使用和运行。</p>\n<p><strong>DBS：数据库系统</strong>，是实现有组织地、动态地存储大量关联数据、方便多用户访问的计算机软件、硬件和人组成的系统。</p>\n<p><code>DBS的特点：</code>①数据的高度结构化；②数据的高共享性；③程序与数据的高独立性；④数据控制力度大（DBMS统一管理和控制数据）<br>$$<br>DBS &#x3D; 计算机系统(硬件、软件平台、人)+DBMS+DB\\<br>或\\<br>DBS &#x3D; 硬件 + 软件（OS、DB、DBMS、语言及开发工具、DB应用程序）+ 人（DBA、设计者、用户）<br>$$</p>\n<p><img data-src=\"https://s2.loli.net/2022/03/04/7zNQasLYrVqw1px.png\"></p>\n<h2 id=\"2、信息模型\"><a href=\"#2、信息模型\" class=\"headerlink\" title=\"2、信息模型\"></a>2、信息模型</h2><p>也称概念模型，主要用于数据库设计</p>\n<p>表示方法：ER图</p>\n<p>基本成分：实体集、属性、联系</p>\n<p><img data-src=\"https://s2.loli.net/2022/03/04/oMmlnGpIqh5iDXO.png\"></p>\n<h2 id=\"3、数据模型\"><a href=\"#3、数据模型\" class=\"headerlink\" title=\"3、数据模型\"></a>3、数据模型</h2><p>三要素：数据结构、数据操作、数据的完整性约束</p>\n<p>三种基本数据模型：层次模型、网状模型、关系模型</p>\n<p><strong>3种基本数据模型的比较</strong></p>\n<table>\n<thead>\n<tr>\n<th>特点\\模型</th>\n<th>层次模型</th>\n<th>网状模型</th>\n<th>关系模型（&#x3D;&#x3D;最重要&#x3D;&#x3D; ）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>数据结构</strong></td>\n<td>树结构</td>\n<td>图结构</td>\n<td>表结构</td>\n</tr>\n<tr>\n<td><strong>存储方法</strong></td>\n<td>按先根顺序存储及用左孩子右兄弟链式存储</td>\n<td>链接法</td>\n<td>文件</td>\n</tr>\n<tr>\n<td><strong>数据操作</strong></td>\n<td>增删改查。按层次顺序查询、按层次路径查询。且每次操作只能取一个记录</td>\n<td>操作时必须说明做什么、如何做</td>\n<td>增删改查。集合操作，操作对象和操作结果都是关系，即若干元组的集合。存取路径对用户隐藏（安全的同时效率低），用户只需指出干什么。</td>\n</tr>\n<tr>\n<td><strong>数据完整性约束</strong></td>\n<td>父子约束、一致性约束、数据的型和值需保持树形结构等</td>\n<td>父子约束、主从约束</td>\n<td>实体完整性、参照完整性和用户定义的完整性</td>\n</tr>\n<tr>\n<td><strong>联系表示的特点</strong></td>\n<td>适合1：n</td>\n<td>可以间接表示m：n</td>\n<td>便于表示m：n</td>\n</tr>\n<tr>\n<td><strong>联系的方式</strong></td>\n<td>通过指针（或路径）</td>\n<td>通过指针（或路径）</td>\n<td>通过表格自然联系及创建联系</td>\n</tr>\n<tr>\n<td><strong>使用与效率</strong></td>\n<td>较难使用、效率较高</td>\n<td>使用复杂、效率较高</td>\n<td>容易使用，效率较低</td>\n</tr>\n<tr>\n<td><strong>数据操作语言</strong></td>\n<td>过程化</td>\n<td>过程化</td>\n<td>非过程化及过程扩展</td>\n</tr>\n<tr>\n<td><strong>理论基础</strong></td>\n<td>无</td>\n<td>无</td>\n<td>关系理论</td>\n</tr>\n<tr>\n<td><strong>优缺点</strong></td>\n<td>①数据结构较简单、查询效率高；②提供良好的完整性支持；③不易表示多对多的联系；④数据操作限制多，独立性较差</td>\n<td>①较为直接地描述现实世界；②存取效率较高；③结构较复杂，不易使用；④数据独立性较差</td>\n<td>①有坚实的理论基础；②结构简单、易用；③数据独立性及安全性好；④查询效率较低</td>\n</tr>\n</tbody></table>\n<h2 id=\"4、三级模式结构\"><a href=\"#4、三级模式结构\" class=\"headerlink\" title=\"4、三级模式结构\"></a>4、三级模式结构</h2><p><strong>模式</strong>：（也称概念模式&#x2F;逻辑模式）是数据库中全体数据的逻辑结构和特征的描述，是所有用户的公用数据结构。</p>\n<p><strong>子模式</strong>：（也称外模式&#x2F;用户模式）是数据库用户所见和使用的局部数据的逻辑结构和特征的描述，是用户所用的数据库结构。子模式是模式的子集，它主要描述用户视图的各记录的组成、相互联系、数据项的特征等。</p>\n<p><strong>内模式</strong>：（也称存储模式）是数据物理结构和存储方法的描述，是整个数据库的最低层结构的标识。</p>\n<p>三级模式结构示意如下图所示：</p>\n<p><img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205081008688.png\" alt=\"image-20220508100815575\"></p>\n<h2 id=\"5、二级映像功能\"><a href=\"#5、二级映像功能\" class=\"headerlink\" title=\"5、二级映像功能\"></a>5、二级映像功能</h2><p><strong>映像1：子模式&#x2F;模式映像</strong>，是指由模式生成子模式的规则，它定义了各个子模式和模式之间的对应关系。（不唯一）</p>\n<p><strong>映像2：模式&#x2F;内模式映像</strong>，是说明模式在物理设备中的存储结构，定义了模式和内模式之间的对应关系。（唯一）</p>\n<p><strong>三级模式结构和二级映像的作用：保证了数据库系统的数据能够具有较高的逻辑独立性和物理独立性</strong></p>\n<blockquote>\n<p>数据冗余：</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/14/pExd5HsrKunezmM.png\" alt=\"image-20220514221005579\"></p>\n</blockquote>"},{"title":"关系范式","abbrlink":39521,"date":"2022-06-27T14:55:46.000Z","_content":"\n# 六、关系范式\n\n# UNIT 14  规范化与函数依赖\n\n## 14.1 规范化的概念\n\n- ==规范化==是将属性分配给一个实体的过程，用以减少数据冗余和减少更新异常。这个过程实际上就是将一个低一级范式的关系模式，通过==模式分解==转换为若干个高一级范式的关系模式的集合的过程。这个转换过程是通过分析和消除属性间的数据依赖关系来实现的\n- 属性可分为主属性和非主属性。 \n    - 2NF, 3NF考察非主属性和键的关系，\n    - BCNF考察主属性和键的关系。 \n- 属性间的依赖关系包括==函数依赖和多值依赖==。 \n    - 1NF, 2NF, 3NF, BCNF考察了函数依赖关系；\n    - 4NF考察了多值依赖。\n\n## 14.2 不好的数据库设计中的异常\n\n- **数据冗余**\n\n- **修改复杂**：如果更改表所对应的某个实体实例或者关系实例的单个属性时，需要进行多行更新，那么就说这个表存在更新异常\n\n- **插入异常**：无法插入某个实体实例（因为缺少某些属性的值）\n\n- **删除异常**：如果删除表的某一个实体实例或关系实例时，导致丢失另一个不同实体实例或关系实例的信息。\n\n    > 出现更新异常的原因：在这单个模式中存在某些不好的数据依赖，如函数依赖，多值依赖\n\n    ![image-20220419183844031](https://s2.loli.net/2022/04/19/JGpYa7H8OQqsRkj.png)\n\n## 14.3 函数依赖\n\n- ==定义：==\n\n    - 设R（U）（也可写作R<U, F>）是属性集U上的关系模式。 X，Y是U的子集。若对于R（U）的任意一个可能的关系r，r中不可能存在两个元组在X上的属性值相等，而在Y上的属性值不等，则称X函数确定Y或Y函数依赖于X，记作X→Y。\n    - 👉若R的任意关系有：对X中的每个属性值，在Y中都有惟一的值与之对应，则称Y函数依赖于X。\n\n    👉函数依赖是语义范畴的概念，只能通过==语义==确定\n\n    👉函数依赖要求对关系模式的所有关系都成立，不能只看当前给出的表\n\n- ==函数依赖与属性间的关系：==\n\n    - 若X，Y是1—1关系，则存在 X→Y或Y → X 。如学号与借书证号\n    - 若X，Y是 m—1关系，则存在 X→Y 但 Y  ![image-20220419184951354](https://s2.loli.net/2022/04/19/G9gCR1yLKodJeq7.png)  X。如学号与姓名\n    - 若X，Y是 m—n关系，则X，Y间不存在函数依赖关系。如姓名与课程\n\n- ==平凡、非平凡的函数依赖==（一般考虑非平凡的函数依赖）\n\n    <img src=\"https://s2.loli.net/2022/04/19/wIWre3JHfdxbFOV.png\" alt=\"image-20220419185438861\" style=\"zoom:80%;\" />\n\n- ==部分函数依赖==  \n\n<img src=\"https://s2.loli.net/2022/04/26/U1Q6YHJzyajN73o.png\" alt=\"image-20220426103558789\" style=\"zoom:80%;\" />\n\n- ==传递函数依赖==\n\n    ![image-20220419190030879](https://s2.loli.net/2022/04/19/r6nXLRBCqNv3scD.png)\n\n## 14.4 候选键的形式定义\n\n- 候选键（键）：<img src=\"https://s2.loli.net/2022/04/19/7S6ycDlKYeqQ1wP.png\" alt=\"image-20220419190148283\" style=\"zoom:80%;\" />\n- 主键：选定候选键中的一个作为主键，一个关系的主键是唯一的\n- ==主属性:== 包含在任何一个**侯选键**（不是主键）中的属性\n- ==非主属性：==不包含在任何一个候选键中的属性\n- 全键：整个属性组为键。例：R(顾客，商品，日期)\n\n\n\n## 14.5 范式：2NF、3NF和BCNF\n\n### 1、范式\n\n- 范式：关系数据库中符合某一级别的关系模式的集合。所谓“第几范式”，是表示关系的某一种级别，R为第几范式就可以写成 R ∈ xNF。\n\n    ![image-20220419190723383](https://s2.loli.net/2022/04/19/qMThucJCAGmdkby.png)\n\n- ==第1范式==（First Normal Form，简写为1NF）：如果一张表不含有多值属性（有时称为重复字段）和内部结构（比如记录类型）的列， 则称该表为第1范式。==消除多值属性和复合属性==\n\n    > 😢1NF中可能存在很多更新异常\n\n- ==第2范式==（Second Normal Form，简称2NF）：若R∈ INF，且每一个非主属性完全函数依赖于键，则R ∈2NF。==消除非主属性对键的部分依赖==\n\n    > 👉如果存在部分依赖，就要将部分依赖的属性从原关系**移**出，移到一个新关系中，同时将这些属性的决定方也**复制**到新关系中。\n    >\n    > 😢2NF可以消除一些1NF中存在的更新异常，但不能彻底消除更新异常\n\n- ==第3范式==（Third Normal Form，简称3NF）:若R∈2NF，且每一个非主属性不传递函数依赖于键，则R∈3NF。==消除非主属性对键的传递依赖==\n\n    > 👉如果存在传递依赖，就要将传递依赖的属性从原关系**移**出，移到一个新关系中，同时将这些属性的决定方也**复制**到新关系中。\n    >\n    > 😢3NF可以消除一些2NF中存在的更新异常，但不能彻底消除更新异常\n\n- ==BCNF范式== (Boyce-Codd Normal Form ， 简称BCNF）: R∈INF，且==每一个决定因素都包含键==， 则R∈BCNF。==只包含两个属性的一定是BCNF==\n\n    > 👉并非所有的3NF都是BCNF\n    >\n    > 👉如果一个模式属于BCNF，则在函数依赖的范畴内彻底消除了更新异常，但不一定彻底消除了更新异常（因为可能有多值依赖）\n\n### 2、例子：\n\n![image-20220419192440920](https://s2.loli.net/2022/04/19/baomCzFL86RX3Yv.png)\n\n![image-20220419192454380](https://s2.loli.net/2022/04/19/X2PYxjvlK4S58Ns.png)\n\n![image-20220419192518038](https://s2.loli.net/2022/04/19/1cmvZfPVOstly29.png)\n\n![image-20220419192535685](https://s2.loli.net/2022/04/19/QdVkBKPzwmTn5cA.png)\n\n![image-20220419192546331](https://s2.loli.net/2022/04/19/aWdBPgkZGYq6Up8.png)\n\n![image-20220419192600245](https://s2.loli.net/2022/04/19/2lkKzULxM6N3Vqg.png)\n\n### 3、规范化过程\n\n![image-20220419192859741](https://s2.loli.net/2022/04/19/fhsZzE8HUnFqdPT.png)\n\n> 👉使用规范化方法设计数据库的逻辑结构时，并不是要使得到的数据库模式都达到最高范式，而是还需要平衡查询效率和更新代价。如果为了提高查询效率而进行了一些反规范化设计，则需要采取措施处理可能出现的更新异常。\n\n## 14.6 多值依赖\n\n![image-20220605194741769](https://s2.loli.net/2022/06/05/nkGdT754vgjfIJE.png)\n\n![image-20220605194802850](https://s2.loli.net/2022/06/05/iYPhvOfSeFM8glu.png)\n\n# UNIT  15  数据依赖公理与无损分解\n\n## 15.1 公理及其推论\n\n- **逻辑蕴含：**设F是关系模式R的函数依赖集，X、Y 是R的属性子集，如果从F的函数依赖中能够推出X$\\rightarrow$Y，则称F逻辑蕴涵X$\\rightarrow$Y。\n\n- **Armstrong公理(阿式公理）：**\n\n    对R<U, F>（也可写作R(U)，是属性集U上的关系模式）有\n\n    - **A~1~自反律**：若Y⊆X ，则X$\\rightarrow$Y。 由此可以得到所有的平凡函数依赖都是成立的。\n\n        > 平凡的函数依赖：$X\\rightarrow Y，但Y\\subseteq X, 则称X\\rightarrow Y是平凡的函数依赖$\n\n    - **A~2~增广律：**若X$\\rightarrow$Y，则XZ$\\rightarrow$YZ。 即函数依赖两边增加相同属性也成立\n\n    - **A~3~传递律**：若X$\\rightarrow$Y、Y$\\rightarrow$Z，则X$\\rightarrow$Z。即由已知函数依赖可以推导出新依赖\n\n- **公理的推论：**\n\n    - **合并规则**：若X$\\rightarrow$Y 、 X$\\rightarrow$Z，则X$\\rightarrow$YZ。 $因为X\\rightarrow XY,XY\\rightarrow YZ$\n    - **分解规则：**若X$\\rightarrow$YZ，则X$\\rightarrow$Y,X$\\rightarrow$Z。 $因为YZ\\rightarrow Y,YZ\\rightarrow Z$\n    - **伪传递规则**：若X$\\rightarrow$Y 、WY$\\rightarrow$Z，则WX$\\rightarrow$Z。 $因为WX\\rightarrow WY$\n    - **复合规则**：若X$\\rightarrow$Y 、W$\\rightarrow$V，则XW$\\rightarrow$YV。\n\n- **公理系统的特性：**正确性（按阿氏公理推出的依赖都是正确的）、完备性（能推出所有的依赖）\n\n\n\n## 15.2  闭包的概念及其计算\n\n### 1、闭包的概念\n\n- ==函数依赖集F的闭包F^+^==定义为F所逻辑蕴含的函数依赖全体，它包括\n\n    - F中的函数依赖，由属性语义决定；\n\n    - 由F推出的非平凡的函数依赖；\n\n    - 由F推出的平凡的函数依赖：A→φ、 A→A、AB→A、….这一类函数依赖与F无关，对R中任何属性都成立\n\n        > 👉F^+^的计算很麻烦，可能会非常大\n\n- ==属性集X的闭包==：设F是属性集合U上的一个函数依赖集，X⊆U。X~F~^+^={A|X$\\rightarrow$A能由F用阿氏公理导出} 。X~F~^+^称为属性集X关于F的闭包，也可简写为X^+^。 X~F~^+^是由X从F中推出的所有函数依赖右部的集合。\n\n    例子：R(A,B,C)中，F={A→B，B→C}，则A~F~^+^=ABC，B~F~^+^=BC，C~F~^+^=C\n\n    > 👉属性集闭包的计算比F的闭包要容易地多，因此一般计算的是属性集闭包而不是F的闭包\n\n- ==定理4.6：==$$X\\rightarrow Y能从F中用阿氏公理导出的充要条件是：Y⊆X_F^+$$。因此判断X$\\rightarrow$Y在不在F^+^中，只需要判断Y是否属于X~F~^+^\n\n### 2、闭包的计算(迭代)\n\n<img src=\"https://s2.loli.net/2022/04/26/joB6LkeCd4OyDfJ.png\" alt=\"image-20220426102507298\" style=\"zoom: 67%;\" />\n\n<img src=\"https://s2.loli.net/2022/04/25/mASyBoQ6zsOd1pv.png\" alt=\"image-20220425144440930\" style=\"zoom:80%;\" />\n\n<img src=\"https://s2.loli.net/2022/04/25/5ZDPU2QBCMgYNVS.png\" alt=\"image-20220425144608482\" style=\"zoom: 80%;\" />\n\n> ==判断闭包结束的方法：==\n>\n> - X^(i+1)^=X^i^ \n> - 当发现X^i^中包含了所有的属性，即X^i^等于U\n> - 当F中的函数依赖的右边再也找不到X^i^中未出现过的属性\n> - 在F中未用过的函数依赖的左边已没有X^i^的子集\n\n### 3、属性集闭包的作用\n\n- **测试超键：**如果X^+^包含所有R的所有属性，那么X是R的超键（不一定是候选键，因为可能有多余的）\n\n    > **超键：**能唯一区分任意两行数据的属性或属性集。包含超键的多个属性都是超键\n    >\n    > **候选键**（简称键，也称候选码）：某一属性（或属性集）的值可唯一地表示每一个元组。候选键本身是超键，但其任何真子集都不再是超键。候选键包含的属性为主属性\n\n- **检测函数依赖：**判断X->Y 是否成立，只需判断Y⊆X^+^ 。计算X^+^，然后判断这个属性集闭包是否包含Y\n\n- **计算F的函数依赖集闭包F^+^：**计算所有可能的属性子集的属性集闭包，综合得到函数依赖集闭包*\n\n<img src=\"https://s2.loli.net/2022/04/26/ObCDxVqJYtAsl2B.png\" alt=\"image-20220426105302299\" style=\"zoom:80%;\" />\n\n\n\n## 15.3  函数依赖集的等价\n\n- **定义：**如果F^+^ = G^+^ ，就说函数依赖集F覆盖G或F与G等价。\n\n- **性质：**①若G⊆F，则G^+^⊆F^+^；    ②(F^+^)^+^=F^+^\n\n- **定理4.9：**F与G等价的充分必要条件是F⊆G^+^且G⊆F^+^。\n\n- ==判断方法：==\n\n    ![image-20220426105724444](https://s2.loli.net/2022/04/26/KAzek56rPo9C3hX.png)\n\n- **例子：**\n\n    <img src=\"https://s2.loli.net/2022/04/25/sRbvVpyP136ZNtc.png\" alt=\"image-20220425150223057\" style=\"zoom:80%;\" />\n\n\n\n## 15.4  最小函数依赖集F~m~\n\n- **定义：**若F满足下列条件，则称其为一个最小函数依赖集F~m~。\n\n    - F中每个函数依赖的右部都是单属性；(即**右部没有多余属性**)\n\n    - 对于F的任一函数依赖X→A，F — {X→A}与F都不等价，即**无多余函数依赖**；\n\n    - 对于F中的任一函数依赖X→A和X的真子集X’，(F-(X→A))U{X’→A}与F都不等价,即**左部无多余属性**。\n\n        > ⚠注意：F~m~不是惟一的。\n\n- **每个F都与F~m~ 等价**\n\n- ==F~m~的计算（算法4.2）：==\n\n    - **分解：**使F中任一函数依赖的右部仅含有单属性。\n    - **最小化左边的多余属性：**\n        方法：对F中任一XY→A，在F中求X^+^， 若A⊆X，则Y为多余的。\n    - **删除冗余的函数依赖：**\n        方法：对F中任一X→A，==在F – {X→A}中==求X^+^， 若A⊆X^+^，则X→A为多余的。\n\n    ![image-20220605102019406](https://s2.loli.net/2022/06/05/Vk2X54DqueIgUJc.png)\n\n- **例子1：**\n\n    ![image-20220605102147172](https://s2.loli.net/2022/06/05/Mv3D9tE2lCJAKYd.png)\n\n- **例子2**：\n\n    ![image-20220605102402476](https://s2.loli.net/2022/06/05/dWjYyIfEGcq2nBx.png)\n\n    \n\n## 15.5  等价模式分解的定义\n\n- ==模式分解：==将一个关系模式（五元组R（U，D，dom，F））分解成一组等价的关系子模式，包括属性的分解、关系的分解、函数依赖的分解三个方面。\n\n    > 👉R是关系模式的名称，U是属性集，D是域，dom是U到D的映射，F是函数依赖集\n    >\n    > 例子：\n    >\n    > ```sql\n    > STUDENT(U,D,dom,F)\n    > U{sno,name,age}　　//理解为表的字段集合\n    > D{char,int}　　// 理解为表中字段的类型集合\n    > dom{dom(sno)=dom(name)=char,dom(age)=int}　　// 理解为每个字段具体的取值\n    > F{sno-->name,sno-->age}　　// 理解为表字段的关系\n    > ```\n\n    > 模式分解有很多种方法，有好坏之分\n\n- ==等价模式分解的要求：属性、关系、依赖==\n\n    - **分解后子模式的属性集与原模式属性集相同**\n\n        > 如果关系模式R(A)被分解为关系模式R~1~(A~1~), R~2~(A~2~),…, R~n~(A~n~),  且A = A~1~ ⋃ A~2~ ⋃… ⋃ A~n~，则该分解是属性等价的分解\n        >\n        > 👉属性等价是最容易满足的条件\n\n    - **无损连接性**：查询时的连接操作是否会丢失某些信息或多出某些信息。 \n\n        > 如果关系模式R(A)被分解为关系模式R~1~(A~1~), R~2~(A~2~),…, R~n~(A~n~), 且R= R~1~ ⋈ R~2~ ⋈ … ⋈ R~n~，则该分解是无损连接的分解\n        >\n        > 如果要具有无损连接性，则必须满足属性等价且具有冗余属性（`这个冗余属性应和函数依赖结合考虑`），但满足属性等价且有冗余属性的分解不一定具有无损连接性，例子：\n        >\n        > <img src=\"https://s2.loli.net/2022/04/25/vOFjr8IW5GBhleP.png\" alt=\"image-20220425153433324\" style=\"zoom: 50%;\" />\n\n    - **保持函数依赖**：分解后的模式满足的函数依赖集是否能蕴含分解前的依赖集\n\n        > <img src=\"https://s2.loli.net/2022/04/25/qCfhVvyYjDJcP5l.png\" alt=\"image-20220425153531696\" style=\"zoom:67%;\" />\n\n- 例子：\n\n    <img src=\"https://s2.loli.net/2022/04/25/j9AmzyD6BlWCnN8.png\" alt=\"image-20220425154123589\" style=\"zoom:80%;\" />\n\n    <img src=\"https://s2.loli.net/2022/04/25/g4XmCRl8Fy19qwc.png\" alt=\"image-20220425154134781\" style=\"zoom:80%;\" />\n\n\n\n## 15.6  无损连接性\n\n- ==概念：==R<U，F>，若R的分解ρ={R~1~, R~2~….R~k~}对R中任何一个关系r，有：r = Π~R1~(r) ⋈ Π~R2~(r) ⋈ … ⋈ Π~Rk~(r)，则称分解ρ具有无损连接性\n\n    >  Π~R1~(r) 表示关系r在模式R~1~的属性上的投影\n\n- ==判断分解是否具有无损连接性==\n\n    <img src=\"https://s2.loli.net/2022/04/25/PC2613TjuMZmyal.png\" alt=\"image-20220425154534993\" style=\"zoom:80%;\" />\n\n    <img src=\"https://s2.loli.net/2022/04/25/TwJHi9BX6D8Lg7Z.png\" alt=\"image-20220425154559720\" style=\"zoom:80%;\" />\n\n    <img src=\"https://s2.loli.net/2022/04/25/h7ibSVUkmKfnqlI.png\" alt=\"image-20220425154954642\" style=\"zoom:80%;\" />\n\n    <img src=\"https://s2.loli.net/2022/04/25/nOEwXzsNcbW8TFH.png\" alt=\"image-20220425155541795\" style=\"zoom: 80%;\" />\n\n    <img src=\"https://s2.loli.net/2022/04/25/dyglfmAaVetrUqN.png\" alt=\"image-20220425155623036\" style=\"zoom: 80%;\" />\n\n    <img src=\"https://s2.loli.net/2022/05/31/2k6WrVuzDolyKJ7.png\" alt=\"image-20220425155553454\" style=\"zoom:80%;\" />\n\n----\n\n> ==特殊情况（只有两个子模式）==：\n>\n> <img src=\"https://s2.loli.net/2022/04/25/A5p4T9EfUoG1IWh.png\" alt=\"image-20220425155902720\" style=\"zoom:80%;\" />\n>\n> <img src=\"https://s2.loli.net/2022/04/25/AuR1ZMPwoak9WeG.png\" alt=\"image-20220425155950975\" style=\"zoom:80%;\" />\n>\n> <img src=\"https://s2.loli.net/2022/04/25/woP8IJCkZ9chieF.png\" alt=\"image-20220425160036787\" style=\"zoom: 80%;\" />\n>\n> <img src=\"https://s2.loli.net/2022/04/25/hP6KGEtWgXnMJov.png\" alt=\"image-20220425160223865\" style=\"zoom:80%;\" />\n>\n> <img src=\"https://s2.loli.net/2022/04/25/tlIirfqhawMRQek.png\" alt=\"image-20220425160107664\" style=\"zoom:80%;\" />\n>\n> <img src=\"https://s2.loli.net/2022/04/25/eO4lZwEg8jhoXQC.png\" alt=\"image-20220425160241463\" style=\"zoom:80%;\" />\n\n\n\n## 15.7  函数依赖保持性\n\n- ==Π~Z~(F)的定义：==设F是关系模式 R的函数依赖集，Z是R的一个属性集合，则称Z所涉及到的==F^+^==中所有的函数依赖为F在Z上的投影，记为**Π~Z~(F)**，有：Π~Z~(F)={X→Y|X→Y∈F^+^且XY⊆Z}\n\n    > 例如F={A→B,C→B,B→D,D→C}，设Z=CD，则Π~CD~(F)={C→D,  D→C}（==考察的是F^+^==）\n\n- ==函数依赖保持性的定义==：设关系模式R的一个分解ρ = {R~1~,R~2~,…,R~k~}，F是R的函数依赖集，如果F等价于Π~R1~(F)∪Π~R2~(F)∪…∪Π~Rk~(F)，则称分解ρ具有函数依赖保持性。\n\n- **例子：**\n\n    <img src=\"https://s2.loli.net/2022/04/25/a4Io1rjNhXJuHnO.png\" alt=\"image-20220425161014159\" style=\"zoom:80%;\" />\n\n    <img src=\"https://s2.loli.net/2022/04/25/9EKBxPi2UXthy6H.png\" alt=\"image-20220425161051699\" style=\"zoom:80%;\" />\n\n    <img src=\"https://s2.loli.net/2022/04/25/Xprh7kqT6Mlj4BU.png\" alt=\"image-20220425161138947\" style=\"zoom:80%;\" />\n\n\n\n## 15.8  模式分解的算法（重点：3NF分解）\n\n<img src=\"https://s2.loli.net/2022/05/31/ehvC5WJd6LVlGHB.png\" alt=\"image-20220425161643651\" style=\"zoom:80%;\" />\n\n<img src=\"https://s2.loli.net/2022/04/25/bJ87MfZP4CLY5r1.png\" alt=\"image-20220425161939694\" style=\"zoom:80%;\" />\n\n<img src=\"https://s2.loli.net/2022/04/25/5md4WqKs7ALzfSx.png\" alt=\"image-20220425162252537\" style=\"zoom:80%;\" />\n\n> ==BCNF范式== (Boyce-Codd Normal Form ， 简称BCNF）: R∈INF，且==每一个决定因素都包含键==， 则R∈BCNF。==只包含两个属性的一定是BCNF==\n\n<img src=\"https://s2.loli.net/2022/05/31/L1vhbSIQRmkeJ5c.png\" alt=\"image-20220425163039378\" style=\"zoom:80%;\" />\n","source":"_posts/关系范式.md","raw":"---\ntitle: 关系范式\ntags:\n  - 数据库\ncategory:\n  - 数据库\nabbrlink: 39521\ndate: 2022-06-27 22:55:46\n---\n\n# 六、关系范式\n\n# UNIT 14  规范化与函数依赖\n\n## 14.1 规范化的概念\n\n- ==规范化==是将属性分配给一个实体的过程，用以减少数据冗余和减少更新异常。这个过程实际上就是将一个低一级范式的关系模式，通过==模式分解==转换为若干个高一级范式的关系模式的集合的过程。这个转换过程是通过分析和消除属性间的数据依赖关系来实现的\n- 属性可分为主属性和非主属性。 \n    - 2NF, 3NF考察非主属性和键的关系，\n    - BCNF考察主属性和键的关系。 \n- 属性间的依赖关系包括==函数依赖和多值依赖==。 \n    - 1NF, 2NF, 3NF, BCNF考察了函数依赖关系；\n    - 4NF考察了多值依赖。\n\n## 14.2 不好的数据库设计中的异常\n\n- **数据冗余**\n\n- **修改复杂**：如果更改表所对应的某个实体实例或者关系实例的单个属性时，需要进行多行更新，那么就说这个表存在更新异常\n\n- **插入异常**：无法插入某个实体实例（因为缺少某些属性的值）\n\n- **删除异常**：如果删除表的某一个实体实例或关系实例时，导致丢失另一个不同实体实例或关系实例的信息。\n\n    > 出现更新异常的原因：在这单个模式中存在某些不好的数据依赖，如函数依赖，多值依赖\n\n    ![image-20220419183844031](https://s2.loli.net/2022/04/19/JGpYa7H8OQqsRkj.png)\n\n## 14.3 函数依赖\n\n- ==定义：==\n\n    - 设R（U）（也可写作R<U, F>）是属性集U上的关系模式。 X，Y是U的子集。若对于R（U）的任意一个可能的关系r，r中不可能存在两个元组在X上的属性值相等，而在Y上的属性值不等，则称X函数确定Y或Y函数依赖于X，记作X→Y。\n    - 👉若R的任意关系有：对X中的每个属性值，在Y中都有惟一的值与之对应，则称Y函数依赖于X。\n\n    👉函数依赖是语义范畴的概念，只能通过==语义==确定\n\n    👉函数依赖要求对关系模式的所有关系都成立，不能只看当前给出的表\n\n- ==函数依赖与属性间的关系：==\n\n    - 若X，Y是1—1关系，则存在 X→Y或Y → X 。如学号与借书证号\n    - 若X，Y是 m—1关系，则存在 X→Y 但 Y  ![image-20220419184951354](https://s2.loli.net/2022/04/19/G9gCR1yLKodJeq7.png)  X。如学号与姓名\n    - 若X，Y是 m—n关系，则X，Y间不存在函数依赖关系。如姓名与课程\n\n- ==平凡、非平凡的函数依赖==（一般考虑非平凡的函数依赖）\n\n    <img src=\"https://s2.loli.net/2022/04/19/wIWre3JHfdxbFOV.png\" alt=\"image-20220419185438861\" style=\"zoom:80%;\" />\n\n- ==部分函数依赖==  \n\n<img src=\"https://s2.loli.net/2022/04/26/U1Q6YHJzyajN73o.png\" alt=\"image-20220426103558789\" style=\"zoom:80%;\" />\n\n- ==传递函数依赖==\n\n    ![image-20220419190030879](https://s2.loli.net/2022/04/19/r6nXLRBCqNv3scD.png)\n\n## 14.4 候选键的形式定义\n\n- 候选键（键）：<img src=\"https://s2.loli.net/2022/04/19/7S6ycDlKYeqQ1wP.png\" alt=\"image-20220419190148283\" style=\"zoom:80%;\" />\n- 主键：选定候选键中的一个作为主键，一个关系的主键是唯一的\n- ==主属性:== 包含在任何一个**侯选键**（不是主键）中的属性\n- ==非主属性：==不包含在任何一个候选键中的属性\n- 全键：整个属性组为键。例：R(顾客，商品，日期)\n\n\n\n## 14.5 范式：2NF、3NF和BCNF\n\n### 1、范式\n\n- 范式：关系数据库中符合某一级别的关系模式的集合。所谓“第几范式”，是表示关系的某一种级别，R为第几范式就可以写成 R ∈ xNF。\n\n    ![image-20220419190723383](https://s2.loli.net/2022/04/19/qMThucJCAGmdkby.png)\n\n- ==第1范式==（First Normal Form，简写为1NF）：如果一张表不含有多值属性（有时称为重复字段）和内部结构（比如记录类型）的列， 则称该表为第1范式。==消除多值属性和复合属性==\n\n    > 😢1NF中可能存在很多更新异常\n\n- ==第2范式==（Second Normal Form，简称2NF）：若R∈ INF，且每一个非主属性完全函数依赖于键，则R ∈2NF。==消除非主属性对键的部分依赖==\n\n    > 👉如果存在部分依赖，就要将部分依赖的属性从原关系**移**出，移到一个新关系中，同时将这些属性的决定方也**复制**到新关系中。\n    >\n    > 😢2NF可以消除一些1NF中存在的更新异常，但不能彻底消除更新异常\n\n- ==第3范式==（Third Normal Form，简称3NF）:若R∈2NF，且每一个非主属性不传递函数依赖于键，则R∈3NF。==消除非主属性对键的传递依赖==\n\n    > 👉如果存在传递依赖，就要将传递依赖的属性从原关系**移**出，移到一个新关系中，同时将这些属性的决定方也**复制**到新关系中。\n    >\n    > 😢3NF可以消除一些2NF中存在的更新异常，但不能彻底消除更新异常\n\n- ==BCNF范式== (Boyce-Codd Normal Form ， 简称BCNF）: R∈INF，且==每一个决定因素都包含键==， 则R∈BCNF。==只包含两个属性的一定是BCNF==\n\n    > 👉并非所有的3NF都是BCNF\n    >\n    > 👉如果一个模式属于BCNF，则在函数依赖的范畴内彻底消除了更新异常，但不一定彻底消除了更新异常（因为可能有多值依赖）\n\n### 2、例子：\n\n![image-20220419192440920](https://s2.loli.net/2022/04/19/baomCzFL86RX3Yv.png)\n\n![image-20220419192454380](https://s2.loli.net/2022/04/19/X2PYxjvlK4S58Ns.png)\n\n![image-20220419192518038](https://s2.loli.net/2022/04/19/1cmvZfPVOstly29.png)\n\n![image-20220419192535685](https://s2.loli.net/2022/04/19/QdVkBKPzwmTn5cA.png)\n\n![image-20220419192546331](https://s2.loli.net/2022/04/19/aWdBPgkZGYq6Up8.png)\n\n![image-20220419192600245](https://s2.loli.net/2022/04/19/2lkKzULxM6N3Vqg.png)\n\n### 3、规范化过程\n\n![image-20220419192859741](https://s2.loli.net/2022/04/19/fhsZzE8HUnFqdPT.png)\n\n> 👉使用规范化方法设计数据库的逻辑结构时，并不是要使得到的数据库模式都达到最高范式，而是还需要平衡查询效率和更新代价。如果为了提高查询效率而进行了一些反规范化设计，则需要采取措施处理可能出现的更新异常。\n\n## 14.6 多值依赖\n\n![image-20220605194741769](https://s2.loli.net/2022/06/05/nkGdT754vgjfIJE.png)\n\n![image-20220605194802850](https://s2.loli.net/2022/06/05/iYPhvOfSeFM8glu.png)\n\n# UNIT  15  数据依赖公理与无损分解\n\n## 15.1 公理及其推论\n\n- **逻辑蕴含：**设F是关系模式R的函数依赖集，X、Y 是R的属性子集，如果从F的函数依赖中能够推出X$\\rightarrow$Y，则称F逻辑蕴涵X$\\rightarrow$Y。\n\n- **Armstrong公理(阿式公理）：**\n\n    对R<U, F>（也可写作R(U)，是属性集U上的关系模式）有\n\n    - **A~1~自反律**：若Y⊆X ，则X$\\rightarrow$Y。 由此可以得到所有的平凡函数依赖都是成立的。\n\n        > 平凡的函数依赖：$X\\rightarrow Y，但Y\\subseteq X, 则称X\\rightarrow Y是平凡的函数依赖$\n\n    - **A~2~增广律：**若X$\\rightarrow$Y，则XZ$\\rightarrow$YZ。 即函数依赖两边增加相同属性也成立\n\n    - **A~3~传递律**：若X$\\rightarrow$Y、Y$\\rightarrow$Z，则X$\\rightarrow$Z。即由已知函数依赖可以推导出新依赖\n\n- **公理的推论：**\n\n    - **合并规则**：若X$\\rightarrow$Y 、 X$\\rightarrow$Z，则X$\\rightarrow$YZ。 $因为X\\rightarrow XY,XY\\rightarrow YZ$\n    - **分解规则：**若X$\\rightarrow$YZ，则X$\\rightarrow$Y,X$\\rightarrow$Z。 $因为YZ\\rightarrow Y,YZ\\rightarrow Z$\n    - **伪传递规则**：若X$\\rightarrow$Y 、WY$\\rightarrow$Z，则WX$\\rightarrow$Z。 $因为WX\\rightarrow WY$\n    - **复合规则**：若X$\\rightarrow$Y 、W$\\rightarrow$V，则XW$\\rightarrow$YV。\n\n- **公理系统的特性：**正确性（按阿氏公理推出的依赖都是正确的）、完备性（能推出所有的依赖）\n\n\n\n## 15.2  闭包的概念及其计算\n\n### 1、闭包的概念\n\n- ==函数依赖集F的闭包F^+^==定义为F所逻辑蕴含的函数依赖全体，它包括\n\n    - F中的函数依赖，由属性语义决定；\n\n    - 由F推出的非平凡的函数依赖；\n\n    - 由F推出的平凡的函数依赖：A→φ、 A→A、AB→A、….这一类函数依赖与F无关，对R中任何属性都成立\n\n        > 👉F^+^的计算很麻烦，可能会非常大\n\n- ==属性集X的闭包==：设F是属性集合U上的一个函数依赖集，X⊆U。X~F~^+^={A|X$\\rightarrow$A能由F用阿氏公理导出} 。X~F~^+^称为属性集X关于F的闭包，也可简写为X^+^。 X~F~^+^是由X从F中推出的所有函数依赖右部的集合。\n\n    例子：R(A,B,C)中，F={A→B，B→C}，则A~F~^+^=ABC，B~F~^+^=BC，C~F~^+^=C\n\n    > 👉属性集闭包的计算比F的闭包要容易地多，因此一般计算的是属性集闭包而不是F的闭包\n\n- ==定理4.6：==$$X\\rightarrow Y能从F中用阿氏公理导出的充要条件是：Y⊆X_F^+$$。因此判断X$\\rightarrow$Y在不在F^+^中，只需要判断Y是否属于X~F~^+^\n\n### 2、闭包的计算(迭代)\n\n<img src=\"https://s2.loli.net/2022/04/26/joB6LkeCd4OyDfJ.png\" alt=\"image-20220426102507298\" style=\"zoom: 67%;\" />\n\n<img src=\"https://s2.loli.net/2022/04/25/mASyBoQ6zsOd1pv.png\" alt=\"image-20220425144440930\" style=\"zoom:80%;\" />\n\n<img src=\"https://s2.loli.net/2022/04/25/5ZDPU2QBCMgYNVS.png\" alt=\"image-20220425144608482\" style=\"zoom: 80%;\" />\n\n> ==判断闭包结束的方法：==\n>\n> - X^(i+1)^=X^i^ \n> - 当发现X^i^中包含了所有的属性，即X^i^等于U\n> - 当F中的函数依赖的右边再也找不到X^i^中未出现过的属性\n> - 在F中未用过的函数依赖的左边已没有X^i^的子集\n\n### 3、属性集闭包的作用\n\n- **测试超键：**如果X^+^包含所有R的所有属性，那么X是R的超键（不一定是候选键，因为可能有多余的）\n\n    > **超键：**能唯一区分任意两行数据的属性或属性集。包含超键的多个属性都是超键\n    >\n    > **候选键**（简称键，也称候选码）：某一属性（或属性集）的值可唯一地表示每一个元组。候选键本身是超键，但其任何真子集都不再是超键。候选键包含的属性为主属性\n\n- **检测函数依赖：**判断X->Y 是否成立，只需判断Y⊆X^+^ 。计算X^+^，然后判断这个属性集闭包是否包含Y\n\n- **计算F的函数依赖集闭包F^+^：**计算所有可能的属性子集的属性集闭包，综合得到函数依赖集闭包*\n\n<img src=\"https://s2.loli.net/2022/04/26/ObCDxVqJYtAsl2B.png\" alt=\"image-20220426105302299\" style=\"zoom:80%;\" />\n\n\n\n## 15.3  函数依赖集的等价\n\n- **定义：**如果F^+^ = G^+^ ，就说函数依赖集F覆盖G或F与G等价。\n\n- **性质：**①若G⊆F，则G^+^⊆F^+^；    ②(F^+^)^+^=F^+^\n\n- **定理4.9：**F与G等价的充分必要条件是F⊆G^+^且G⊆F^+^。\n\n- ==判断方法：==\n\n    ![image-20220426105724444](https://s2.loli.net/2022/04/26/KAzek56rPo9C3hX.png)\n\n- **例子：**\n\n    <img src=\"https://s2.loli.net/2022/04/25/sRbvVpyP136ZNtc.png\" alt=\"image-20220425150223057\" style=\"zoom:80%;\" />\n\n\n\n## 15.4  最小函数依赖集F~m~\n\n- **定义：**若F满足下列条件，则称其为一个最小函数依赖集F~m~。\n\n    - F中每个函数依赖的右部都是单属性；(即**右部没有多余属性**)\n\n    - 对于F的任一函数依赖X→A，F — {X→A}与F都不等价，即**无多余函数依赖**；\n\n    - 对于F中的任一函数依赖X→A和X的真子集X’，(F-(X→A))U{X’→A}与F都不等价,即**左部无多余属性**。\n\n        > ⚠注意：F~m~不是惟一的。\n\n- **每个F都与F~m~ 等价**\n\n- ==F~m~的计算（算法4.2）：==\n\n    - **分解：**使F中任一函数依赖的右部仅含有单属性。\n    - **最小化左边的多余属性：**\n        方法：对F中任一XY→A，在F中求X^+^， 若A⊆X，则Y为多余的。\n    - **删除冗余的函数依赖：**\n        方法：对F中任一X→A，==在F – {X→A}中==求X^+^， 若A⊆X^+^，则X→A为多余的。\n\n    ![image-20220605102019406](https://s2.loli.net/2022/06/05/Vk2X54DqueIgUJc.png)\n\n- **例子1：**\n\n    ![image-20220605102147172](https://s2.loli.net/2022/06/05/Mv3D9tE2lCJAKYd.png)\n\n- **例子2**：\n\n    ![image-20220605102402476](https://s2.loli.net/2022/06/05/dWjYyIfEGcq2nBx.png)\n\n    \n\n## 15.5  等价模式分解的定义\n\n- ==模式分解：==将一个关系模式（五元组R（U，D，dom，F））分解成一组等价的关系子模式，包括属性的分解、关系的分解、函数依赖的分解三个方面。\n\n    > 👉R是关系模式的名称，U是属性集，D是域，dom是U到D的映射，F是函数依赖集\n    >\n    > 例子：\n    >\n    > ```sql\n    > STUDENT(U,D,dom,F)\n    > U{sno,name,age}　　//理解为表的字段集合\n    > D{char,int}　　// 理解为表中字段的类型集合\n    > dom{dom(sno)=dom(name)=char,dom(age)=int}　　// 理解为每个字段具体的取值\n    > F{sno-->name,sno-->age}　　// 理解为表字段的关系\n    > ```\n\n    > 模式分解有很多种方法，有好坏之分\n\n- ==等价模式分解的要求：属性、关系、依赖==\n\n    - **分解后子模式的属性集与原模式属性集相同**\n\n        > 如果关系模式R(A)被分解为关系模式R~1~(A~1~), R~2~(A~2~),…, R~n~(A~n~),  且A = A~1~ ⋃ A~2~ ⋃… ⋃ A~n~，则该分解是属性等价的分解\n        >\n        > 👉属性等价是最容易满足的条件\n\n    - **无损连接性**：查询时的连接操作是否会丢失某些信息或多出某些信息。 \n\n        > 如果关系模式R(A)被分解为关系模式R~1~(A~1~), R~2~(A~2~),…, R~n~(A~n~), 且R= R~1~ ⋈ R~2~ ⋈ … ⋈ R~n~，则该分解是无损连接的分解\n        >\n        > 如果要具有无损连接性，则必须满足属性等价且具有冗余属性（`这个冗余属性应和函数依赖结合考虑`），但满足属性等价且有冗余属性的分解不一定具有无损连接性，例子：\n        >\n        > <img src=\"https://s2.loli.net/2022/04/25/vOFjr8IW5GBhleP.png\" alt=\"image-20220425153433324\" style=\"zoom: 50%;\" />\n\n    - **保持函数依赖**：分解后的模式满足的函数依赖集是否能蕴含分解前的依赖集\n\n        > <img src=\"https://s2.loli.net/2022/04/25/qCfhVvyYjDJcP5l.png\" alt=\"image-20220425153531696\" style=\"zoom:67%;\" />\n\n- 例子：\n\n    <img src=\"https://s2.loli.net/2022/04/25/j9AmzyD6BlWCnN8.png\" alt=\"image-20220425154123589\" style=\"zoom:80%;\" />\n\n    <img src=\"https://s2.loli.net/2022/04/25/g4XmCRl8Fy19qwc.png\" alt=\"image-20220425154134781\" style=\"zoom:80%;\" />\n\n\n\n## 15.6  无损连接性\n\n- ==概念：==R<U，F>，若R的分解ρ={R~1~, R~2~….R~k~}对R中任何一个关系r，有：r = Π~R1~(r) ⋈ Π~R2~(r) ⋈ … ⋈ Π~Rk~(r)，则称分解ρ具有无损连接性\n\n    >  Π~R1~(r) 表示关系r在模式R~1~的属性上的投影\n\n- ==判断分解是否具有无损连接性==\n\n    <img src=\"https://s2.loli.net/2022/04/25/PC2613TjuMZmyal.png\" alt=\"image-20220425154534993\" style=\"zoom:80%;\" />\n\n    <img src=\"https://s2.loli.net/2022/04/25/TwJHi9BX6D8Lg7Z.png\" alt=\"image-20220425154559720\" style=\"zoom:80%;\" />\n\n    <img src=\"https://s2.loli.net/2022/04/25/h7ibSVUkmKfnqlI.png\" alt=\"image-20220425154954642\" style=\"zoom:80%;\" />\n\n    <img src=\"https://s2.loli.net/2022/04/25/nOEwXzsNcbW8TFH.png\" alt=\"image-20220425155541795\" style=\"zoom: 80%;\" />\n\n    <img src=\"https://s2.loli.net/2022/04/25/dyglfmAaVetrUqN.png\" alt=\"image-20220425155623036\" style=\"zoom: 80%;\" />\n\n    <img src=\"https://s2.loli.net/2022/05/31/2k6WrVuzDolyKJ7.png\" alt=\"image-20220425155553454\" style=\"zoom:80%;\" />\n\n----\n\n> ==特殊情况（只有两个子模式）==：\n>\n> <img src=\"https://s2.loli.net/2022/04/25/A5p4T9EfUoG1IWh.png\" alt=\"image-20220425155902720\" style=\"zoom:80%;\" />\n>\n> <img src=\"https://s2.loli.net/2022/04/25/AuR1ZMPwoak9WeG.png\" alt=\"image-20220425155950975\" style=\"zoom:80%;\" />\n>\n> <img src=\"https://s2.loli.net/2022/04/25/woP8IJCkZ9chieF.png\" alt=\"image-20220425160036787\" style=\"zoom: 80%;\" />\n>\n> <img src=\"https://s2.loli.net/2022/04/25/hP6KGEtWgXnMJov.png\" alt=\"image-20220425160223865\" style=\"zoom:80%;\" />\n>\n> <img src=\"https://s2.loli.net/2022/04/25/tlIirfqhawMRQek.png\" alt=\"image-20220425160107664\" style=\"zoom:80%;\" />\n>\n> <img src=\"https://s2.loli.net/2022/04/25/eO4lZwEg8jhoXQC.png\" alt=\"image-20220425160241463\" style=\"zoom:80%;\" />\n\n\n\n## 15.7  函数依赖保持性\n\n- ==Π~Z~(F)的定义：==设F是关系模式 R的函数依赖集，Z是R的一个属性集合，则称Z所涉及到的==F^+^==中所有的函数依赖为F在Z上的投影，记为**Π~Z~(F)**，有：Π~Z~(F)={X→Y|X→Y∈F^+^且XY⊆Z}\n\n    > 例如F={A→B,C→B,B→D,D→C}，设Z=CD，则Π~CD~(F)={C→D,  D→C}（==考察的是F^+^==）\n\n- ==函数依赖保持性的定义==：设关系模式R的一个分解ρ = {R~1~,R~2~,…,R~k~}，F是R的函数依赖集，如果F等价于Π~R1~(F)∪Π~R2~(F)∪…∪Π~Rk~(F)，则称分解ρ具有函数依赖保持性。\n\n- **例子：**\n\n    <img src=\"https://s2.loli.net/2022/04/25/a4Io1rjNhXJuHnO.png\" alt=\"image-20220425161014159\" style=\"zoom:80%;\" />\n\n    <img src=\"https://s2.loli.net/2022/04/25/9EKBxPi2UXthy6H.png\" alt=\"image-20220425161051699\" style=\"zoom:80%;\" />\n\n    <img src=\"https://s2.loli.net/2022/04/25/Xprh7kqT6Mlj4BU.png\" alt=\"image-20220425161138947\" style=\"zoom:80%;\" />\n\n\n\n## 15.8  模式分解的算法（重点：3NF分解）\n\n<img src=\"https://s2.loli.net/2022/05/31/ehvC5WJd6LVlGHB.png\" alt=\"image-20220425161643651\" style=\"zoom:80%;\" />\n\n<img src=\"https://s2.loli.net/2022/04/25/bJ87MfZP4CLY5r1.png\" alt=\"image-20220425161939694\" style=\"zoom:80%;\" />\n\n<img src=\"https://s2.loli.net/2022/04/25/5md4WqKs7ALzfSx.png\" alt=\"image-20220425162252537\" style=\"zoom:80%;\" />\n\n> ==BCNF范式== (Boyce-Codd Normal Form ， 简称BCNF）: R∈INF，且==每一个决定因素都包含键==， 则R∈BCNF。==只包含两个属性的一定是BCNF==\n\n<img src=\"https://s2.loli.net/2022/05/31/L1vhbSIQRmkeJ5c.png\" alt=\"image-20220425163039378\" style=\"zoom:80%;\" />\n","slug":"关系范式","published":1,"updated":"2022-06-27T15:12:30.876Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4ww07z10000iksk6k81e665","content":"<h1 id=\"六、关系范式\"><a href=\"#六、关系范式\" class=\"headerlink\" title=\"六、关系范式\"></a>六、关系范式</h1><h1 id=\"UNIT-14-规范化与函数依赖\"><a href=\"#UNIT-14-规范化与函数依赖\" class=\"headerlink\" title=\"UNIT 14  规范化与函数依赖\"></a>UNIT 14  规范化与函数依赖</h1><h2 id=\"14-1-规范化的概念\"><a href=\"#14-1-规范化的概念\" class=\"headerlink\" title=\"14.1 规范化的概念\"></a>14.1 规范化的概念</h2><ul>\n<li>&#x3D;&#x3D;规范化&#x3D;&#x3D;是将属性分配给一个实体的过程，用以减少数据冗余和减少更新异常。这个过程实际上就是将一个低一级范式的关系模式，通过&#x3D;&#x3D;模式分解&#x3D;&#x3D;转换为若干个高一级范式的关系模式的集合的过程。这个转换过程是通过分析和消除属性间的数据依赖关系来实现的</li>\n<li>属性可分为主属性和非主属性。 <ul>\n<li>2NF, 3NF考察非主属性和键的关系，</li>\n<li>BCNF考察主属性和键的关系。</li>\n</ul>\n</li>\n<li>属性间的依赖关系包括&#x3D;&#x3D;函数依赖和多值依赖&#x3D;&#x3D;。 <ul>\n<li>1NF, 2NF, 3NF, BCNF考察了函数依赖关系；</li>\n<li>4NF考察了多值依赖。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"14-2-不好的数据库设计中的异常\"><a href=\"#14-2-不好的数据库设计中的异常\" class=\"headerlink\" title=\"14.2 不好的数据库设计中的异常\"></a>14.2 不好的数据库设计中的异常</h2><ul>\n<li><p><strong>数据冗余</strong></p>\n</li>\n<li><p><strong>修改复杂</strong>：如果更改表所对应的某个实体实例或者关系实例的单个属性时，需要进行多行更新，那么就说这个表存在更新异常</p>\n</li>\n<li><p><strong>插入异常</strong>：无法插入某个实体实例（因为缺少某些属性的值）</p>\n</li>\n<li><p><strong>删除异常</strong>：如果删除表的某一个实体实例或关系实例时，导致丢失另一个不同实体实例或关系实例的信息。</p>\n<blockquote>\n<p>出现更新异常的原因：在这单个模式中存在某些不好的数据依赖，如函数依赖，多值依赖</p>\n</blockquote>\n<p>  <img data-src=\"https://s2.loli.net/2022/04/19/JGpYa7H8OQqsRkj.png\" alt=\"image-20220419183844031\"></p>\n</li>\n</ul>\n<h2 id=\"14-3-函数依赖\"><a href=\"#14-3-函数依赖\" class=\"headerlink\" title=\"14.3 函数依赖\"></a>14.3 函数依赖</h2><ul>\n<li><p>&#x3D;&#x3D;定义：&#x3D;&#x3D;</p>\n<ul>\n<li>设R（U）（也可写作R&lt;U, F&gt;）是属性集U上的关系模式。 X，Y是U的子集。若对于R（U）的任意一个可能的关系r，r中不可能存在两个元组在X上的属性值相等，而在Y上的属性值不等，则称X函数确定Y或Y函数依赖于X，记作X→Y。</li>\n<li>👉若R的任意关系有：对X中的每个属性值，在Y中都有惟一的值与之对应，则称Y函数依赖于X。</li>\n</ul>\n<p>  👉函数依赖是语义范畴的概念，只能通过&#x3D;&#x3D;语义&#x3D;&#x3D;确定</p>\n<p>  👉函数依赖要求对关系模式的所有关系都成立，不能只看当前给出的表</p>\n</li>\n<li><p>&#x3D;&#x3D;函数依赖与属性间的关系：&#x3D;&#x3D;</p>\n<ul>\n<li>若X，Y是1—1关系，则存在 X→Y或Y → X 。如学号与借书证号</li>\n<li>若X，Y是 m—1关系，则存在 X→Y 但 Y  <img data-src=\"https://s2.loli.net/2022/04/19/G9gCR1yLKodJeq7.png\" alt=\"image-20220419184951354\">  X。如学号与姓名</li>\n<li>若X，Y是 m—n关系，则X，Y间不存在函数依赖关系。如姓名与课程</li>\n</ul>\n</li>\n<li><p>&#x3D;&#x3D;平凡、非平凡的函数依赖&#x3D;&#x3D;（一般考虑非平凡的函数依赖）</p>\n  <img data-src=\"https://s2.loli.net/2022/04/19/wIWre3JHfdxbFOV.png\" alt=\"image-20220419185438861\" style=\"zoom:80%;\" />\n</li>\n<li><p>&#x3D;&#x3D;部分函数依赖&#x3D;&#x3D;</p>\n</li>\n</ul>\n<img data-src=\"https://s2.loli.net/2022/04/26/U1Q6YHJzyajN73o.png\" alt=\"image-20220426103558789\" style=\"zoom:80%;\" />\n\n<ul>\n<li><p>&#x3D;&#x3D;传递函数依赖&#x3D;&#x3D;</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/04/19/r6nXLRBCqNv3scD.png\" alt=\"image-20220419190030879\"></p>\n</li>\n</ul>\n<h2 id=\"14-4-候选键的形式定义\"><a href=\"#14-4-候选键的形式定义\" class=\"headerlink\" title=\"14.4 候选键的形式定义\"></a>14.4 候选键的形式定义</h2><ul>\n<li>候选键（键）：<img data-src=\"https://s2.loli.net/2022/04/19/7S6ycDlKYeqQ1wP.png\" alt=\"image-20220419190148283\" style=\"zoom:80%;\" /></li>\n<li>主键：选定候选键中的一个作为主键，一个关系的主键是唯一的</li>\n<li>&#x3D;&#x3D;主属性:&#x3D;&#x3D; 包含在任何一个<strong>侯选键</strong>（不是主键）中的属性</li>\n<li>&#x3D;&#x3D;非主属性：&#x3D;&#x3D;不包含在任何一个候选键中的属性</li>\n<li>全键：整个属性组为键。例：R(顾客，商品，日期)</li>\n</ul>\n<h2 id=\"14-5-范式：2NF、3NF和BCNF\"><a href=\"#14-5-范式：2NF、3NF和BCNF\" class=\"headerlink\" title=\"14.5 范式：2NF、3NF和BCNF\"></a>14.5 范式：2NF、3NF和BCNF</h2><h3 id=\"1、范式\"><a href=\"#1、范式\" class=\"headerlink\" title=\"1、范式\"></a>1、范式</h3><ul>\n<li><p>范式：关系数据库中符合某一级别的关系模式的集合。所谓“第几范式”，是表示关系的某一种级别，R为第几范式就可以写成 R ∈ xNF。</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/04/19/qMThucJCAGmdkby.png\" alt=\"image-20220419190723383\"></p>\n</li>\n<li><p>&#x3D;&#x3D;第1范式&#x3D;&#x3D;（First Normal Form，简写为1NF）：如果一张表不含有多值属性（有时称为重复字段）和内部结构（比如记录类型）的列， 则称该表为第1范式。&#x3D;&#x3D;消除多值属性和复合属性&#x3D;&#x3D;</p>\n<blockquote>\n<p>😢1NF中可能存在很多更新异常</p>\n</blockquote>\n</li>\n<li><p>&#x3D;&#x3D;第2范式&#x3D;&#x3D;（Second Normal Form，简称2NF）：若R∈ INF，且每一个非主属性完全函数依赖于键，则R ∈2NF。&#x3D;&#x3D;消除非主属性对键的部分依赖&#x3D;&#x3D;</p>\n<blockquote>\n<p>👉如果存在部分依赖，就要将部分依赖的属性从原关系<strong>移</strong>出，移到一个新关系中，同时将这些属性的决定方也<strong>复制</strong>到新关系中。</p>\n<p>😢2NF可以消除一些1NF中存在的更新异常，但不能彻底消除更新异常</p>\n</blockquote>\n</li>\n<li><p>&#x3D;&#x3D;第3范式&#x3D;&#x3D;（Third Normal Form，简称3NF）:若R∈2NF，且每一个非主属性不传递函数依赖于键，则R∈3NF。&#x3D;&#x3D;消除非主属性对键的传递依赖&#x3D;&#x3D;</p>\n<blockquote>\n<p>👉如果存在传递依赖，就要将传递依赖的属性从原关系<strong>移</strong>出，移到一个新关系中，同时将这些属性的决定方也<strong>复制</strong>到新关系中。</p>\n<p>😢3NF可以消除一些2NF中存在的更新异常，但不能彻底消除更新异常</p>\n</blockquote>\n</li>\n<li><p>&#x3D;&#x3D;BCNF范式&#x3D;&#x3D; (Boyce-Codd Normal Form ， 简称BCNF）: R∈INF，且&#x3D;&#x3D;每一个决定因素都包含键&#x3D;&#x3D;， 则R∈BCNF。&#x3D;&#x3D;只包含两个属性的一定是BCNF&#x3D;&#x3D;</p>\n<blockquote>\n<p>👉并非所有的3NF都是BCNF</p>\n<p>👉如果一个模式属于BCNF，则在函数依赖的范畴内彻底消除了更新异常，但不一定彻底消除了更新异常（因为可能有多值依赖）</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"2、例子：\"><a href=\"#2、例子：\" class=\"headerlink\" title=\"2、例子：\"></a>2、例子：</h3><p><img data-src=\"https://s2.loli.net/2022/04/19/baomCzFL86RX3Yv.png\" alt=\"image-20220419192440920\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/04/19/X2PYxjvlK4S58Ns.png\" alt=\"image-20220419192454380\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/04/19/1cmvZfPVOstly29.png\" alt=\"image-20220419192518038\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/04/19/QdVkBKPzwmTn5cA.png\" alt=\"image-20220419192535685\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/04/19/aWdBPgkZGYq6Up8.png\" alt=\"image-20220419192546331\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/04/19/2lkKzULxM6N3Vqg.png\" alt=\"image-20220419192600245\"></p>\n<h3 id=\"3、规范化过程\"><a href=\"#3、规范化过程\" class=\"headerlink\" title=\"3、规范化过程\"></a>3、规范化过程</h3><p><img data-src=\"https://s2.loli.net/2022/04/19/fhsZzE8HUnFqdPT.png\" alt=\"image-20220419192859741\"></p>\n<blockquote>\n<p>👉使用规范化方法设计数据库的逻辑结构时，并不是要使得到的数据库模式都达到最高范式，而是还需要平衡查询效率和更新代价。如果为了提高查询效率而进行了一些反规范化设计，则需要采取措施处理可能出现的更新异常。</p>\n</blockquote>\n<h2 id=\"14-6-多值依赖\"><a href=\"#14-6-多值依赖\" class=\"headerlink\" title=\"14.6 多值依赖\"></a>14.6 多值依赖</h2><p><img data-src=\"https://s2.loli.net/2022/06/05/nkGdT754vgjfIJE.png\" alt=\"image-20220605194741769\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/06/05/iYPhvOfSeFM8glu.png\" alt=\"image-20220605194802850\"></p>\n<h1 id=\"UNIT-15-数据依赖公理与无损分解\"><a href=\"#UNIT-15-数据依赖公理与无损分解\" class=\"headerlink\" title=\"UNIT  15  数据依赖公理与无损分解\"></a>UNIT  15  数据依赖公理与无损分解</h1><h2 id=\"15-1-公理及其推论\"><a href=\"#15-1-公理及其推论\" class=\"headerlink\" title=\"15.1 公理及其推论\"></a>15.1 公理及其推论</h2><ul>\n<li><p><strong>逻辑蕴含：</strong>设F是关系模式R的函数依赖集，X、Y 是R的属性子集，如果从F的函数依赖中能够推出X$\\rightarrow$Y，则称F逻辑蕴涵X$\\rightarrow$Y。</p>\n</li>\n<li><p><strong>Armstrong公理(阿式公理）：</strong></p>\n<p>  对R&lt;U, F&gt;（也可写作R(U)，是属性集U上的关系模式）有</p>\n<ul>\n<li><p><strong>A<del>1</del>自反律</strong>：若Y⊆X ，则X$\\rightarrow$Y。 由此可以得到所有的平凡函数依赖都是成立的。</p>\n<blockquote>\n<p>平凡的函数依赖：$X\\rightarrow Y，但Y\\subseteq X, 则称X\\rightarrow Y是平凡的函数依赖$</p>\n</blockquote>\n</li>\n<li><p><strong>A<del>2</del>增广律：</strong>若X$\\rightarrow$Y，则XZ$\\rightarrow$YZ。 即函数依赖两边增加相同属性也成立</p>\n</li>\n<li><p><strong>A<del>3</del>传递律</strong>：若X$\\rightarrow$Y、Y$\\rightarrow$Z，则X$\\rightarrow$Z。即由已知函数依赖可以推导出新依赖</p>\n</li>\n</ul>\n</li>\n<li><p><strong>公理的推论：</strong></p>\n<ul>\n<li><strong>合并规则</strong>：若X$\\rightarrow$Y 、 X$\\rightarrow$Z，则X$\\rightarrow$YZ。 $因为X\\rightarrow XY,XY\\rightarrow YZ$</li>\n<li><strong>分解规则：</strong>若X$\\rightarrow$YZ，则X$\\rightarrow$Y,X$\\rightarrow$Z。 $因为YZ\\rightarrow Y,YZ\\rightarrow Z$</li>\n<li><strong>伪传递规则</strong>：若X$\\rightarrow$Y 、WY$\\rightarrow$Z，则WX$\\rightarrow$Z。 $因为WX\\rightarrow WY$</li>\n<li><strong>复合规则</strong>：若X$\\rightarrow$Y 、W$\\rightarrow$V，则XW$\\rightarrow$YV。</li>\n</ul>\n</li>\n<li><p><strong>公理系统的特性：</strong>正确性（按阿氏公理推出的依赖都是正确的）、完备性（能推出所有的依赖）</p>\n</li>\n</ul>\n<h2 id=\"15-2-闭包的概念及其计算\"><a href=\"#15-2-闭包的概念及其计算\" class=\"headerlink\" title=\"15.2  闭包的概念及其计算\"></a>15.2  闭包的概念及其计算</h2><h3 id=\"1、闭包的概念\"><a href=\"#1、闭包的概念\" class=\"headerlink\" title=\"1、闭包的概念\"></a>1、闭包的概念</h3><ul>\n<li><p>&#x3D;&#x3D;函数依赖集F的闭包F^+^&#x3D;&#x3D;定义为F所逻辑蕴含的函数依赖全体，它包括</p>\n<ul>\n<li><p>F中的函数依赖，由属性语义决定；</p>\n</li>\n<li><p>由F推出的非平凡的函数依赖；</p>\n</li>\n<li><p>由F推出的平凡的函数依赖：A→φ、 A→A、AB→A、….这一类函数依赖与F无关，对R中任何属性都成立</p>\n<blockquote>\n<p>👉F^+^的计算很麻烦，可能会非常大</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>&#x3D;&#x3D;属性集X的闭包&#x3D;&#x3D;：设F是属性集合U上的一个函数依赖集，X⊆U。X<del>F</del>^+^&#x3D;{A|X$\\rightarrow$A能由F用阿氏公理导出} 。X<del>F</del>^+^称为属性集X关于F的闭包，也可简写为X^+^。 X<del>F</del>^+^是由X从F中推出的所有函数依赖右部的集合。</p>\n<p>  例子：R(A,B,C)中，F&#x3D;{A→B，B→C}，则A<del>F</del>^+^&#x3D;ABC，B<del>F</del>^+^&#x3D;BC，C<del>F</del>^+^&#x3D;C</p>\n<blockquote>\n<p>👉属性集闭包的计算比F的闭包要容易地多，因此一般计算的是属性集闭包而不是F的闭包</p>\n</blockquote>\n</li>\n<li><p>&#x3D;&#x3D;定理4.6：&#x3D;&#x3D;$$X\\rightarrow Y能从F中用阿氏公理导出的充要条件是：Y⊆X_F^+$$。因此判断X$\\rightarrow$Y在不在F^+^中，只需要判断Y是否属于X<del>F</del>^+^</p>\n</li>\n</ul>\n<h3 id=\"2、闭包的计算-迭代\"><a href=\"#2、闭包的计算-迭代\" class=\"headerlink\" title=\"2、闭包的计算(迭代)\"></a>2、闭包的计算(迭代)</h3><img data-src=\"https://s2.loli.net/2022/04/26/joB6LkeCd4OyDfJ.png\" alt=\"image-20220426102507298\" style=\"zoom: 67%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/04/25/mASyBoQ6zsOd1pv.png\" alt=\"image-20220425144440930\" style=\"zoom:80%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/04/25/5ZDPU2QBCMgYNVS.png\" alt=\"image-20220425144608482\" style=\"zoom: 80%;\" />\n\n<blockquote>\n<p>&#x3D;&#x3D;判断闭包结束的方法：&#x3D;&#x3D;</p>\n<ul>\n<li>X^(i+1)^&#x3D;X^i^ </li>\n<li>当发现X^i^中包含了所有的属性，即X^i^等于U</li>\n<li>当F中的函数依赖的右边再也找不到X^i^中未出现过的属性</li>\n<li>在F中未用过的函数依赖的左边已没有X^i^的子集</li>\n</ul>\n</blockquote>\n<h3 id=\"3、属性集闭包的作用\"><a href=\"#3、属性集闭包的作用\" class=\"headerlink\" title=\"3、属性集闭包的作用\"></a>3、属性集闭包的作用</h3><ul>\n<li><p><strong>测试超键：</strong>如果X^+^包含所有R的所有属性，那么X是R的超键（不一定是候选键，因为可能有多余的）</p>\n<blockquote>\n<p><strong>超键：</strong>能唯一区分任意两行数据的属性或属性集。包含超键的多个属性都是超键</p>\n<p><strong>候选键</strong>（简称键，也称候选码）：某一属性（或属性集）的值可唯一地表示每一个元组。候选键本身是超键，但其任何真子集都不再是超键。候选键包含的属性为主属性</p>\n</blockquote>\n</li>\n<li><p><strong>检测函数依赖：</strong>判断X-&gt;Y 是否成立，只需判断Y⊆X^+^ 。计算X^+^，然后判断这个属性集闭包是否包含Y</p>\n</li>\n<li><p><strong>计算F的函数依赖集闭包F^+^：</strong>计算所有可能的属性子集的属性集闭包，综合得到函数依赖集闭包*</p>\n</li>\n</ul>\n<img data-src=\"https://s2.loli.net/2022/04/26/ObCDxVqJYtAsl2B.png\" alt=\"image-20220426105302299\" style=\"zoom:80%;\" />\n\n\n\n<h2 id=\"15-3-函数依赖集的等价\"><a href=\"#15-3-函数依赖集的等价\" class=\"headerlink\" title=\"15.3  函数依赖集的等价\"></a>15.3  函数依赖集的等价</h2><ul>\n<li><p><strong>定义：</strong>如果F^+^ &#x3D; G^+^ ，就说函数依赖集F覆盖G或F与G等价。</p>\n</li>\n<li><p><strong>性质：</strong>①若G⊆F，则G^+^⊆F^+^；    ②(F^+^)^+^&#x3D;F^+^</p>\n</li>\n<li><p><strong>定理4.9：</strong>F与G等价的充分必要条件是F⊆G^+^且G⊆F^+^。</p>\n</li>\n<li><p>&#x3D;&#x3D;判断方法：&#x3D;&#x3D;</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/04/26/KAzek56rPo9C3hX.png\" alt=\"image-20220426105724444\"></p>\n</li>\n<li><p><strong>例子：</strong></p>\n  <img data-src=\"https://s2.loli.net/2022/04/25/sRbvVpyP136ZNtc.png\" alt=\"image-20220425150223057\" style=\"zoom:80%;\" /></li>\n</ul>\n<h2 id=\"15-4-最小函数依赖集Fm\"><a href=\"#15-4-最小函数依赖集Fm\" class=\"headerlink\" title=\"15.4  最小函数依赖集Fm\"></a>15.4  最小函数依赖集F<del>m</del></h2><ul>\n<li><p><strong>定义：</strong>若F满足下列条件，则称其为一个最小函数依赖集F<del>m</del>。</p>\n<ul>\n<li><p>F中每个函数依赖的右部都是单属性；(即<strong>右部没有多余属性</strong>)</p>\n</li>\n<li><p>对于F的任一函数依赖X→A，F — {X→A}与F都不等价，即<strong>无多余函数依赖</strong>；</p>\n</li>\n<li><p>对于F中的任一函数依赖X→A和X的真子集X’，(F-(X→A))U{X’→A}与F都不等价,即<strong>左部无多余属性</strong>。</p>\n<blockquote>\n<p>⚠注意：F<del>m</del>不是惟一的。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p><strong>每个F都与F<del>m</del> 等价</strong></p>\n</li>\n<li><p>&#x3D;&#x3D;F<del>m</del>的计算（算法4.2）：&#x3D;&#x3D;</p>\n<ul>\n<li><strong>分解：</strong>使F中任一函数依赖的右部仅含有单属性。</li>\n<li><strong>最小化左边的多余属性：</strong><br>  方法：对F中任一XY→A，在F中求X^+^， 若A⊆X，则Y为多余的。</li>\n<li><strong>删除冗余的函数依赖：</strong><br>  方法：对F中任一X→A，&#x3D;&#x3D;在F – {X→A}中&#x3D;&#x3D;求X^+^， 若A⊆X^+^，则X→A为多余的。</li>\n</ul>\n<p>  <img data-src=\"https://s2.loli.net/2022/06/05/Vk2X54DqueIgUJc.png\" alt=\"image-20220605102019406\"></p>\n</li>\n<li><p><strong>例子1：</strong></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/06/05/Mv3D9tE2lCJAKYd.png\" alt=\"image-20220605102147172\"></p>\n</li>\n<li><p><strong>例子2</strong>：</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/06/05/dWjYyIfEGcq2nBx.png\" alt=\"image-20220605102402476\"></p>\n</li>\n</ul>\n<h2 id=\"15-5-等价模式分解的定义\"><a href=\"#15-5-等价模式分解的定义\" class=\"headerlink\" title=\"15.5  等价模式分解的定义\"></a>15.5  等价模式分解的定义</h2><ul>\n<li><p>&#x3D;&#x3D;模式分解：&#x3D;&#x3D;将一个关系模式（五元组R（U，D，dom，F））分解成一组等价的关系子模式，包括属性的分解、关系的分解、函数依赖的分解三个方面。</p>\n<blockquote>\n<p>👉R是关系模式的名称，U是属性集，D是域，dom是U到D的映射，F是函数依赖集</p>\n<p>例子：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">STUDENT(U,D,dom,F)</span><br><span class=\"line\">U&#123;sno,name,age&#125;　　<span class=\"operator\">/</span><span class=\"operator\">/</span>理解为表的字段集合</span><br><span class=\"line\">D&#123;<span class=\"type\">char</span>,<span class=\"type\">int</span>&#125;　　<span class=\"operator\">/</span><span class=\"operator\">/</span> 理解为表中字段的类型集合</span><br><span class=\"line\">dom&#123;dom(sno)<span class=\"operator\">=</span>dom(name)<span class=\"operator\">=</span><span class=\"type\">char</span>,dom(age)<span class=\"operator\">=</span><span class=\"type\">int</span>&#125;　　<span class=\"operator\">/</span><span class=\"operator\">/</span> 理解为每个字段具体的取值</span><br><span class=\"line\">F&#123;sno<span class=\"comment\">--&gt;name,sno--&gt;age&#125;　　// 理解为表字段的关系</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p>模式分解有很多种方法，有好坏之分</p>\n</blockquote>\n</li>\n<li><p>&#x3D;&#x3D;等价模式分解的要求：属性、关系、依赖&#x3D;&#x3D;</p>\n<ul>\n<li><p><strong>分解后子模式的属性集与原模式属性集相同</strong></p>\n<blockquote>\n<p>如果关系模式R(A)被分解为关系模式R<del>1</del>(A<del>1</del>), R<del>2</del>(A<del>2</del>),…, R<del>n</del>(A<del>n</del>),  且A &#x3D; A<del>1</del> ⋃ A<del>2</del> ⋃… ⋃ A<del>n</del>，则该分解是属性等价的分解</p>\n<p>👉属性等价是最容易满足的条件</p>\n</blockquote>\n</li>\n<li><p><strong>无损连接性</strong>：查询时的连接操作是否会丢失某些信息或多出某些信息。 </p>\n<blockquote>\n<p>如果关系模式R(A)被分解为关系模式R<del>1</del>(A<del>1</del>), R<del>2</del>(A<del>2</del>),…, R<del>n</del>(A<del>n</del>), 且R&#x3D; R<del>1</del> ⋈ R<del>2</del> ⋈ … ⋈ R<del>n</del>，则该分解是无损连接的分解</p>\n<p>如果要具有无损连接性，则必须满足属性等价且具有冗余属性（<code>这个冗余属性应和函数依赖结合考虑</code>），但满足属性等价且有冗余属性的分解不一定具有无损连接性，例子：</p>\n<img data-src=\"https://s2.loli.net/2022/04/25/vOFjr8IW5GBhleP.png\" alt=\"image-20220425153433324\" style=\"zoom: 50%;\" />\n</blockquote>\n</li>\n<li><p><strong>保持函数依赖</strong>：分解后的模式满足的函数依赖集是否能蕴含分解前的依赖集</p>\n<blockquote>\n<img data-src=\"https://s2.loli.net/2022/04/25/qCfhVvyYjDJcP5l.png\" alt=\"image-20220425153531696\" style=\"zoom:67%;\" /></blockquote>\n</li>\n</ul>\n</li>\n<li><p>例子：</p>\n  <img data-src=\"https://s2.loli.net/2022/04/25/j9AmzyD6BlWCnN8.png\" alt=\"image-20220425154123589\" style=\"zoom:80%;\" />\n\n  <img data-src=\"https://s2.loli.net/2022/04/25/g4XmCRl8Fy19qwc.png\" alt=\"image-20220425154134781\" style=\"zoom:80%;\" /></li>\n</ul>\n<h2 id=\"15-6-无损连接性\"><a href=\"#15-6-无损连接性\" class=\"headerlink\" title=\"15.6  无损连接性\"></a>15.6  无损连接性</h2><ul>\n<li><p>&#x3D;&#x3D;概念：&#x3D;&#x3D;R&lt;U，F&gt;，若R的分解ρ&#x3D;{R<del>1</del>, R<del>2</del>….R<del>k</del>}对R中任何一个关系r，有：r &#x3D; Π<del>R1</del>(r) ⋈ Π<del>R2</del>(r) ⋈ … ⋈ Π<del>Rk</del>(r)，则称分解ρ具有无损连接性</p>\n<blockquote>\n<p> Π<del>R1</del>(r) 表示关系r在模式R<del>1</del>的属性上的投影</p>\n</blockquote>\n</li>\n<li><p>&#x3D;&#x3D;判断分解是否具有无损连接性&#x3D;&#x3D;</p>\n  <img data-src=\"https://s2.loli.net/2022/04/25/PC2613TjuMZmyal.png\" alt=\"image-20220425154534993\" style=\"zoom:80%;\" />\n\n  <img data-src=\"https://s2.loli.net/2022/04/25/TwJHi9BX6D8Lg7Z.png\" alt=\"image-20220425154559720\" style=\"zoom:80%;\" />\n\n  <img data-src=\"https://s2.loli.net/2022/04/25/h7ibSVUkmKfnqlI.png\" alt=\"image-20220425154954642\" style=\"zoom:80%;\" />\n\n  <img data-src=\"https://s2.loli.net/2022/04/25/nOEwXzsNcbW8TFH.png\" alt=\"image-20220425155541795\" style=\"zoom: 80%;\" />\n\n  <img data-src=\"https://s2.loli.net/2022/04/25/dyglfmAaVetrUqN.png\" alt=\"image-20220425155623036\" style=\"zoom: 80%;\" />\n\n  <img data-src=\"https://s2.loli.net/2022/05/31/2k6WrVuzDolyKJ7.png\" alt=\"image-20220425155553454\" style=\"zoom:80%;\" /></li>\n</ul>\n<hr>\n<blockquote>\n<p>&#x3D;&#x3D;特殊情况（只有两个子模式）&#x3D;&#x3D;：</p>\n<img data-src=\"https://s2.loli.net/2022/04/25/A5p4T9EfUoG1IWh.png\" alt=\"image-20220425155902720\" style=\"zoom:80%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/04/25/AuR1ZMPwoak9WeG.png\" alt=\"image-20220425155950975\" style=\"zoom:80%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/04/25/woP8IJCkZ9chieF.png\" alt=\"image-20220425160036787\" style=\"zoom: 80%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/04/25/hP6KGEtWgXnMJov.png\" alt=\"image-20220425160223865\" style=\"zoom:80%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/04/25/tlIirfqhawMRQek.png\" alt=\"image-20220425160107664\" style=\"zoom:80%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/04/25/eO4lZwEg8jhoXQC.png\" alt=\"image-20220425160241463\" style=\"zoom:80%;\" />\n</blockquote>\n<h2 id=\"15-7-函数依赖保持性\"><a href=\"#15-7-函数依赖保持性\" class=\"headerlink\" title=\"15.7  函数依赖保持性\"></a>15.7  函数依赖保持性</h2><ul>\n<li><p>&#x3D;&#x3D;Π<del>Z</del>(F)的定义：&#x3D;&#x3D;设F是关系模式 R的函数依赖集，Z是R的一个属性集合，则称Z所涉及到的&#x3D;&#x3D;F^+^&#x3D;&#x3D;中所有的函数依赖为F在Z上的投影，记为**Π<del>Z</del>(F)**，有：Π<del>Z</del>(F)&#x3D;{X→Y|X→Y∈F^+^且XY⊆Z}</p>\n<blockquote>\n<p>例如F&#x3D;{A→B,C→B,B→D,D→C}，设Z&#x3D;CD，则Π<del>CD</del>(F)&#x3D;{C→D,  D→C}（&#x3D;&#x3D;考察的是F^+^&#x3D;&#x3D;）</p>\n</blockquote>\n</li>\n<li><p>&#x3D;&#x3D;函数依赖保持性的定义&#x3D;&#x3D;：设关系模式R的一个分解ρ &#x3D; {R<del>1</del>,R<del>2</del>,…,R<del>k</del>}，F是R的函数依赖集，如果F等价于Π<del>R1</del>(F)∪Π<del>R2</del>(F)∪…∪Π<del>Rk</del>(F)，则称分解ρ具有函数依赖保持性。</p>\n</li>\n<li><p><strong>例子：</strong></p>\n  <img data-src=\"https://s2.loli.net/2022/04/25/a4Io1rjNhXJuHnO.png\" alt=\"image-20220425161014159\" style=\"zoom:80%;\" />\n\n  <img data-src=\"https://s2.loli.net/2022/04/25/9EKBxPi2UXthy6H.png\" alt=\"image-20220425161051699\" style=\"zoom:80%;\" />\n\n  <img data-src=\"https://s2.loli.net/2022/04/25/Xprh7kqT6Mlj4BU.png\" alt=\"image-20220425161138947\" style=\"zoom:80%;\" /></li>\n</ul>\n<h2 id=\"15-8-模式分解的算法（重点：3NF分解）\"><a href=\"#15-8-模式分解的算法（重点：3NF分解）\" class=\"headerlink\" title=\"15.8  模式分解的算法（重点：3NF分解）\"></a>15.8  模式分解的算法（重点：3NF分解）</h2><img data-src=\"https://s2.loli.net/2022/05/31/ehvC5WJd6LVlGHB.png\" alt=\"image-20220425161643651\" style=\"zoom:80%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/04/25/bJ87MfZP4CLY5r1.png\" alt=\"image-20220425161939694\" style=\"zoom:80%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/04/25/5md4WqKs7ALzfSx.png\" alt=\"image-20220425162252537\" style=\"zoom:80%;\" />\n\n<blockquote>\n<p>&#x3D;&#x3D;BCNF范式&#x3D;&#x3D; (Boyce-Codd Normal Form ， 简称BCNF）: R∈INF，且&#x3D;&#x3D;每一个决定因素都包含键&#x3D;&#x3D;， 则R∈BCNF。&#x3D;&#x3D;只包含两个属性的一定是BCNF&#x3D;&#x3D;</p>\n</blockquote>\n<img data-src=\"https://s2.loli.net/2022/05/31/L1vhbSIQRmkeJ5c.png\" alt=\"image-20220425163039378\" style=\"zoom:80%;\" />\n","site":{"data":{"post-body-end":"<div>\n    \n</div>\n","styles":"body {\n  background: url(\"/images/background.png\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 100% 100%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.8);\n}\n.popup {\n  opacity: 0.8;\n}\n.post-block {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.comments {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.post {\n  margin-top: 60px;\n  padding: 20px;\n  margin-bottom: 60px;\n  -webkit-box-shadow: 0 0 0px #788072;\n  -moz-box-shadow: 0 0 0px rgba(202,203,204,0.5);\n}\n.post-button .btn {\n  color: #555 !important;\n  background-color: #fff;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  border: none !important;\n  transition-property: unset;\n  padding: 0px 15px;\n}\n.post-button .btn:hover {\n  color: #fff !important;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  background-image: linear-gradient(90deg, #a166ab 0%, #ef4e7b 25%, #f37055 50%, #ef4e7b 75%, #a166ab 100%);\n}\n","variables":""}},"length":6180,"excerpt":"","more":"<h1 id=\"六、关系范式\"><a href=\"#六、关系范式\" class=\"headerlink\" title=\"六、关系范式\"></a>六、关系范式</h1><h1 id=\"UNIT-14-规范化与函数依赖\"><a href=\"#UNIT-14-规范化与函数依赖\" class=\"headerlink\" title=\"UNIT 14  规范化与函数依赖\"></a>UNIT 14  规范化与函数依赖</h1><h2 id=\"14-1-规范化的概念\"><a href=\"#14-1-规范化的概念\" class=\"headerlink\" title=\"14.1 规范化的概念\"></a>14.1 规范化的概念</h2><ul>\n<li>&#x3D;&#x3D;规范化&#x3D;&#x3D;是将属性分配给一个实体的过程，用以减少数据冗余和减少更新异常。这个过程实际上就是将一个低一级范式的关系模式，通过&#x3D;&#x3D;模式分解&#x3D;&#x3D;转换为若干个高一级范式的关系模式的集合的过程。这个转换过程是通过分析和消除属性间的数据依赖关系来实现的</li>\n<li>属性可分为主属性和非主属性。 <ul>\n<li>2NF, 3NF考察非主属性和键的关系，</li>\n<li>BCNF考察主属性和键的关系。</li>\n</ul>\n</li>\n<li>属性间的依赖关系包括&#x3D;&#x3D;函数依赖和多值依赖&#x3D;&#x3D;。 <ul>\n<li>1NF, 2NF, 3NF, BCNF考察了函数依赖关系；</li>\n<li>4NF考察了多值依赖。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"14-2-不好的数据库设计中的异常\"><a href=\"#14-2-不好的数据库设计中的异常\" class=\"headerlink\" title=\"14.2 不好的数据库设计中的异常\"></a>14.2 不好的数据库设计中的异常</h2><ul>\n<li><p><strong>数据冗余</strong></p>\n</li>\n<li><p><strong>修改复杂</strong>：如果更改表所对应的某个实体实例或者关系实例的单个属性时，需要进行多行更新，那么就说这个表存在更新异常</p>\n</li>\n<li><p><strong>插入异常</strong>：无法插入某个实体实例（因为缺少某些属性的值）</p>\n</li>\n<li><p><strong>删除异常</strong>：如果删除表的某一个实体实例或关系实例时，导致丢失另一个不同实体实例或关系实例的信息。</p>\n<blockquote>\n<p>出现更新异常的原因：在这单个模式中存在某些不好的数据依赖，如函数依赖，多值依赖</p>\n</blockquote>\n<p>  <img data-src=\"https://s2.loli.net/2022/04/19/JGpYa7H8OQqsRkj.png\" alt=\"image-20220419183844031\"></p>\n</li>\n</ul>\n<h2 id=\"14-3-函数依赖\"><a href=\"#14-3-函数依赖\" class=\"headerlink\" title=\"14.3 函数依赖\"></a>14.3 函数依赖</h2><ul>\n<li><p>&#x3D;&#x3D;定义：&#x3D;&#x3D;</p>\n<ul>\n<li>设R（U）（也可写作R&lt;U, F&gt;）是属性集U上的关系模式。 X，Y是U的子集。若对于R（U）的任意一个可能的关系r，r中不可能存在两个元组在X上的属性值相等，而在Y上的属性值不等，则称X函数确定Y或Y函数依赖于X，记作X→Y。</li>\n<li>👉若R的任意关系有：对X中的每个属性值，在Y中都有惟一的值与之对应，则称Y函数依赖于X。</li>\n</ul>\n<p>  👉函数依赖是语义范畴的概念，只能通过&#x3D;&#x3D;语义&#x3D;&#x3D;确定</p>\n<p>  👉函数依赖要求对关系模式的所有关系都成立，不能只看当前给出的表</p>\n</li>\n<li><p>&#x3D;&#x3D;函数依赖与属性间的关系：&#x3D;&#x3D;</p>\n<ul>\n<li>若X，Y是1—1关系，则存在 X→Y或Y → X 。如学号与借书证号</li>\n<li>若X，Y是 m—1关系，则存在 X→Y 但 Y  <img data-src=\"https://s2.loli.net/2022/04/19/G9gCR1yLKodJeq7.png\" alt=\"image-20220419184951354\">  X。如学号与姓名</li>\n<li>若X，Y是 m—n关系，则X，Y间不存在函数依赖关系。如姓名与课程</li>\n</ul>\n</li>\n<li><p>&#x3D;&#x3D;平凡、非平凡的函数依赖&#x3D;&#x3D;（一般考虑非平凡的函数依赖）</p>\n  <img data-src=\"https://s2.loli.net/2022/04/19/wIWre3JHfdxbFOV.png\" alt=\"image-20220419185438861\" style=\"zoom:80%;\" />\n</li>\n<li><p>&#x3D;&#x3D;部分函数依赖&#x3D;&#x3D;</p>\n</li>\n</ul>\n<img data-src=\"https://s2.loli.net/2022/04/26/U1Q6YHJzyajN73o.png\" alt=\"image-20220426103558789\" style=\"zoom:80%;\" />\n\n<ul>\n<li><p>&#x3D;&#x3D;传递函数依赖&#x3D;&#x3D;</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/04/19/r6nXLRBCqNv3scD.png\" alt=\"image-20220419190030879\"></p>\n</li>\n</ul>\n<h2 id=\"14-4-候选键的形式定义\"><a href=\"#14-4-候选键的形式定义\" class=\"headerlink\" title=\"14.4 候选键的形式定义\"></a>14.4 候选键的形式定义</h2><ul>\n<li>候选键（键）：<img data-src=\"https://s2.loli.net/2022/04/19/7S6ycDlKYeqQ1wP.png\" alt=\"image-20220419190148283\" style=\"zoom:80%;\" /></li>\n<li>主键：选定候选键中的一个作为主键，一个关系的主键是唯一的</li>\n<li>&#x3D;&#x3D;主属性:&#x3D;&#x3D; 包含在任何一个<strong>侯选键</strong>（不是主键）中的属性</li>\n<li>&#x3D;&#x3D;非主属性：&#x3D;&#x3D;不包含在任何一个候选键中的属性</li>\n<li>全键：整个属性组为键。例：R(顾客，商品，日期)</li>\n</ul>\n<h2 id=\"14-5-范式：2NF、3NF和BCNF\"><a href=\"#14-5-范式：2NF、3NF和BCNF\" class=\"headerlink\" title=\"14.5 范式：2NF、3NF和BCNF\"></a>14.5 范式：2NF、3NF和BCNF</h2><h3 id=\"1、范式\"><a href=\"#1、范式\" class=\"headerlink\" title=\"1、范式\"></a>1、范式</h3><ul>\n<li><p>范式：关系数据库中符合某一级别的关系模式的集合。所谓“第几范式”，是表示关系的某一种级别，R为第几范式就可以写成 R ∈ xNF。</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/04/19/qMThucJCAGmdkby.png\" alt=\"image-20220419190723383\"></p>\n</li>\n<li><p>&#x3D;&#x3D;第1范式&#x3D;&#x3D;（First Normal Form，简写为1NF）：如果一张表不含有多值属性（有时称为重复字段）和内部结构（比如记录类型）的列， 则称该表为第1范式。&#x3D;&#x3D;消除多值属性和复合属性&#x3D;&#x3D;</p>\n<blockquote>\n<p>😢1NF中可能存在很多更新异常</p>\n</blockquote>\n</li>\n<li><p>&#x3D;&#x3D;第2范式&#x3D;&#x3D;（Second Normal Form，简称2NF）：若R∈ INF，且每一个非主属性完全函数依赖于键，则R ∈2NF。&#x3D;&#x3D;消除非主属性对键的部分依赖&#x3D;&#x3D;</p>\n<blockquote>\n<p>👉如果存在部分依赖，就要将部分依赖的属性从原关系<strong>移</strong>出，移到一个新关系中，同时将这些属性的决定方也<strong>复制</strong>到新关系中。</p>\n<p>😢2NF可以消除一些1NF中存在的更新异常，但不能彻底消除更新异常</p>\n</blockquote>\n</li>\n<li><p>&#x3D;&#x3D;第3范式&#x3D;&#x3D;（Third Normal Form，简称3NF）:若R∈2NF，且每一个非主属性不传递函数依赖于键，则R∈3NF。&#x3D;&#x3D;消除非主属性对键的传递依赖&#x3D;&#x3D;</p>\n<blockquote>\n<p>👉如果存在传递依赖，就要将传递依赖的属性从原关系<strong>移</strong>出，移到一个新关系中，同时将这些属性的决定方也<strong>复制</strong>到新关系中。</p>\n<p>😢3NF可以消除一些2NF中存在的更新异常，但不能彻底消除更新异常</p>\n</blockquote>\n</li>\n<li><p>&#x3D;&#x3D;BCNF范式&#x3D;&#x3D; (Boyce-Codd Normal Form ， 简称BCNF）: R∈INF，且&#x3D;&#x3D;每一个决定因素都包含键&#x3D;&#x3D;， 则R∈BCNF。&#x3D;&#x3D;只包含两个属性的一定是BCNF&#x3D;&#x3D;</p>\n<blockquote>\n<p>👉并非所有的3NF都是BCNF</p>\n<p>👉如果一个模式属于BCNF，则在函数依赖的范畴内彻底消除了更新异常，但不一定彻底消除了更新异常（因为可能有多值依赖）</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"2、例子：\"><a href=\"#2、例子：\" class=\"headerlink\" title=\"2、例子：\"></a>2、例子：</h3><p><img data-src=\"https://s2.loli.net/2022/04/19/baomCzFL86RX3Yv.png\" alt=\"image-20220419192440920\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/04/19/X2PYxjvlK4S58Ns.png\" alt=\"image-20220419192454380\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/04/19/1cmvZfPVOstly29.png\" alt=\"image-20220419192518038\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/04/19/QdVkBKPzwmTn5cA.png\" alt=\"image-20220419192535685\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/04/19/aWdBPgkZGYq6Up8.png\" alt=\"image-20220419192546331\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/04/19/2lkKzULxM6N3Vqg.png\" alt=\"image-20220419192600245\"></p>\n<h3 id=\"3、规范化过程\"><a href=\"#3、规范化过程\" class=\"headerlink\" title=\"3、规范化过程\"></a>3、规范化过程</h3><p><img data-src=\"https://s2.loli.net/2022/04/19/fhsZzE8HUnFqdPT.png\" alt=\"image-20220419192859741\"></p>\n<blockquote>\n<p>👉使用规范化方法设计数据库的逻辑结构时，并不是要使得到的数据库模式都达到最高范式，而是还需要平衡查询效率和更新代价。如果为了提高查询效率而进行了一些反规范化设计，则需要采取措施处理可能出现的更新异常。</p>\n</blockquote>\n<h2 id=\"14-6-多值依赖\"><a href=\"#14-6-多值依赖\" class=\"headerlink\" title=\"14.6 多值依赖\"></a>14.6 多值依赖</h2><p><img data-src=\"https://s2.loli.net/2022/06/05/nkGdT754vgjfIJE.png\" alt=\"image-20220605194741769\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/06/05/iYPhvOfSeFM8glu.png\" alt=\"image-20220605194802850\"></p>\n<h1 id=\"UNIT-15-数据依赖公理与无损分解\"><a href=\"#UNIT-15-数据依赖公理与无损分解\" class=\"headerlink\" title=\"UNIT  15  数据依赖公理与无损分解\"></a>UNIT  15  数据依赖公理与无损分解</h1><h2 id=\"15-1-公理及其推论\"><a href=\"#15-1-公理及其推论\" class=\"headerlink\" title=\"15.1 公理及其推论\"></a>15.1 公理及其推论</h2><ul>\n<li><p><strong>逻辑蕴含：</strong>设F是关系模式R的函数依赖集，X、Y 是R的属性子集，如果从F的函数依赖中能够推出X$\\rightarrow$Y，则称F逻辑蕴涵X$\\rightarrow$Y。</p>\n</li>\n<li><p><strong>Armstrong公理(阿式公理）：</strong></p>\n<p>  对R&lt;U, F&gt;（也可写作R(U)，是属性集U上的关系模式）有</p>\n<ul>\n<li><p><strong>A<del>1</del>自反律</strong>：若Y⊆X ，则X$\\rightarrow$Y。 由此可以得到所有的平凡函数依赖都是成立的。</p>\n<blockquote>\n<p>平凡的函数依赖：$X\\rightarrow Y，但Y\\subseteq X, 则称X\\rightarrow Y是平凡的函数依赖$</p>\n</blockquote>\n</li>\n<li><p><strong>A<del>2</del>增广律：</strong>若X$\\rightarrow$Y，则XZ$\\rightarrow$YZ。 即函数依赖两边增加相同属性也成立</p>\n</li>\n<li><p><strong>A<del>3</del>传递律</strong>：若X$\\rightarrow$Y、Y$\\rightarrow$Z，则X$\\rightarrow$Z。即由已知函数依赖可以推导出新依赖</p>\n</li>\n</ul>\n</li>\n<li><p><strong>公理的推论：</strong></p>\n<ul>\n<li><strong>合并规则</strong>：若X$\\rightarrow$Y 、 X$\\rightarrow$Z，则X$\\rightarrow$YZ。 $因为X\\rightarrow XY,XY\\rightarrow YZ$</li>\n<li><strong>分解规则：</strong>若X$\\rightarrow$YZ，则X$\\rightarrow$Y,X$\\rightarrow$Z。 $因为YZ\\rightarrow Y,YZ\\rightarrow Z$</li>\n<li><strong>伪传递规则</strong>：若X$\\rightarrow$Y 、WY$\\rightarrow$Z，则WX$\\rightarrow$Z。 $因为WX\\rightarrow WY$</li>\n<li><strong>复合规则</strong>：若X$\\rightarrow$Y 、W$\\rightarrow$V，则XW$\\rightarrow$YV。</li>\n</ul>\n</li>\n<li><p><strong>公理系统的特性：</strong>正确性（按阿氏公理推出的依赖都是正确的）、完备性（能推出所有的依赖）</p>\n</li>\n</ul>\n<h2 id=\"15-2-闭包的概念及其计算\"><a href=\"#15-2-闭包的概念及其计算\" class=\"headerlink\" title=\"15.2  闭包的概念及其计算\"></a>15.2  闭包的概念及其计算</h2><h3 id=\"1、闭包的概念\"><a href=\"#1、闭包的概念\" class=\"headerlink\" title=\"1、闭包的概念\"></a>1、闭包的概念</h3><ul>\n<li><p>&#x3D;&#x3D;函数依赖集F的闭包F^+^&#x3D;&#x3D;定义为F所逻辑蕴含的函数依赖全体，它包括</p>\n<ul>\n<li><p>F中的函数依赖，由属性语义决定；</p>\n</li>\n<li><p>由F推出的非平凡的函数依赖；</p>\n</li>\n<li><p>由F推出的平凡的函数依赖：A→φ、 A→A、AB→A、….这一类函数依赖与F无关，对R中任何属性都成立</p>\n<blockquote>\n<p>👉F^+^的计算很麻烦，可能会非常大</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>&#x3D;&#x3D;属性集X的闭包&#x3D;&#x3D;：设F是属性集合U上的一个函数依赖集，X⊆U。X<del>F</del>^+^&#x3D;{A|X$\\rightarrow$A能由F用阿氏公理导出} 。X<del>F</del>^+^称为属性集X关于F的闭包，也可简写为X^+^。 X<del>F</del>^+^是由X从F中推出的所有函数依赖右部的集合。</p>\n<p>  例子：R(A,B,C)中，F&#x3D;{A→B，B→C}，则A<del>F</del>^+^&#x3D;ABC，B<del>F</del>^+^&#x3D;BC，C<del>F</del>^+^&#x3D;C</p>\n<blockquote>\n<p>👉属性集闭包的计算比F的闭包要容易地多，因此一般计算的是属性集闭包而不是F的闭包</p>\n</blockquote>\n</li>\n<li><p>&#x3D;&#x3D;定理4.6：&#x3D;&#x3D;$$X\\rightarrow Y能从F中用阿氏公理导出的充要条件是：Y⊆X_F^+$$。因此判断X$\\rightarrow$Y在不在F^+^中，只需要判断Y是否属于X<del>F</del>^+^</p>\n</li>\n</ul>\n<h3 id=\"2、闭包的计算-迭代\"><a href=\"#2、闭包的计算-迭代\" class=\"headerlink\" title=\"2、闭包的计算(迭代)\"></a>2、闭包的计算(迭代)</h3><img data-src=\"https://s2.loli.net/2022/04/26/joB6LkeCd4OyDfJ.png\" alt=\"image-20220426102507298\" style=\"zoom: 67%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/04/25/mASyBoQ6zsOd1pv.png\" alt=\"image-20220425144440930\" style=\"zoom:80%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/04/25/5ZDPU2QBCMgYNVS.png\" alt=\"image-20220425144608482\" style=\"zoom: 80%;\" />\n\n<blockquote>\n<p>&#x3D;&#x3D;判断闭包结束的方法：&#x3D;&#x3D;</p>\n<ul>\n<li>X^(i+1)^&#x3D;X^i^ </li>\n<li>当发现X^i^中包含了所有的属性，即X^i^等于U</li>\n<li>当F中的函数依赖的右边再也找不到X^i^中未出现过的属性</li>\n<li>在F中未用过的函数依赖的左边已没有X^i^的子集</li>\n</ul>\n</blockquote>\n<h3 id=\"3、属性集闭包的作用\"><a href=\"#3、属性集闭包的作用\" class=\"headerlink\" title=\"3、属性集闭包的作用\"></a>3、属性集闭包的作用</h3><ul>\n<li><p><strong>测试超键：</strong>如果X^+^包含所有R的所有属性，那么X是R的超键（不一定是候选键，因为可能有多余的）</p>\n<blockquote>\n<p><strong>超键：</strong>能唯一区分任意两行数据的属性或属性集。包含超键的多个属性都是超键</p>\n<p><strong>候选键</strong>（简称键，也称候选码）：某一属性（或属性集）的值可唯一地表示每一个元组。候选键本身是超键，但其任何真子集都不再是超键。候选键包含的属性为主属性</p>\n</blockquote>\n</li>\n<li><p><strong>检测函数依赖：</strong>判断X-&gt;Y 是否成立，只需判断Y⊆X^+^ 。计算X^+^，然后判断这个属性集闭包是否包含Y</p>\n</li>\n<li><p><strong>计算F的函数依赖集闭包F^+^：</strong>计算所有可能的属性子集的属性集闭包，综合得到函数依赖集闭包*</p>\n</li>\n</ul>\n<img data-src=\"https://s2.loli.net/2022/04/26/ObCDxVqJYtAsl2B.png\" alt=\"image-20220426105302299\" style=\"zoom:80%;\" />\n\n\n\n<h2 id=\"15-3-函数依赖集的等价\"><a href=\"#15-3-函数依赖集的等价\" class=\"headerlink\" title=\"15.3  函数依赖集的等价\"></a>15.3  函数依赖集的等价</h2><ul>\n<li><p><strong>定义：</strong>如果F^+^ &#x3D; G^+^ ，就说函数依赖集F覆盖G或F与G等价。</p>\n</li>\n<li><p><strong>性质：</strong>①若G⊆F，则G^+^⊆F^+^；    ②(F^+^)^+^&#x3D;F^+^</p>\n</li>\n<li><p><strong>定理4.9：</strong>F与G等价的充分必要条件是F⊆G^+^且G⊆F^+^。</p>\n</li>\n<li><p>&#x3D;&#x3D;判断方法：&#x3D;&#x3D;</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/04/26/KAzek56rPo9C3hX.png\" alt=\"image-20220426105724444\"></p>\n</li>\n<li><p><strong>例子：</strong></p>\n  <img data-src=\"https://s2.loli.net/2022/04/25/sRbvVpyP136ZNtc.png\" alt=\"image-20220425150223057\" style=\"zoom:80%;\" /></li>\n</ul>\n<h2 id=\"15-4-最小函数依赖集Fm\"><a href=\"#15-4-最小函数依赖集Fm\" class=\"headerlink\" title=\"15.4  最小函数依赖集Fm\"></a>15.4  最小函数依赖集F<del>m</del></h2><ul>\n<li><p><strong>定义：</strong>若F满足下列条件，则称其为一个最小函数依赖集F<del>m</del>。</p>\n<ul>\n<li><p>F中每个函数依赖的右部都是单属性；(即<strong>右部没有多余属性</strong>)</p>\n</li>\n<li><p>对于F的任一函数依赖X→A，F — {X→A}与F都不等价，即<strong>无多余函数依赖</strong>；</p>\n</li>\n<li><p>对于F中的任一函数依赖X→A和X的真子集X’，(F-(X→A))U{X’→A}与F都不等价,即<strong>左部无多余属性</strong>。</p>\n<blockquote>\n<p>⚠注意：F<del>m</del>不是惟一的。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p><strong>每个F都与F<del>m</del> 等价</strong></p>\n</li>\n<li><p>&#x3D;&#x3D;F<del>m</del>的计算（算法4.2）：&#x3D;&#x3D;</p>\n<ul>\n<li><strong>分解：</strong>使F中任一函数依赖的右部仅含有单属性。</li>\n<li><strong>最小化左边的多余属性：</strong><br>  方法：对F中任一XY→A，在F中求X^+^， 若A⊆X，则Y为多余的。</li>\n<li><strong>删除冗余的函数依赖：</strong><br>  方法：对F中任一X→A，&#x3D;&#x3D;在F – {X→A}中&#x3D;&#x3D;求X^+^， 若A⊆X^+^，则X→A为多余的。</li>\n</ul>\n<p>  <img data-src=\"https://s2.loli.net/2022/06/05/Vk2X54DqueIgUJc.png\" alt=\"image-20220605102019406\"></p>\n</li>\n<li><p><strong>例子1：</strong></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/06/05/Mv3D9tE2lCJAKYd.png\" alt=\"image-20220605102147172\"></p>\n</li>\n<li><p><strong>例子2</strong>：</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/06/05/dWjYyIfEGcq2nBx.png\" alt=\"image-20220605102402476\"></p>\n</li>\n</ul>\n<h2 id=\"15-5-等价模式分解的定义\"><a href=\"#15-5-等价模式分解的定义\" class=\"headerlink\" title=\"15.5  等价模式分解的定义\"></a>15.5  等价模式分解的定义</h2><ul>\n<li><p>&#x3D;&#x3D;模式分解：&#x3D;&#x3D;将一个关系模式（五元组R（U，D，dom，F））分解成一组等价的关系子模式，包括属性的分解、关系的分解、函数依赖的分解三个方面。</p>\n<blockquote>\n<p>👉R是关系模式的名称，U是属性集，D是域，dom是U到D的映射，F是函数依赖集</p>\n<p>例子：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">STUDENT(U,D,dom,F)</span><br><span class=\"line\">U&#123;sno,name,age&#125;　　<span class=\"operator\">/</span><span class=\"operator\">/</span>理解为表的字段集合</span><br><span class=\"line\">D&#123;<span class=\"type\">char</span>,<span class=\"type\">int</span>&#125;　　<span class=\"operator\">/</span><span class=\"operator\">/</span> 理解为表中字段的类型集合</span><br><span class=\"line\">dom&#123;dom(sno)<span class=\"operator\">=</span>dom(name)<span class=\"operator\">=</span><span class=\"type\">char</span>,dom(age)<span class=\"operator\">=</span><span class=\"type\">int</span>&#125;　　<span class=\"operator\">/</span><span class=\"operator\">/</span> 理解为每个字段具体的取值</span><br><span class=\"line\">F&#123;sno<span class=\"comment\">--&gt;name,sno--&gt;age&#125;　　// 理解为表字段的关系</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p>模式分解有很多种方法，有好坏之分</p>\n</blockquote>\n</li>\n<li><p>&#x3D;&#x3D;等价模式分解的要求：属性、关系、依赖&#x3D;&#x3D;</p>\n<ul>\n<li><p><strong>分解后子模式的属性集与原模式属性集相同</strong></p>\n<blockquote>\n<p>如果关系模式R(A)被分解为关系模式R<del>1</del>(A<del>1</del>), R<del>2</del>(A<del>2</del>),…, R<del>n</del>(A<del>n</del>),  且A &#x3D; A<del>1</del> ⋃ A<del>2</del> ⋃… ⋃ A<del>n</del>，则该分解是属性等价的分解</p>\n<p>👉属性等价是最容易满足的条件</p>\n</blockquote>\n</li>\n<li><p><strong>无损连接性</strong>：查询时的连接操作是否会丢失某些信息或多出某些信息。 </p>\n<blockquote>\n<p>如果关系模式R(A)被分解为关系模式R<del>1</del>(A<del>1</del>), R<del>2</del>(A<del>2</del>),…, R<del>n</del>(A<del>n</del>), 且R&#x3D; R<del>1</del> ⋈ R<del>2</del> ⋈ … ⋈ R<del>n</del>，则该分解是无损连接的分解</p>\n<p>如果要具有无损连接性，则必须满足属性等价且具有冗余属性（<code>这个冗余属性应和函数依赖结合考虑</code>），但满足属性等价且有冗余属性的分解不一定具有无损连接性，例子：</p>\n<img data-src=\"https://s2.loli.net/2022/04/25/vOFjr8IW5GBhleP.png\" alt=\"image-20220425153433324\" style=\"zoom: 50%;\" />\n</blockquote>\n</li>\n<li><p><strong>保持函数依赖</strong>：分解后的模式满足的函数依赖集是否能蕴含分解前的依赖集</p>\n<blockquote>\n<img data-src=\"https://s2.loli.net/2022/04/25/qCfhVvyYjDJcP5l.png\" alt=\"image-20220425153531696\" style=\"zoom:67%;\" /></blockquote>\n</li>\n</ul>\n</li>\n<li><p>例子：</p>\n  <img data-src=\"https://s2.loli.net/2022/04/25/j9AmzyD6BlWCnN8.png\" alt=\"image-20220425154123589\" style=\"zoom:80%;\" />\n\n  <img data-src=\"https://s2.loli.net/2022/04/25/g4XmCRl8Fy19qwc.png\" alt=\"image-20220425154134781\" style=\"zoom:80%;\" /></li>\n</ul>\n<h2 id=\"15-6-无损连接性\"><a href=\"#15-6-无损连接性\" class=\"headerlink\" title=\"15.6  无损连接性\"></a>15.6  无损连接性</h2><ul>\n<li><p>&#x3D;&#x3D;概念：&#x3D;&#x3D;R&lt;U，F&gt;，若R的分解ρ&#x3D;{R<del>1</del>, R<del>2</del>….R<del>k</del>}对R中任何一个关系r，有：r &#x3D; Π<del>R1</del>(r) ⋈ Π<del>R2</del>(r) ⋈ … ⋈ Π<del>Rk</del>(r)，则称分解ρ具有无损连接性</p>\n<blockquote>\n<p> Π<del>R1</del>(r) 表示关系r在模式R<del>1</del>的属性上的投影</p>\n</blockquote>\n</li>\n<li><p>&#x3D;&#x3D;判断分解是否具有无损连接性&#x3D;&#x3D;</p>\n  <img data-src=\"https://s2.loli.net/2022/04/25/PC2613TjuMZmyal.png\" alt=\"image-20220425154534993\" style=\"zoom:80%;\" />\n\n  <img data-src=\"https://s2.loli.net/2022/04/25/TwJHi9BX6D8Lg7Z.png\" alt=\"image-20220425154559720\" style=\"zoom:80%;\" />\n\n  <img data-src=\"https://s2.loli.net/2022/04/25/h7ibSVUkmKfnqlI.png\" alt=\"image-20220425154954642\" style=\"zoom:80%;\" />\n\n  <img data-src=\"https://s2.loli.net/2022/04/25/nOEwXzsNcbW8TFH.png\" alt=\"image-20220425155541795\" style=\"zoom: 80%;\" />\n\n  <img data-src=\"https://s2.loli.net/2022/04/25/dyglfmAaVetrUqN.png\" alt=\"image-20220425155623036\" style=\"zoom: 80%;\" />\n\n  <img data-src=\"https://s2.loli.net/2022/05/31/2k6WrVuzDolyKJ7.png\" alt=\"image-20220425155553454\" style=\"zoom:80%;\" /></li>\n</ul>\n<hr>\n<blockquote>\n<p>&#x3D;&#x3D;特殊情况（只有两个子模式）&#x3D;&#x3D;：</p>\n<img data-src=\"https://s2.loli.net/2022/04/25/A5p4T9EfUoG1IWh.png\" alt=\"image-20220425155902720\" style=\"zoom:80%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/04/25/AuR1ZMPwoak9WeG.png\" alt=\"image-20220425155950975\" style=\"zoom:80%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/04/25/woP8IJCkZ9chieF.png\" alt=\"image-20220425160036787\" style=\"zoom: 80%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/04/25/hP6KGEtWgXnMJov.png\" alt=\"image-20220425160223865\" style=\"zoom:80%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/04/25/tlIirfqhawMRQek.png\" alt=\"image-20220425160107664\" style=\"zoom:80%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/04/25/eO4lZwEg8jhoXQC.png\" alt=\"image-20220425160241463\" style=\"zoom:80%;\" />\n</blockquote>\n<h2 id=\"15-7-函数依赖保持性\"><a href=\"#15-7-函数依赖保持性\" class=\"headerlink\" title=\"15.7  函数依赖保持性\"></a>15.7  函数依赖保持性</h2><ul>\n<li><p>&#x3D;&#x3D;Π<del>Z</del>(F)的定义：&#x3D;&#x3D;设F是关系模式 R的函数依赖集，Z是R的一个属性集合，则称Z所涉及到的&#x3D;&#x3D;F^+^&#x3D;&#x3D;中所有的函数依赖为F在Z上的投影，记为**Π<del>Z</del>(F)**，有：Π<del>Z</del>(F)&#x3D;{X→Y|X→Y∈F^+^且XY⊆Z}</p>\n<blockquote>\n<p>例如F&#x3D;{A→B,C→B,B→D,D→C}，设Z&#x3D;CD，则Π<del>CD</del>(F)&#x3D;{C→D,  D→C}（&#x3D;&#x3D;考察的是F^+^&#x3D;&#x3D;）</p>\n</blockquote>\n</li>\n<li><p>&#x3D;&#x3D;函数依赖保持性的定义&#x3D;&#x3D;：设关系模式R的一个分解ρ &#x3D; {R<del>1</del>,R<del>2</del>,…,R<del>k</del>}，F是R的函数依赖集，如果F等价于Π<del>R1</del>(F)∪Π<del>R2</del>(F)∪…∪Π<del>Rk</del>(F)，则称分解ρ具有函数依赖保持性。</p>\n</li>\n<li><p><strong>例子：</strong></p>\n  <img data-src=\"https://s2.loli.net/2022/04/25/a4Io1rjNhXJuHnO.png\" alt=\"image-20220425161014159\" style=\"zoom:80%;\" />\n\n  <img data-src=\"https://s2.loli.net/2022/04/25/9EKBxPi2UXthy6H.png\" alt=\"image-20220425161051699\" style=\"zoom:80%;\" />\n\n  <img data-src=\"https://s2.loli.net/2022/04/25/Xprh7kqT6Mlj4BU.png\" alt=\"image-20220425161138947\" style=\"zoom:80%;\" /></li>\n</ul>\n<h2 id=\"15-8-模式分解的算法（重点：3NF分解）\"><a href=\"#15-8-模式分解的算法（重点：3NF分解）\" class=\"headerlink\" title=\"15.8  模式分解的算法（重点：3NF分解）\"></a>15.8  模式分解的算法（重点：3NF分解）</h2><img data-src=\"https://s2.loli.net/2022/05/31/ehvC5WJd6LVlGHB.png\" alt=\"image-20220425161643651\" style=\"zoom:80%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/04/25/bJ87MfZP4CLY5r1.png\" alt=\"image-20220425161939694\" style=\"zoom:80%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/04/25/5md4WqKs7ALzfSx.png\" alt=\"image-20220425162252537\" style=\"zoom:80%;\" />\n\n<blockquote>\n<p>&#x3D;&#x3D;BCNF范式&#x3D;&#x3D; (Boyce-Codd Normal Form ， 简称BCNF）: R∈INF，且&#x3D;&#x3D;每一个决定因素都包含键&#x3D;&#x3D;， 则R∈BCNF。&#x3D;&#x3D;只包含两个属性的一定是BCNF&#x3D;&#x3D;</p>\n</blockquote>\n<img data-src=\"https://s2.loli.net/2022/05/31/L1vhbSIQRmkeJ5c.png\" alt=\"image-20220425163039378\" style=\"zoom:80%;\" />\n"},{"title":"关系数据库","abbrlink":19168,"date":"2022-06-23T03:20:17.000Z","password":123456,"message":"请输入密码查看文章","_content":"\n## 1、基本概念\n\n**关系模型的特点：**①结构简单、表达力强；②语言的一体化；③非过程化的操作；④坚实的数学基础（关系理论）\n\n**关系模型的三要素**：\n\n- 关系数据结构：在关系模型中，实体与实体之间的联系均用表来表示\n- 关系数据操作：包括增删改查、传统的集合操作、专门的关系操作\n- 关系的完整性约束：实体完整性、参照完整性、用户自定义的完整性\n\n<!-- more -->\n\n**关系的基本术语**：\n\n| 基本术语         | 含义                                                         |\n| ---------------- | ------------------------------------------------------------ |\n| 元组和属性       | 元组：行，属性：列。关系中的元组个数称为关系的基数，属性个数称为关系的度或维数 |\n| 超键             | 能唯一区分任意两行数据的属性或属性集。包含超键的多个属性都是超键 |\n| 候选键（==键==） | 某一属性（或属性集）的值可唯一地表示每一个元组。<u>候选键本身是超键，但其任何真子集都不再是超键</u>。候选键包含的属性为==主属性== |\n| 主键             | 在使用关系来组织数据时，常使用一个候选键作为组织该关系以及唯一性操作的对象，其中被选用的候选键为主键，例如学号。主键包含的属性为==主键属性== |\n| 外键             | 对于关系R1、R2，其中某属性\\属性集A不是R1的候选键，但是是R2的候选键，则称A是R1的外键 |\n| 全键             | 当需要一个关系的全部属性作为该关系的候选键，则称该全部属性组合为全键 |\n\n**关系的种类：**基本关系、查询表（查询结果对应的表）、视图表（虚表）\n\n**关系的性质**：\n\n①列的同质性：每一列中的分量为同一类型，来自同一个域\n\n②列名唯一性：每列要基于不同的属性名，但是不同列的值可以出自同一个域\n\n③元组相异性：关系中任意两个元组不能完全相同\n\n④行序无关性：行的次序无关紧要，可以互换\n\n⑤列序无关性：列的次序无关紧要，可以互换\n\n⑥分量原子性：每一个分量都必须是不可分的数据项\n\n**关系模式：** 关系结构的描述和定义，即二维表的表结构定义。可简记为关系的属性名表。例如学生关系模式可以简记为学生（<u>学号</u>，姓名，性别，年龄，籍贯）。可理解为**表头** \n\n**关系数据库：** 基于关系模型的数据库。\n\n==关系、关系模型、关系模式和关系数据库的区别与联系：==\n\n**区别：**\n\n- `关系模型`是用表结构表示实体集与实体集之间联系的一种模型；`关系`是属性值域的笛卡儿积中有意义的元组集合，实质上是一张二维表，表的每一行为一个元组，每一列为一个属性；`关系模式`是关系结构的描述和定义，即二维表的表结构定义；`关系数据库`是建立在关系模型之上的关系的集合\n\n**联系：**\n\n- 一个关系只能对应一个关系模式，一个关系模式可对应多个关系\n- 关系模式是关系的型，按其型装入数据值后即形成关系\n- 关系模式是相对静态的、稳定的，而关系是动态的、随时间变化的\n- 一个关系数据库是相关关系的集合，而关系模型的结构是相关关系模式的集合\n\n## 2、关系的完整性约束\n\n**实体完整性**： 组成主键的各属性都不能取空值（任何主键属性都不能为空，==注意属性集不为空不代表属性集中的所有属性都不为空==）。插入和修改元组可能破坏实体完整性规则。\n\n**参照完整性**：如果属性\\属性组F是R的外键（R为依赖表），它与S表的主键相对应，则对于R中的每个元组，在F上的取值必须取空值或者等于S中某个元组的主键值。\n\n> **实体完整性优先于参照完整性** 。即外键是主键属性时，不能为空。\n>\n> <img src=\"C:/AppData/Roaming/Typora/typora-user-images/image-20220516162456086.png\" alt=\"image-20220516162456086\" style=\"zoom:50%;\" />\n\n**用户定义完整性**：针对某一具体关系数据库的约束。包括定义属性是否为空值、定义属性值的唯一性、定义属性的取值范围、定义属性的默认值、定义属性间函数依赖关系等。\n\n---\n\n<img src=\"https://s2.loli.net/2022/05/16/SB9MQkbiUuwDPaj.png\" alt=\"image-20220516162759988\" style=\"zoom:67%;\" />\n\n**关系完整性控制的实现原理**：定义、检查、保证数据完整性\n\n**例子：**\n\n<img src=\"https://s2.loli.net/2022/05/16/rXFtZ146I9xePCw.png\" alt=\"image-20220516194737598\" style=\"zoom:67%;\" />\n\n## 3、关系代数的运算\n\n**常用的关系运算：**并、交、差、笛卡儿积、投影、选择、连接、除运算\n\n**基本的关系运算：**并、差、笛卡儿积、选择、投影，其他的关系运算可以通过这些基本运算来表达（关系依赖） \n\n<img src=\"https://s2.loli.net/2022/05/16/1zVE8DkPaXOYuAe.png\" alt=\"image-20220516163214039\" style=\"zoom:67%;\" />\n\n### 并 ∪\n\n关系R和S的并由属于R或者属于S的元组（行）组成，并去掉冗余的元组\n\n### 交 ∩\n\n关系R和S的交由即属于R又属于S的元组（行）组成\n\n### 差 -\n\n关系R和S的差由属于R但不属于S的元组（行）组成\n\n👉并交差运算：两个关系必须是相容的同类关系（兼容表），列数相同且属性值取自同一个域\n\n### 积 ×\n\n即笛卡尔积，k元关系R与j元关系S进行笛卡尔积得到j+k元新关系，该关系的元组（行）数为R和S的元组（行）数之积\n\n![image-20220516163515542](https://s2.loli.net/2022/05/16/6Aq4Di3mdcESkLr.png)\n\n### 选择 σ\n\nσ~F~ (R) = {t|(t ∈R) ∧ F(t) = True}。从关系R中选出满足条件表达式F（可简单可复合）的那些==元组==所构成的关系\n\n### 投影 Π\n\n∏~A~ (R) = {t[A] | t ∈ R}。取属性名表A中指定的==列==，**消除重复元组** （当选择的列中不包含键时会出现重复元组）\n\n![image-20220516163855752](https://s2.loli.net/2022/05/16/yiZbTMXzfPdKh7n.png)\n\n### 连接 ⋈\n\n从两个关系的笛卡儿积中选取属性间满足一定条件的元组（==笛卡儿积上进行的选择运算== ）\n\n①等值连接：该特定条件为R关系在A属性（列）上的值与S关系在B属性（列）上的值相等\n\n②自然连接：将结果之中重复的属性（列）去掉的等值连接\n\n👉等值连接与自然连接的区别：①自然连接一定是等值连接，等值连接不一定是自然连接；②等值连接的连接属性不要求是同名属性；③等值连接后不要求去掉同名属性\n\n![image-20220516164224269](https://s2.loli.net/2022/05/16/43KxoqJRZsfLXvj.png)\n\n### 除 ÷\n\n（个人概括？）R ÷ S，先求出R与S的属性集交集，在本例中为CD，∏~C,D~ (S) = {cd, ef}，然后求R的属性集 - CD = AB，将R按AB分组，本例中可以分为三组ab、bc、ed，分别求出这些组的CD集合，本例中为ab组 = {cd, ef, de}，bc组 = {ef}，ed组 = {cd, ef}，可以判断出{cd, ef}包含于ab组和ed组，故R ÷ S = {ab, cd}\n\n![image-20220516165612885](https://s2.loli.net/2022/05/16/s1ezau8YtGgRPyV.png)\n\n## 4、综合的例子\n\n> 基本都是先选择后投影，注意如果要做连接运算的话，可以先做部分选择和投影运算，这样可以降低计算开销\n>\n> 如果有“所有”这个词，可以考虑除运算\n\n<img src=\"https://s2.loli.net/2022/05/16/sNoQwLK7nvU3eWu.png\" alt=\"image-20220516185848173\" style=\"zoom:67%;\" />\n\n<img src=\"https://s2.loli.net/2022/05/16/pjqTRbnkX8VPLfy.png\" alt=\"image-20220516185957304\" style=\"zoom:67%;\" />\n\n<img src=\"https://s2.loli.net/2022/05/16/fjmZiRI2uoJaAXb.png\" alt=\"image-20220516190034825\" style=\"zoom:67%;\" />\n\n<img src=\"https://s2.loli.net/2022/05/16/DLAMuWNqnKVo923.png\" alt=\"image-20220516190106486\" style=\"zoom:67%;\" />\n\n<img src=\"https://s2.loli.net/2022/05/16/gQGOdZX5zUB3KTf.png\" alt=\"image-20220516190238200\" style=\"zoom:67%;\" />\n\n<img src=\"https://s2.loli.net/2022/05/16/rjBwDJC1KUzI35h.png\" alt=\"image-20220516190551314\" style=\"zoom:67%;\" />\n\n<img src=\"https://s2.loli.net/2022/05/16/vpOuMmTFUZKsJAL.png\" alt=\"image-20220516191322048\" style=\"zoom:67%;\" />\n\n","source":"_posts/关系数据库.md","raw":"---\ntitle: 关系数据库\ntags: \n- 数据库\ncategory: \n- 数据库\nabbrlink: 19168\ndate: 2022-06-23 11:20:17\npassword: 123456\nmessage: 请输入密码查看文章\n---\n\n## 1、基本概念\n\n**关系模型的特点：**①结构简单、表达力强；②语言的一体化；③非过程化的操作；④坚实的数学基础（关系理论）\n\n**关系模型的三要素**：\n\n- 关系数据结构：在关系模型中，实体与实体之间的联系均用表来表示\n- 关系数据操作：包括增删改查、传统的集合操作、专门的关系操作\n- 关系的完整性约束：实体完整性、参照完整性、用户自定义的完整性\n\n<!-- more -->\n\n**关系的基本术语**：\n\n| 基本术语         | 含义                                                         |\n| ---------------- | ------------------------------------------------------------ |\n| 元组和属性       | 元组：行，属性：列。关系中的元组个数称为关系的基数，属性个数称为关系的度或维数 |\n| 超键             | 能唯一区分任意两行数据的属性或属性集。包含超键的多个属性都是超键 |\n| 候选键（==键==） | 某一属性（或属性集）的值可唯一地表示每一个元组。<u>候选键本身是超键，但其任何真子集都不再是超键</u>。候选键包含的属性为==主属性== |\n| 主键             | 在使用关系来组织数据时，常使用一个候选键作为组织该关系以及唯一性操作的对象，其中被选用的候选键为主键，例如学号。主键包含的属性为==主键属性== |\n| 外键             | 对于关系R1、R2，其中某属性\\属性集A不是R1的候选键，但是是R2的候选键，则称A是R1的外键 |\n| 全键             | 当需要一个关系的全部属性作为该关系的候选键，则称该全部属性组合为全键 |\n\n**关系的种类：**基本关系、查询表（查询结果对应的表）、视图表（虚表）\n\n**关系的性质**：\n\n①列的同质性：每一列中的分量为同一类型，来自同一个域\n\n②列名唯一性：每列要基于不同的属性名，但是不同列的值可以出自同一个域\n\n③元组相异性：关系中任意两个元组不能完全相同\n\n④行序无关性：行的次序无关紧要，可以互换\n\n⑤列序无关性：列的次序无关紧要，可以互换\n\n⑥分量原子性：每一个分量都必须是不可分的数据项\n\n**关系模式：** 关系结构的描述和定义，即二维表的表结构定义。可简记为关系的属性名表。例如学生关系模式可以简记为学生（<u>学号</u>，姓名，性别，年龄，籍贯）。可理解为**表头** \n\n**关系数据库：** 基于关系模型的数据库。\n\n==关系、关系模型、关系模式和关系数据库的区别与联系：==\n\n**区别：**\n\n- `关系模型`是用表结构表示实体集与实体集之间联系的一种模型；`关系`是属性值域的笛卡儿积中有意义的元组集合，实质上是一张二维表，表的每一行为一个元组，每一列为一个属性；`关系模式`是关系结构的描述和定义，即二维表的表结构定义；`关系数据库`是建立在关系模型之上的关系的集合\n\n**联系：**\n\n- 一个关系只能对应一个关系模式，一个关系模式可对应多个关系\n- 关系模式是关系的型，按其型装入数据值后即形成关系\n- 关系模式是相对静态的、稳定的，而关系是动态的、随时间变化的\n- 一个关系数据库是相关关系的集合，而关系模型的结构是相关关系模式的集合\n\n## 2、关系的完整性约束\n\n**实体完整性**： 组成主键的各属性都不能取空值（任何主键属性都不能为空，==注意属性集不为空不代表属性集中的所有属性都不为空==）。插入和修改元组可能破坏实体完整性规则。\n\n**参照完整性**：如果属性\\属性组F是R的外键（R为依赖表），它与S表的主键相对应，则对于R中的每个元组，在F上的取值必须取空值或者等于S中某个元组的主键值。\n\n> **实体完整性优先于参照完整性** 。即外键是主键属性时，不能为空。\n>\n> <img src=\"C:/AppData/Roaming/Typora/typora-user-images/image-20220516162456086.png\" alt=\"image-20220516162456086\" style=\"zoom:50%;\" />\n\n**用户定义完整性**：针对某一具体关系数据库的约束。包括定义属性是否为空值、定义属性值的唯一性、定义属性的取值范围、定义属性的默认值、定义属性间函数依赖关系等。\n\n---\n\n<img src=\"https://s2.loli.net/2022/05/16/SB9MQkbiUuwDPaj.png\" alt=\"image-20220516162759988\" style=\"zoom:67%;\" />\n\n**关系完整性控制的实现原理**：定义、检查、保证数据完整性\n\n**例子：**\n\n<img src=\"https://s2.loli.net/2022/05/16/rXFtZ146I9xePCw.png\" alt=\"image-20220516194737598\" style=\"zoom:67%;\" />\n\n## 3、关系代数的运算\n\n**常用的关系运算：**并、交、差、笛卡儿积、投影、选择、连接、除运算\n\n**基本的关系运算：**并、差、笛卡儿积、选择、投影，其他的关系运算可以通过这些基本运算来表达（关系依赖） \n\n<img src=\"https://s2.loli.net/2022/05/16/1zVE8DkPaXOYuAe.png\" alt=\"image-20220516163214039\" style=\"zoom:67%;\" />\n\n### 并 ∪\n\n关系R和S的并由属于R或者属于S的元组（行）组成，并去掉冗余的元组\n\n### 交 ∩\n\n关系R和S的交由即属于R又属于S的元组（行）组成\n\n### 差 -\n\n关系R和S的差由属于R但不属于S的元组（行）组成\n\n👉并交差运算：两个关系必须是相容的同类关系（兼容表），列数相同且属性值取自同一个域\n\n### 积 ×\n\n即笛卡尔积，k元关系R与j元关系S进行笛卡尔积得到j+k元新关系，该关系的元组（行）数为R和S的元组（行）数之积\n\n![image-20220516163515542](https://s2.loli.net/2022/05/16/6Aq4Di3mdcESkLr.png)\n\n### 选择 σ\n\nσ~F~ (R) = {t|(t ∈R) ∧ F(t) = True}。从关系R中选出满足条件表达式F（可简单可复合）的那些==元组==所构成的关系\n\n### 投影 Π\n\n∏~A~ (R) = {t[A] | t ∈ R}。取属性名表A中指定的==列==，**消除重复元组** （当选择的列中不包含键时会出现重复元组）\n\n![image-20220516163855752](https://s2.loli.net/2022/05/16/yiZbTMXzfPdKh7n.png)\n\n### 连接 ⋈\n\n从两个关系的笛卡儿积中选取属性间满足一定条件的元组（==笛卡儿积上进行的选择运算== ）\n\n①等值连接：该特定条件为R关系在A属性（列）上的值与S关系在B属性（列）上的值相等\n\n②自然连接：将结果之中重复的属性（列）去掉的等值连接\n\n👉等值连接与自然连接的区别：①自然连接一定是等值连接，等值连接不一定是自然连接；②等值连接的连接属性不要求是同名属性；③等值连接后不要求去掉同名属性\n\n![image-20220516164224269](https://s2.loli.net/2022/05/16/43KxoqJRZsfLXvj.png)\n\n### 除 ÷\n\n（个人概括？）R ÷ S，先求出R与S的属性集交集，在本例中为CD，∏~C,D~ (S) = {cd, ef}，然后求R的属性集 - CD = AB，将R按AB分组，本例中可以分为三组ab、bc、ed，分别求出这些组的CD集合，本例中为ab组 = {cd, ef, de}，bc组 = {ef}，ed组 = {cd, ef}，可以判断出{cd, ef}包含于ab组和ed组，故R ÷ S = {ab, cd}\n\n![image-20220516165612885](https://s2.loli.net/2022/05/16/s1ezau8YtGgRPyV.png)\n\n## 4、综合的例子\n\n> 基本都是先选择后投影，注意如果要做连接运算的话，可以先做部分选择和投影运算，这样可以降低计算开销\n>\n> 如果有“所有”这个词，可以考虑除运算\n\n<img src=\"https://s2.loli.net/2022/05/16/sNoQwLK7nvU3eWu.png\" alt=\"image-20220516185848173\" style=\"zoom:67%;\" />\n\n<img src=\"https://s2.loli.net/2022/05/16/pjqTRbnkX8VPLfy.png\" alt=\"image-20220516185957304\" style=\"zoom:67%;\" />\n\n<img src=\"https://s2.loli.net/2022/05/16/fjmZiRI2uoJaAXb.png\" alt=\"image-20220516190034825\" style=\"zoom:67%;\" />\n\n<img src=\"https://s2.loli.net/2022/05/16/DLAMuWNqnKVo923.png\" alt=\"image-20220516190106486\" style=\"zoom:67%;\" />\n\n<img src=\"https://s2.loli.net/2022/05/16/gQGOdZX5zUB3KTf.png\" alt=\"image-20220516190238200\" style=\"zoom:67%;\" />\n\n<img src=\"https://s2.loli.net/2022/05/16/rjBwDJC1KUzI35h.png\" alt=\"image-20220516190551314\" style=\"zoom:67%;\" />\n\n<img src=\"https://s2.loli.net/2022/05/16/vpOuMmTFUZKsJAL.png\" alt=\"image-20220516191322048\" style=\"zoom:67%;\" />\n\n","slug":"关系数据库","published":1,"updated":"2022-06-24T15:25:05.872Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4ww07z70001ikskc1iuaxft","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"2fb805a0bd5b5c948b1cb6c6e393f74fc31e9906a0c853b2db4f7ae37bcc7bd6\"></script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">请输入密码查看文章</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","site":{"data":{"post-body-end":"<div>\n    \n</div>\n","styles":"body {\n  background: url(\"/images/background.png\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 100% 100%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.8);\n}\n.popup {\n  opacity: 0.8;\n}\n.post-block {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.comments {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.post {\n  margin-top: 60px;\n  padding: 20px;\n  margin-bottom: 60px;\n  -webkit-box-shadow: 0 0 0px #788072;\n  -moz-box-shadow: 0 0 0px rgba(202,203,204,0.5);\n}\n.post-button .btn {\n  color: #555 !important;\n  background-color: #fff;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  border: none !important;\n  transition-property: unset;\n  padding: 0px 15px;\n}\n.post-button .btn:hover {\n  color: #fff !important;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  background-image: linear-gradient(90deg, #a166ab 0%, #ef4e7b 25%, #f37055 50%, #ef4e7b 75%, #a166ab 100%);\n}\n","variables":""}},"length":2443,"excerpt":"Here's something encrypted, password is required to continue reading.","more":"Here's something encrypted, password is required to continue reading.","origin":"<h2 id=\"1、基本概念\"><a href=\"#1、基本概念\" class=\"headerlink\" title=\"1、基本概念\"></a>1、基本概念</h2><p><strong>关系模型的特点：</strong>①结构简单、表达力强；②语言的一体化；③非过程化的操作；④坚实的数学基础（关系理论）</p>\n<p><strong>关系模型的三要素</strong>：</p>\n<ul>\n<li>关系数据结构：在关系模型中，实体与实体之间的联系均用表来表示</li>\n<li>关系数据操作：包括增删改查、传统的集合操作、专门的关系操作</li>\n<li>关系的完整性约束：实体完整性、参照完整性、用户自定义的完整性</li>\n</ul>\n<span id=\"more\"></span>\n\n<p><strong>关系的基本术语</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>基本术语</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>元组和属性</td>\n<td>元组：行，属性：列。关系中的元组个数称为关系的基数，属性个数称为关系的度或维数</td>\n</tr>\n<tr>\n<td>超键</td>\n<td>能唯一区分任意两行数据的属性或属性集。包含超键的多个属性都是超键</td>\n</tr>\n<tr>\n<td>候选键（&#x3D;&#x3D;键&#x3D;&#x3D;）</td>\n<td>某一属性（或属性集）的值可唯一地表示每一个元组。<u>候选键本身是超键，但其任何真子集都不再是超键</u>。候选键包含的属性为&#x3D;&#x3D;主属性&#x3D;&#x3D;</td>\n</tr>\n<tr>\n<td>主键</td>\n<td>在使用关系来组织数据时，常使用一个候选键作为组织该关系以及唯一性操作的对象，其中被选用的候选键为主键，例如学号。主键包含的属性为&#x3D;&#x3D;主键属性&#x3D;&#x3D;</td>\n</tr>\n<tr>\n<td>外键</td>\n<td>对于关系R1、R2，其中某属性\\属性集A不是R1的候选键，但是是R2的候选键，则称A是R1的外键</td>\n</tr>\n<tr>\n<td>全键</td>\n<td>当需要一个关系的全部属性作为该关系的候选键，则称该全部属性组合为全键</td>\n</tr>\n</tbody></table>\n<p><strong>关系的种类：</strong>基本关系、查询表（查询结果对应的表）、视图表（虚表）</p>\n<p><strong>关系的性质</strong>：</p>\n<p>①列的同质性：每一列中的分量为同一类型，来自同一个域</p>\n<p>②列名唯一性：每列要基于不同的属性名，但是不同列的值可以出自同一个域</p>\n<p>③元组相异性：关系中任意两个元组不能完全相同</p>\n<p>④行序无关性：行的次序无关紧要，可以互换</p>\n<p>⑤列序无关性：列的次序无关紧要，可以互换</p>\n<p>⑥分量原子性：每一个分量都必须是不可分的数据项</p>\n<p><strong>关系模式：</strong> 关系结构的描述和定义，即二维表的表结构定义。可简记为关系的属性名表。例如学生关系模式可以简记为学生（<u>学号</u>，姓名，性别，年龄，籍贯）。可理解为<strong>表头</strong> </p>\n<p><strong>关系数据库：</strong> 基于关系模型的数据库。</p>\n<p>&#x3D;&#x3D;关系、关系模型、关系模式和关系数据库的区别与联系：&#x3D;&#x3D;</p>\n<p><strong>区别：</strong></p>\n<ul>\n<li><code>关系模型</code>是用表结构表示实体集与实体集之间联系的一种模型；<code>关系</code>是属性值域的笛卡儿积中有意义的元组集合，实质上是一张二维表，表的每一行为一个元组，每一列为一个属性；<code>关系模式</code>是关系结构的描述和定义，即二维表的表结构定义；<code>关系数据库</code>是建立在关系模型之上的关系的集合</li>\n</ul>\n<p><strong>联系：</strong></p>\n<ul>\n<li>一个关系只能对应一个关系模式，一个关系模式可对应多个关系</li>\n<li>关系模式是关系的型，按其型装入数据值后即形成关系</li>\n<li>关系模式是相对静态的、稳定的，而关系是动态的、随时间变化的</li>\n<li>一个关系数据库是相关关系的集合，而关系模型的结构是相关关系模式的集合</li>\n</ul>\n<h2 id=\"2、关系的完整性约束\"><a href=\"#2、关系的完整性约束\" class=\"headerlink\" title=\"2、关系的完整性约束\"></a>2、关系的完整性约束</h2><p><strong>实体完整性</strong>： 组成主键的各属性都不能取空值（任何主键属性都不能为空，&#x3D;&#x3D;注意属性集不为空不代表属性集中的所有属性都不为空&#x3D;&#x3D;）。插入和修改元组可能破坏实体完整性规则。</p>\n<p><strong>参照完整性</strong>：如果属性\\属性组F是R的外键（R为依赖表），它与S表的主键相对应，则对于R中的每个元组，在F上的取值必须取空值或者等于S中某个元组的主键值。</p>\n<blockquote>\n<p><strong>实体完整性优先于参照完整性</strong> 。即外键是主键属性时，不能为空。</p>\n<img data-src=\"C:/AppData/Roaming/Typora/typora-user-images/image-20220516162456086.png\" alt=\"image-20220516162456086\" style=\"zoom:50%;\" />\n</blockquote>\n<p><strong>用户定义完整性</strong>：针对某一具体关系数据库的约束。包括定义属性是否为空值、定义属性值的唯一性、定义属性的取值范围、定义属性的默认值、定义属性间函数依赖关系等。</p>\n<hr>\n<img data-src=\"https://s2.loli.net/2022/05/16/SB9MQkbiUuwDPaj.png\" alt=\"image-20220516162759988\" style=\"zoom:67%;\" />\n\n<p><strong>关系完整性控制的实现原理</strong>：定义、检查、保证数据完整性</p>\n<p><strong>例子：</strong></p>\n<img data-src=\"https://s2.loli.net/2022/05/16/rXFtZ146I9xePCw.png\" alt=\"image-20220516194737598\" style=\"zoom:67%;\" />\n\n<h2 id=\"3、关系代数的运算\"><a href=\"#3、关系代数的运算\" class=\"headerlink\" title=\"3、关系代数的运算\"></a>3、关系代数的运算</h2><p><strong>常用的关系运算：</strong>并、交、差、笛卡儿积、投影、选择、连接、除运算</p>\n<p><strong>基本的关系运算：</strong>并、差、笛卡儿积、选择、投影，其他的关系运算可以通过这些基本运算来表达（关系依赖） </p>\n<img data-src=\"https://s2.loli.net/2022/05/16/1zVE8DkPaXOYuAe.png\" alt=\"image-20220516163214039\" style=\"zoom:67%;\" />\n\n<h3 id=\"并-∪\"><a href=\"#并-∪\" class=\"headerlink\" title=\"并 ∪\"></a>并 ∪</h3><p>关系R和S的并由属于R或者属于S的元组（行）组成，并去掉冗余的元组</p>\n<h3 id=\"交-∩\"><a href=\"#交-∩\" class=\"headerlink\" title=\"交 ∩\"></a>交 ∩</h3><p>关系R和S的交由即属于R又属于S的元组（行）组成</p>\n<h3 id=\"差\"><a href=\"#差\" class=\"headerlink\" title=\"差 -\"></a>差 -</h3><p>关系R和S的差由属于R但不属于S的元组（行）组成</p>\n<p>👉并交差运算：两个关系必须是相容的同类关系（兼容表），列数相同且属性值取自同一个域</p>\n<h3 id=\"积-×\"><a href=\"#积-×\" class=\"headerlink\" title=\"积 ×\"></a>积 ×</h3><p>即笛卡尔积，k元关系R与j元关系S进行笛卡尔积得到j+k元新关系，该关系的元组（行）数为R和S的元组（行）数之积</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/16/6Aq4Di3mdcESkLr.png\" alt=\"image-20220516163515542\"></p>\n<h3 id=\"选择-σ\"><a href=\"#选择-σ\" class=\"headerlink\" title=\"选择 σ\"></a>选择 σ</h3><p>σ<del>F</del> (R) &#x3D; {t|(t ∈R) ∧ F(t) &#x3D; True}。从关系R中选出满足条件表达式F（可简单可复合）的那些&#x3D;&#x3D;元组&#x3D;&#x3D;所构成的关系</p>\n<h3 id=\"投影-Π\"><a href=\"#投影-Π\" class=\"headerlink\" title=\"投影 Π\"></a>投影 Π</h3><p>∏<del>A</del> (R) &#x3D; {t[A] | t ∈ R}。取属性名表A中指定的&#x3D;&#x3D;列&#x3D;&#x3D;，<strong>消除重复元组</strong> （当选择的列中不包含键时会出现重复元组）</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/16/yiZbTMXzfPdKh7n.png\" alt=\"image-20220516163855752\"></p>\n<h3 id=\"连接-⋈\"><a href=\"#连接-⋈\" class=\"headerlink\" title=\"连接 ⋈\"></a>连接 ⋈</h3><p>从两个关系的笛卡儿积中选取属性间满足一定条件的元组（&#x3D;&#x3D;笛卡儿积上进行的选择运算&#x3D;&#x3D; ）</p>\n<p>①等值连接：该特定条件为R关系在A属性（列）上的值与S关系在B属性（列）上的值相等</p>\n<p>②自然连接：将结果之中重复的属性（列）去掉的等值连接</p>\n<p>👉等值连接与自然连接的区别：①自然连接一定是等值连接，等值连接不一定是自然连接；②等值连接的连接属性不要求是同名属性；③等值连接后不要求去掉同名属性</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/16/43KxoqJRZsfLXvj.png\" alt=\"image-20220516164224269\"></p>\n<h3 id=\"除-÷\"><a href=\"#除-÷\" class=\"headerlink\" title=\"除 ÷\"></a>除 ÷</h3><p>（个人概括？）R ÷ S，先求出R与S的属性集交集，在本例中为CD，∏<del>C,D</del> (S) &#x3D; {cd, ef}，然后求R的属性集 - CD &#x3D; AB，将R按AB分组，本例中可以分为三组ab、bc、ed，分别求出这些组的CD集合，本例中为ab组 &#x3D; {cd, ef, de}，bc组 &#x3D; {ef}，ed组 &#x3D; {cd, ef}，可以判断出{cd, ef}包含于ab组和ed组，故R ÷ S &#x3D; {ab, cd}</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/16/s1ezau8YtGgRPyV.png\" alt=\"image-20220516165612885\"></p>\n<h2 id=\"4、综合的例子\"><a href=\"#4、综合的例子\" class=\"headerlink\" title=\"4、综合的例子\"></a>4、综合的例子</h2><blockquote>\n<p>基本都是先选择后投影，注意如果要做连接运算的话，可以先做部分选择和投影运算，这样可以降低计算开销</p>\n<p>如果有“所有”这个词，可以考虑除运算</p>\n</blockquote>\n<img data-src=\"https://s2.loli.net/2022/05/16/sNoQwLK7nvU3eWu.png\" alt=\"image-20220516185848173\" style=\"zoom:67%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/05/16/pjqTRbnkX8VPLfy.png\" alt=\"image-20220516185957304\" style=\"zoom:67%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/05/16/fjmZiRI2uoJaAXb.png\" alt=\"image-20220516190034825\" style=\"zoom:67%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/05/16/DLAMuWNqnKVo923.png\" alt=\"image-20220516190106486\" style=\"zoom:67%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/05/16/gQGOdZX5zUB3KTf.png\" alt=\"image-20220516190238200\" style=\"zoom:67%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/05/16/rjBwDJC1KUzI35h.png\" alt=\"image-20220516190551314\" style=\"zoom:67%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/05/16/vpOuMmTFUZKsJAL.png\" alt=\"image-20220516191322048\" style=\"zoom:67%;\" />\n\n","encrypt":true},{"title":"并发控制","abbrlink":62852,"date":"2022-06-27T14:56:56.000Z","_content":"\n# 七、并发控制\n\n# UNIT 16  事务管理\n\n## 16.1  事务的定义与特性 、事务管理\n\n- **事务产生的原因：**保证数据库状态的一致性\n\n- **事务（transaction）：**用户定义的一个数据库操作序列，这些工作要么全做要么全不做，是一个不可分割的工作单位。\n\n    > 事务是数据库系统工作的一个不可分割的基本单位，既是保持数据库完整性约束或逻辑一致性的单位，又是数据库恢复及并发控制的基本单位。\n\n- **SQL定义事务的语句：**\n\n    ```sql\n    BEGIN TRANSACTION\t#事务开始语句\n    COMMIT\t  #事务提交语句，此时系统将事务所有对数据库的更新写入磁盘的物理数据库中，事务正常结束\n    ROLLBACK  #事务非正常结束，此时系统将数据库的所有已完成的更新操作全部撤销，将事务回滚至事务开始处并重新开始执行\n    ```\n\n- **事务的三个阶段**：事务初态、事务执行、事务完成\n\n    ![image-20220503192133312](https://s2.loli.net/2022/05/03/JaiEyIGlmXsYBVF.png)\n\n- **事务的五个状态**：活动状态、失败状态、中止状态、局部提交状态、提交状态\n\n    ![image-20220503192208460](https://s2.loli.net/2022/05/03/tp4Q7wbhBX3OHZe.png)\n\n    \n\n- ==事务的四个特性：ACID==  \n\n    - **原子性（Atomicity）：**事务包含的一组更新操作是原子不可分的，即更新操作对于数据库而言，要么全做，要么全不做，不能部分地完成\n\n    - **一致性（Consistency）：**指事务对数据库的每一个插入、删除、修改等更新操作，都必须遵守一定的完整性约束，系统一旦查出数据库的完整性受到破坏，则撤销该事务并清除该事务对数据库的任何影响。一个成功的事务把数据库从一个一致的状态转换到另一个一致的状态。\n\n    - **隔离性（Isolation）：**指两个或多个事务可以同时运行而不互相影响，一个事务内部的操作及其使用的数据对并发的其他事务是隔离的、不可见的。\n\n    - **持久性（Durability）：**指一个事务成功完成之后，其工作的结果就会永远保存在数据库中，是永久有效的，即使随后系统发生故障也能保持或恢复。\n\n        > 破坏事务ACID特性的因素有：①多个事务的并行运行（并发控制）；②事务的运行过程中被强行停止（故障恢复）\n\n## 16.2  事务并发导致的不一致性\n\n- **并发控制：**保证事务的隔离性，从而保证数据库中数据的一致性\n\n    当事务操作相同的数据且这些操作是冲突的，则会破坏事务的隔离性\n\n- **事务并发导致的不一致性**\n\n    包括丢失修改（lost update）、不可重复读（non-repeatable read）、读脏数据（dirty read）、幻像（phantom）\n\n<img src=\"https://s2.loli.net/2022/05/02/NdQICqbpTUw6HBh.png\" alt=\"image-20220502105703368\" style=\"zoom:67%;\" />\n\n<img src=\"https://s2.loli.net/2022/05/02/fezlxuHdRMWCi6q.png\" alt=\"image-20220502105416862\" style=\"zoom:67%;\" />\n\n<img src=\"https://s2.loli.net/2022/05/02/VcifCBzhLoZUyKa.png\" alt=\"image-20220502105434043\" style=\"zoom:67%;\" />\n\n<img src=\"https://s2.loli.net/2022/05/02/tcUNXbLw6fxdQ8m.png\" alt=\"image-20220502105958563\" style=\"zoom:67%;\" />\n\n> **不可重复读和幻象的区别：**不可重复读的重点是修改；同样的条件，第1次和第2次读取的值不一样。幻读的重点在于新增或者删除；同样的条件， 第1次和第2次读出来的记录数不一样。从控制角度来看，不可重复读只需要锁住满足条件的记录，幻读要锁住满足条件及其相近的记录。\n\n- **出现不一致性的原因：**不同事务间冲突操作的无序执行，违反了隔离性原则\n\n- **并发控制的方法**\n\n    - **时间戳：**对事务规定一定的顺序\n\n    - **加锁：（主要技术）**对于共享的资源DB进行控制\n\n\n\n## 16.3  封锁及封锁协议\n\n### 1、封锁的定义\n\n- **概念：**事务T在对某个数据对象例如表、记录等操作之前，先向系统发出请求，对其**加锁**。加锁后事务T就对该数据对象有了一定的**控制**，在事务T释放它的锁之前，其他事务对该数据的操作受到**一定限制**。\n\n### 2、基本的封锁类型\n\n- **排它锁**（Exclusive Locks，简称X锁，也称写锁）\n- **共享锁**（Share Locks，简称S锁，也称读锁）\n\n<img src=\"https://s2.loli.net/2022/05/10/VBJL7PADZoWzqOy.png\" alt=\"image-20220510101032697\" style=\"zoom:50%;\" />\n\n![image-20220503200409098](https://s2.loli.net/2022/05/03/Pc2ldCGzSiN7U5q.png)\n\n### 3、封锁协议包含的内容\n\n- 什么操作需要申请何种锁？----排它锁、共享锁\n- 何时加锁？----事务开始前、操作前\n- 何时解锁？----操作结束后、事务结束前\n\n### 4、封锁协议的分类   \n\n- ==一级封锁协议==\n\n    事务T在**修改**数据R之前，必须先对R加**X锁**，直到**事务结束才释放**。事务结束包括正常结束（COMMIT）和非正常结束（ROLLBACK）\n\n    ==一级封锁协议不加S锁==\n\n    <img src=\"https://s2.loli.net/2022/05/10/CvwZySBr9LxhmEX.png\" alt=\"image-20220510103651090\" style=\"zoom:67%;\" />\n\n- ==二级封锁协议==\n\n    **在一级封锁协议的基础上**，加上事务T在**读取**数据R之前必须先对其加**S锁**，**读完后即可释放S锁**\n\n    <img src=\"https://s2.loli.net/2022/05/10/cPYrELMTeukGNoH.png\" alt=\"image-20220510103811156\" style=\"zoom:67%;\" />      \n\n- ==三级封锁协议==\n\n    **在一级封锁协议的基础上**，加上事务T在**读取**数据R之前必须先对其加**S锁**，**直到事务结束才释放**\n\n    <img src=\"https://s2.loli.net/2022/05/10/7r8VxWoZYlmIzQc.png\" alt=\"image-20220510103942568\" style=\"zoom:67%;\" />\n\n- ==一二三级封锁协议的一致性保证==\n\n    <img src=\"https://s2.loli.net/2022/05/02/N162xhCXYOvqiBE.png\" alt=\"image-20220502113625070\" style=\"zoom:80%;\" />\n\n### 5、并发调度的可串行性\n\n- **调度的正确性**：\n\n    - 能将数据库置于一致状态的调度一定是正确的调度\n\n    - 将所有事务串行起来的调度策略一定是正确的调度（因为每个事务都会保证一致性状态，故事务串行一定会保证一致性）\n\n    - 与串行调度等价的调度是正确的调度\n\n- **并发事务的正确性准则：**多个事务的并发执行是正确的，当且仅当其结果与**某一次序串行地执行**它们时的结果相同，我们称这种调度策略为**可串行化的调度**。\n\n    <img src=\"https://s2.loli.net/2022/05/02/48u6gehbtD5PVnT.png\" alt=\"image-20220502114421860\" style=\"zoom:67%;\" />\n\n    <img src=\"https://s2.loli.net/2022/05/02/rGFxKEV5iQNSPs4.png\" alt=\"image-20220502114251187\" style=\"zoom:67%;\" />\n\n\n\n## 16.4 两段锁协议\n\n- **概念：**所有事务必须分两个阶段（获得阶段和释放阶段，亦即扩展阶段和收缩阶段）对数据项加锁和解锁。\n\n    - **获得封锁：**在对任何数据进行读、写操作之前，首先要申请并获得对该数据的封锁； \n\n    - **释放封锁：**==在释放一个封锁之后，事务不再申请和获得任何其他封锁。==\n\n        例子：\n\n        <img src=\"https://s2.loli.net/2022/05/10/ZMBYK4H9SIQCOit.png\" alt=\"image-20220510105713156\" style=\"zoom:67%;\" />\n\n> - ==两段锁协议是可串行化的充分条件，而不是必要条件==\n>\n> - 一次封锁法遵守两段锁协议，但两段锁协议不要求事务必须一次将所有要使用的数据全部加锁，因此遵守两段锁协议的事务可能发生`死锁`。\n>\n>     例子：\n>\n>     ![image-20220510105806932](https://s2.loli.net/2022/05/10/gYxvJR9oVeKG5US.png)\n>\n> - 三级封锁是两段锁的一种，因为三级封锁都是事务结束再释放锁，事务结束后显然事务不会再申请和获得任何其他封锁。\n\n- **活锁和死锁**\n\n    - **活锁（饥饿）**：某一个事务无限等待。解决方法：先来先服务\n\n    - **死锁：**两个或多个事务都已封锁了一些数据对象，然后又都请求对已被其他事务封锁的数据对象加锁，从而出现死等待。\n\n    - **解决死锁**：\n\n        - **预防：**破坏死锁产生的四个必要条件（互斥、请求和保持、不可剥夺、循环等待）。几个方法：静态申请法，一次性申请所有资源，资源的利用率不高；延迟进程的执行，能够获得所有资源时才允许执行，并发度不好；有序资源分配法，给资源编号\n\n        - **避免**：类似os中的银行家算法，在资源分配之前进行检查，防止死锁的发生\n\n        - **诊断与解除**\n\n            - **死锁的诊断：**\n\n                - **超时法**：超过规定的时间就认为发生死锁。\n\n                    > 不足：可能误判死锁，也可能不能及时发现死锁\n\n                - **等待图法：**以`事务`为结点，边表示事务等待的情况，若T1等待T2，则 T1→T2。系统周期性地检测事务等待图，若图中存在回路，则出现死锁。\n\n            - **死锁的解除**：选择一个处理死锁代价最小的事务，撤销。对撤销的事务所执行的数据修改操作必须加以恢复。\n\n\n\n## 16.5  封锁的粒度\n\n- **封锁的粒度**：指封锁对象的大小，封锁的粒度包括整个数据库、关系、元组、索引\n\n<img src=\"https://s2.loli.net/2022/05/02/dKOgEQJji3fncZ1.png\" alt=\"image-20220502143147735\" style=\"zoom:67%;\" />\n\n- **封锁粒度的选择**：选择封锁粒度时应该同时考虑并发度和开销两个因素。==封锁粒度越大，并发度越小，系统开销越小。==\n\n- **多粒度封锁**\n\n    - **概念：**在一个系统中同时支持多种封锁粒度供不同的事务选择。\n\n        > `多粒度封锁协议`允许多粒度树中的每个结点被独立地加锁。对每个结点的加锁意味着这个结点的所有后裔结点也被加以同样类型的锁。\n\n    - **显式封锁：**应事务的要求直接加到数据对象上的封锁\n\n    - **隐式封锁：**该数据对象没有独立加锁，是由于其上级结点加锁而使该数据对象加上了锁\n\n    - **判断能否对一个数据对象加锁：**\n\n        - 检查**该数据对象**有无显式封锁与之冲突； \n\n        - 检查其**所有上级结点**，看本事务的显式封锁是否与该数据对象上的隐式封锁冲突； \n\n        - 检查其**所有下级结点**，看上面的显式封锁是否与本事务的隐式封锁冲突。\n\n            > 不需要检查下级结点的隐式封锁，因为有隐式封锁肯定可以向上找到显式封锁\n\n- ==意向锁==\n\n    - **概念：**如果对一个结点加意向锁，则说明该结点的下层结点正在被加锁；对任一结点加锁时，必须先对它的（所有）上层结点加意向锁。\n\n    - **意向共享锁（简称IS锁）**：如果对数据对象加IS锁，表示它的后裔结点拟加S锁 \n\n    - **意向排它锁（简称IX锁）**：如果对数据对象加IX锁，表示它的后裔结点拟加X锁 \n\n    - **共享意向排它锁（简称SIX锁）**：如果对数据对象加SIX锁，表示先加S锁，再加IX\n\n        eg.  对某个表加SIX锁，表示该事务要读整个表（所以要对该表加S锁），同时会更新个别元组（所以要对该表加IX锁）\n\n        <img src=\"https://s2.loli.net/2022/05/10/iOJKRkQElyd7TzM.png\" alt=\"image-20220510113003330\" style=\"zoom:67%;\" />\n\n        > 加锁是从上往下的\n\n![image-20220503201553550](https://s2.loli.net/2022/05/03/mzDWoftL9S6kxRs.png)\n\n> IS锁和IX锁是相容的，因为最终会转化到下层结点，如果最终S锁和X锁加到了同一个对象上，那么在这个对象上的这两个锁是不相容的；如果没有加到同一个对象上，那么IS锁和IX锁就不会出现问题。\n\n## 16.6  隔离级别（四种）\n\n- **未提交读（读未提交， read uncommitted）**：事务隔离的最低级别，一个事务可以读到另外一个事务未提交的数据，不允许丢失修改，接受读脏数据和不可重复读现象。\n\n- **提交读（读已提交， read committed）**：SQL Server 默认级别。若事务还没提交，其它事务不能读取该事务正在修改的数据。不允许丢失修改和读脏数据，接受不可重复读现象。\n\n- **可重复读（repeatable read）**：事务多次读取统一数据对象的结果一致。不允许丢失修改、读脏数据和读不一致，接受幻影读现象。\n\n- **可串行读（serializable）**：事务隔离的最高级别，保证可串行化，不允许丢失修改、读脏数据、读不一致以及幻影读现象的发生。\n\n- 隔离级别允许不同类型的行为：\n\n    | **隔离级别** | 丢失修改 | **脏读** | **不可重复读取** | **幻像** |\n    | :----------: | :------: | :------: | :--------------: | :------: |\n    | **未提交读** |    否    |    是    |        是        |    是    |\n    |  **提交读**  |    否    |    否    |        是        |    是    |\n    | **可重复读** |    否    |    否    |        否        |    是    |\n    | **可串行读** |    否    |    否    |        否        |    否    |\n\n- **设置隔离级别的语法**\n\n    ```sql\n    set transaction isolation level\n    {\n    \tread committed | \n    \tread uncommitted |\n    \trepeatable read |\n    \tserializable read\n    }\n    ```\n\n\n\n## 16.7 数据库恢复\n\n- **概念**：把数据库从**错误状态**恢复到某一个已知的**正确状态**（亦称为一致状态或完整状态）的功能。\n\n- **目标：**在故障发生时，确保事务的原子性和持久性\n\n- **特点：**因为DB与内存用户工作区之间的数据交换是通过缓冲区进行的，而这个交换一般是以缓冲区是否满来触发的。因此，有可能提交事务的数据仍在缓冲区而没有写到DB中，而未提交事务的数据却写到了DB中。所以，故障恢复时，可能既要REDO已经提交了的事务，又要UNDO未提交的事务，以保证事务的原子性\n\n- **技术**\n\n    DBMS提供备份机制、日志机制、检查点机制来协助数据库故障恢复;\n\n    ==基本原理：数据冗余。==\n\n- ==数据转储：==DBA定期地将整个数据库复制到磁带或另一个磁盘上保存起来的过程。这些备用的数据文本称为后备副本或后援副本。\n\n    **数据转储的分类：**\n\n    - 按照转储时的状态可以分为**静态转储和动态转储**。静态转储是指在系统中无运行事务时进行的转储操作。动态转储是指转储期间允许对数据库进行存取或者修改，但此时需要把转储期间各事务对数据库的修改记录在日志文件中，从而将来可以恢复\n    - 按方式不同可以分为**海量转储和增量转储**。海量转储是指每次转储全部数据库。增量转储是指每次只转储上一次转储后更新的数据库。\n\n    ![image-20220503193938217](https://s2.loli.net/2022/05/03/oEV9AIyQY7LlmZD.png)\n\n- ==登记日志文件==：记录事务对数据库的`更新`操作\n\n    **日志文件的格式：**以记录为单位的日志文件和以数据块为单位的日志文件。\n\n    - 以记录为单位的日志文件：一个日志记录包括每个事务的开始标志（BEGIN TRANSACTION）、结束标志（COMMIT 或 ROLLBACK）、每个更新操作\n\n    - 以数据块为单位的日志文件：包含事务标识和被更新的数据块\n\n    <img src=\"https://s2.loli.net/2022/05/02/aeJHjWo2fNvlnSM.png\" alt=\"image-20220502151104445\" style=\"zoom:67%;\" />\n\n    **登记日志文件的原则：**\n\n    - 登记的次序按并发事务执行的时间次序\n    - 必须先写日志文件，后写数据库==（日志先写原则）==\n\n- **系统故障的恢复实现策略**\n\n    - **系统故障导致的数据库不一致**\n        （1）未完成的事务对DB产生影响\n        （2）已完成的事务在缓冲区的内容未写入DB\n\n    - **恢复功能**\n        （1）UNDO未完成的事务\n        （2）REDO已完成的事务\n\n    - **恢复步骤**\n        （1）正向扫描日志文件，建立UNDO和REDO队列；（不需要redo日志中所有已完成的事务）\n        （2）反向扫描日志文件，对每个UNDO事务的更新执行逆操作；\n        （3）正向扫描日志文件，对每个REDO事务的更新重新执行。\n\n- ==检查点技术：==\n\n    当事务正常运行时，数据库系统按一定的时间间隔设检查点。一旦系统需要恢复数据库状态，就可以根据最新的检查点的信息，从检查点开始执行，而不必从头开始执行那些被中断的事务。\n\n    系统在检查点做的动作主要如下：\n\n    - 暂时中止现有事务的执行\n    - 在日志中写入检查点记录，并把日志强制写入磁盘\n    - 把主存中被修改的数据缓冲区强制写入磁盘\n    - 重新开始执行事务\n\n    例子：\n\n    ![image-20220503195636843](https://s2.loli.net/2022/05/03/hbQXdSE3r46sk52.png)\n\n    ![image-20220503195650256](https://s2.loli.net/2022/05/03/f4wAEDbW2xU6ZtX.png)\n\n    \n","source":"_posts/并发控制.md","raw":"---\ntitle: 并发控制\ntags:\n  - 数据库\ncategory:\n  - 数据库\nabbrlink: 62852\ndate: 2022-06-27 22:56:56\n---\n\n# 七、并发控制\n\n# UNIT 16  事务管理\n\n## 16.1  事务的定义与特性 、事务管理\n\n- **事务产生的原因：**保证数据库状态的一致性\n\n- **事务（transaction）：**用户定义的一个数据库操作序列，这些工作要么全做要么全不做，是一个不可分割的工作单位。\n\n    > 事务是数据库系统工作的一个不可分割的基本单位，既是保持数据库完整性约束或逻辑一致性的单位，又是数据库恢复及并发控制的基本单位。\n\n- **SQL定义事务的语句：**\n\n    ```sql\n    BEGIN TRANSACTION\t#事务开始语句\n    COMMIT\t  #事务提交语句，此时系统将事务所有对数据库的更新写入磁盘的物理数据库中，事务正常结束\n    ROLLBACK  #事务非正常结束，此时系统将数据库的所有已完成的更新操作全部撤销，将事务回滚至事务开始处并重新开始执行\n    ```\n\n- **事务的三个阶段**：事务初态、事务执行、事务完成\n\n    ![image-20220503192133312](https://s2.loli.net/2022/05/03/JaiEyIGlmXsYBVF.png)\n\n- **事务的五个状态**：活动状态、失败状态、中止状态、局部提交状态、提交状态\n\n    ![image-20220503192208460](https://s2.loli.net/2022/05/03/tp4Q7wbhBX3OHZe.png)\n\n    \n\n- ==事务的四个特性：ACID==  \n\n    - **原子性（Atomicity）：**事务包含的一组更新操作是原子不可分的，即更新操作对于数据库而言，要么全做，要么全不做，不能部分地完成\n\n    - **一致性（Consistency）：**指事务对数据库的每一个插入、删除、修改等更新操作，都必须遵守一定的完整性约束，系统一旦查出数据库的完整性受到破坏，则撤销该事务并清除该事务对数据库的任何影响。一个成功的事务把数据库从一个一致的状态转换到另一个一致的状态。\n\n    - **隔离性（Isolation）：**指两个或多个事务可以同时运行而不互相影响，一个事务内部的操作及其使用的数据对并发的其他事务是隔离的、不可见的。\n\n    - **持久性（Durability）：**指一个事务成功完成之后，其工作的结果就会永远保存在数据库中，是永久有效的，即使随后系统发生故障也能保持或恢复。\n\n        > 破坏事务ACID特性的因素有：①多个事务的并行运行（并发控制）；②事务的运行过程中被强行停止（故障恢复）\n\n## 16.2  事务并发导致的不一致性\n\n- **并发控制：**保证事务的隔离性，从而保证数据库中数据的一致性\n\n    当事务操作相同的数据且这些操作是冲突的，则会破坏事务的隔离性\n\n- **事务并发导致的不一致性**\n\n    包括丢失修改（lost update）、不可重复读（non-repeatable read）、读脏数据（dirty read）、幻像（phantom）\n\n<img src=\"https://s2.loli.net/2022/05/02/NdQICqbpTUw6HBh.png\" alt=\"image-20220502105703368\" style=\"zoom:67%;\" />\n\n<img src=\"https://s2.loli.net/2022/05/02/fezlxuHdRMWCi6q.png\" alt=\"image-20220502105416862\" style=\"zoom:67%;\" />\n\n<img src=\"https://s2.loli.net/2022/05/02/VcifCBzhLoZUyKa.png\" alt=\"image-20220502105434043\" style=\"zoom:67%;\" />\n\n<img src=\"https://s2.loli.net/2022/05/02/tcUNXbLw6fxdQ8m.png\" alt=\"image-20220502105958563\" style=\"zoom:67%;\" />\n\n> **不可重复读和幻象的区别：**不可重复读的重点是修改；同样的条件，第1次和第2次读取的值不一样。幻读的重点在于新增或者删除；同样的条件， 第1次和第2次读出来的记录数不一样。从控制角度来看，不可重复读只需要锁住满足条件的记录，幻读要锁住满足条件及其相近的记录。\n\n- **出现不一致性的原因：**不同事务间冲突操作的无序执行，违反了隔离性原则\n\n- **并发控制的方法**\n\n    - **时间戳：**对事务规定一定的顺序\n\n    - **加锁：（主要技术）**对于共享的资源DB进行控制\n\n\n\n## 16.3  封锁及封锁协议\n\n### 1、封锁的定义\n\n- **概念：**事务T在对某个数据对象例如表、记录等操作之前，先向系统发出请求，对其**加锁**。加锁后事务T就对该数据对象有了一定的**控制**，在事务T释放它的锁之前，其他事务对该数据的操作受到**一定限制**。\n\n### 2、基本的封锁类型\n\n- **排它锁**（Exclusive Locks，简称X锁，也称写锁）\n- **共享锁**（Share Locks，简称S锁，也称读锁）\n\n<img src=\"https://s2.loli.net/2022/05/10/VBJL7PADZoWzqOy.png\" alt=\"image-20220510101032697\" style=\"zoom:50%;\" />\n\n![image-20220503200409098](https://s2.loli.net/2022/05/03/Pc2ldCGzSiN7U5q.png)\n\n### 3、封锁协议包含的内容\n\n- 什么操作需要申请何种锁？----排它锁、共享锁\n- 何时加锁？----事务开始前、操作前\n- 何时解锁？----操作结束后、事务结束前\n\n### 4、封锁协议的分类   \n\n- ==一级封锁协议==\n\n    事务T在**修改**数据R之前，必须先对R加**X锁**，直到**事务结束才释放**。事务结束包括正常结束（COMMIT）和非正常结束（ROLLBACK）\n\n    ==一级封锁协议不加S锁==\n\n    <img src=\"https://s2.loli.net/2022/05/10/CvwZySBr9LxhmEX.png\" alt=\"image-20220510103651090\" style=\"zoom:67%;\" />\n\n- ==二级封锁协议==\n\n    **在一级封锁协议的基础上**，加上事务T在**读取**数据R之前必须先对其加**S锁**，**读完后即可释放S锁**\n\n    <img src=\"https://s2.loli.net/2022/05/10/cPYrELMTeukGNoH.png\" alt=\"image-20220510103811156\" style=\"zoom:67%;\" />      \n\n- ==三级封锁协议==\n\n    **在一级封锁协议的基础上**，加上事务T在**读取**数据R之前必须先对其加**S锁**，**直到事务结束才释放**\n\n    <img src=\"https://s2.loli.net/2022/05/10/7r8VxWoZYlmIzQc.png\" alt=\"image-20220510103942568\" style=\"zoom:67%;\" />\n\n- ==一二三级封锁协议的一致性保证==\n\n    <img src=\"https://s2.loli.net/2022/05/02/N162xhCXYOvqiBE.png\" alt=\"image-20220502113625070\" style=\"zoom:80%;\" />\n\n### 5、并发调度的可串行性\n\n- **调度的正确性**：\n\n    - 能将数据库置于一致状态的调度一定是正确的调度\n\n    - 将所有事务串行起来的调度策略一定是正确的调度（因为每个事务都会保证一致性状态，故事务串行一定会保证一致性）\n\n    - 与串行调度等价的调度是正确的调度\n\n- **并发事务的正确性准则：**多个事务的并发执行是正确的，当且仅当其结果与**某一次序串行地执行**它们时的结果相同，我们称这种调度策略为**可串行化的调度**。\n\n    <img src=\"https://s2.loli.net/2022/05/02/48u6gehbtD5PVnT.png\" alt=\"image-20220502114421860\" style=\"zoom:67%;\" />\n\n    <img src=\"https://s2.loli.net/2022/05/02/rGFxKEV5iQNSPs4.png\" alt=\"image-20220502114251187\" style=\"zoom:67%;\" />\n\n\n\n## 16.4 两段锁协议\n\n- **概念：**所有事务必须分两个阶段（获得阶段和释放阶段，亦即扩展阶段和收缩阶段）对数据项加锁和解锁。\n\n    - **获得封锁：**在对任何数据进行读、写操作之前，首先要申请并获得对该数据的封锁； \n\n    - **释放封锁：**==在释放一个封锁之后，事务不再申请和获得任何其他封锁。==\n\n        例子：\n\n        <img src=\"https://s2.loli.net/2022/05/10/ZMBYK4H9SIQCOit.png\" alt=\"image-20220510105713156\" style=\"zoom:67%;\" />\n\n> - ==两段锁协议是可串行化的充分条件，而不是必要条件==\n>\n> - 一次封锁法遵守两段锁协议，但两段锁协议不要求事务必须一次将所有要使用的数据全部加锁，因此遵守两段锁协议的事务可能发生`死锁`。\n>\n>     例子：\n>\n>     ![image-20220510105806932](https://s2.loli.net/2022/05/10/gYxvJR9oVeKG5US.png)\n>\n> - 三级封锁是两段锁的一种，因为三级封锁都是事务结束再释放锁，事务结束后显然事务不会再申请和获得任何其他封锁。\n\n- **活锁和死锁**\n\n    - **活锁（饥饿）**：某一个事务无限等待。解决方法：先来先服务\n\n    - **死锁：**两个或多个事务都已封锁了一些数据对象，然后又都请求对已被其他事务封锁的数据对象加锁，从而出现死等待。\n\n    - **解决死锁**：\n\n        - **预防：**破坏死锁产生的四个必要条件（互斥、请求和保持、不可剥夺、循环等待）。几个方法：静态申请法，一次性申请所有资源，资源的利用率不高；延迟进程的执行，能够获得所有资源时才允许执行，并发度不好；有序资源分配法，给资源编号\n\n        - **避免**：类似os中的银行家算法，在资源分配之前进行检查，防止死锁的发生\n\n        - **诊断与解除**\n\n            - **死锁的诊断：**\n\n                - **超时法**：超过规定的时间就认为发生死锁。\n\n                    > 不足：可能误判死锁，也可能不能及时发现死锁\n\n                - **等待图法：**以`事务`为结点，边表示事务等待的情况，若T1等待T2，则 T1→T2。系统周期性地检测事务等待图，若图中存在回路，则出现死锁。\n\n            - **死锁的解除**：选择一个处理死锁代价最小的事务，撤销。对撤销的事务所执行的数据修改操作必须加以恢复。\n\n\n\n## 16.5  封锁的粒度\n\n- **封锁的粒度**：指封锁对象的大小，封锁的粒度包括整个数据库、关系、元组、索引\n\n<img src=\"https://s2.loli.net/2022/05/02/dKOgEQJji3fncZ1.png\" alt=\"image-20220502143147735\" style=\"zoom:67%;\" />\n\n- **封锁粒度的选择**：选择封锁粒度时应该同时考虑并发度和开销两个因素。==封锁粒度越大，并发度越小，系统开销越小。==\n\n- **多粒度封锁**\n\n    - **概念：**在一个系统中同时支持多种封锁粒度供不同的事务选择。\n\n        > `多粒度封锁协议`允许多粒度树中的每个结点被独立地加锁。对每个结点的加锁意味着这个结点的所有后裔结点也被加以同样类型的锁。\n\n    - **显式封锁：**应事务的要求直接加到数据对象上的封锁\n\n    - **隐式封锁：**该数据对象没有独立加锁，是由于其上级结点加锁而使该数据对象加上了锁\n\n    - **判断能否对一个数据对象加锁：**\n\n        - 检查**该数据对象**有无显式封锁与之冲突； \n\n        - 检查其**所有上级结点**，看本事务的显式封锁是否与该数据对象上的隐式封锁冲突； \n\n        - 检查其**所有下级结点**，看上面的显式封锁是否与本事务的隐式封锁冲突。\n\n            > 不需要检查下级结点的隐式封锁，因为有隐式封锁肯定可以向上找到显式封锁\n\n- ==意向锁==\n\n    - **概念：**如果对一个结点加意向锁，则说明该结点的下层结点正在被加锁；对任一结点加锁时，必须先对它的（所有）上层结点加意向锁。\n\n    - **意向共享锁（简称IS锁）**：如果对数据对象加IS锁，表示它的后裔结点拟加S锁 \n\n    - **意向排它锁（简称IX锁）**：如果对数据对象加IX锁，表示它的后裔结点拟加X锁 \n\n    - **共享意向排它锁（简称SIX锁）**：如果对数据对象加SIX锁，表示先加S锁，再加IX\n\n        eg.  对某个表加SIX锁，表示该事务要读整个表（所以要对该表加S锁），同时会更新个别元组（所以要对该表加IX锁）\n\n        <img src=\"https://s2.loli.net/2022/05/10/iOJKRkQElyd7TzM.png\" alt=\"image-20220510113003330\" style=\"zoom:67%;\" />\n\n        > 加锁是从上往下的\n\n![image-20220503201553550](https://s2.loli.net/2022/05/03/mzDWoftL9S6kxRs.png)\n\n> IS锁和IX锁是相容的，因为最终会转化到下层结点，如果最终S锁和X锁加到了同一个对象上，那么在这个对象上的这两个锁是不相容的；如果没有加到同一个对象上，那么IS锁和IX锁就不会出现问题。\n\n## 16.6  隔离级别（四种）\n\n- **未提交读（读未提交， read uncommitted）**：事务隔离的最低级别，一个事务可以读到另外一个事务未提交的数据，不允许丢失修改，接受读脏数据和不可重复读现象。\n\n- **提交读（读已提交， read committed）**：SQL Server 默认级别。若事务还没提交，其它事务不能读取该事务正在修改的数据。不允许丢失修改和读脏数据，接受不可重复读现象。\n\n- **可重复读（repeatable read）**：事务多次读取统一数据对象的结果一致。不允许丢失修改、读脏数据和读不一致，接受幻影读现象。\n\n- **可串行读（serializable）**：事务隔离的最高级别，保证可串行化，不允许丢失修改、读脏数据、读不一致以及幻影读现象的发生。\n\n- 隔离级别允许不同类型的行为：\n\n    | **隔离级别** | 丢失修改 | **脏读** | **不可重复读取** | **幻像** |\n    | :----------: | :------: | :------: | :--------------: | :------: |\n    | **未提交读** |    否    |    是    |        是        |    是    |\n    |  **提交读**  |    否    |    否    |        是        |    是    |\n    | **可重复读** |    否    |    否    |        否        |    是    |\n    | **可串行读** |    否    |    否    |        否        |    否    |\n\n- **设置隔离级别的语法**\n\n    ```sql\n    set transaction isolation level\n    {\n    \tread committed | \n    \tread uncommitted |\n    \trepeatable read |\n    \tserializable read\n    }\n    ```\n\n\n\n## 16.7 数据库恢复\n\n- **概念**：把数据库从**错误状态**恢复到某一个已知的**正确状态**（亦称为一致状态或完整状态）的功能。\n\n- **目标：**在故障发生时，确保事务的原子性和持久性\n\n- **特点：**因为DB与内存用户工作区之间的数据交换是通过缓冲区进行的，而这个交换一般是以缓冲区是否满来触发的。因此，有可能提交事务的数据仍在缓冲区而没有写到DB中，而未提交事务的数据却写到了DB中。所以，故障恢复时，可能既要REDO已经提交了的事务，又要UNDO未提交的事务，以保证事务的原子性\n\n- **技术**\n\n    DBMS提供备份机制、日志机制、检查点机制来协助数据库故障恢复;\n\n    ==基本原理：数据冗余。==\n\n- ==数据转储：==DBA定期地将整个数据库复制到磁带或另一个磁盘上保存起来的过程。这些备用的数据文本称为后备副本或后援副本。\n\n    **数据转储的分类：**\n\n    - 按照转储时的状态可以分为**静态转储和动态转储**。静态转储是指在系统中无运行事务时进行的转储操作。动态转储是指转储期间允许对数据库进行存取或者修改，但此时需要把转储期间各事务对数据库的修改记录在日志文件中，从而将来可以恢复\n    - 按方式不同可以分为**海量转储和增量转储**。海量转储是指每次转储全部数据库。增量转储是指每次只转储上一次转储后更新的数据库。\n\n    ![image-20220503193938217](https://s2.loli.net/2022/05/03/oEV9AIyQY7LlmZD.png)\n\n- ==登记日志文件==：记录事务对数据库的`更新`操作\n\n    **日志文件的格式：**以记录为单位的日志文件和以数据块为单位的日志文件。\n\n    - 以记录为单位的日志文件：一个日志记录包括每个事务的开始标志（BEGIN TRANSACTION）、结束标志（COMMIT 或 ROLLBACK）、每个更新操作\n\n    - 以数据块为单位的日志文件：包含事务标识和被更新的数据块\n\n    <img src=\"https://s2.loli.net/2022/05/02/aeJHjWo2fNvlnSM.png\" alt=\"image-20220502151104445\" style=\"zoom:67%;\" />\n\n    **登记日志文件的原则：**\n\n    - 登记的次序按并发事务执行的时间次序\n    - 必须先写日志文件，后写数据库==（日志先写原则）==\n\n- **系统故障的恢复实现策略**\n\n    - **系统故障导致的数据库不一致**\n        （1）未完成的事务对DB产生影响\n        （2）已完成的事务在缓冲区的内容未写入DB\n\n    - **恢复功能**\n        （1）UNDO未完成的事务\n        （2）REDO已完成的事务\n\n    - **恢复步骤**\n        （1）正向扫描日志文件，建立UNDO和REDO队列；（不需要redo日志中所有已完成的事务）\n        （2）反向扫描日志文件，对每个UNDO事务的更新执行逆操作；\n        （3）正向扫描日志文件，对每个REDO事务的更新重新执行。\n\n- ==检查点技术：==\n\n    当事务正常运行时，数据库系统按一定的时间间隔设检查点。一旦系统需要恢复数据库状态，就可以根据最新的检查点的信息，从检查点开始执行，而不必从头开始执行那些被中断的事务。\n\n    系统在检查点做的动作主要如下：\n\n    - 暂时中止现有事务的执行\n    - 在日志中写入检查点记录，并把日志强制写入磁盘\n    - 把主存中被修改的数据缓冲区强制写入磁盘\n    - 重新开始执行事务\n\n    例子：\n\n    ![image-20220503195636843](https://s2.loli.net/2022/05/03/hbQXdSE3r46sk52.png)\n\n    ![image-20220503195650256](https://s2.loli.net/2022/05/03/f4wAEDbW2xU6ZtX.png)\n\n    \n","slug":"并发控制","published":1,"updated":"2022-06-27T15:12:30.879Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4ww07zc0003ikskepld4915","content":"<h1 id=\"七、并发控制\"><a href=\"#七、并发控制\" class=\"headerlink\" title=\"七、并发控制\"></a>七、并发控制</h1><h1 id=\"UNIT-16-事务管理\"><a href=\"#UNIT-16-事务管理\" class=\"headerlink\" title=\"UNIT 16  事务管理\"></a>UNIT 16  事务管理</h1><h2 id=\"16-1-事务的定义与特性-、事务管理\"><a href=\"#16-1-事务的定义与特性-、事务管理\" class=\"headerlink\" title=\"16.1  事务的定义与特性 、事务管理\"></a>16.1  事务的定义与特性 、事务管理</h2><ul>\n<li><p><strong>事务产生的原因：</strong>保证数据库状态的一致性</p>\n</li>\n<li><p><strong>事务（transaction）：</strong>用户定义的一个数据库操作序列，这些工作要么全做要么全不做，是一个不可分割的工作单位。</p>\n<blockquote>\n<p>事务是数据库系统工作的一个不可分割的基本单位，既是保持数据库完整性约束或逻辑一致性的单位，又是数据库恢复及并发控制的基本单位。</p>\n</blockquote>\n</li>\n<li><p><strong>SQL定义事务的语句：</strong></p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">BEGIN</span> TRANSACTION\t#事务开始语句</span><br><span class=\"line\"><span class=\"keyword\">COMMIT</span>\t  #事务提交语句，此时系统将事务所有对数据库的更新写入磁盘的物理数据库中，事务正常结束</span><br><span class=\"line\"><span class=\"keyword\">ROLLBACK</span>  #事务非正常结束，此时系统将数据库的所有已完成的更新操作全部撤销，将事务回滚至事务开始处并重新开始执行</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>事务的三个阶段</strong>：事务初态、事务执行、事务完成</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/05/03/JaiEyIGlmXsYBVF.png\" alt=\"image-20220503192133312\"></p>\n</li>\n<li><p><strong>事务的五个状态</strong>：活动状态、失败状态、中止状态、局部提交状态、提交状态</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/05/03/tp4Q7wbhBX3OHZe.png\" alt=\"image-20220503192208460\"></p>\n</li>\n<li><p>&#x3D;&#x3D;事务的四个特性：ACID&#x3D;&#x3D;  </p>\n<ul>\n<li><p><strong>原子性（Atomicity）：</strong>事务包含的一组更新操作是原子不可分的，即更新操作对于数据库而言，要么全做，要么全不做，不能部分地完成</p>\n</li>\n<li><p><strong>一致性（Consistency）：</strong>指事务对数据库的每一个插入、删除、修改等更新操作，都必须遵守一定的完整性约束，系统一旦查出数据库的完整性受到破坏，则撤销该事务并清除该事务对数据库的任何影响。一个成功的事务把数据库从一个一致的状态转换到另一个一致的状态。</p>\n</li>\n<li><p><strong>隔离性（Isolation）：</strong>指两个或多个事务可以同时运行而不互相影响，一个事务内部的操作及其使用的数据对并发的其他事务是隔离的、不可见的。</p>\n</li>\n<li><p><strong>持久性（Durability）：</strong>指一个事务成功完成之后，其工作的结果就会永远保存在数据库中，是永久有效的，即使随后系统发生故障也能保持或恢复。</p>\n<blockquote>\n<p>破坏事务ACID特性的因素有：①多个事务的并行运行（并发控制）；②事务的运行过程中被强行停止（故障恢复）</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"16-2-事务并发导致的不一致性\"><a href=\"#16-2-事务并发导致的不一致性\" class=\"headerlink\" title=\"16.2  事务并发导致的不一致性\"></a>16.2  事务并发导致的不一致性</h2><ul>\n<li><p><strong>并发控制：</strong>保证事务的隔离性，从而保证数据库中数据的一致性</p>\n<p>  当事务操作相同的数据且这些操作是冲突的，则会破坏事务的隔离性</p>\n</li>\n<li><p><strong>事务并发导致的不一致性</strong></p>\n<p>  包括丢失修改（lost update）、不可重复读（non-repeatable read）、读脏数据（dirty read）、幻像（phantom）</p>\n</li>\n</ul>\n<img data-src=\"https://s2.loli.net/2022/05/02/NdQICqbpTUw6HBh.png\" alt=\"image-20220502105703368\" style=\"zoom:67%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/05/02/fezlxuHdRMWCi6q.png\" alt=\"image-20220502105416862\" style=\"zoom:67%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/05/02/VcifCBzhLoZUyKa.png\" alt=\"image-20220502105434043\" style=\"zoom:67%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/05/02/tcUNXbLw6fxdQ8m.png\" alt=\"image-20220502105958563\" style=\"zoom:67%;\" />\n\n<blockquote>\n<p><strong>不可重复读和幻象的区别：</strong>不可重复读的重点是修改；同样的条件，第1次和第2次读取的值不一样。幻读的重点在于新增或者删除；同样的条件， 第1次和第2次读出来的记录数不一样。从控制角度来看，不可重复读只需要锁住满足条件的记录，幻读要锁住满足条件及其相近的记录。</p>\n</blockquote>\n<ul>\n<li><p><strong>出现不一致性的原因：</strong>不同事务间冲突操作的无序执行，违反了隔离性原则</p>\n</li>\n<li><p><strong>并发控制的方法</strong></p>\n<ul>\n<li><p><strong>时间戳：</strong>对事务规定一定的顺序</p>\n</li>\n<li><p><strong>加锁：（主要技术）</strong>对于共享的资源DB进行控制</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"16-3-封锁及封锁协议\"><a href=\"#16-3-封锁及封锁协议\" class=\"headerlink\" title=\"16.3  封锁及封锁协议\"></a>16.3  封锁及封锁协议</h2><h3 id=\"1、封锁的定义\"><a href=\"#1、封锁的定义\" class=\"headerlink\" title=\"1、封锁的定义\"></a>1、封锁的定义</h3><ul>\n<li><strong>概念：</strong>事务T在对某个数据对象例如表、记录等操作之前，先向系统发出请求，对其<strong>加锁</strong>。加锁后事务T就对该数据对象有了一定的<strong>控制</strong>，在事务T释放它的锁之前，其他事务对该数据的操作受到<strong>一定限制</strong>。</li>\n</ul>\n<h3 id=\"2、基本的封锁类型\"><a href=\"#2、基本的封锁类型\" class=\"headerlink\" title=\"2、基本的封锁类型\"></a>2、基本的封锁类型</h3><ul>\n<li><strong>排它锁</strong>（Exclusive Locks，简称X锁，也称写锁）</li>\n<li><strong>共享锁</strong>（Share Locks，简称S锁，也称读锁）</li>\n</ul>\n<img data-src=\"https://s2.loli.net/2022/05/10/VBJL7PADZoWzqOy.png\" alt=\"image-20220510101032697\" style=\"zoom:50%;\" />\n\n<p><img data-src=\"https://s2.loli.net/2022/05/03/Pc2ldCGzSiN7U5q.png\" alt=\"image-20220503200409098\"></p>\n<h3 id=\"3、封锁协议包含的内容\"><a href=\"#3、封锁协议包含的内容\" class=\"headerlink\" title=\"3、封锁协议包含的内容\"></a>3、封锁协议包含的内容</h3><ul>\n<li>什么操作需要申请何种锁？—-排它锁、共享锁</li>\n<li>何时加锁？—-事务开始前、操作前</li>\n<li>何时解锁？—-操作结束后、事务结束前</li>\n</ul>\n<h3 id=\"4、封锁协议的分类\"><a href=\"#4、封锁协议的分类\" class=\"headerlink\" title=\"4、封锁协议的分类\"></a>4、封锁协议的分类</h3><ul>\n<li><p>&#x3D;&#x3D;一级封锁协议&#x3D;&#x3D;</p>\n<p>  事务T在<strong>修改</strong>数据R之前，必须先对R加<strong>X锁</strong>，直到<strong>事务结束才释放</strong>。事务结束包括正常结束（COMMIT）和非正常结束（ROLLBACK）</p>\n<p>  &#x3D;&#x3D;一级封锁协议不加S锁&#x3D;&#x3D;</p>\n  <img data-src=\"https://s2.loli.net/2022/05/10/CvwZySBr9LxhmEX.png\" alt=\"image-20220510103651090\" style=\"zoom:67%;\" />\n</li>\n<li><p>&#x3D;&#x3D;二级封锁协议&#x3D;&#x3D;</p>\n<p>  <strong>在一级封锁协议的基础上</strong>，加上事务T在<strong>读取</strong>数据R之前必须先对其加<strong>S锁</strong>，<strong>读完后即可释放S锁</strong></p>\n  <img data-src=\"https://s2.loli.net/2022/05/10/cPYrELMTeukGNoH.png\" alt=\"image-20220510103811156\" style=\"zoom:67%;\" />      \n</li>\n<li><p>&#x3D;&#x3D;三级封锁协议&#x3D;&#x3D;</p>\n<p>  <strong>在一级封锁协议的基础上</strong>，加上事务T在<strong>读取</strong>数据R之前必须先对其加<strong>S锁</strong>，<strong>直到事务结束才释放</strong></p>\n  <img data-src=\"https://s2.loli.net/2022/05/10/7r8VxWoZYlmIzQc.png\" alt=\"image-20220510103942568\" style=\"zoom:67%;\" />\n</li>\n<li><p>&#x3D;&#x3D;一二三级封锁协议的一致性保证&#x3D;&#x3D;</p>\n  <img data-src=\"https://s2.loli.net/2022/05/02/N162xhCXYOvqiBE.png\" alt=\"image-20220502113625070\" style=\"zoom:80%;\" /></li>\n</ul>\n<h3 id=\"5、并发调度的可串行性\"><a href=\"#5、并发调度的可串行性\" class=\"headerlink\" title=\"5、并发调度的可串行性\"></a>5、并发调度的可串行性</h3><ul>\n<li><p><strong>调度的正确性</strong>：</p>\n<ul>\n<li><p>能将数据库置于一致状态的调度一定是正确的调度</p>\n</li>\n<li><p>将所有事务串行起来的调度策略一定是正确的调度（因为每个事务都会保证一致性状态，故事务串行一定会保证一致性）</p>\n</li>\n<li><p>与串行调度等价的调度是正确的调度</p>\n</li>\n</ul>\n</li>\n<li><p><strong>并发事务的正确性准则：</strong>多个事务的并发执行是正确的，当且仅当其结果与<strong>某一次序串行地执行</strong>它们时的结果相同，我们称这种调度策略为<strong>可串行化的调度</strong>。</p>\n  <img data-src=\"https://s2.loli.net/2022/05/02/48u6gehbtD5PVnT.png\" alt=\"image-20220502114421860\" style=\"zoom:67%;\" />\n\n  <img data-src=\"https://s2.loli.net/2022/05/02/rGFxKEV5iQNSPs4.png\" alt=\"image-20220502114251187\" style=\"zoom:67%;\" /></li>\n</ul>\n<h2 id=\"16-4-两段锁协议\"><a href=\"#16-4-两段锁协议\" class=\"headerlink\" title=\"16.4 两段锁协议\"></a>16.4 两段锁协议</h2><ul>\n<li><p><strong>概念：</strong>所有事务必须分两个阶段（获得阶段和释放阶段，亦即扩展阶段和收缩阶段）对数据项加锁和解锁。</p>\n<ul>\n<li><p><strong>获得封锁：</strong>在对任何数据进行读、写操作之前，首先要申请并获得对该数据的封锁； </p>\n</li>\n<li><p><strong>释放封锁：</strong>&#x3D;&#x3D;在释放一个封锁之后，事务不再申请和获得任何其他封锁。&#x3D;&#x3D;</p>\n<p>  例子：</p>\n  <img data-src=\"https://s2.loli.net/2022/05/10/ZMBYK4H9SIQCOit.png\" alt=\"image-20220510105713156\" style=\"zoom:67%;\" /></li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<ul>\n<li><p>&#x3D;&#x3D;两段锁协议是可串行化的充分条件，而不是必要条件&#x3D;&#x3D;</p>\n</li>\n<li><p>一次封锁法遵守两段锁协议，但两段锁协议不要求事务必须一次将所有要使用的数据全部加锁，因此遵守两段锁协议的事务可能发生<code>死锁</code>。</p>\n<p>  例子：</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/05/10/gYxvJR9oVeKG5US.png\" alt=\"image-20220510105806932\"></p>\n</li>\n<li><p>三级封锁是两段锁的一种，因为三级封锁都是事务结束再释放锁，事务结束后显然事务不会再申请和获得任何其他封锁。</p>\n</li>\n</ul>\n</blockquote>\n<ul>\n<li><p><strong>活锁和死锁</strong></p>\n<ul>\n<li><p><strong>活锁（饥饿）</strong>：某一个事务无限等待。解决方法：先来先服务</p>\n</li>\n<li><p><strong>死锁：</strong>两个或多个事务都已封锁了一些数据对象，然后又都请求对已被其他事务封锁的数据对象加锁，从而出现死等待。</p>\n</li>\n<li><p><strong>解决死锁</strong>：</p>\n<ul>\n<li><p><strong>预防：</strong>破坏死锁产生的四个必要条件（互斥、请求和保持、不可剥夺、循环等待）。几个方法：静态申请法，一次性申请所有资源，资源的利用率不高；延迟进程的执行，能够获得所有资源时才允许执行，并发度不好；有序资源分配法，给资源编号</p>\n</li>\n<li><p><strong>避免</strong>：类似os中的银行家算法，在资源分配之前进行检查，防止死锁的发生</p>\n</li>\n<li><p><strong>诊断与解除</strong></p>\n<ul>\n<li><p><strong>死锁的诊断：</strong></p>\n<ul>\n<li><p><strong>超时法</strong>：超过规定的时间就认为发生死锁。</p>\n<blockquote>\n<p>不足：可能误判死锁，也可能不能及时发现死锁</p>\n</blockquote>\n</li>\n<li><p><strong>等待图法：</strong>以<code>事务</code>为结点，边表示事务等待的情况，若T1等待T2，则 T1→T2。系统周期性地检测事务等待图，若图中存在回路，则出现死锁。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>死锁的解除</strong>：选择一个处理死锁代价最小的事务，撤销。对撤销的事务所执行的数据修改操作必须加以恢复。</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"16-5-封锁的粒度\"><a href=\"#16-5-封锁的粒度\" class=\"headerlink\" title=\"16.5  封锁的粒度\"></a>16.5  封锁的粒度</h2><ul>\n<li><strong>封锁的粒度</strong>：指封锁对象的大小，封锁的粒度包括整个数据库、关系、元组、索引</li>\n</ul>\n<img data-src=\"https://s2.loli.net/2022/05/02/dKOgEQJji3fncZ1.png\" alt=\"image-20220502143147735\" style=\"zoom:67%;\" />\n\n<ul>\n<li><p><strong>封锁粒度的选择</strong>：选择封锁粒度时应该同时考虑并发度和开销两个因素。&#x3D;&#x3D;封锁粒度越大，并发度越小，系统开销越小。&#x3D;&#x3D;</p>\n</li>\n<li><p><strong>多粒度封锁</strong></p>\n<ul>\n<li><p><strong>概念：</strong>在一个系统中同时支持多种封锁粒度供不同的事务选择。</p>\n<blockquote>\n<p><code>多粒度封锁协议</code>允许多粒度树中的每个结点被独立地加锁。对每个结点的加锁意味着这个结点的所有后裔结点也被加以同样类型的锁。</p>\n</blockquote>\n</li>\n<li><p><strong>显式封锁：</strong>应事务的要求直接加到数据对象上的封锁</p>\n</li>\n<li><p><strong>隐式封锁：</strong>该数据对象没有独立加锁，是由于其上级结点加锁而使该数据对象加上了锁</p>\n</li>\n<li><p><strong>判断能否对一个数据对象加锁：</strong></p>\n<ul>\n<li><p>检查<strong>该数据对象</strong>有无显式封锁与之冲突； </p>\n</li>\n<li><p>检查其<strong>所有上级结点</strong>，看本事务的显式封锁是否与该数据对象上的隐式封锁冲突； </p>\n</li>\n<li><p>检查其<strong>所有下级结点</strong>，看上面的显式封锁是否与本事务的隐式封锁冲突。</p>\n<blockquote>\n<p>不需要检查下级结点的隐式封锁，因为有隐式封锁肯定可以向上找到显式封锁</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>&#x3D;&#x3D;意向锁&#x3D;&#x3D;</p>\n<ul>\n<li><p><strong>概念：</strong>如果对一个结点加意向锁，则说明该结点的下层结点正在被加锁；对任一结点加锁时，必须先对它的（所有）上层结点加意向锁。</p>\n</li>\n<li><p><strong>意向共享锁（简称IS锁）</strong>：如果对数据对象加IS锁，表示它的后裔结点拟加S锁 </p>\n</li>\n<li><p><strong>意向排它锁（简称IX锁）</strong>：如果对数据对象加IX锁，表示它的后裔结点拟加X锁 </p>\n</li>\n<li><p><strong>共享意向排它锁（简称SIX锁）</strong>：如果对数据对象加SIX锁，表示先加S锁，再加IX</p>\n<p>  eg.  对某个表加SIX锁，表示该事务要读整个表（所以要对该表加S锁），同时会更新个别元组（所以要对该表加IX锁）</p>\n  <img data-src=\"https://s2.loli.net/2022/05/10/iOJKRkQElyd7TzM.png\" alt=\"image-20220510113003330\" style=\"zoom:67%;\" />\n\n<blockquote>\n<p>加锁是从上往下的</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://s2.loli.net/2022/05/03/mzDWoftL9S6kxRs.png\" alt=\"image-20220503201553550\"></p>\n<blockquote>\n<p>IS锁和IX锁是相容的，因为最终会转化到下层结点，如果最终S锁和X锁加到了同一个对象上，那么在这个对象上的这两个锁是不相容的；如果没有加到同一个对象上，那么IS锁和IX锁就不会出现问题。</p>\n</blockquote>\n<h2 id=\"16-6-隔离级别（四种）\"><a href=\"#16-6-隔离级别（四种）\" class=\"headerlink\" title=\"16.6  隔离级别（四种）\"></a>16.6  隔离级别（四种）</h2><ul>\n<li><p><strong>未提交读（读未提交， read uncommitted）</strong>：事务隔离的最低级别，一个事务可以读到另外一个事务未提交的数据，不允许丢失修改，接受读脏数据和不可重复读现象。</p>\n</li>\n<li><p><strong>提交读（读已提交， read committed）</strong>：SQL Server 默认级别。若事务还没提交，其它事务不能读取该事务正在修改的数据。不允许丢失修改和读脏数据，接受不可重复读现象。</p>\n</li>\n<li><p><strong>可重复读（repeatable read）</strong>：事务多次读取统一数据对象的结果一致。不允许丢失修改、读脏数据和读不一致，接受幻影读现象。</p>\n</li>\n<li><p><strong>可串行读（serializable）</strong>：事务隔离的最高级别，保证可串行化，不允许丢失修改、读脏数据、读不一致以及幻影读现象的发生。</p>\n</li>\n<li><p>隔离级别允许不同类型的行为：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"><strong>隔离级别</strong></th>\n<th align=\"center\">丢失修改</th>\n<th align=\"center\"><strong>脏读</strong></th>\n<th align=\"center\"><strong>不可重复读取</strong></th>\n<th align=\"center\"><strong>幻像</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><strong>未提交读</strong></td>\n<td align=\"center\">否</td>\n<td align=\"center\">是</td>\n<td align=\"center\">是</td>\n<td align=\"center\">是</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>提交读</strong></td>\n<td align=\"center\">否</td>\n<td align=\"center\">否</td>\n<td align=\"center\">是</td>\n<td align=\"center\">是</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>可重复读</strong></td>\n<td align=\"center\">否</td>\n<td align=\"center\">否</td>\n<td align=\"center\">否</td>\n<td align=\"center\">是</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>可串行读</strong></td>\n<td align=\"center\">否</td>\n<td align=\"center\">否</td>\n<td align=\"center\">否</td>\n<td align=\"center\">否</td>\n</tr>\n</tbody></table>\n</li>\n<li><p><strong>设置隔离级别的语法</strong></p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> transaction isolation level</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tread committed <span class=\"operator\">|</span> </span><br><span class=\"line\">\tread uncommitted <span class=\"operator\">|</span></span><br><span class=\"line\">\trepeatable read <span class=\"operator\">|</span></span><br><span class=\"line\">\tserializable read</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"16-7-数据库恢复\"><a href=\"#16-7-数据库恢复\" class=\"headerlink\" title=\"16.7 数据库恢复\"></a>16.7 数据库恢复</h2><ul>\n<li><p><strong>概念</strong>：把数据库从<strong>错误状态</strong>恢复到某一个已知的<strong>正确状态</strong>（亦称为一致状态或完整状态）的功能。</p>\n</li>\n<li><p><strong>目标：</strong>在故障发生时，确保事务的原子性和持久性</p>\n</li>\n<li><p><strong>特点：</strong>因为DB与内存用户工作区之间的数据交换是通过缓冲区进行的，而这个交换一般是以缓冲区是否满来触发的。因此，有可能提交事务的数据仍在缓冲区而没有写到DB中，而未提交事务的数据却写到了DB中。所以，故障恢复时，可能既要REDO已经提交了的事务，又要UNDO未提交的事务，以保证事务的原子性</p>\n</li>\n<li><p><strong>技术</strong></p>\n<p>  DBMS提供备份机制、日志机制、检查点机制来协助数据库故障恢复;</p>\n<p>  &#x3D;&#x3D;基本原理：数据冗余。&#x3D;&#x3D;</p>\n</li>\n<li><p>&#x3D;&#x3D;数据转储：&#x3D;&#x3D;DBA定期地将整个数据库复制到磁带或另一个磁盘上保存起来的过程。这些备用的数据文本称为后备副本或后援副本。</p>\n<p>  <strong>数据转储的分类：</strong></p>\n<ul>\n<li>按照转储时的状态可以分为<strong>静态转储和动态转储</strong>。静态转储是指在系统中无运行事务时进行的转储操作。动态转储是指转储期间允许对数据库进行存取或者修改，但此时需要把转储期间各事务对数据库的修改记录在日志文件中，从而将来可以恢复</li>\n<li>按方式不同可以分为<strong>海量转储和增量转储</strong>。海量转储是指每次转储全部数据库。增量转储是指每次只转储上一次转储后更新的数据库。</li>\n</ul>\n<p>  <img data-src=\"https://s2.loli.net/2022/05/03/oEV9AIyQY7LlmZD.png\" alt=\"image-20220503193938217\"></p>\n</li>\n<li><p>&#x3D;&#x3D;登记日志文件&#x3D;&#x3D;：记录事务对数据库的<code>更新</code>操作</p>\n<p>  <strong>日志文件的格式：</strong>以记录为单位的日志文件和以数据块为单位的日志文件。</p>\n<ul>\n<li><p>以记录为单位的日志文件：一个日志记录包括每个事务的开始标志（BEGIN TRANSACTION）、结束标志（COMMIT 或 ROLLBACK）、每个更新操作</p>\n</li>\n<li><p>以数据块为单位的日志文件：包含事务标识和被更新的数据块</p>\n</li>\n</ul>\n  <img data-src=\"https://s2.loli.net/2022/05/02/aeJHjWo2fNvlnSM.png\" alt=\"image-20220502151104445\" style=\"zoom:67%;\" />\n\n<p>  <strong>登记日志文件的原则：</strong></p>\n<ul>\n<li>登记的次序按并发事务执行的时间次序</li>\n<li>必须先写日志文件，后写数据库&#x3D;&#x3D;（日志先写原则）&#x3D;&#x3D;</li>\n</ul>\n</li>\n<li><p><strong>系统故障的恢复实现策略</strong></p>\n<ul>\n<li><p><strong>系统故障导致的数据库不一致</strong><br>  （1）未完成的事务对DB产生影响<br>  （2）已完成的事务在缓冲区的内容未写入DB</p>\n</li>\n<li><p><strong>恢复功能</strong><br>  （1）UNDO未完成的事务<br>  （2）REDO已完成的事务</p>\n</li>\n<li><p><strong>恢复步骤</strong><br>  （1）正向扫描日志文件，建立UNDO和REDO队列；（不需要redo日志中所有已完成的事务）<br>  （2）反向扫描日志文件，对每个UNDO事务的更新执行逆操作；<br>  （3）正向扫描日志文件，对每个REDO事务的更新重新执行。</p>\n</li>\n</ul>\n</li>\n<li><p>&#x3D;&#x3D;检查点技术：&#x3D;&#x3D;</p>\n<p>  当事务正常运行时，数据库系统按一定的时间间隔设检查点。一旦系统需要恢复数据库状态，就可以根据最新的检查点的信息，从检查点开始执行，而不必从头开始执行那些被中断的事务。</p>\n<p>  系统在检查点做的动作主要如下：</p>\n<ul>\n<li>暂时中止现有事务的执行</li>\n<li>在日志中写入检查点记录，并把日志强制写入磁盘</li>\n<li>把主存中被修改的数据缓冲区强制写入磁盘</li>\n<li>重新开始执行事务</li>\n</ul>\n<p>  例子：</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/05/03/hbQXdSE3r46sk52.png\" alt=\"image-20220503195636843\"></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/05/03/f4wAEDbW2xU6ZtX.png\" alt=\"image-20220503195650256\"></p>\n</li>\n</ul>\n","site":{"data":{"post-body-end":"<div>\n    \n</div>\n","styles":"body {\n  background: url(\"/images/background.png\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 100% 100%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.8);\n}\n.popup {\n  opacity: 0.8;\n}\n.post-block {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.comments {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.post {\n  margin-top: 60px;\n  padding: 20px;\n  margin-bottom: 60px;\n  -webkit-box-shadow: 0 0 0px #788072;\n  -moz-box-shadow: 0 0 0px rgba(202,203,204,0.5);\n}\n.post-button .btn {\n  color: #555 !important;\n  background-color: #fff;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  border: none !important;\n  transition-property: unset;\n  padding: 0px 15px;\n}\n.post-button .btn:hover {\n  color: #fff !important;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  background-image: linear-gradient(90deg, #a166ab 0%, #ef4e7b 25%, #f37055 50%, #ef4e7b 75%, #a166ab 100%);\n}\n","variables":""}},"length":5198,"excerpt":"","more":"<h1 id=\"七、并发控制\"><a href=\"#七、并发控制\" class=\"headerlink\" title=\"七、并发控制\"></a>七、并发控制</h1><h1 id=\"UNIT-16-事务管理\"><a href=\"#UNIT-16-事务管理\" class=\"headerlink\" title=\"UNIT 16  事务管理\"></a>UNIT 16  事务管理</h1><h2 id=\"16-1-事务的定义与特性-、事务管理\"><a href=\"#16-1-事务的定义与特性-、事务管理\" class=\"headerlink\" title=\"16.1  事务的定义与特性 、事务管理\"></a>16.1  事务的定义与特性 、事务管理</h2><ul>\n<li><p><strong>事务产生的原因：</strong>保证数据库状态的一致性</p>\n</li>\n<li><p><strong>事务（transaction）：</strong>用户定义的一个数据库操作序列，这些工作要么全做要么全不做，是一个不可分割的工作单位。</p>\n<blockquote>\n<p>事务是数据库系统工作的一个不可分割的基本单位，既是保持数据库完整性约束或逻辑一致性的单位，又是数据库恢复及并发控制的基本单位。</p>\n</blockquote>\n</li>\n<li><p><strong>SQL定义事务的语句：</strong></p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">BEGIN</span> TRANSACTION\t#事务开始语句</span><br><span class=\"line\"><span class=\"keyword\">COMMIT</span>\t  #事务提交语句，此时系统将事务所有对数据库的更新写入磁盘的物理数据库中，事务正常结束</span><br><span class=\"line\"><span class=\"keyword\">ROLLBACK</span>  #事务非正常结束，此时系统将数据库的所有已完成的更新操作全部撤销，将事务回滚至事务开始处并重新开始执行</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>事务的三个阶段</strong>：事务初态、事务执行、事务完成</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/05/03/JaiEyIGlmXsYBVF.png\" alt=\"image-20220503192133312\"></p>\n</li>\n<li><p><strong>事务的五个状态</strong>：活动状态、失败状态、中止状态、局部提交状态、提交状态</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/05/03/tp4Q7wbhBX3OHZe.png\" alt=\"image-20220503192208460\"></p>\n</li>\n<li><p>&#x3D;&#x3D;事务的四个特性：ACID&#x3D;&#x3D;  </p>\n<ul>\n<li><p><strong>原子性（Atomicity）：</strong>事务包含的一组更新操作是原子不可分的，即更新操作对于数据库而言，要么全做，要么全不做，不能部分地完成</p>\n</li>\n<li><p><strong>一致性（Consistency）：</strong>指事务对数据库的每一个插入、删除、修改等更新操作，都必须遵守一定的完整性约束，系统一旦查出数据库的完整性受到破坏，则撤销该事务并清除该事务对数据库的任何影响。一个成功的事务把数据库从一个一致的状态转换到另一个一致的状态。</p>\n</li>\n<li><p><strong>隔离性（Isolation）：</strong>指两个或多个事务可以同时运行而不互相影响，一个事务内部的操作及其使用的数据对并发的其他事务是隔离的、不可见的。</p>\n</li>\n<li><p><strong>持久性（Durability）：</strong>指一个事务成功完成之后，其工作的结果就会永远保存在数据库中，是永久有效的，即使随后系统发生故障也能保持或恢复。</p>\n<blockquote>\n<p>破坏事务ACID特性的因素有：①多个事务的并行运行（并发控制）；②事务的运行过程中被强行停止（故障恢复）</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"16-2-事务并发导致的不一致性\"><a href=\"#16-2-事务并发导致的不一致性\" class=\"headerlink\" title=\"16.2  事务并发导致的不一致性\"></a>16.2  事务并发导致的不一致性</h2><ul>\n<li><p><strong>并发控制：</strong>保证事务的隔离性，从而保证数据库中数据的一致性</p>\n<p>  当事务操作相同的数据且这些操作是冲突的，则会破坏事务的隔离性</p>\n</li>\n<li><p><strong>事务并发导致的不一致性</strong></p>\n<p>  包括丢失修改（lost update）、不可重复读（non-repeatable read）、读脏数据（dirty read）、幻像（phantom）</p>\n</li>\n</ul>\n<img data-src=\"https://s2.loli.net/2022/05/02/NdQICqbpTUw6HBh.png\" alt=\"image-20220502105703368\" style=\"zoom:67%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/05/02/fezlxuHdRMWCi6q.png\" alt=\"image-20220502105416862\" style=\"zoom:67%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/05/02/VcifCBzhLoZUyKa.png\" alt=\"image-20220502105434043\" style=\"zoom:67%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/05/02/tcUNXbLw6fxdQ8m.png\" alt=\"image-20220502105958563\" style=\"zoom:67%;\" />\n\n<blockquote>\n<p><strong>不可重复读和幻象的区别：</strong>不可重复读的重点是修改；同样的条件，第1次和第2次读取的值不一样。幻读的重点在于新增或者删除；同样的条件， 第1次和第2次读出来的记录数不一样。从控制角度来看，不可重复读只需要锁住满足条件的记录，幻读要锁住满足条件及其相近的记录。</p>\n</blockquote>\n<ul>\n<li><p><strong>出现不一致性的原因：</strong>不同事务间冲突操作的无序执行，违反了隔离性原则</p>\n</li>\n<li><p><strong>并发控制的方法</strong></p>\n<ul>\n<li><p><strong>时间戳：</strong>对事务规定一定的顺序</p>\n</li>\n<li><p><strong>加锁：（主要技术）</strong>对于共享的资源DB进行控制</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"16-3-封锁及封锁协议\"><a href=\"#16-3-封锁及封锁协议\" class=\"headerlink\" title=\"16.3  封锁及封锁协议\"></a>16.3  封锁及封锁协议</h2><h3 id=\"1、封锁的定义\"><a href=\"#1、封锁的定义\" class=\"headerlink\" title=\"1、封锁的定义\"></a>1、封锁的定义</h3><ul>\n<li><strong>概念：</strong>事务T在对某个数据对象例如表、记录等操作之前，先向系统发出请求，对其<strong>加锁</strong>。加锁后事务T就对该数据对象有了一定的<strong>控制</strong>，在事务T释放它的锁之前，其他事务对该数据的操作受到<strong>一定限制</strong>。</li>\n</ul>\n<h3 id=\"2、基本的封锁类型\"><a href=\"#2、基本的封锁类型\" class=\"headerlink\" title=\"2、基本的封锁类型\"></a>2、基本的封锁类型</h3><ul>\n<li><strong>排它锁</strong>（Exclusive Locks，简称X锁，也称写锁）</li>\n<li><strong>共享锁</strong>（Share Locks，简称S锁，也称读锁）</li>\n</ul>\n<img data-src=\"https://s2.loli.net/2022/05/10/VBJL7PADZoWzqOy.png\" alt=\"image-20220510101032697\" style=\"zoom:50%;\" />\n\n<p><img data-src=\"https://s2.loli.net/2022/05/03/Pc2ldCGzSiN7U5q.png\" alt=\"image-20220503200409098\"></p>\n<h3 id=\"3、封锁协议包含的内容\"><a href=\"#3、封锁协议包含的内容\" class=\"headerlink\" title=\"3、封锁协议包含的内容\"></a>3、封锁协议包含的内容</h3><ul>\n<li>什么操作需要申请何种锁？—-排它锁、共享锁</li>\n<li>何时加锁？—-事务开始前、操作前</li>\n<li>何时解锁？—-操作结束后、事务结束前</li>\n</ul>\n<h3 id=\"4、封锁协议的分类\"><a href=\"#4、封锁协议的分类\" class=\"headerlink\" title=\"4、封锁协议的分类\"></a>4、封锁协议的分类</h3><ul>\n<li><p>&#x3D;&#x3D;一级封锁协议&#x3D;&#x3D;</p>\n<p>  事务T在<strong>修改</strong>数据R之前，必须先对R加<strong>X锁</strong>，直到<strong>事务结束才释放</strong>。事务结束包括正常结束（COMMIT）和非正常结束（ROLLBACK）</p>\n<p>  &#x3D;&#x3D;一级封锁协议不加S锁&#x3D;&#x3D;</p>\n  <img data-src=\"https://s2.loli.net/2022/05/10/CvwZySBr9LxhmEX.png\" alt=\"image-20220510103651090\" style=\"zoom:67%;\" />\n</li>\n<li><p>&#x3D;&#x3D;二级封锁协议&#x3D;&#x3D;</p>\n<p>  <strong>在一级封锁协议的基础上</strong>，加上事务T在<strong>读取</strong>数据R之前必须先对其加<strong>S锁</strong>，<strong>读完后即可释放S锁</strong></p>\n  <img data-src=\"https://s2.loli.net/2022/05/10/cPYrELMTeukGNoH.png\" alt=\"image-20220510103811156\" style=\"zoom:67%;\" />      \n</li>\n<li><p>&#x3D;&#x3D;三级封锁协议&#x3D;&#x3D;</p>\n<p>  <strong>在一级封锁协议的基础上</strong>，加上事务T在<strong>读取</strong>数据R之前必须先对其加<strong>S锁</strong>，<strong>直到事务结束才释放</strong></p>\n  <img data-src=\"https://s2.loli.net/2022/05/10/7r8VxWoZYlmIzQc.png\" alt=\"image-20220510103942568\" style=\"zoom:67%;\" />\n</li>\n<li><p>&#x3D;&#x3D;一二三级封锁协议的一致性保证&#x3D;&#x3D;</p>\n  <img data-src=\"https://s2.loli.net/2022/05/02/N162xhCXYOvqiBE.png\" alt=\"image-20220502113625070\" style=\"zoom:80%;\" /></li>\n</ul>\n<h3 id=\"5、并发调度的可串行性\"><a href=\"#5、并发调度的可串行性\" class=\"headerlink\" title=\"5、并发调度的可串行性\"></a>5、并发调度的可串行性</h3><ul>\n<li><p><strong>调度的正确性</strong>：</p>\n<ul>\n<li><p>能将数据库置于一致状态的调度一定是正确的调度</p>\n</li>\n<li><p>将所有事务串行起来的调度策略一定是正确的调度（因为每个事务都会保证一致性状态，故事务串行一定会保证一致性）</p>\n</li>\n<li><p>与串行调度等价的调度是正确的调度</p>\n</li>\n</ul>\n</li>\n<li><p><strong>并发事务的正确性准则：</strong>多个事务的并发执行是正确的，当且仅当其结果与<strong>某一次序串行地执行</strong>它们时的结果相同，我们称这种调度策略为<strong>可串行化的调度</strong>。</p>\n  <img data-src=\"https://s2.loli.net/2022/05/02/48u6gehbtD5PVnT.png\" alt=\"image-20220502114421860\" style=\"zoom:67%;\" />\n\n  <img data-src=\"https://s2.loli.net/2022/05/02/rGFxKEV5iQNSPs4.png\" alt=\"image-20220502114251187\" style=\"zoom:67%;\" /></li>\n</ul>\n<h2 id=\"16-4-两段锁协议\"><a href=\"#16-4-两段锁协议\" class=\"headerlink\" title=\"16.4 两段锁协议\"></a>16.4 两段锁协议</h2><ul>\n<li><p><strong>概念：</strong>所有事务必须分两个阶段（获得阶段和释放阶段，亦即扩展阶段和收缩阶段）对数据项加锁和解锁。</p>\n<ul>\n<li><p><strong>获得封锁：</strong>在对任何数据进行读、写操作之前，首先要申请并获得对该数据的封锁； </p>\n</li>\n<li><p><strong>释放封锁：</strong>&#x3D;&#x3D;在释放一个封锁之后，事务不再申请和获得任何其他封锁。&#x3D;&#x3D;</p>\n<p>  例子：</p>\n  <img data-src=\"https://s2.loli.net/2022/05/10/ZMBYK4H9SIQCOit.png\" alt=\"image-20220510105713156\" style=\"zoom:67%;\" /></li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<ul>\n<li><p>&#x3D;&#x3D;两段锁协议是可串行化的充分条件，而不是必要条件&#x3D;&#x3D;</p>\n</li>\n<li><p>一次封锁法遵守两段锁协议，但两段锁协议不要求事务必须一次将所有要使用的数据全部加锁，因此遵守两段锁协议的事务可能发生<code>死锁</code>。</p>\n<p>  例子：</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/05/10/gYxvJR9oVeKG5US.png\" alt=\"image-20220510105806932\"></p>\n</li>\n<li><p>三级封锁是两段锁的一种，因为三级封锁都是事务结束再释放锁，事务结束后显然事务不会再申请和获得任何其他封锁。</p>\n</li>\n</ul>\n</blockquote>\n<ul>\n<li><p><strong>活锁和死锁</strong></p>\n<ul>\n<li><p><strong>活锁（饥饿）</strong>：某一个事务无限等待。解决方法：先来先服务</p>\n</li>\n<li><p><strong>死锁：</strong>两个或多个事务都已封锁了一些数据对象，然后又都请求对已被其他事务封锁的数据对象加锁，从而出现死等待。</p>\n</li>\n<li><p><strong>解决死锁</strong>：</p>\n<ul>\n<li><p><strong>预防：</strong>破坏死锁产生的四个必要条件（互斥、请求和保持、不可剥夺、循环等待）。几个方法：静态申请法，一次性申请所有资源，资源的利用率不高；延迟进程的执行，能够获得所有资源时才允许执行，并发度不好；有序资源分配法，给资源编号</p>\n</li>\n<li><p><strong>避免</strong>：类似os中的银行家算法，在资源分配之前进行检查，防止死锁的发生</p>\n</li>\n<li><p><strong>诊断与解除</strong></p>\n<ul>\n<li><p><strong>死锁的诊断：</strong></p>\n<ul>\n<li><p><strong>超时法</strong>：超过规定的时间就认为发生死锁。</p>\n<blockquote>\n<p>不足：可能误判死锁，也可能不能及时发现死锁</p>\n</blockquote>\n</li>\n<li><p><strong>等待图法：</strong>以<code>事务</code>为结点，边表示事务等待的情况，若T1等待T2，则 T1→T2。系统周期性地检测事务等待图，若图中存在回路，则出现死锁。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>死锁的解除</strong>：选择一个处理死锁代价最小的事务，撤销。对撤销的事务所执行的数据修改操作必须加以恢复。</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"16-5-封锁的粒度\"><a href=\"#16-5-封锁的粒度\" class=\"headerlink\" title=\"16.5  封锁的粒度\"></a>16.5  封锁的粒度</h2><ul>\n<li><strong>封锁的粒度</strong>：指封锁对象的大小，封锁的粒度包括整个数据库、关系、元组、索引</li>\n</ul>\n<img data-src=\"https://s2.loli.net/2022/05/02/dKOgEQJji3fncZ1.png\" alt=\"image-20220502143147735\" style=\"zoom:67%;\" />\n\n<ul>\n<li><p><strong>封锁粒度的选择</strong>：选择封锁粒度时应该同时考虑并发度和开销两个因素。&#x3D;&#x3D;封锁粒度越大，并发度越小，系统开销越小。&#x3D;&#x3D;</p>\n</li>\n<li><p><strong>多粒度封锁</strong></p>\n<ul>\n<li><p><strong>概念：</strong>在一个系统中同时支持多种封锁粒度供不同的事务选择。</p>\n<blockquote>\n<p><code>多粒度封锁协议</code>允许多粒度树中的每个结点被独立地加锁。对每个结点的加锁意味着这个结点的所有后裔结点也被加以同样类型的锁。</p>\n</blockquote>\n</li>\n<li><p><strong>显式封锁：</strong>应事务的要求直接加到数据对象上的封锁</p>\n</li>\n<li><p><strong>隐式封锁：</strong>该数据对象没有独立加锁，是由于其上级结点加锁而使该数据对象加上了锁</p>\n</li>\n<li><p><strong>判断能否对一个数据对象加锁：</strong></p>\n<ul>\n<li><p>检查<strong>该数据对象</strong>有无显式封锁与之冲突； </p>\n</li>\n<li><p>检查其<strong>所有上级结点</strong>，看本事务的显式封锁是否与该数据对象上的隐式封锁冲突； </p>\n</li>\n<li><p>检查其<strong>所有下级结点</strong>，看上面的显式封锁是否与本事务的隐式封锁冲突。</p>\n<blockquote>\n<p>不需要检查下级结点的隐式封锁，因为有隐式封锁肯定可以向上找到显式封锁</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>&#x3D;&#x3D;意向锁&#x3D;&#x3D;</p>\n<ul>\n<li><p><strong>概念：</strong>如果对一个结点加意向锁，则说明该结点的下层结点正在被加锁；对任一结点加锁时，必须先对它的（所有）上层结点加意向锁。</p>\n</li>\n<li><p><strong>意向共享锁（简称IS锁）</strong>：如果对数据对象加IS锁，表示它的后裔结点拟加S锁 </p>\n</li>\n<li><p><strong>意向排它锁（简称IX锁）</strong>：如果对数据对象加IX锁，表示它的后裔结点拟加X锁 </p>\n</li>\n<li><p><strong>共享意向排它锁（简称SIX锁）</strong>：如果对数据对象加SIX锁，表示先加S锁，再加IX</p>\n<p>  eg.  对某个表加SIX锁，表示该事务要读整个表（所以要对该表加S锁），同时会更新个别元组（所以要对该表加IX锁）</p>\n  <img data-src=\"https://s2.loli.net/2022/05/10/iOJKRkQElyd7TzM.png\" alt=\"image-20220510113003330\" style=\"zoom:67%;\" />\n\n<blockquote>\n<p>加锁是从上往下的</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://s2.loli.net/2022/05/03/mzDWoftL9S6kxRs.png\" alt=\"image-20220503201553550\"></p>\n<blockquote>\n<p>IS锁和IX锁是相容的，因为最终会转化到下层结点，如果最终S锁和X锁加到了同一个对象上，那么在这个对象上的这两个锁是不相容的；如果没有加到同一个对象上，那么IS锁和IX锁就不会出现问题。</p>\n</blockquote>\n<h2 id=\"16-6-隔离级别（四种）\"><a href=\"#16-6-隔离级别（四种）\" class=\"headerlink\" title=\"16.6  隔离级别（四种）\"></a>16.6  隔离级别（四种）</h2><ul>\n<li><p><strong>未提交读（读未提交， read uncommitted）</strong>：事务隔离的最低级别，一个事务可以读到另外一个事务未提交的数据，不允许丢失修改，接受读脏数据和不可重复读现象。</p>\n</li>\n<li><p><strong>提交读（读已提交， read committed）</strong>：SQL Server 默认级别。若事务还没提交，其它事务不能读取该事务正在修改的数据。不允许丢失修改和读脏数据，接受不可重复读现象。</p>\n</li>\n<li><p><strong>可重复读（repeatable read）</strong>：事务多次读取统一数据对象的结果一致。不允许丢失修改、读脏数据和读不一致，接受幻影读现象。</p>\n</li>\n<li><p><strong>可串行读（serializable）</strong>：事务隔离的最高级别，保证可串行化，不允许丢失修改、读脏数据、读不一致以及幻影读现象的发生。</p>\n</li>\n<li><p>隔离级别允许不同类型的行为：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"><strong>隔离级别</strong></th>\n<th align=\"center\">丢失修改</th>\n<th align=\"center\"><strong>脏读</strong></th>\n<th align=\"center\"><strong>不可重复读取</strong></th>\n<th align=\"center\"><strong>幻像</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><strong>未提交读</strong></td>\n<td align=\"center\">否</td>\n<td align=\"center\">是</td>\n<td align=\"center\">是</td>\n<td align=\"center\">是</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>提交读</strong></td>\n<td align=\"center\">否</td>\n<td align=\"center\">否</td>\n<td align=\"center\">是</td>\n<td align=\"center\">是</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>可重复读</strong></td>\n<td align=\"center\">否</td>\n<td align=\"center\">否</td>\n<td align=\"center\">否</td>\n<td align=\"center\">是</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>可串行读</strong></td>\n<td align=\"center\">否</td>\n<td align=\"center\">否</td>\n<td align=\"center\">否</td>\n<td align=\"center\">否</td>\n</tr>\n</tbody></table>\n</li>\n<li><p><strong>设置隔离级别的语法</strong></p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> transaction isolation level</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tread committed <span class=\"operator\">|</span> </span><br><span class=\"line\">\tread uncommitted <span class=\"operator\">|</span></span><br><span class=\"line\">\trepeatable read <span class=\"operator\">|</span></span><br><span class=\"line\">\tserializable read</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"16-7-数据库恢复\"><a href=\"#16-7-数据库恢复\" class=\"headerlink\" title=\"16.7 数据库恢复\"></a>16.7 数据库恢复</h2><ul>\n<li><p><strong>概念</strong>：把数据库从<strong>错误状态</strong>恢复到某一个已知的<strong>正确状态</strong>（亦称为一致状态或完整状态）的功能。</p>\n</li>\n<li><p><strong>目标：</strong>在故障发生时，确保事务的原子性和持久性</p>\n</li>\n<li><p><strong>特点：</strong>因为DB与内存用户工作区之间的数据交换是通过缓冲区进行的，而这个交换一般是以缓冲区是否满来触发的。因此，有可能提交事务的数据仍在缓冲区而没有写到DB中，而未提交事务的数据却写到了DB中。所以，故障恢复时，可能既要REDO已经提交了的事务，又要UNDO未提交的事务，以保证事务的原子性</p>\n</li>\n<li><p><strong>技术</strong></p>\n<p>  DBMS提供备份机制、日志机制、检查点机制来协助数据库故障恢复;</p>\n<p>  &#x3D;&#x3D;基本原理：数据冗余。&#x3D;&#x3D;</p>\n</li>\n<li><p>&#x3D;&#x3D;数据转储：&#x3D;&#x3D;DBA定期地将整个数据库复制到磁带或另一个磁盘上保存起来的过程。这些备用的数据文本称为后备副本或后援副本。</p>\n<p>  <strong>数据转储的分类：</strong></p>\n<ul>\n<li>按照转储时的状态可以分为<strong>静态转储和动态转储</strong>。静态转储是指在系统中无运行事务时进行的转储操作。动态转储是指转储期间允许对数据库进行存取或者修改，但此时需要把转储期间各事务对数据库的修改记录在日志文件中，从而将来可以恢复</li>\n<li>按方式不同可以分为<strong>海量转储和增量转储</strong>。海量转储是指每次转储全部数据库。增量转储是指每次只转储上一次转储后更新的数据库。</li>\n</ul>\n<p>  <img data-src=\"https://s2.loli.net/2022/05/03/oEV9AIyQY7LlmZD.png\" alt=\"image-20220503193938217\"></p>\n</li>\n<li><p>&#x3D;&#x3D;登记日志文件&#x3D;&#x3D;：记录事务对数据库的<code>更新</code>操作</p>\n<p>  <strong>日志文件的格式：</strong>以记录为单位的日志文件和以数据块为单位的日志文件。</p>\n<ul>\n<li><p>以记录为单位的日志文件：一个日志记录包括每个事务的开始标志（BEGIN TRANSACTION）、结束标志（COMMIT 或 ROLLBACK）、每个更新操作</p>\n</li>\n<li><p>以数据块为单位的日志文件：包含事务标识和被更新的数据块</p>\n</li>\n</ul>\n  <img data-src=\"https://s2.loli.net/2022/05/02/aeJHjWo2fNvlnSM.png\" alt=\"image-20220502151104445\" style=\"zoom:67%;\" />\n\n<p>  <strong>登记日志文件的原则：</strong></p>\n<ul>\n<li>登记的次序按并发事务执行的时间次序</li>\n<li>必须先写日志文件，后写数据库&#x3D;&#x3D;（日志先写原则）&#x3D;&#x3D;</li>\n</ul>\n</li>\n<li><p><strong>系统故障的恢复实现策略</strong></p>\n<ul>\n<li><p><strong>系统故障导致的数据库不一致</strong><br>  （1）未完成的事务对DB产生影响<br>  （2）已完成的事务在缓冲区的内容未写入DB</p>\n</li>\n<li><p><strong>恢复功能</strong><br>  （1）UNDO未完成的事务<br>  （2）REDO已完成的事务</p>\n</li>\n<li><p><strong>恢复步骤</strong><br>  （1）正向扫描日志文件，建立UNDO和REDO队列；（不需要redo日志中所有已完成的事务）<br>  （2）反向扫描日志文件，对每个UNDO事务的更新执行逆操作；<br>  （3）正向扫描日志文件，对每个REDO事务的更新重新执行。</p>\n</li>\n</ul>\n</li>\n<li><p>&#x3D;&#x3D;检查点技术：&#x3D;&#x3D;</p>\n<p>  当事务正常运行时，数据库系统按一定的时间间隔设检查点。一旦系统需要恢复数据库状态，就可以根据最新的检查点的信息，从检查点开始执行，而不必从头开始执行那些被中断的事务。</p>\n<p>  系统在检查点做的动作主要如下：</p>\n<ul>\n<li>暂时中止现有事务的执行</li>\n<li>在日志中写入检查点记录，并把日志强制写入磁盘</li>\n<li>把主存中被修改的数据缓冲区强制写入磁盘</li>\n<li>重新开始执行事务</li>\n</ul>\n<p>  例子：</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/05/03/hbQXdSE3r46sk52.png\" alt=\"image-20220503195636843\"></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/05/03/f4wAEDbW2xU6ZtX.png\" alt=\"image-20220503195650256\"></p>\n</li>\n</ul>\n"},{"title":"数据库设计","abbrlink":41739,"date":"2022-06-27T14:54:40.000Z","_content":"\n# 五、数据库设计\n\n## 1、ER图中的基本概念\n\n### 现实世界、ER模型、关系模型中的概念对应\n\n<img src=\"https://s2.loli.net/2022/04/13/f43azBqyCJXxniM.png\" alt=\"image-20220413170050668\" style=\"zoom:67%;\" />\n\n### 实体类型和实体实例\n\n- 实体类型：一个属性集\n\n    > 实体类型可以是物理上的，如staff；也可以是概念上的，如work experience\n\n- 实体实例：对应于实体类型下的一个取值，实体实例是可区别的\n\n    > 例子：\n    >\n    > 学生是一个实体类型，可以用（学号，姓名，性别，年龄，所属系）这个属性集来描述学生，每一个学生，如学生i，是学生实体的一个实体实例；\n\n### 属性\n\n- 属性（attribute）：实体类型==或联系类型==所具有的某一特性\n\n- 属性域（attribute domain）：单个属性或多个属性所允许的值的集合\n\n- ==简单属性==（simple attribute）：由单个部分组成的属性，可独立地存在\n\n- ==复合属性==（composite/component attribute）：共同描述一个性质的一组简单属性。  eg. 地址（可以分为省市县等等）、姓名（last name， first name）\n\n    > 复合属性的处理：把复合属性拆分成多个属性，还是放在原来的表里\n\n---\n\n- ==单值属性==（single-valued attribute）：在一个实体实例中只有单独一个值\n\n- ==多值属性==（multi-valued attribute）：在一个实体实例中可以取多个值的属性。eg.  电话、爱好等等\n\n    > 多值属性的处理：用单独的表来处理\n\n- 导出属性（derived attribute）：由相关的一个属性或一组属性的值导出，在同一个实体类型中该属性并不是必要的。  eg.  年龄（可以根据生日来计算）\n\n    > 导出属性的处理：大部分情况下不保存，用的时候直接计算\n\n---\n\n- 候选关键字（candidate key）：能唯一标识每个实体实例的最小属性组\n- 主关键字（primary key）：实体类型中被选来唯一标识每个实体实例的候选关键字\n- 复合关键字（composite key）：包括两个或更多属性的候选关键字。eg.  SC表，学号和课程号构成复合关键字\n\n### 联系类型\n\n- 联系类型（relationship type）：实体类型间的一组有意义的关联\n\n- 联系实例（relationship occurrence）：一个可唯一标识的关联，涉及参与该联系的每个实体类型的一个实例\n\n    > 联系类型和联系实例是型和值的关系\n\n- 联系类型的度（degree of a relationship type）：参与联系的实体类型的个数。度为2的联系称为二元联系；度为3的称为三元联系；度为3或更高的联系，称为多元联系\n\n    > 例如：学生选课，学生和课程，二元联系\n\n- 递归联系（recursive relationship）：是这样一种联系类型，其同一个实体类型参与的次数大于1，并且每次参与具有不同角色.递归联系也称为一元联系。\n\n    > 例如：学生选班干\n\n### 简单E-R图\n\n#### （1）联系类型的图形化表示：\n\n- 一元联系（递归联系）：\n\n    <img src=\"https://s2.loli.net/2022/04/13/KusxJgkM6jNB3vY.png\" alt=\"image-20220413183610740\" style=\"zoom:67%;\" />\n\n- 二元联系：每个联系类型都表现为连接相关联实体类型的一条线，在线上标明该联系的名字,通常用一个动词或动词短语。箭头表示联系的方向。\n\n    ![image-20220413182921721](https://s2.loli.net/2022/04/13/lzYsi72DWPxHgoj.png)\n\n- 三元联系：用菱形表示度大于2的联系，联系名放在菱形内部\n\n    <img src=\"https://s2.loli.net/2022/04/13/DcAMZWVklYqTdU1.png\" alt=\"image-20220413183338386\" style=\"zoom:67%;\" />\n\n    > 四元联系与三元联系类似\n\n- 两个实体之间存在多于一种联系时课使用角色名\n\n    <img src=\"https://s2.loli.net/2022/04/13/AEn5ze4rsiGZUQ6.png\" alt=\"image-20220413183823327\" style=\"zoom:67%;\" />\n\n#### （2）属性的图形化表示\n\n- ==实体的属性：==在一个实体类型中显示其属性时，将实体类型的矩阵分为两个部分：上部分是实体的名字，下部分列出实体属性的名字。\n\n    - 对于主关键字属性,第一个列出，并在其名字后面标记{PK}，\n    - 在部分主关键字属性的名字后标记{PPK}\n    - 对于候选关键字属性的名字后面标记{AK}\n    - 简单属性和单值属性没有必要标记\n    - 对于复合属性，在其名下以右缩进形式列出子属性名\n    - 对于多值属性，在属性名后面注明它的取值范围\n    - 对于导出属性，在属性名前加上前缀“/\n\n    例子：\n\n    <img src=\"https://s2.loli.net/2022/04/13/OvTZMpQCNzlRu9t.png\" alt=\"image-20220413184441872\" style=\"zoom:67%;\" />\n\n- ==联系的属性==：采用与实体类型相同的符号，但用==虚线==将表示联系属性的矩形与联系类型名连接起来\n\n    <img src=\"https://s2.loli.net/2022/04/13/8plaIBwcOfkeZ1T.png\" alt=\"image-20220413184614803\" style=\"zoom:67%;\" />\n\n### 弱实体类型和强实体类型\n\n- ==强实体类型==(Strong entity type) （父实体，属主实体(owner entity)，支配实体）：该实体类型的存在不依赖于其他的实体类型\n\n- ==弱实体类型==(Weak entity type) （子实体，依赖实体，从属实体）：该实体类型的存在依赖于其他实体类型的存在\n\n    > 弱实体类型的一个特征是，仅使用该实体类型的属性无法唯一标识每个实体实例。 eg. 两个学生是同班同学，学习经历相同。\n\n    > 例子：<img src=\"https://s2.loli.net/2022/04/13/KwhYO63iC9AkLG4.png\" alt=\"image-20220413185233053\" style=\"zoom:67%;\" />\n\n## 2、 结构化约束\n\n- 概念：ER模型的结构化约束是指参与一个联系的实体类型上存在的约束\n\n- ==多样性==：联系上的主要约束称为多样性，包括基数约束和参与约束。指的是在一个特定的联系中，一个参与实体类型的某个实例，可能与另一个参与实体类型发生关联的实例的数目（或范围）\n\n    > - 基数约束(cardinality constraints)： 描述一个特定联系类型中的一个实体==最多==可参与联系的实例数目(==最大基数==) \n    >\n    > - 参与约束（participation constraints）：说明是否所有的实体实例都参与了联系(==最小基数==) \n    >\n    >     - 强制参与（mandatory participation）：一个实体类型的所有实例都参与联系。x为1\n    >     - 可选参与（optional participation ）：一个实体类型的部分实例参与约束。x为0\n    >\n    > - ==看约束：固定n - 1方，看另一方==\n    >\n    >     <img src=\"https://s2.loli.net/2022/04/13/1wB9IzoaCvGTmSj.png\" alt=\"image-20220413191540919\" style=\"zoom:67%;\" />\n    >\n    >     某个分支机构的某个职员可以拥有0个或者多个客户\n\n- 范围的表示：范围表示为==x..y==,其中x为最小参与数目（参与约束）(用0表示0,用1表示大于0),y为最大参与数目（基数约束）(用1表示1,用*或N表示大于1)\n\n- 例子：\n\n    - 一对一联系的多样性\n\n        <img src=\"https://s2.loli.net/2022/04/13/Pi8boG26YmrvpZf.png\" alt=\"image-20220413190419081\" style=\"zoom:67%;\" />\n\n    - 一对多联系的多样性\n\n        <img src=\"https://s2.loli.net/2022/04/13/42ZoVecLI9K8TjC.png\" alt=\"image-20220413190430930\" style=\"zoom:67%;\" />\n\n    - 多对多联系的多样性\n\n        <img src=\"https://s2.loli.net/2022/04/13/X3becj8krD4TuYo.png\" alt=\"image-20220413190445972\" style=\"zoom:67%;\" />\n\n        <img src=\"https://s2.loli.net/2022/04/13/lBaznOJ2CUfdPcR.png\" alt=\"image-20220413191346428\" style=\"zoom:80%;\" />\n\n## 3、ER模型的问题\n\n### 连接陷阱\n\n由于对特定联系含义的错误理解而引起的问题。\n\n### 扇形陷阱(fan trap)：\n\n当用模型来表示实体间的联系时，某些特殊实体实例间的道路是不明确的\n\n<img src=\"https://s2.loli.net/2022/04/13/DPqiV6CSAW3krht.png\" alt=\"image-20220413192231143\" style=\"zoom:67%;\" />\n\n<img src=\"https://s2.loli.net/2022/04/13/zHBIxnosYPqXZt2.png\" alt=\"image-20220413192245233\" style=\"zoom:67%;\" />\n\n### 深坑陷阱(chasm trap)：\n\n当一个模型暗示某些实体类型之间存在联系，而这些实体实例间却不存在相应的道路\n\n<img src=\"https://s2.loli.net/2022/04/13/DZjGTJOHfSF2VuY.png\" alt=\"image-20220413192355668\" style=\"zoom:67%;\" />\n\n<img src=\"https://s2.loli.net/2022/04/13/vkUdu8rwRaBSiYf.png\" alt=\"image-20220413192412310\" style=\"zoom:67%;\" />\n\n## 4、  增强的ER模型（EER）\n\n- ER模型的局限性：冗余\n\n- ==超类：==其实例构成一个或多个独立子集且各独立子集在数据模型中要显示的实体类型。含有独立子类的实体类型称为超类。例如staff\n\n- ==子类：==某实体类型的一个独立实例集合，并需要在数据模型中单独表示。\n\n    > eg.  Staff实体类型的实体成员可分为Manager, SalesPersonnel和Secretary,\n    >\n    > Staff可以看成超类，Manager, SalesPersonnel和Secretary应看作子类\n\n- 超类和子类的联系：\n\n    - 子类中的一个实体也是超类的一个实体\n    - 超类/子类联系是一对一的\n    - 有些超类的子类可能重叠（**不相交约束**：相交的、不相交的）。例如，一名职员可以既是经理，又是销售人员\n    - 并不是超类中的每个实体都必须是子类中的实体（**参与约束**：强制的、可选的）。例如，有些职员没有明显的一类工作角色，比如说既不是经理，也不是销售人员\n\n- 将超类和子类的概念引入ER模型的主要原因：避免对相似的概念进行重复的描述\n\n- 属性继承：子类除了拥有其所在子类特有的属性外，同时还具有（继承）超类的所有属性\n\n- 共享子类：一个子类有不止一个超类时，称这个子类为共享子类\n\n    ==在UML图中，三角形的尖指向超类==\n\n    <img src=\"https://s2.loli.net/2022/04/13/JjODx9q1p4Ngo2s.png\" alt=\"image-20220413195615579\" style=\"zoom:67%;\" />\n\n- 多重继承：超类的属性都被共享子类继承，同时共享子类还可以有自己的附加属性，这种继承称为多重继承\n\n- **类型层次（自上而下）**：子类也可以有自己的子类。这样构成的子类层次称为类型层次\n\n- **概化层次（自下而上）**：多个有公共属性的实体可以概化为一个更高层次的超类实体（supertype entity）,或者相反，一个一般化实体可以分解成低层次的子类实体（subtype entity）\n\n## 5、  特殊化、概化\n\n- 特殊化过程(specialization process)：==自上而下== 。通过标识实体成员间的差异特征将这些成员间的差异最大化的过程\n\n- 概化过程(generalization process)：==自下而上==。通过标识实体成员间的共同特征将这些成员间的差异最小化的过程\n\n    <img src=\"https://s2.loli.net/2022/04/19/YXJewcjOgv5nBGT.png\" alt=\"image-20220419102322804\" style=\"zoom:67%;\" />\n\n- 特殊化/概化约束：\n\n    - ==参与约束==：确定超类中的每个成员是否都必须是子类中的成员。\n\n        - 强制的参与约束（Mandatory）：超类中的每个成员都必须是子类中的成员\n        - 可选的参与约束（Optional）：超类中的成员并不一定也是子类中的成员\n\n    - ==不相交约束==：描述子类成员间的联系。子类成员之间是相交（AND）的或者不相交（OR）的\n\n        > ==参与约束和不相交约束是独立的，因此可以组合成4种约束==\n\n<img src=\"https://s2.loli.net/2022/04/19/zRnwamC5L82ekQI.png\" alt=\"image-20220419102930019\" style=\"zoom:67%;\" />\n\n## 6、  聚合与组合\n\n- ==聚合(aggregation）==：表示实体类型之间的“具有”(has-a)和“属于”**(is-part-of)**联系，这些实体中有一个表示整体，其他的表示部分。如汽车和轮子\n\n    >  <img src=\"https://s2.loli.net/2022/04/19/ljstSaZ9Vmc1u3B.png\" alt=\"image-20220419103229323\" style=\"zoom: 67%;\" />\n\n- ==组合（composition）：==一种特殊形式的聚合，即整体对部分存在强拥有权，且==两者具有一致的生存期==\n\n    > 例如：汽车和轮子，轮子是可以单独存在的；而房子和房间，如果房子没了。那房间也不存在了\n\n    <img src=\"https://s2.loli.net/2022/04/13/o2piID5CdsX84M9.png\" alt=\"image-20220413202610135\" style=\"zoom:67%;\" />\n\n- ==概括==：定义了类型之间的一种子集联系，它抽象了类型之间的**is subset of**的语义。如学生和本科生\n\n    例子：\n\n    <img src=\"https://s2.loli.net/2022/04/14/K2ZBMf5Ln4SePD3.png\" alt=\"image-20220414123506992\" style=\"zoom:67%;\" />\n\n## 7、  局部视图设计及合并ER图\n\n- 根据局部结构设计分ER图，即局部ER图\n\n- 合并ER图\n\n    - 方法：二元合并法或者多元合并法\n\n    - 冲突处理：\n\n        - 属性冲突：包括属性域冲突和属性取值单位冲突\n\n            解决方法：取尽可能多的包含较多局部ER图要求的数据类型、值域或取值单位，并可考虑今后系统维护的工作量作为取舍\n\n        - 命名冲突：包括同名异义和异名同义。解决方法：重新命名\n\n        - 结构冲突：\n\n            - 同一对象在不同应用中具有不同的抽象（解决方法：统一为实体或属性）\n            - 同一对象在不同局部ER图中所包含的属性不完全相同，或属性的排列次序不完全相同（解决方法：使该实体的属性取各局部ER图中属性的并集，再适当调整属性的次序）\n            - 实体之间的联系在不同局部ER图中呈现不同的类型（解决方法：根据应用的语义对实体联系的类型进行综合或调整）\n\n    - 消除数据冗余\n\n        - 用分析法消除冗余数据（😢其实就是观察法），例如实发工资可以由其他列推算得到，则可以删去实发工资\n\n        - 用规范化消除冗余联系，可以通过求最小依赖集来实现\n\n            ![image-20220414142449087](https://s2.loli.net/2022/04/14/wFm5a2JVHkYrSqd.png)\n\n例子:\n\n![image-20220414124835366](https://s2.loli.net/2022/04/14/WxGbp3khOcZijf7.png)\n\n![image-20220414124850694](https://s2.loli.net/2022/04/14/CndNF5YtxWcRaJO.png)\n\n## ==8、  将ER模型转换为关系模型==\n\n- ER结构与关系结构的对应关系\n\n    <img src=\"https://s2.loli.net/2022/04/13/XP6twnef4rG2bgH.png\" alt=\"image-20220413203447160\" style=\"zoom:67%;\" />\n\n- ==将ER模型转换为关系模型的9步算法==\n\n    <img src=\"https://s2.loli.net/2022/04/13/zPa9jNSdThUeH1B.png\" alt=\"image-20220413203911206\" style=\"zoom:67%;\" />\n\n#### （1）强实体的转换：直接转换成一张表\n\n<img src=\"https://s2.loli.net/2022/04/13/Zps7gCADun8rBGI.png\" alt=\"image-20220413204026593\"  />\n\n#### （2）仅参与一个1:1联系的弱实体的转换\n\n![image-20220413204240217](https://s2.loli.net/2022/04/13/o4OXdy1nNVpeR9b.png)\n\n#### （3）参与1:N或M:N联系的弱实体的转换**\n\n将参与一个1:N或M:N或多个联系的弱实体W，转换为一张表T，表中包括弱实体的所有的单值属性或复合属性的组成属性。\n\n- 若强实体S与弱实体W之间是==1:N联系，则T的主键 = W的主关键字+S的主关键字==\n\n    ![image-20220413205556256](https://s2.loli.net/2022/04/13/xJ3vpA51YfnkU9P.png)\n\n- 若强实体S与弱实体W之间是==M:N联系，则T的主键=一个新创建的具有唯一值的属性X==，而实体间的联系在step six处理\n\n    > 如果采用T的主键 = W的主关键字+S的主关键字，会造成冗余\n\n    <img src=\"https://s2.loli.net/2022/04/13/sBSwXZjvz4D6YlP.png\" alt=\"image-20220413231701028\" style=\"zoom:67%;\" />\n\n    > 父子关系等等可以作为联系的属性\n    >\n    > <img src=\"https://s2.loli.net/2022/04/19/2SrvHy1h3oebWnA.png\" alt=\"image-20220419103909683\" style=\"zoom: 33%;\" />\n\n#### （4） 1:1 的联系的转换\n\n- 两方都强制参与：将两个实体组合为一个关系T，然后将联系属性加入到关系T中\n\n    <img src=\"https://s2.loli.net/2022/04/13/nWRxKhXNc5mlqdi.png\" alt=\"image-20220413231857172\" style=\"zoom:67%;\" />\n\n- 一方强制参与：将可选方实体的主关键字作为强制方实体的关系的外部关键字，然后将联系属性加入到强制实体的关系中\n\n    > 如果放到可选参与方，会造成空间浪费，因为会有空的；强制参与方就不会有空的\n\n    <img src=\"https://s2.loli.net/2022/04/13/lgyLBaHn9iD2RYU.png\" alt=\"image-20220413232130399\" style=\"zoom:67%;\" />\n\n- 两方都可选参与：若没有进一步的信息，可选任一可选实体当作强制实体，使用方法（2）转换\n\n    <img src=\"https://s2.loli.net/2022/04/13/ThBVvoKfijR7cy9.png\" alt=\"image-20220413232412596\" style=\"zoom:67%;\" />\n\n#### （5）1:N 的联系的转换\n\n对于任意一个1:N联系，一方实体的主关键字作为多方实体关系的外部关键字，该联系的任何属性也安排在多方\n\n> 如果放到一方实体的话，则会造成多值\n\n<img src=\"https://s2.loli.net/2022/04/13/k8dJuPe6AByfCE2.png\" alt=\"image-20220413232534635\" style=\"zoom:67%;\" />\n\n#### （6） N元联系（涉及N个实体）（包括N:M 的联系）的转换\n\n对于任意一个M:N联系或N元联系，==生成一个表示该联系的关系R（注意外键），==关系R包含该联系的所有属性以及作为R的外部关键字出现的所有属主实体的主关键字\n\n<img src=\"https://s2.loli.net/2022/04/13/PgsECqprb1HOG3Q.png\" alt=\"image-20220413232804774\" style=\"zoom:67%;\" />\n\n<img src=\"https://s2.loli.net/2022/04/13/dxnKtID86QFU7T5.png\" alt=\"image-20220413232956311\" style=\"zoom:67%;\" />\n\n> 同一实体集的实体间的联系，即自联系，也可按上述1:1， 1：n， m：n的3种情况分别处理\n\n#### （7） 复合属性、多值属性和派生属性的处理\n\n- ==复合属性==：为每个子属性创建一个单独的属性而将复合属性去掉\n- ==多值属性==：将多值属性生成为一个表示该属性的关系，**并把该属性的属主实体的主关键字作为该关系的外部关键字**\n- ==派生属性==：从关系模式中去掉\n\n<img src=\"https://s2.loli.net/2022/04/13/j9uenoirmIlq4Mc.png\" alt=\"image-20220413233231580\" style=\"zoom:67%;\" />\n\n#### （8） 子类不相交的超类/子类联系的转换\n\n对于每个具有强制参与且不相交子类的超类/子类联系-- {Mandatory, Or}\n\n- 对于每个子类Si，创建一个新表Ti; \n\n- 将超类的简单属性和复合属性的简单组合属性放入Ti的属性集中；\n\n- 将Si的简单属性和复合属性的简单组合属性放入Ti的属性集中；\n\n- 标识主键和候选键。\n\n    ==超类不创建表（因为是强制参与且不相交，超类中的某个成员一定属于且仅属于某一个子类），各组合的超类/子类一个表==\n\n    <img src=\"https://s2.loli.net/2022/04/13/1DFPGLpnarTCXv9.png\" alt=\"image-20220413233638204\" style=\"zoom:67%;\" />\n\n#### （9） 子类相交的超类/子类联系的转换\n\n对于每个具有相交子类 或 可选参与且不相交子类的超类/子类联系（即除了{Mandatory, Or}之外的三种组合约束）\n\n- 对于超类，创建一个新表O; \n\n- 将超类的简单属性和复合属性的简单组合属性放入O的属性集中；\n\n- 标识O的主键和候选键；\n\n- 对于每个子类Si，创建一个新表Ti; \n\n- 将Si的简单属性和复合属性的简单组合属性放入Ti的属性集中；\n\n- **将O的主键放入Ti的属性集中，作为Ti的外键**\n\n    ==超类创建一个表，各子类一个表==\n\n<img src=\"https://s2.loli.net/2022/04/13/vscW9OjZQRDkaIP.png\" alt=\"image-20220413234448229\" style=\"zoom:67%;\" />\n","source":"_posts/数据库设计.md","raw":"---\ntitle: 数据库设计\ntags:\n  - 数据库\ncategory:\n  - 数据库\nabbrlink: 41739\ndate: 2022-06-27 22:54:40\n---\n\n# 五、数据库设计\n\n## 1、ER图中的基本概念\n\n### 现实世界、ER模型、关系模型中的概念对应\n\n<img src=\"https://s2.loli.net/2022/04/13/f43azBqyCJXxniM.png\" alt=\"image-20220413170050668\" style=\"zoom:67%;\" />\n\n### 实体类型和实体实例\n\n- 实体类型：一个属性集\n\n    > 实体类型可以是物理上的，如staff；也可以是概念上的，如work experience\n\n- 实体实例：对应于实体类型下的一个取值，实体实例是可区别的\n\n    > 例子：\n    >\n    > 学生是一个实体类型，可以用（学号，姓名，性别，年龄，所属系）这个属性集来描述学生，每一个学生，如学生i，是学生实体的一个实体实例；\n\n### 属性\n\n- 属性（attribute）：实体类型==或联系类型==所具有的某一特性\n\n- 属性域（attribute domain）：单个属性或多个属性所允许的值的集合\n\n- ==简单属性==（simple attribute）：由单个部分组成的属性，可独立地存在\n\n- ==复合属性==（composite/component attribute）：共同描述一个性质的一组简单属性。  eg. 地址（可以分为省市县等等）、姓名（last name， first name）\n\n    > 复合属性的处理：把复合属性拆分成多个属性，还是放在原来的表里\n\n---\n\n- ==单值属性==（single-valued attribute）：在一个实体实例中只有单独一个值\n\n- ==多值属性==（multi-valued attribute）：在一个实体实例中可以取多个值的属性。eg.  电话、爱好等等\n\n    > 多值属性的处理：用单独的表来处理\n\n- 导出属性（derived attribute）：由相关的一个属性或一组属性的值导出，在同一个实体类型中该属性并不是必要的。  eg.  年龄（可以根据生日来计算）\n\n    > 导出属性的处理：大部分情况下不保存，用的时候直接计算\n\n---\n\n- 候选关键字（candidate key）：能唯一标识每个实体实例的最小属性组\n- 主关键字（primary key）：实体类型中被选来唯一标识每个实体实例的候选关键字\n- 复合关键字（composite key）：包括两个或更多属性的候选关键字。eg.  SC表，学号和课程号构成复合关键字\n\n### 联系类型\n\n- 联系类型（relationship type）：实体类型间的一组有意义的关联\n\n- 联系实例（relationship occurrence）：一个可唯一标识的关联，涉及参与该联系的每个实体类型的一个实例\n\n    > 联系类型和联系实例是型和值的关系\n\n- 联系类型的度（degree of a relationship type）：参与联系的实体类型的个数。度为2的联系称为二元联系；度为3的称为三元联系；度为3或更高的联系，称为多元联系\n\n    > 例如：学生选课，学生和课程，二元联系\n\n- 递归联系（recursive relationship）：是这样一种联系类型，其同一个实体类型参与的次数大于1，并且每次参与具有不同角色.递归联系也称为一元联系。\n\n    > 例如：学生选班干\n\n### 简单E-R图\n\n#### （1）联系类型的图形化表示：\n\n- 一元联系（递归联系）：\n\n    <img src=\"https://s2.loli.net/2022/04/13/KusxJgkM6jNB3vY.png\" alt=\"image-20220413183610740\" style=\"zoom:67%;\" />\n\n- 二元联系：每个联系类型都表现为连接相关联实体类型的一条线，在线上标明该联系的名字,通常用一个动词或动词短语。箭头表示联系的方向。\n\n    ![image-20220413182921721](https://s2.loli.net/2022/04/13/lzYsi72DWPxHgoj.png)\n\n- 三元联系：用菱形表示度大于2的联系，联系名放在菱形内部\n\n    <img src=\"https://s2.loli.net/2022/04/13/DcAMZWVklYqTdU1.png\" alt=\"image-20220413183338386\" style=\"zoom:67%;\" />\n\n    > 四元联系与三元联系类似\n\n- 两个实体之间存在多于一种联系时课使用角色名\n\n    <img src=\"https://s2.loli.net/2022/04/13/AEn5ze4rsiGZUQ6.png\" alt=\"image-20220413183823327\" style=\"zoom:67%;\" />\n\n#### （2）属性的图形化表示\n\n- ==实体的属性：==在一个实体类型中显示其属性时，将实体类型的矩阵分为两个部分：上部分是实体的名字，下部分列出实体属性的名字。\n\n    - 对于主关键字属性,第一个列出，并在其名字后面标记{PK}，\n    - 在部分主关键字属性的名字后标记{PPK}\n    - 对于候选关键字属性的名字后面标记{AK}\n    - 简单属性和单值属性没有必要标记\n    - 对于复合属性，在其名下以右缩进形式列出子属性名\n    - 对于多值属性，在属性名后面注明它的取值范围\n    - 对于导出属性，在属性名前加上前缀“/\n\n    例子：\n\n    <img src=\"https://s2.loli.net/2022/04/13/OvTZMpQCNzlRu9t.png\" alt=\"image-20220413184441872\" style=\"zoom:67%;\" />\n\n- ==联系的属性==：采用与实体类型相同的符号，但用==虚线==将表示联系属性的矩形与联系类型名连接起来\n\n    <img src=\"https://s2.loli.net/2022/04/13/8plaIBwcOfkeZ1T.png\" alt=\"image-20220413184614803\" style=\"zoom:67%;\" />\n\n### 弱实体类型和强实体类型\n\n- ==强实体类型==(Strong entity type) （父实体，属主实体(owner entity)，支配实体）：该实体类型的存在不依赖于其他的实体类型\n\n- ==弱实体类型==(Weak entity type) （子实体，依赖实体，从属实体）：该实体类型的存在依赖于其他实体类型的存在\n\n    > 弱实体类型的一个特征是，仅使用该实体类型的属性无法唯一标识每个实体实例。 eg. 两个学生是同班同学，学习经历相同。\n\n    > 例子：<img src=\"https://s2.loli.net/2022/04/13/KwhYO63iC9AkLG4.png\" alt=\"image-20220413185233053\" style=\"zoom:67%;\" />\n\n## 2、 结构化约束\n\n- 概念：ER模型的结构化约束是指参与一个联系的实体类型上存在的约束\n\n- ==多样性==：联系上的主要约束称为多样性，包括基数约束和参与约束。指的是在一个特定的联系中，一个参与实体类型的某个实例，可能与另一个参与实体类型发生关联的实例的数目（或范围）\n\n    > - 基数约束(cardinality constraints)： 描述一个特定联系类型中的一个实体==最多==可参与联系的实例数目(==最大基数==) \n    >\n    > - 参与约束（participation constraints）：说明是否所有的实体实例都参与了联系(==最小基数==) \n    >\n    >     - 强制参与（mandatory participation）：一个实体类型的所有实例都参与联系。x为1\n    >     - 可选参与（optional participation ）：一个实体类型的部分实例参与约束。x为0\n    >\n    > - ==看约束：固定n - 1方，看另一方==\n    >\n    >     <img src=\"https://s2.loli.net/2022/04/13/1wB9IzoaCvGTmSj.png\" alt=\"image-20220413191540919\" style=\"zoom:67%;\" />\n    >\n    >     某个分支机构的某个职员可以拥有0个或者多个客户\n\n- 范围的表示：范围表示为==x..y==,其中x为最小参与数目（参与约束）(用0表示0,用1表示大于0),y为最大参与数目（基数约束）(用1表示1,用*或N表示大于1)\n\n- 例子：\n\n    - 一对一联系的多样性\n\n        <img src=\"https://s2.loli.net/2022/04/13/Pi8boG26YmrvpZf.png\" alt=\"image-20220413190419081\" style=\"zoom:67%;\" />\n\n    - 一对多联系的多样性\n\n        <img src=\"https://s2.loli.net/2022/04/13/42ZoVecLI9K8TjC.png\" alt=\"image-20220413190430930\" style=\"zoom:67%;\" />\n\n    - 多对多联系的多样性\n\n        <img src=\"https://s2.loli.net/2022/04/13/X3becj8krD4TuYo.png\" alt=\"image-20220413190445972\" style=\"zoom:67%;\" />\n\n        <img src=\"https://s2.loli.net/2022/04/13/lBaznOJ2CUfdPcR.png\" alt=\"image-20220413191346428\" style=\"zoom:80%;\" />\n\n## 3、ER模型的问题\n\n### 连接陷阱\n\n由于对特定联系含义的错误理解而引起的问题。\n\n### 扇形陷阱(fan trap)：\n\n当用模型来表示实体间的联系时，某些特殊实体实例间的道路是不明确的\n\n<img src=\"https://s2.loli.net/2022/04/13/DPqiV6CSAW3krht.png\" alt=\"image-20220413192231143\" style=\"zoom:67%;\" />\n\n<img src=\"https://s2.loli.net/2022/04/13/zHBIxnosYPqXZt2.png\" alt=\"image-20220413192245233\" style=\"zoom:67%;\" />\n\n### 深坑陷阱(chasm trap)：\n\n当一个模型暗示某些实体类型之间存在联系，而这些实体实例间却不存在相应的道路\n\n<img src=\"https://s2.loli.net/2022/04/13/DZjGTJOHfSF2VuY.png\" alt=\"image-20220413192355668\" style=\"zoom:67%;\" />\n\n<img src=\"https://s2.loli.net/2022/04/13/vkUdu8rwRaBSiYf.png\" alt=\"image-20220413192412310\" style=\"zoom:67%;\" />\n\n## 4、  增强的ER模型（EER）\n\n- ER模型的局限性：冗余\n\n- ==超类：==其实例构成一个或多个独立子集且各独立子集在数据模型中要显示的实体类型。含有独立子类的实体类型称为超类。例如staff\n\n- ==子类：==某实体类型的一个独立实例集合，并需要在数据模型中单独表示。\n\n    > eg.  Staff实体类型的实体成员可分为Manager, SalesPersonnel和Secretary,\n    >\n    > Staff可以看成超类，Manager, SalesPersonnel和Secretary应看作子类\n\n- 超类和子类的联系：\n\n    - 子类中的一个实体也是超类的一个实体\n    - 超类/子类联系是一对一的\n    - 有些超类的子类可能重叠（**不相交约束**：相交的、不相交的）。例如，一名职员可以既是经理，又是销售人员\n    - 并不是超类中的每个实体都必须是子类中的实体（**参与约束**：强制的、可选的）。例如，有些职员没有明显的一类工作角色，比如说既不是经理，也不是销售人员\n\n- 将超类和子类的概念引入ER模型的主要原因：避免对相似的概念进行重复的描述\n\n- 属性继承：子类除了拥有其所在子类特有的属性外，同时还具有（继承）超类的所有属性\n\n- 共享子类：一个子类有不止一个超类时，称这个子类为共享子类\n\n    ==在UML图中，三角形的尖指向超类==\n\n    <img src=\"https://s2.loli.net/2022/04/13/JjODx9q1p4Ngo2s.png\" alt=\"image-20220413195615579\" style=\"zoom:67%;\" />\n\n- 多重继承：超类的属性都被共享子类继承，同时共享子类还可以有自己的附加属性，这种继承称为多重继承\n\n- **类型层次（自上而下）**：子类也可以有自己的子类。这样构成的子类层次称为类型层次\n\n- **概化层次（自下而上）**：多个有公共属性的实体可以概化为一个更高层次的超类实体（supertype entity）,或者相反，一个一般化实体可以分解成低层次的子类实体（subtype entity）\n\n## 5、  特殊化、概化\n\n- 特殊化过程(specialization process)：==自上而下== 。通过标识实体成员间的差异特征将这些成员间的差异最大化的过程\n\n- 概化过程(generalization process)：==自下而上==。通过标识实体成员间的共同特征将这些成员间的差异最小化的过程\n\n    <img src=\"https://s2.loli.net/2022/04/19/YXJewcjOgv5nBGT.png\" alt=\"image-20220419102322804\" style=\"zoom:67%;\" />\n\n- 特殊化/概化约束：\n\n    - ==参与约束==：确定超类中的每个成员是否都必须是子类中的成员。\n\n        - 强制的参与约束（Mandatory）：超类中的每个成员都必须是子类中的成员\n        - 可选的参与约束（Optional）：超类中的成员并不一定也是子类中的成员\n\n    - ==不相交约束==：描述子类成员间的联系。子类成员之间是相交（AND）的或者不相交（OR）的\n\n        > ==参与约束和不相交约束是独立的，因此可以组合成4种约束==\n\n<img src=\"https://s2.loli.net/2022/04/19/zRnwamC5L82ekQI.png\" alt=\"image-20220419102930019\" style=\"zoom:67%;\" />\n\n## 6、  聚合与组合\n\n- ==聚合(aggregation）==：表示实体类型之间的“具有”(has-a)和“属于”**(is-part-of)**联系，这些实体中有一个表示整体，其他的表示部分。如汽车和轮子\n\n    >  <img src=\"https://s2.loli.net/2022/04/19/ljstSaZ9Vmc1u3B.png\" alt=\"image-20220419103229323\" style=\"zoom: 67%;\" />\n\n- ==组合（composition）：==一种特殊形式的聚合，即整体对部分存在强拥有权，且==两者具有一致的生存期==\n\n    > 例如：汽车和轮子，轮子是可以单独存在的；而房子和房间，如果房子没了。那房间也不存在了\n\n    <img src=\"https://s2.loli.net/2022/04/13/o2piID5CdsX84M9.png\" alt=\"image-20220413202610135\" style=\"zoom:67%;\" />\n\n- ==概括==：定义了类型之间的一种子集联系，它抽象了类型之间的**is subset of**的语义。如学生和本科生\n\n    例子：\n\n    <img src=\"https://s2.loli.net/2022/04/14/K2ZBMf5Ln4SePD3.png\" alt=\"image-20220414123506992\" style=\"zoom:67%;\" />\n\n## 7、  局部视图设计及合并ER图\n\n- 根据局部结构设计分ER图，即局部ER图\n\n- 合并ER图\n\n    - 方法：二元合并法或者多元合并法\n\n    - 冲突处理：\n\n        - 属性冲突：包括属性域冲突和属性取值单位冲突\n\n            解决方法：取尽可能多的包含较多局部ER图要求的数据类型、值域或取值单位，并可考虑今后系统维护的工作量作为取舍\n\n        - 命名冲突：包括同名异义和异名同义。解决方法：重新命名\n\n        - 结构冲突：\n\n            - 同一对象在不同应用中具有不同的抽象（解决方法：统一为实体或属性）\n            - 同一对象在不同局部ER图中所包含的属性不完全相同，或属性的排列次序不完全相同（解决方法：使该实体的属性取各局部ER图中属性的并集，再适当调整属性的次序）\n            - 实体之间的联系在不同局部ER图中呈现不同的类型（解决方法：根据应用的语义对实体联系的类型进行综合或调整）\n\n    - 消除数据冗余\n\n        - 用分析法消除冗余数据（😢其实就是观察法），例如实发工资可以由其他列推算得到，则可以删去实发工资\n\n        - 用规范化消除冗余联系，可以通过求最小依赖集来实现\n\n            ![image-20220414142449087](https://s2.loli.net/2022/04/14/wFm5a2JVHkYrSqd.png)\n\n例子:\n\n![image-20220414124835366](https://s2.loli.net/2022/04/14/WxGbp3khOcZijf7.png)\n\n![image-20220414124850694](https://s2.loli.net/2022/04/14/CndNF5YtxWcRaJO.png)\n\n## ==8、  将ER模型转换为关系模型==\n\n- ER结构与关系结构的对应关系\n\n    <img src=\"https://s2.loli.net/2022/04/13/XP6twnef4rG2bgH.png\" alt=\"image-20220413203447160\" style=\"zoom:67%;\" />\n\n- ==将ER模型转换为关系模型的9步算法==\n\n    <img src=\"https://s2.loli.net/2022/04/13/zPa9jNSdThUeH1B.png\" alt=\"image-20220413203911206\" style=\"zoom:67%;\" />\n\n#### （1）强实体的转换：直接转换成一张表\n\n<img src=\"https://s2.loli.net/2022/04/13/Zps7gCADun8rBGI.png\" alt=\"image-20220413204026593\"  />\n\n#### （2）仅参与一个1:1联系的弱实体的转换\n\n![image-20220413204240217](https://s2.loli.net/2022/04/13/o4OXdy1nNVpeR9b.png)\n\n#### （3）参与1:N或M:N联系的弱实体的转换**\n\n将参与一个1:N或M:N或多个联系的弱实体W，转换为一张表T，表中包括弱实体的所有的单值属性或复合属性的组成属性。\n\n- 若强实体S与弱实体W之间是==1:N联系，则T的主键 = W的主关键字+S的主关键字==\n\n    ![image-20220413205556256](https://s2.loli.net/2022/04/13/xJ3vpA51YfnkU9P.png)\n\n- 若强实体S与弱实体W之间是==M:N联系，则T的主键=一个新创建的具有唯一值的属性X==，而实体间的联系在step six处理\n\n    > 如果采用T的主键 = W的主关键字+S的主关键字，会造成冗余\n\n    <img src=\"https://s2.loli.net/2022/04/13/sBSwXZjvz4D6YlP.png\" alt=\"image-20220413231701028\" style=\"zoom:67%;\" />\n\n    > 父子关系等等可以作为联系的属性\n    >\n    > <img src=\"https://s2.loli.net/2022/04/19/2SrvHy1h3oebWnA.png\" alt=\"image-20220419103909683\" style=\"zoom: 33%;\" />\n\n#### （4） 1:1 的联系的转换\n\n- 两方都强制参与：将两个实体组合为一个关系T，然后将联系属性加入到关系T中\n\n    <img src=\"https://s2.loli.net/2022/04/13/nWRxKhXNc5mlqdi.png\" alt=\"image-20220413231857172\" style=\"zoom:67%;\" />\n\n- 一方强制参与：将可选方实体的主关键字作为强制方实体的关系的外部关键字，然后将联系属性加入到强制实体的关系中\n\n    > 如果放到可选参与方，会造成空间浪费，因为会有空的；强制参与方就不会有空的\n\n    <img src=\"https://s2.loli.net/2022/04/13/lgyLBaHn9iD2RYU.png\" alt=\"image-20220413232130399\" style=\"zoom:67%;\" />\n\n- 两方都可选参与：若没有进一步的信息，可选任一可选实体当作强制实体，使用方法（2）转换\n\n    <img src=\"https://s2.loli.net/2022/04/13/ThBVvoKfijR7cy9.png\" alt=\"image-20220413232412596\" style=\"zoom:67%;\" />\n\n#### （5）1:N 的联系的转换\n\n对于任意一个1:N联系，一方实体的主关键字作为多方实体关系的外部关键字，该联系的任何属性也安排在多方\n\n> 如果放到一方实体的话，则会造成多值\n\n<img src=\"https://s2.loli.net/2022/04/13/k8dJuPe6AByfCE2.png\" alt=\"image-20220413232534635\" style=\"zoom:67%;\" />\n\n#### （6） N元联系（涉及N个实体）（包括N:M 的联系）的转换\n\n对于任意一个M:N联系或N元联系，==生成一个表示该联系的关系R（注意外键），==关系R包含该联系的所有属性以及作为R的外部关键字出现的所有属主实体的主关键字\n\n<img src=\"https://s2.loli.net/2022/04/13/PgsECqprb1HOG3Q.png\" alt=\"image-20220413232804774\" style=\"zoom:67%;\" />\n\n<img src=\"https://s2.loli.net/2022/04/13/dxnKtID86QFU7T5.png\" alt=\"image-20220413232956311\" style=\"zoom:67%;\" />\n\n> 同一实体集的实体间的联系，即自联系，也可按上述1:1， 1：n， m：n的3种情况分别处理\n\n#### （7） 复合属性、多值属性和派生属性的处理\n\n- ==复合属性==：为每个子属性创建一个单独的属性而将复合属性去掉\n- ==多值属性==：将多值属性生成为一个表示该属性的关系，**并把该属性的属主实体的主关键字作为该关系的外部关键字**\n- ==派生属性==：从关系模式中去掉\n\n<img src=\"https://s2.loli.net/2022/04/13/j9uenoirmIlq4Mc.png\" alt=\"image-20220413233231580\" style=\"zoom:67%;\" />\n\n#### （8） 子类不相交的超类/子类联系的转换\n\n对于每个具有强制参与且不相交子类的超类/子类联系-- {Mandatory, Or}\n\n- 对于每个子类Si，创建一个新表Ti; \n\n- 将超类的简单属性和复合属性的简单组合属性放入Ti的属性集中；\n\n- 将Si的简单属性和复合属性的简单组合属性放入Ti的属性集中；\n\n- 标识主键和候选键。\n\n    ==超类不创建表（因为是强制参与且不相交，超类中的某个成员一定属于且仅属于某一个子类），各组合的超类/子类一个表==\n\n    <img src=\"https://s2.loli.net/2022/04/13/1DFPGLpnarTCXv9.png\" alt=\"image-20220413233638204\" style=\"zoom:67%;\" />\n\n#### （9） 子类相交的超类/子类联系的转换\n\n对于每个具有相交子类 或 可选参与且不相交子类的超类/子类联系（即除了{Mandatory, Or}之外的三种组合约束）\n\n- 对于超类，创建一个新表O; \n\n- 将超类的简单属性和复合属性的简单组合属性放入O的属性集中；\n\n- 标识O的主键和候选键；\n\n- 对于每个子类Si，创建一个新表Ti; \n\n- 将Si的简单属性和复合属性的简单组合属性放入Ti的属性集中；\n\n- **将O的主键放入Ti的属性集中，作为Ti的外键**\n\n    ==超类创建一个表，各子类一个表==\n\n<img src=\"https://s2.loli.net/2022/04/13/vscW9OjZQRDkaIP.png\" alt=\"image-20220413234448229\" style=\"zoom:67%;\" />\n","slug":"数据库设计","published":1,"updated":"2022-06-27T15:12:30.881Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4ww07ze0005iksk91eu4n8r","content":"<h1 id=\"五、数据库设计\"><a href=\"#五、数据库设计\" class=\"headerlink\" title=\"五、数据库设计\"></a>五、数据库设计</h1><h2 id=\"1、ER图中的基本概念\"><a href=\"#1、ER图中的基本概念\" class=\"headerlink\" title=\"1、ER图中的基本概念\"></a>1、ER图中的基本概念</h2><h3 id=\"现实世界、ER模型、关系模型中的概念对应\"><a href=\"#现实世界、ER模型、关系模型中的概念对应\" class=\"headerlink\" title=\"现实世界、ER模型、关系模型中的概念对应\"></a>现实世界、ER模型、关系模型中的概念对应</h3><img data-src=\"https://s2.loli.net/2022/04/13/f43azBqyCJXxniM.png\" alt=\"image-20220413170050668\" style=\"zoom:67%;\" />\n\n<h3 id=\"实体类型和实体实例\"><a href=\"#实体类型和实体实例\" class=\"headerlink\" title=\"实体类型和实体实例\"></a>实体类型和实体实例</h3><ul>\n<li><p>实体类型：一个属性集</p>\n<blockquote>\n<p>实体类型可以是物理上的，如staff；也可以是概念上的，如work experience</p>\n</blockquote>\n</li>\n<li><p>实体实例：对应于实体类型下的一个取值，实体实例是可区别的</p>\n<blockquote>\n<p>例子：</p>\n<p>学生是一个实体类型，可以用（学号，姓名，性别，年龄，所属系）这个属性集来描述学生，每一个学生，如学生i，是学生实体的一个实体实例；</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><ul>\n<li><p>属性（attribute）：实体类型&#x3D;&#x3D;或联系类型&#x3D;&#x3D;所具有的某一特性</p>\n</li>\n<li><p>属性域（attribute domain）：单个属性或多个属性所允许的值的集合</p>\n</li>\n<li><p>&#x3D;&#x3D;简单属性&#x3D;&#x3D;（simple attribute）：由单个部分组成的属性，可独立地存在</p>\n</li>\n<li><p>&#x3D;&#x3D;复合属性&#x3D;&#x3D;（composite&#x2F;component attribute）：共同描述一个性质的一组简单属性。  eg. 地址（可以分为省市县等等）、姓名（last name， first name）</p>\n<blockquote>\n<p>复合属性的处理：把复合属性拆分成多个属性，还是放在原来的表里</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<ul>\n<li><p>&#x3D;&#x3D;单值属性&#x3D;&#x3D;（single-valued attribute）：在一个实体实例中只有单独一个值</p>\n</li>\n<li><p>&#x3D;&#x3D;多值属性&#x3D;&#x3D;（multi-valued attribute）：在一个实体实例中可以取多个值的属性。eg.  电话、爱好等等</p>\n<blockquote>\n<p>多值属性的处理：用单独的表来处理</p>\n</blockquote>\n</li>\n<li><p>导出属性（derived attribute）：由相关的一个属性或一组属性的值导出，在同一个实体类型中该属性并不是必要的。  eg.  年龄（可以根据生日来计算）</p>\n<blockquote>\n<p>导出属性的处理：大部分情况下不保存，用的时候直接计算</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<ul>\n<li>候选关键字（candidate key）：能唯一标识每个实体实例的最小属性组</li>\n<li>主关键字（primary key）：实体类型中被选来唯一标识每个实体实例的候选关键字</li>\n<li>复合关键字（composite key）：包括两个或更多属性的候选关键字。eg.  SC表，学号和课程号构成复合关键字</li>\n</ul>\n<h3 id=\"联系类型\"><a href=\"#联系类型\" class=\"headerlink\" title=\"联系类型\"></a>联系类型</h3><ul>\n<li><p>联系类型（relationship type）：实体类型间的一组有意义的关联</p>\n</li>\n<li><p>联系实例（relationship occurrence）：一个可唯一标识的关联，涉及参与该联系的每个实体类型的一个实例</p>\n<blockquote>\n<p>联系类型和联系实例是型和值的关系</p>\n</blockquote>\n</li>\n<li><p>联系类型的度（degree of a relationship type）：参与联系的实体类型的个数。度为2的联系称为二元联系；度为3的称为三元联系；度为3或更高的联系，称为多元联系</p>\n<blockquote>\n<p>例如：学生选课，学生和课程，二元联系</p>\n</blockquote>\n</li>\n<li><p>递归联系（recursive relationship）：是这样一种联系类型，其同一个实体类型参与的次数大于1，并且每次参与具有不同角色.递归联系也称为一元联系。</p>\n<blockquote>\n<p>例如：学生选班干</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"简单E-R图\"><a href=\"#简单E-R图\" class=\"headerlink\" title=\"简单E-R图\"></a>简单E-R图</h3><h4 id=\"（1）联系类型的图形化表示：\"><a href=\"#（1）联系类型的图形化表示：\" class=\"headerlink\" title=\"（1）联系类型的图形化表示：\"></a>（1）联系类型的图形化表示：</h4><ul>\n<li><p>一元联系（递归联系）：</p>\n  <img data-src=\"https://s2.loli.net/2022/04/13/KusxJgkM6jNB3vY.png\" alt=\"image-20220413183610740\" style=\"zoom:67%;\" />\n</li>\n<li><p>二元联系：每个联系类型都表现为连接相关联实体类型的一条线，在线上标明该联系的名字,通常用一个动词或动词短语。箭头表示联系的方向。</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/04/13/lzYsi72DWPxHgoj.png\" alt=\"image-20220413182921721\"></p>\n</li>\n<li><p>三元联系：用菱形表示度大于2的联系，联系名放在菱形内部</p>\n  <img data-src=\"https://s2.loli.net/2022/04/13/DcAMZWVklYqTdU1.png\" alt=\"image-20220413183338386\" style=\"zoom:67%;\" />\n\n<blockquote>\n<p>四元联系与三元联系类似</p>\n</blockquote>\n</li>\n<li><p>两个实体之间存在多于一种联系时课使用角色名</p>\n  <img data-src=\"https://s2.loli.net/2022/04/13/AEn5ze4rsiGZUQ6.png\" alt=\"image-20220413183823327\" style=\"zoom:67%;\" /></li>\n</ul>\n<h4 id=\"（2）属性的图形化表示\"><a href=\"#（2）属性的图形化表示\" class=\"headerlink\" title=\"（2）属性的图形化表示\"></a>（2）属性的图形化表示</h4><ul>\n<li><p>&#x3D;&#x3D;实体的属性：&#x3D;&#x3D;在一个实体类型中显示其属性时，将实体类型的矩阵分为两个部分：上部分是实体的名字，下部分列出实体属性的名字。</p>\n<ul>\n<li>对于主关键字属性,第一个列出，并在其名字后面标记{PK}，</li>\n<li>在部分主关键字属性的名字后标记{PPK}</li>\n<li>对于候选关键字属性的名字后面标记{AK}</li>\n<li>简单属性和单值属性没有必要标记</li>\n<li>对于复合属性，在其名下以右缩进形式列出子属性名</li>\n<li>对于多值属性，在属性名后面注明它的取值范围</li>\n<li>对于导出属性，在属性名前加上前缀“&#x2F;</li>\n</ul>\n<p>  例子：</p>\n  <img data-src=\"https://s2.loli.net/2022/04/13/OvTZMpQCNzlRu9t.png\" alt=\"image-20220413184441872\" style=\"zoom:67%;\" />\n</li>\n<li><p>&#x3D;&#x3D;联系的属性&#x3D;&#x3D;：采用与实体类型相同的符号，但用&#x3D;&#x3D;虚线&#x3D;&#x3D;将表示联系属性的矩形与联系类型名连接起来</p>\n  <img data-src=\"https://s2.loli.net/2022/04/13/8plaIBwcOfkeZ1T.png\" alt=\"image-20220413184614803\" style=\"zoom:67%;\" /></li>\n</ul>\n<h3 id=\"弱实体类型和强实体类型\"><a href=\"#弱实体类型和强实体类型\" class=\"headerlink\" title=\"弱实体类型和强实体类型\"></a>弱实体类型和强实体类型</h3><ul>\n<li><p>&#x3D;&#x3D;强实体类型&#x3D;&#x3D;(Strong entity type) （父实体，属主实体(owner entity)，支配实体）：该实体类型的存在不依赖于其他的实体类型</p>\n</li>\n<li><p>&#x3D;&#x3D;弱实体类型&#x3D;&#x3D;(Weak entity type) （子实体，依赖实体，从属实体）：该实体类型的存在依赖于其他实体类型的存在</p>\n<blockquote>\n<p>弱实体类型的一个特征是，仅使用该实体类型的属性无法唯一标识每个实体实例。 eg. 两个学生是同班同学，学习经历相同。</p>\n</blockquote>\n<blockquote>\n<p>例子：<img data-src=\"https://s2.loli.net/2022/04/13/KwhYO63iC9AkLG4.png\" alt=\"image-20220413185233053\" style=\"zoom:67%;\" /></p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"2、-结构化约束\"><a href=\"#2、-结构化约束\" class=\"headerlink\" title=\"2、 结构化约束\"></a>2、 结构化约束</h2><ul>\n<li><p>概念：ER模型的结构化约束是指参与一个联系的实体类型上存在的约束</p>\n</li>\n<li><p>&#x3D;&#x3D;多样性&#x3D;&#x3D;：联系上的主要约束称为多样性，包括基数约束和参与约束。指的是在一个特定的联系中，一个参与实体类型的某个实例，可能与另一个参与实体类型发生关联的实例的数目（或范围）</p>\n<blockquote>\n<ul>\n<li><p>基数约束(cardinality constraints)： 描述一个特定联系类型中的一个实体&#x3D;&#x3D;最多&#x3D;&#x3D;可参与联系的实例数目(&#x3D;&#x3D;最大基数&#x3D;&#x3D;) </p>\n</li>\n<li><p>参与约束（participation constraints）：说明是否所有的实体实例都参与了联系(&#x3D;&#x3D;最小基数&#x3D;&#x3D;) </p>\n<ul>\n<li>强制参与（mandatory participation）：一个实体类型的所有实例都参与联系。x为1</li>\n<li>可选参与（optional participation ）：一个实体类型的部分实例参与约束。x为0</li>\n</ul>\n</li>\n<li><p>&#x3D;&#x3D;看约束：固定n - 1方，看另一方&#x3D;&#x3D;</p>\n  <img data-src=\"https://s2.loli.net/2022/04/13/1wB9IzoaCvGTmSj.png\" alt=\"image-20220413191540919\" style=\"zoom:67%;\" />\n\n<p>  某个分支机构的某个职员可以拥有0个或者多个客户</p>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>范围的表示：范围表示为&#x3D;&#x3D;x..y&#x3D;&#x3D;,其中x为最小参与数目（参与约束）(用0表示0,用1表示大于0),y为最大参与数目（基数约束）(用1表示1,用*或N表示大于1)</p>\n</li>\n<li><p>例子：</p>\n<ul>\n<li><p>一对一联系的多样性</p>\n  <img data-src=\"https://s2.loli.net/2022/04/13/Pi8boG26YmrvpZf.png\" alt=\"image-20220413190419081\" style=\"zoom:67%;\" />\n</li>\n<li><p>一对多联系的多样性</p>\n  <img data-src=\"https://s2.loli.net/2022/04/13/42ZoVecLI9K8TjC.png\" alt=\"image-20220413190430930\" style=\"zoom:67%;\" />\n</li>\n<li><p>多对多联系的多样性</p>\n  <img data-src=\"https://s2.loli.net/2022/04/13/X3becj8krD4TuYo.png\" alt=\"image-20220413190445972\" style=\"zoom:67%;\" />\n\n  <img data-src=\"https://s2.loli.net/2022/04/13/lBaznOJ2CUfdPcR.png\" alt=\"image-20220413191346428\" style=\"zoom:80%;\" /></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3、ER模型的问题\"><a href=\"#3、ER模型的问题\" class=\"headerlink\" title=\"3、ER模型的问题\"></a>3、ER模型的问题</h2><h3 id=\"连接陷阱\"><a href=\"#连接陷阱\" class=\"headerlink\" title=\"连接陷阱\"></a>连接陷阱</h3><p>由于对特定联系含义的错误理解而引起的问题。</p>\n<h3 id=\"扇形陷阱-fan-trap-：\"><a href=\"#扇形陷阱-fan-trap-：\" class=\"headerlink\" title=\"扇形陷阱(fan trap)：\"></a>扇形陷阱(fan trap)：</h3><p>当用模型来表示实体间的联系时，某些特殊实体实例间的道路是不明确的</p>\n<img data-src=\"https://s2.loli.net/2022/04/13/DPqiV6CSAW3krht.png\" alt=\"image-20220413192231143\" style=\"zoom:67%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/04/13/zHBIxnosYPqXZt2.png\" alt=\"image-20220413192245233\" style=\"zoom:67%;\" />\n\n<h3 id=\"深坑陷阱-chasm-trap-：\"><a href=\"#深坑陷阱-chasm-trap-：\" class=\"headerlink\" title=\"深坑陷阱(chasm trap)：\"></a>深坑陷阱(chasm trap)：</h3><p>当一个模型暗示某些实体类型之间存在联系，而这些实体实例间却不存在相应的道路</p>\n<img data-src=\"https://s2.loli.net/2022/04/13/DZjGTJOHfSF2VuY.png\" alt=\"image-20220413192355668\" style=\"zoom:67%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/04/13/vkUdu8rwRaBSiYf.png\" alt=\"image-20220413192412310\" style=\"zoom:67%;\" />\n\n<h2 id=\"4、-增强的ER模型（EER）\"><a href=\"#4、-增强的ER模型（EER）\" class=\"headerlink\" title=\"4、  增强的ER模型（EER）\"></a>4、  增强的ER模型（EER）</h2><ul>\n<li><p>ER模型的局限性：冗余</p>\n</li>\n<li><p>&#x3D;&#x3D;超类：&#x3D;&#x3D;其实例构成一个或多个独立子集且各独立子集在数据模型中要显示的实体类型。含有独立子类的实体类型称为超类。例如staff</p>\n</li>\n<li><p>&#x3D;&#x3D;子类：&#x3D;&#x3D;某实体类型的一个独立实例集合，并需要在数据模型中单独表示。</p>\n<blockquote>\n<p>eg.  Staff实体类型的实体成员可分为Manager, SalesPersonnel和Secretary,</p>\n<p>Staff可以看成超类，Manager, SalesPersonnel和Secretary应看作子类</p>\n</blockquote>\n</li>\n<li><p>超类和子类的联系：</p>\n<ul>\n<li>子类中的一个实体也是超类的一个实体</li>\n<li>超类&#x2F;子类联系是一对一的</li>\n<li>有些超类的子类可能重叠（<strong>不相交约束</strong>：相交的、不相交的）。例如，一名职员可以既是经理，又是销售人员</li>\n<li>并不是超类中的每个实体都必须是子类中的实体（<strong>参与约束</strong>：强制的、可选的）。例如，有些职员没有明显的一类工作角色，比如说既不是经理，也不是销售人员</li>\n</ul>\n</li>\n<li><p>将超类和子类的概念引入ER模型的主要原因：避免对相似的概念进行重复的描述</p>\n</li>\n<li><p>属性继承：子类除了拥有其所在子类特有的属性外，同时还具有（继承）超类的所有属性</p>\n</li>\n<li><p>共享子类：一个子类有不止一个超类时，称这个子类为共享子类</p>\n<p>  &#x3D;&#x3D;在UML图中，三角形的尖指向超类&#x3D;&#x3D;</p>\n  <img data-src=\"https://s2.loli.net/2022/04/13/JjODx9q1p4Ngo2s.png\" alt=\"image-20220413195615579\" style=\"zoom:67%;\" />\n</li>\n<li><p>多重继承：超类的属性都被共享子类继承，同时共享子类还可以有自己的附加属性，这种继承称为多重继承</p>\n</li>\n<li><p><strong>类型层次（自上而下）</strong>：子类也可以有自己的子类。这样构成的子类层次称为类型层次</p>\n</li>\n<li><p><strong>概化层次（自下而上）</strong>：多个有公共属性的实体可以概化为一个更高层次的超类实体（supertype entity）,或者相反，一个一般化实体可以分解成低层次的子类实体（subtype entity）</p>\n</li>\n</ul>\n<h2 id=\"5、-特殊化、概化\"><a href=\"#5、-特殊化、概化\" class=\"headerlink\" title=\"5、  特殊化、概化\"></a>5、  特殊化、概化</h2><ul>\n<li><p>特殊化过程(specialization process)：&#x3D;&#x3D;自上而下&#x3D;&#x3D; 。通过标识实体成员间的差异特征将这些成员间的差异最大化的过程</p>\n</li>\n<li><p>概化过程(generalization process)：&#x3D;&#x3D;自下而上&#x3D;&#x3D;。通过标识实体成员间的共同特征将这些成员间的差异最小化的过程</p>\n  <img data-src=\"https://s2.loli.net/2022/04/19/YXJewcjOgv5nBGT.png\" alt=\"image-20220419102322804\" style=\"zoom:67%;\" />\n</li>\n<li><p>特殊化&#x2F;概化约束：</p>\n<ul>\n<li><p>&#x3D;&#x3D;参与约束&#x3D;&#x3D;：确定超类中的每个成员是否都必须是子类中的成员。</p>\n<ul>\n<li>强制的参与约束（Mandatory）：超类中的每个成员都必须是子类中的成员</li>\n<li>可选的参与约束（Optional）：超类中的成员并不一定也是子类中的成员</li>\n</ul>\n</li>\n<li><p>&#x3D;&#x3D;不相交约束&#x3D;&#x3D;：描述子类成员间的联系。子类成员之间是相交（AND）的或者不相交（OR）的</p>\n<blockquote>\n<p>&#x3D;&#x3D;参与约束和不相交约束是独立的，因此可以组合成4种约束&#x3D;&#x3D;</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<img data-src=\"https://s2.loli.net/2022/04/19/zRnwamC5L82ekQI.png\" alt=\"image-20220419102930019\" style=\"zoom:67%;\" />\n\n<h2 id=\"6、-聚合与组合\"><a href=\"#6、-聚合与组合\" class=\"headerlink\" title=\"6、  聚合与组合\"></a>6、  聚合与组合</h2><ul>\n<li><p>&#x3D;&#x3D;聚合(aggregation）&#x3D;&#x3D;：表示实体类型之间的“具有”(has-a)和“属于”**(is-part-of)**联系，这些实体中有一个表示整体，其他的表示部分。如汽车和轮子</p>\n<blockquote>\n <img data-src=\"https://s2.loli.net/2022/04/19/ljstSaZ9Vmc1u3B.png\" alt=\"image-20220419103229323\" style=\"zoom: 67%;\" />\n</blockquote>\n</li>\n<li><p>&#x3D;&#x3D;组合（composition）：&#x3D;&#x3D;一种特殊形式的聚合，即整体对部分存在强拥有权，且&#x3D;&#x3D;两者具有一致的生存期&#x3D;&#x3D;</p>\n<blockquote>\n<p>例如：汽车和轮子，轮子是可以单独存在的；而房子和房间，如果房子没了。那房间也不存在了</p>\n</blockquote>\n  <img data-src=\"https://s2.loli.net/2022/04/13/o2piID5CdsX84M9.png\" alt=\"image-20220413202610135\" style=\"zoom:67%;\" />\n</li>\n<li><p>&#x3D;&#x3D;概括&#x3D;&#x3D;：定义了类型之间的一种子集联系，它抽象了类型之间的<strong>is subset of</strong>的语义。如学生和本科生</p>\n<p>  例子：</p>\n  <img data-src=\"https://s2.loli.net/2022/04/14/K2ZBMf5Ln4SePD3.png\" alt=\"image-20220414123506992\" style=\"zoom:67%;\" /></li>\n</ul>\n<h2 id=\"7、-局部视图设计及合并ER图\"><a href=\"#7、-局部视图设计及合并ER图\" class=\"headerlink\" title=\"7、  局部视图设计及合并ER图\"></a>7、  局部视图设计及合并ER图</h2><ul>\n<li><p>根据局部结构设计分ER图，即局部ER图</p>\n</li>\n<li><p>合并ER图</p>\n<ul>\n<li><p>方法：二元合并法或者多元合并法</p>\n</li>\n<li><p>冲突处理：</p>\n<ul>\n<li><p>属性冲突：包括属性域冲突和属性取值单位冲突</p>\n<p>  解决方法：取尽可能多的包含较多局部ER图要求的数据类型、值域或取值单位，并可考虑今后系统维护的工作量作为取舍</p>\n</li>\n<li><p>命名冲突：包括同名异义和异名同义。解决方法：重新命名</p>\n</li>\n<li><p>结构冲突：</p>\n<ul>\n<li>同一对象在不同应用中具有不同的抽象（解决方法：统一为实体或属性）</li>\n<li>同一对象在不同局部ER图中所包含的属性不完全相同，或属性的排列次序不完全相同（解决方法：使该实体的属性取各局部ER图中属性的并集，再适当调整属性的次序）</li>\n<li>实体之间的联系在不同局部ER图中呈现不同的类型（解决方法：根据应用的语义对实体联系的类型进行综合或调整）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>消除数据冗余</p>\n<ul>\n<li><p>用分析法消除冗余数据（😢其实就是观察法），例如实发工资可以由其他列推算得到，则可以删去实发工资</p>\n</li>\n<li><p>用规范化消除冗余联系，可以通过求最小依赖集来实现</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/04/14/wFm5a2JVHkYrSqd.png\" alt=\"image-20220414142449087\"></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>例子:</p>\n<p><img data-src=\"https://s2.loli.net/2022/04/14/WxGbp3khOcZijf7.png\" alt=\"image-20220414124835366\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/04/14/CndNF5YtxWcRaJO.png\" alt=\"image-20220414124850694\"></p>\n<h2 id=\"x3D-x3D-8、-将ER模型转换为关系模型-x3D-x3D\"><a href=\"#x3D-x3D-8、-将ER模型转换为关系模型-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;8、  将ER模型转换为关系模型&#x3D;&#x3D;\"></a>&#x3D;&#x3D;8、  将ER模型转换为关系模型&#x3D;&#x3D;</h2><ul>\n<li><p>ER结构与关系结构的对应关系</p>\n  <img data-src=\"https://s2.loli.net/2022/04/13/XP6twnef4rG2bgH.png\" alt=\"image-20220413203447160\" style=\"zoom:67%;\" />\n</li>\n<li><p>&#x3D;&#x3D;将ER模型转换为关系模型的9步算法&#x3D;&#x3D;</p>\n  <img data-src=\"https://s2.loli.net/2022/04/13/zPa9jNSdThUeH1B.png\" alt=\"image-20220413203911206\" style=\"zoom:67%;\" /></li>\n</ul>\n<h4 id=\"（1）强实体的转换：直接转换成一张表\"><a href=\"#（1）强实体的转换：直接转换成一张表\" class=\"headerlink\" title=\"（1）强实体的转换：直接转换成一张表\"></a>（1）强实体的转换：直接转换成一张表</h4><img data-src=\"https://s2.loli.net/2022/04/13/Zps7gCADun8rBGI.png\" alt=\"image-20220413204026593\"  />\n\n<h4 id=\"（2）仅参与一个1-1联系的弱实体的转换\"><a href=\"#（2）仅参与一个1-1联系的弱实体的转换\" class=\"headerlink\" title=\"（2）仅参与一个1:1联系的弱实体的转换\"></a>（2）仅参与一个1:1联系的弱实体的转换</h4><p><img data-src=\"https://s2.loli.net/2022/04/13/o4OXdy1nNVpeR9b.png\" alt=\"image-20220413204240217\"></p>\n<h4 id=\"（3）参与1-N或M-N联系的弱实体的转换\"><a href=\"#（3）参与1-N或M-N联系的弱实体的转换\" class=\"headerlink\" title=\"（3）参与1:N或M:N联系的弱实体的转换**\"></a>（3）参与1:N或M:N联系的弱实体的转换**</h4><p>将参与一个1:N或M:N或多个联系的弱实体W，转换为一张表T，表中包括弱实体的所有的单值属性或复合属性的组成属性。</p>\n<ul>\n<li><p>若强实体S与弱实体W之间是&#x3D;&#x3D;1:N联系，则T的主键 &#x3D; W的主关键字+S的主关键字&#x3D;&#x3D;</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/04/13/xJ3vpA51YfnkU9P.png\" alt=\"image-20220413205556256\"></p>\n</li>\n<li><p>若强实体S与弱实体W之间是&#x3D;&#x3D;M:N联系，则T的主键&#x3D;一个新创建的具有唯一值的属性X&#x3D;&#x3D;，而实体间的联系在step six处理</p>\n<blockquote>\n<p>如果采用T的主键 &#x3D; W的主关键字+S的主关键字，会造成冗余</p>\n</blockquote>\n  <img data-src=\"https://s2.loli.net/2022/04/13/sBSwXZjvz4D6YlP.png\" alt=\"image-20220413231701028\" style=\"zoom:67%;\" />\n\n<blockquote>\n<p>父子关系等等可以作为联系的属性</p>\n<img data-src=\"https://s2.loli.net/2022/04/19/2SrvHy1h3oebWnA.png\" alt=\"image-20220419103909683\" style=\"zoom: 33%;\" /></blockquote>\n</li>\n</ul>\n<h4 id=\"（4）-1-1-的联系的转换\"><a href=\"#（4）-1-1-的联系的转换\" class=\"headerlink\" title=\"（4） 1:1 的联系的转换\"></a>（4） 1:1 的联系的转换</h4><ul>\n<li><p>两方都强制参与：将两个实体组合为一个关系T，然后将联系属性加入到关系T中</p>\n  <img data-src=\"https://s2.loli.net/2022/04/13/nWRxKhXNc5mlqdi.png\" alt=\"image-20220413231857172\" style=\"zoom:67%;\" />\n</li>\n<li><p>一方强制参与：将可选方实体的主关键字作为强制方实体的关系的外部关键字，然后将联系属性加入到强制实体的关系中</p>\n<blockquote>\n<p>如果放到可选参与方，会造成空间浪费，因为会有空的；强制参与方就不会有空的</p>\n</blockquote>\n  <img data-src=\"https://s2.loli.net/2022/04/13/lgyLBaHn9iD2RYU.png\" alt=\"image-20220413232130399\" style=\"zoom:67%;\" />\n</li>\n<li><p>两方都可选参与：若没有进一步的信息，可选任一可选实体当作强制实体，使用方法（2）转换</p>\n  <img data-src=\"https://s2.loli.net/2022/04/13/ThBVvoKfijR7cy9.png\" alt=\"image-20220413232412596\" style=\"zoom:67%;\" /></li>\n</ul>\n<h4 id=\"（5）1-N-的联系的转换\"><a href=\"#（5）1-N-的联系的转换\" class=\"headerlink\" title=\"（5）1:N 的联系的转换\"></a>（5）1:N 的联系的转换</h4><p>对于任意一个1:N联系，一方实体的主关键字作为多方实体关系的外部关键字，该联系的任何属性也安排在多方</p>\n<blockquote>\n<p>如果放到一方实体的话，则会造成多值</p>\n</blockquote>\n<img data-src=\"https://s2.loli.net/2022/04/13/k8dJuPe6AByfCE2.png\" alt=\"image-20220413232534635\" style=\"zoom:67%;\" />\n\n<h4 id=\"（6）-N元联系（涉及N个实体）（包括N-M-的联系）的转换\"><a href=\"#（6）-N元联系（涉及N个实体）（包括N-M-的联系）的转换\" class=\"headerlink\" title=\"（6） N元联系（涉及N个实体）（包括N:M 的联系）的转换\"></a>（6） N元联系（涉及N个实体）（包括N:M 的联系）的转换</h4><p>对于任意一个M:N联系或N元联系，&#x3D;&#x3D;生成一个表示该联系的关系R（注意外键），&#x3D;&#x3D;关系R包含该联系的所有属性以及作为R的外部关键字出现的所有属主实体的主关键字</p>\n<img data-src=\"https://s2.loli.net/2022/04/13/PgsECqprb1HOG3Q.png\" alt=\"image-20220413232804774\" style=\"zoom:67%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/04/13/dxnKtID86QFU7T5.png\" alt=\"image-20220413232956311\" style=\"zoom:67%;\" />\n\n<blockquote>\n<p>同一实体集的实体间的联系，即自联系，也可按上述1:1， 1：n， m：n的3种情况分别处理</p>\n</blockquote>\n<h4 id=\"（7）-复合属性、多值属性和派生属性的处理\"><a href=\"#（7）-复合属性、多值属性和派生属性的处理\" class=\"headerlink\" title=\"（7） 复合属性、多值属性和派生属性的处理\"></a>（7） 复合属性、多值属性和派生属性的处理</h4><ul>\n<li>&#x3D;&#x3D;复合属性&#x3D;&#x3D;：为每个子属性创建一个单独的属性而将复合属性去掉</li>\n<li>&#x3D;&#x3D;多值属性&#x3D;&#x3D;：将多值属性生成为一个表示该属性的关系，<strong>并把该属性的属主实体的主关键字作为该关系的外部关键字</strong></li>\n<li>&#x3D;&#x3D;派生属性&#x3D;&#x3D;：从关系模式中去掉</li>\n</ul>\n<img data-src=\"https://s2.loli.net/2022/04/13/j9uenoirmIlq4Mc.png\" alt=\"image-20220413233231580\" style=\"zoom:67%;\" />\n\n<h4 id=\"（8）-子类不相交的超类-x2F-子类联系的转换\"><a href=\"#（8）-子类不相交的超类-x2F-子类联系的转换\" class=\"headerlink\" title=\"（8） 子类不相交的超类&#x2F;子类联系的转换\"></a>（8） 子类不相交的超类&#x2F;子类联系的转换</h4><p>对于每个具有强制参与且不相交子类的超类&#x2F;子类联系– {Mandatory, Or}</p>\n<ul>\n<li><p>对于每个子类Si，创建一个新表Ti; </p>\n</li>\n<li><p>将超类的简单属性和复合属性的简单组合属性放入Ti的属性集中；</p>\n</li>\n<li><p>将Si的简单属性和复合属性的简单组合属性放入Ti的属性集中；</p>\n</li>\n<li><p>标识主键和候选键。</p>\n<p>  &#x3D;&#x3D;超类不创建表（因为是强制参与且不相交，超类中的某个成员一定属于且仅属于某一个子类），各组合的超类&#x2F;子类一个表&#x3D;&#x3D;</p>\n  <img data-src=\"https://s2.loli.net/2022/04/13/1DFPGLpnarTCXv9.png\" alt=\"image-20220413233638204\" style=\"zoom:67%;\" /></li>\n</ul>\n<h4 id=\"（9）-子类相交的超类-x2F-子类联系的转换\"><a href=\"#（9）-子类相交的超类-x2F-子类联系的转换\" class=\"headerlink\" title=\"（9） 子类相交的超类&#x2F;子类联系的转换\"></a>（9） 子类相交的超类&#x2F;子类联系的转换</h4><p>对于每个具有相交子类 或 可选参与且不相交子类的超类&#x2F;子类联系（即除了{Mandatory, Or}之外的三种组合约束）</p>\n<ul>\n<li><p>对于超类，创建一个新表O; </p>\n</li>\n<li><p>将超类的简单属性和复合属性的简单组合属性放入O的属性集中；</p>\n</li>\n<li><p>标识O的主键和候选键；</p>\n</li>\n<li><p>对于每个子类Si，创建一个新表Ti; </p>\n</li>\n<li><p>将Si的简单属性和复合属性的简单组合属性放入Ti的属性集中；</p>\n</li>\n<li><p><strong>将O的主键放入Ti的属性集中，作为Ti的外键</strong></p>\n<p>  &#x3D;&#x3D;超类创建一个表，各子类一个表&#x3D;&#x3D;</p>\n</li>\n</ul>\n<img data-src=\"https://s2.loli.net/2022/04/13/vscW9OjZQRDkaIP.png\" alt=\"image-20220413234448229\" style=\"zoom:67%;\" />\n","site":{"data":{"post-body-end":"<div>\n    \n</div>\n","styles":"body {\n  background: url(\"/images/background.png\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 100% 100%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.8);\n}\n.popup {\n  opacity: 0.8;\n}\n.post-block {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.comments {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.post {\n  margin-top: 60px;\n  padding: 20px;\n  margin-bottom: 60px;\n  -webkit-box-shadow: 0 0 0px #788072;\n  -moz-box-shadow: 0 0 0px rgba(202,203,204,0.5);\n}\n.post-button .btn {\n  color: #555 !important;\n  background-color: #fff;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  border: none !important;\n  transition-property: unset;\n  padding: 0px 15px;\n}\n.post-button .btn:hover {\n  color: #fff !important;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  background-image: linear-gradient(90deg, #a166ab 0%, #ef4e7b 25%, #f37055 50%, #ef4e7b 75%, #a166ab 100%);\n}\n","variables":""}},"length":6306,"excerpt":"","more":"<h1 id=\"五、数据库设计\"><a href=\"#五、数据库设计\" class=\"headerlink\" title=\"五、数据库设计\"></a>五、数据库设计</h1><h2 id=\"1、ER图中的基本概念\"><a href=\"#1、ER图中的基本概念\" class=\"headerlink\" title=\"1、ER图中的基本概念\"></a>1、ER图中的基本概念</h2><h3 id=\"现实世界、ER模型、关系模型中的概念对应\"><a href=\"#现实世界、ER模型、关系模型中的概念对应\" class=\"headerlink\" title=\"现实世界、ER模型、关系模型中的概念对应\"></a>现实世界、ER模型、关系模型中的概念对应</h3><img data-src=\"https://s2.loli.net/2022/04/13/f43azBqyCJXxniM.png\" alt=\"image-20220413170050668\" style=\"zoom:67%;\" />\n\n<h3 id=\"实体类型和实体实例\"><a href=\"#实体类型和实体实例\" class=\"headerlink\" title=\"实体类型和实体实例\"></a>实体类型和实体实例</h3><ul>\n<li><p>实体类型：一个属性集</p>\n<blockquote>\n<p>实体类型可以是物理上的，如staff；也可以是概念上的，如work experience</p>\n</blockquote>\n</li>\n<li><p>实体实例：对应于实体类型下的一个取值，实体实例是可区别的</p>\n<blockquote>\n<p>例子：</p>\n<p>学生是一个实体类型，可以用（学号，姓名，性别，年龄，所属系）这个属性集来描述学生，每一个学生，如学生i，是学生实体的一个实体实例；</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><ul>\n<li><p>属性（attribute）：实体类型&#x3D;&#x3D;或联系类型&#x3D;&#x3D;所具有的某一特性</p>\n</li>\n<li><p>属性域（attribute domain）：单个属性或多个属性所允许的值的集合</p>\n</li>\n<li><p>&#x3D;&#x3D;简单属性&#x3D;&#x3D;（simple attribute）：由单个部分组成的属性，可独立地存在</p>\n</li>\n<li><p>&#x3D;&#x3D;复合属性&#x3D;&#x3D;（composite&#x2F;component attribute）：共同描述一个性质的一组简单属性。  eg. 地址（可以分为省市县等等）、姓名（last name， first name）</p>\n<blockquote>\n<p>复合属性的处理：把复合属性拆分成多个属性，还是放在原来的表里</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<ul>\n<li><p>&#x3D;&#x3D;单值属性&#x3D;&#x3D;（single-valued attribute）：在一个实体实例中只有单独一个值</p>\n</li>\n<li><p>&#x3D;&#x3D;多值属性&#x3D;&#x3D;（multi-valued attribute）：在一个实体实例中可以取多个值的属性。eg.  电话、爱好等等</p>\n<blockquote>\n<p>多值属性的处理：用单独的表来处理</p>\n</blockquote>\n</li>\n<li><p>导出属性（derived attribute）：由相关的一个属性或一组属性的值导出，在同一个实体类型中该属性并不是必要的。  eg.  年龄（可以根据生日来计算）</p>\n<blockquote>\n<p>导出属性的处理：大部分情况下不保存，用的时候直接计算</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<ul>\n<li>候选关键字（candidate key）：能唯一标识每个实体实例的最小属性组</li>\n<li>主关键字（primary key）：实体类型中被选来唯一标识每个实体实例的候选关键字</li>\n<li>复合关键字（composite key）：包括两个或更多属性的候选关键字。eg.  SC表，学号和课程号构成复合关键字</li>\n</ul>\n<h3 id=\"联系类型\"><a href=\"#联系类型\" class=\"headerlink\" title=\"联系类型\"></a>联系类型</h3><ul>\n<li><p>联系类型（relationship type）：实体类型间的一组有意义的关联</p>\n</li>\n<li><p>联系实例（relationship occurrence）：一个可唯一标识的关联，涉及参与该联系的每个实体类型的一个实例</p>\n<blockquote>\n<p>联系类型和联系实例是型和值的关系</p>\n</blockquote>\n</li>\n<li><p>联系类型的度（degree of a relationship type）：参与联系的实体类型的个数。度为2的联系称为二元联系；度为3的称为三元联系；度为3或更高的联系，称为多元联系</p>\n<blockquote>\n<p>例如：学生选课，学生和课程，二元联系</p>\n</blockquote>\n</li>\n<li><p>递归联系（recursive relationship）：是这样一种联系类型，其同一个实体类型参与的次数大于1，并且每次参与具有不同角色.递归联系也称为一元联系。</p>\n<blockquote>\n<p>例如：学生选班干</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"简单E-R图\"><a href=\"#简单E-R图\" class=\"headerlink\" title=\"简单E-R图\"></a>简单E-R图</h3><h4 id=\"（1）联系类型的图形化表示：\"><a href=\"#（1）联系类型的图形化表示：\" class=\"headerlink\" title=\"（1）联系类型的图形化表示：\"></a>（1）联系类型的图形化表示：</h4><ul>\n<li><p>一元联系（递归联系）：</p>\n  <img data-src=\"https://s2.loli.net/2022/04/13/KusxJgkM6jNB3vY.png\" alt=\"image-20220413183610740\" style=\"zoom:67%;\" />\n</li>\n<li><p>二元联系：每个联系类型都表现为连接相关联实体类型的一条线，在线上标明该联系的名字,通常用一个动词或动词短语。箭头表示联系的方向。</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/04/13/lzYsi72DWPxHgoj.png\" alt=\"image-20220413182921721\"></p>\n</li>\n<li><p>三元联系：用菱形表示度大于2的联系，联系名放在菱形内部</p>\n  <img data-src=\"https://s2.loli.net/2022/04/13/DcAMZWVklYqTdU1.png\" alt=\"image-20220413183338386\" style=\"zoom:67%;\" />\n\n<blockquote>\n<p>四元联系与三元联系类似</p>\n</blockquote>\n</li>\n<li><p>两个实体之间存在多于一种联系时课使用角色名</p>\n  <img data-src=\"https://s2.loli.net/2022/04/13/AEn5ze4rsiGZUQ6.png\" alt=\"image-20220413183823327\" style=\"zoom:67%;\" /></li>\n</ul>\n<h4 id=\"（2）属性的图形化表示\"><a href=\"#（2）属性的图形化表示\" class=\"headerlink\" title=\"（2）属性的图形化表示\"></a>（2）属性的图形化表示</h4><ul>\n<li><p>&#x3D;&#x3D;实体的属性：&#x3D;&#x3D;在一个实体类型中显示其属性时，将实体类型的矩阵分为两个部分：上部分是实体的名字，下部分列出实体属性的名字。</p>\n<ul>\n<li>对于主关键字属性,第一个列出，并在其名字后面标记{PK}，</li>\n<li>在部分主关键字属性的名字后标记{PPK}</li>\n<li>对于候选关键字属性的名字后面标记{AK}</li>\n<li>简单属性和单值属性没有必要标记</li>\n<li>对于复合属性，在其名下以右缩进形式列出子属性名</li>\n<li>对于多值属性，在属性名后面注明它的取值范围</li>\n<li>对于导出属性，在属性名前加上前缀“&#x2F;</li>\n</ul>\n<p>  例子：</p>\n  <img data-src=\"https://s2.loli.net/2022/04/13/OvTZMpQCNzlRu9t.png\" alt=\"image-20220413184441872\" style=\"zoom:67%;\" />\n</li>\n<li><p>&#x3D;&#x3D;联系的属性&#x3D;&#x3D;：采用与实体类型相同的符号，但用&#x3D;&#x3D;虚线&#x3D;&#x3D;将表示联系属性的矩形与联系类型名连接起来</p>\n  <img data-src=\"https://s2.loli.net/2022/04/13/8plaIBwcOfkeZ1T.png\" alt=\"image-20220413184614803\" style=\"zoom:67%;\" /></li>\n</ul>\n<h3 id=\"弱实体类型和强实体类型\"><a href=\"#弱实体类型和强实体类型\" class=\"headerlink\" title=\"弱实体类型和强实体类型\"></a>弱实体类型和强实体类型</h3><ul>\n<li><p>&#x3D;&#x3D;强实体类型&#x3D;&#x3D;(Strong entity type) （父实体，属主实体(owner entity)，支配实体）：该实体类型的存在不依赖于其他的实体类型</p>\n</li>\n<li><p>&#x3D;&#x3D;弱实体类型&#x3D;&#x3D;(Weak entity type) （子实体，依赖实体，从属实体）：该实体类型的存在依赖于其他实体类型的存在</p>\n<blockquote>\n<p>弱实体类型的一个特征是，仅使用该实体类型的属性无法唯一标识每个实体实例。 eg. 两个学生是同班同学，学习经历相同。</p>\n</blockquote>\n<blockquote>\n<p>例子：<img data-src=\"https://s2.loli.net/2022/04/13/KwhYO63iC9AkLG4.png\" alt=\"image-20220413185233053\" style=\"zoom:67%;\" /></p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"2、-结构化约束\"><a href=\"#2、-结构化约束\" class=\"headerlink\" title=\"2、 结构化约束\"></a>2、 结构化约束</h2><ul>\n<li><p>概念：ER模型的结构化约束是指参与一个联系的实体类型上存在的约束</p>\n</li>\n<li><p>&#x3D;&#x3D;多样性&#x3D;&#x3D;：联系上的主要约束称为多样性，包括基数约束和参与约束。指的是在一个特定的联系中，一个参与实体类型的某个实例，可能与另一个参与实体类型发生关联的实例的数目（或范围）</p>\n<blockquote>\n<ul>\n<li><p>基数约束(cardinality constraints)： 描述一个特定联系类型中的一个实体&#x3D;&#x3D;最多&#x3D;&#x3D;可参与联系的实例数目(&#x3D;&#x3D;最大基数&#x3D;&#x3D;) </p>\n</li>\n<li><p>参与约束（participation constraints）：说明是否所有的实体实例都参与了联系(&#x3D;&#x3D;最小基数&#x3D;&#x3D;) </p>\n<ul>\n<li>强制参与（mandatory participation）：一个实体类型的所有实例都参与联系。x为1</li>\n<li>可选参与（optional participation ）：一个实体类型的部分实例参与约束。x为0</li>\n</ul>\n</li>\n<li><p>&#x3D;&#x3D;看约束：固定n - 1方，看另一方&#x3D;&#x3D;</p>\n  <img data-src=\"https://s2.loli.net/2022/04/13/1wB9IzoaCvGTmSj.png\" alt=\"image-20220413191540919\" style=\"zoom:67%;\" />\n\n<p>  某个分支机构的某个职员可以拥有0个或者多个客户</p>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>范围的表示：范围表示为&#x3D;&#x3D;x..y&#x3D;&#x3D;,其中x为最小参与数目（参与约束）(用0表示0,用1表示大于0),y为最大参与数目（基数约束）(用1表示1,用*或N表示大于1)</p>\n</li>\n<li><p>例子：</p>\n<ul>\n<li><p>一对一联系的多样性</p>\n  <img data-src=\"https://s2.loli.net/2022/04/13/Pi8boG26YmrvpZf.png\" alt=\"image-20220413190419081\" style=\"zoom:67%;\" />\n</li>\n<li><p>一对多联系的多样性</p>\n  <img data-src=\"https://s2.loli.net/2022/04/13/42ZoVecLI9K8TjC.png\" alt=\"image-20220413190430930\" style=\"zoom:67%;\" />\n</li>\n<li><p>多对多联系的多样性</p>\n  <img data-src=\"https://s2.loli.net/2022/04/13/X3becj8krD4TuYo.png\" alt=\"image-20220413190445972\" style=\"zoom:67%;\" />\n\n  <img data-src=\"https://s2.loli.net/2022/04/13/lBaznOJ2CUfdPcR.png\" alt=\"image-20220413191346428\" style=\"zoom:80%;\" /></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3、ER模型的问题\"><a href=\"#3、ER模型的问题\" class=\"headerlink\" title=\"3、ER模型的问题\"></a>3、ER模型的问题</h2><h3 id=\"连接陷阱\"><a href=\"#连接陷阱\" class=\"headerlink\" title=\"连接陷阱\"></a>连接陷阱</h3><p>由于对特定联系含义的错误理解而引起的问题。</p>\n<h3 id=\"扇形陷阱-fan-trap-：\"><a href=\"#扇形陷阱-fan-trap-：\" class=\"headerlink\" title=\"扇形陷阱(fan trap)：\"></a>扇形陷阱(fan trap)：</h3><p>当用模型来表示实体间的联系时，某些特殊实体实例间的道路是不明确的</p>\n<img data-src=\"https://s2.loli.net/2022/04/13/DPqiV6CSAW3krht.png\" alt=\"image-20220413192231143\" style=\"zoom:67%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/04/13/zHBIxnosYPqXZt2.png\" alt=\"image-20220413192245233\" style=\"zoom:67%;\" />\n\n<h3 id=\"深坑陷阱-chasm-trap-：\"><a href=\"#深坑陷阱-chasm-trap-：\" class=\"headerlink\" title=\"深坑陷阱(chasm trap)：\"></a>深坑陷阱(chasm trap)：</h3><p>当一个模型暗示某些实体类型之间存在联系，而这些实体实例间却不存在相应的道路</p>\n<img data-src=\"https://s2.loli.net/2022/04/13/DZjGTJOHfSF2VuY.png\" alt=\"image-20220413192355668\" style=\"zoom:67%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/04/13/vkUdu8rwRaBSiYf.png\" alt=\"image-20220413192412310\" style=\"zoom:67%;\" />\n\n<h2 id=\"4、-增强的ER模型（EER）\"><a href=\"#4、-增强的ER模型（EER）\" class=\"headerlink\" title=\"4、  增强的ER模型（EER）\"></a>4、  增强的ER模型（EER）</h2><ul>\n<li><p>ER模型的局限性：冗余</p>\n</li>\n<li><p>&#x3D;&#x3D;超类：&#x3D;&#x3D;其实例构成一个或多个独立子集且各独立子集在数据模型中要显示的实体类型。含有独立子类的实体类型称为超类。例如staff</p>\n</li>\n<li><p>&#x3D;&#x3D;子类：&#x3D;&#x3D;某实体类型的一个独立实例集合，并需要在数据模型中单独表示。</p>\n<blockquote>\n<p>eg.  Staff实体类型的实体成员可分为Manager, SalesPersonnel和Secretary,</p>\n<p>Staff可以看成超类，Manager, SalesPersonnel和Secretary应看作子类</p>\n</blockquote>\n</li>\n<li><p>超类和子类的联系：</p>\n<ul>\n<li>子类中的一个实体也是超类的一个实体</li>\n<li>超类&#x2F;子类联系是一对一的</li>\n<li>有些超类的子类可能重叠（<strong>不相交约束</strong>：相交的、不相交的）。例如，一名职员可以既是经理，又是销售人员</li>\n<li>并不是超类中的每个实体都必须是子类中的实体（<strong>参与约束</strong>：强制的、可选的）。例如，有些职员没有明显的一类工作角色，比如说既不是经理，也不是销售人员</li>\n</ul>\n</li>\n<li><p>将超类和子类的概念引入ER模型的主要原因：避免对相似的概念进行重复的描述</p>\n</li>\n<li><p>属性继承：子类除了拥有其所在子类特有的属性外，同时还具有（继承）超类的所有属性</p>\n</li>\n<li><p>共享子类：一个子类有不止一个超类时，称这个子类为共享子类</p>\n<p>  &#x3D;&#x3D;在UML图中，三角形的尖指向超类&#x3D;&#x3D;</p>\n  <img data-src=\"https://s2.loli.net/2022/04/13/JjODx9q1p4Ngo2s.png\" alt=\"image-20220413195615579\" style=\"zoom:67%;\" />\n</li>\n<li><p>多重继承：超类的属性都被共享子类继承，同时共享子类还可以有自己的附加属性，这种继承称为多重继承</p>\n</li>\n<li><p><strong>类型层次（自上而下）</strong>：子类也可以有自己的子类。这样构成的子类层次称为类型层次</p>\n</li>\n<li><p><strong>概化层次（自下而上）</strong>：多个有公共属性的实体可以概化为一个更高层次的超类实体（supertype entity）,或者相反，一个一般化实体可以分解成低层次的子类实体（subtype entity）</p>\n</li>\n</ul>\n<h2 id=\"5、-特殊化、概化\"><a href=\"#5、-特殊化、概化\" class=\"headerlink\" title=\"5、  特殊化、概化\"></a>5、  特殊化、概化</h2><ul>\n<li><p>特殊化过程(specialization process)：&#x3D;&#x3D;自上而下&#x3D;&#x3D; 。通过标识实体成员间的差异特征将这些成员间的差异最大化的过程</p>\n</li>\n<li><p>概化过程(generalization process)：&#x3D;&#x3D;自下而上&#x3D;&#x3D;。通过标识实体成员间的共同特征将这些成员间的差异最小化的过程</p>\n  <img data-src=\"https://s2.loli.net/2022/04/19/YXJewcjOgv5nBGT.png\" alt=\"image-20220419102322804\" style=\"zoom:67%;\" />\n</li>\n<li><p>特殊化&#x2F;概化约束：</p>\n<ul>\n<li><p>&#x3D;&#x3D;参与约束&#x3D;&#x3D;：确定超类中的每个成员是否都必须是子类中的成员。</p>\n<ul>\n<li>强制的参与约束（Mandatory）：超类中的每个成员都必须是子类中的成员</li>\n<li>可选的参与约束（Optional）：超类中的成员并不一定也是子类中的成员</li>\n</ul>\n</li>\n<li><p>&#x3D;&#x3D;不相交约束&#x3D;&#x3D;：描述子类成员间的联系。子类成员之间是相交（AND）的或者不相交（OR）的</p>\n<blockquote>\n<p>&#x3D;&#x3D;参与约束和不相交约束是独立的，因此可以组合成4种约束&#x3D;&#x3D;</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<img data-src=\"https://s2.loli.net/2022/04/19/zRnwamC5L82ekQI.png\" alt=\"image-20220419102930019\" style=\"zoom:67%;\" />\n\n<h2 id=\"6、-聚合与组合\"><a href=\"#6、-聚合与组合\" class=\"headerlink\" title=\"6、  聚合与组合\"></a>6、  聚合与组合</h2><ul>\n<li><p>&#x3D;&#x3D;聚合(aggregation）&#x3D;&#x3D;：表示实体类型之间的“具有”(has-a)和“属于”**(is-part-of)**联系，这些实体中有一个表示整体，其他的表示部分。如汽车和轮子</p>\n<blockquote>\n <img data-src=\"https://s2.loli.net/2022/04/19/ljstSaZ9Vmc1u3B.png\" alt=\"image-20220419103229323\" style=\"zoom: 67%;\" />\n</blockquote>\n</li>\n<li><p>&#x3D;&#x3D;组合（composition）：&#x3D;&#x3D;一种特殊形式的聚合，即整体对部分存在强拥有权，且&#x3D;&#x3D;两者具有一致的生存期&#x3D;&#x3D;</p>\n<blockquote>\n<p>例如：汽车和轮子，轮子是可以单独存在的；而房子和房间，如果房子没了。那房间也不存在了</p>\n</blockquote>\n  <img data-src=\"https://s2.loli.net/2022/04/13/o2piID5CdsX84M9.png\" alt=\"image-20220413202610135\" style=\"zoom:67%;\" />\n</li>\n<li><p>&#x3D;&#x3D;概括&#x3D;&#x3D;：定义了类型之间的一种子集联系，它抽象了类型之间的<strong>is subset of</strong>的语义。如学生和本科生</p>\n<p>  例子：</p>\n  <img data-src=\"https://s2.loli.net/2022/04/14/K2ZBMf5Ln4SePD3.png\" alt=\"image-20220414123506992\" style=\"zoom:67%;\" /></li>\n</ul>\n<h2 id=\"7、-局部视图设计及合并ER图\"><a href=\"#7、-局部视图设计及合并ER图\" class=\"headerlink\" title=\"7、  局部视图设计及合并ER图\"></a>7、  局部视图设计及合并ER图</h2><ul>\n<li><p>根据局部结构设计分ER图，即局部ER图</p>\n</li>\n<li><p>合并ER图</p>\n<ul>\n<li><p>方法：二元合并法或者多元合并法</p>\n</li>\n<li><p>冲突处理：</p>\n<ul>\n<li><p>属性冲突：包括属性域冲突和属性取值单位冲突</p>\n<p>  解决方法：取尽可能多的包含较多局部ER图要求的数据类型、值域或取值单位，并可考虑今后系统维护的工作量作为取舍</p>\n</li>\n<li><p>命名冲突：包括同名异义和异名同义。解决方法：重新命名</p>\n</li>\n<li><p>结构冲突：</p>\n<ul>\n<li>同一对象在不同应用中具有不同的抽象（解决方法：统一为实体或属性）</li>\n<li>同一对象在不同局部ER图中所包含的属性不完全相同，或属性的排列次序不完全相同（解决方法：使该实体的属性取各局部ER图中属性的并集，再适当调整属性的次序）</li>\n<li>实体之间的联系在不同局部ER图中呈现不同的类型（解决方法：根据应用的语义对实体联系的类型进行综合或调整）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>消除数据冗余</p>\n<ul>\n<li><p>用分析法消除冗余数据（😢其实就是观察法），例如实发工资可以由其他列推算得到，则可以删去实发工资</p>\n</li>\n<li><p>用规范化消除冗余联系，可以通过求最小依赖集来实现</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/04/14/wFm5a2JVHkYrSqd.png\" alt=\"image-20220414142449087\"></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>例子:</p>\n<p><img data-src=\"https://s2.loli.net/2022/04/14/WxGbp3khOcZijf7.png\" alt=\"image-20220414124835366\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/04/14/CndNF5YtxWcRaJO.png\" alt=\"image-20220414124850694\"></p>\n<h2 id=\"x3D-x3D-8、-将ER模型转换为关系模型-x3D-x3D\"><a href=\"#x3D-x3D-8、-将ER模型转换为关系模型-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;8、  将ER模型转换为关系模型&#x3D;&#x3D;\"></a>&#x3D;&#x3D;8、  将ER模型转换为关系模型&#x3D;&#x3D;</h2><ul>\n<li><p>ER结构与关系结构的对应关系</p>\n  <img data-src=\"https://s2.loli.net/2022/04/13/XP6twnef4rG2bgH.png\" alt=\"image-20220413203447160\" style=\"zoom:67%;\" />\n</li>\n<li><p>&#x3D;&#x3D;将ER模型转换为关系模型的9步算法&#x3D;&#x3D;</p>\n  <img data-src=\"https://s2.loli.net/2022/04/13/zPa9jNSdThUeH1B.png\" alt=\"image-20220413203911206\" style=\"zoom:67%;\" /></li>\n</ul>\n<h4 id=\"（1）强实体的转换：直接转换成一张表\"><a href=\"#（1）强实体的转换：直接转换成一张表\" class=\"headerlink\" title=\"（1）强实体的转换：直接转换成一张表\"></a>（1）强实体的转换：直接转换成一张表</h4><img data-src=\"https://s2.loli.net/2022/04/13/Zps7gCADun8rBGI.png\" alt=\"image-20220413204026593\"  />\n\n<h4 id=\"（2）仅参与一个1-1联系的弱实体的转换\"><a href=\"#（2）仅参与一个1-1联系的弱实体的转换\" class=\"headerlink\" title=\"（2）仅参与一个1:1联系的弱实体的转换\"></a>（2）仅参与一个1:1联系的弱实体的转换</h4><p><img data-src=\"https://s2.loli.net/2022/04/13/o4OXdy1nNVpeR9b.png\" alt=\"image-20220413204240217\"></p>\n<h4 id=\"（3）参与1-N或M-N联系的弱实体的转换\"><a href=\"#（3）参与1-N或M-N联系的弱实体的转换\" class=\"headerlink\" title=\"（3）参与1:N或M:N联系的弱实体的转换**\"></a>（3）参与1:N或M:N联系的弱实体的转换**</h4><p>将参与一个1:N或M:N或多个联系的弱实体W，转换为一张表T，表中包括弱实体的所有的单值属性或复合属性的组成属性。</p>\n<ul>\n<li><p>若强实体S与弱实体W之间是&#x3D;&#x3D;1:N联系，则T的主键 &#x3D; W的主关键字+S的主关键字&#x3D;&#x3D;</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/04/13/xJ3vpA51YfnkU9P.png\" alt=\"image-20220413205556256\"></p>\n</li>\n<li><p>若强实体S与弱实体W之间是&#x3D;&#x3D;M:N联系，则T的主键&#x3D;一个新创建的具有唯一值的属性X&#x3D;&#x3D;，而实体间的联系在step six处理</p>\n<blockquote>\n<p>如果采用T的主键 &#x3D; W的主关键字+S的主关键字，会造成冗余</p>\n</blockquote>\n  <img data-src=\"https://s2.loli.net/2022/04/13/sBSwXZjvz4D6YlP.png\" alt=\"image-20220413231701028\" style=\"zoom:67%;\" />\n\n<blockquote>\n<p>父子关系等等可以作为联系的属性</p>\n<img data-src=\"https://s2.loli.net/2022/04/19/2SrvHy1h3oebWnA.png\" alt=\"image-20220419103909683\" style=\"zoom: 33%;\" /></blockquote>\n</li>\n</ul>\n<h4 id=\"（4）-1-1-的联系的转换\"><a href=\"#（4）-1-1-的联系的转换\" class=\"headerlink\" title=\"（4） 1:1 的联系的转换\"></a>（4） 1:1 的联系的转换</h4><ul>\n<li><p>两方都强制参与：将两个实体组合为一个关系T，然后将联系属性加入到关系T中</p>\n  <img data-src=\"https://s2.loli.net/2022/04/13/nWRxKhXNc5mlqdi.png\" alt=\"image-20220413231857172\" style=\"zoom:67%;\" />\n</li>\n<li><p>一方强制参与：将可选方实体的主关键字作为强制方实体的关系的外部关键字，然后将联系属性加入到强制实体的关系中</p>\n<blockquote>\n<p>如果放到可选参与方，会造成空间浪费，因为会有空的；强制参与方就不会有空的</p>\n</blockquote>\n  <img data-src=\"https://s2.loli.net/2022/04/13/lgyLBaHn9iD2RYU.png\" alt=\"image-20220413232130399\" style=\"zoom:67%;\" />\n</li>\n<li><p>两方都可选参与：若没有进一步的信息，可选任一可选实体当作强制实体，使用方法（2）转换</p>\n  <img data-src=\"https://s2.loli.net/2022/04/13/ThBVvoKfijR7cy9.png\" alt=\"image-20220413232412596\" style=\"zoom:67%;\" /></li>\n</ul>\n<h4 id=\"（5）1-N-的联系的转换\"><a href=\"#（5）1-N-的联系的转换\" class=\"headerlink\" title=\"（5）1:N 的联系的转换\"></a>（5）1:N 的联系的转换</h4><p>对于任意一个1:N联系，一方实体的主关键字作为多方实体关系的外部关键字，该联系的任何属性也安排在多方</p>\n<blockquote>\n<p>如果放到一方实体的话，则会造成多值</p>\n</blockquote>\n<img data-src=\"https://s2.loli.net/2022/04/13/k8dJuPe6AByfCE2.png\" alt=\"image-20220413232534635\" style=\"zoom:67%;\" />\n\n<h4 id=\"（6）-N元联系（涉及N个实体）（包括N-M-的联系）的转换\"><a href=\"#（6）-N元联系（涉及N个实体）（包括N-M-的联系）的转换\" class=\"headerlink\" title=\"（6） N元联系（涉及N个实体）（包括N:M 的联系）的转换\"></a>（6） N元联系（涉及N个实体）（包括N:M 的联系）的转换</h4><p>对于任意一个M:N联系或N元联系，&#x3D;&#x3D;生成一个表示该联系的关系R（注意外键），&#x3D;&#x3D;关系R包含该联系的所有属性以及作为R的外部关键字出现的所有属主实体的主关键字</p>\n<img data-src=\"https://s2.loli.net/2022/04/13/PgsECqprb1HOG3Q.png\" alt=\"image-20220413232804774\" style=\"zoom:67%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/04/13/dxnKtID86QFU7T5.png\" alt=\"image-20220413232956311\" style=\"zoom:67%;\" />\n\n<blockquote>\n<p>同一实体集的实体间的联系，即自联系，也可按上述1:1， 1：n， m：n的3种情况分别处理</p>\n</blockquote>\n<h4 id=\"（7）-复合属性、多值属性和派生属性的处理\"><a href=\"#（7）-复合属性、多值属性和派生属性的处理\" class=\"headerlink\" title=\"（7） 复合属性、多值属性和派生属性的处理\"></a>（7） 复合属性、多值属性和派生属性的处理</h4><ul>\n<li>&#x3D;&#x3D;复合属性&#x3D;&#x3D;：为每个子属性创建一个单独的属性而将复合属性去掉</li>\n<li>&#x3D;&#x3D;多值属性&#x3D;&#x3D;：将多值属性生成为一个表示该属性的关系，<strong>并把该属性的属主实体的主关键字作为该关系的外部关键字</strong></li>\n<li>&#x3D;&#x3D;派生属性&#x3D;&#x3D;：从关系模式中去掉</li>\n</ul>\n<img data-src=\"https://s2.loli.net/2022/04/13/j9uenoirmIlq4Mc.png\" alt=\"image-20220413233231580\" style=\"zoom:67%;\" />\n\n<h4 id=\"（8）-子类不相交的超类-x2F-子类联系的转换\"><a href=\"#（8）-子类不相交的超类-x2F-子类联系的转换\" class=\"headerlink\" title=\"（8） 子类不相交的超类&#x2F;子类联系的转换\"></a>（8） 子类不相交的超类&#x2F;子类联系的转换</h4><p>对于每个具有强制参与且不相交子类的超类&#x2F;子类联系– {Mandatory, Or}</p>\n<ul>\n<li><p>对于每个子类Si，创建一个新表Ti; </p>\n</li>\n<li><p>将超类的简单属性和复合属性的简单组合属性放入Ti的属性集中；</p>\n</li>\n<li><p>将Si的简单属性和复合属性的简单组合属性放入Ti的属性集中；</p>\n</li>\n<li><p>标识主键和候选键。</p>\n<p>  &#x3D;&#x3D;超类不创建表（因为是强制参与且不相交，超类中的某个成员一定属于且仅属于某一个子类），各组合的超类&#x2F;子类一个表&#x3D;&#x3D;</p>\n  <img data-src=\"https://s2.loli.net/2022/04/13/1DFPGLpnarTCXv9.png\" alt=\"image-20220413233638204\" style=\"zoom:67%;\" /></li>\n</ul>\n<h4 id=\"（9）-子类相交的超类-x2F-子类联系的转换\"><a href=\"#（9）-子类相交的超类-x2F-子类联系的转换\" class=\"headerlink\" title=\"（9） 子类相交的超类&#x2F;子类联系的转换\"></a>（9） 子类相交的超类&#x2F;子类联系的转换</h4><p>对于每个具有相交子类 或 可选参与且不相交子类的超类&#x2F;子类联系（即除了{Mandatory, Or}之外的三种组合约束）</p>\n<ul>\n<li><p>对于超类，创建一个新表O; </p>\n</li>\n<li><p>将超类的简单属性和复合属性的简单组合属性放入O的属性集中；</p>\n</li>\n<li><p>标识O的主键和候选键；</p>\n</li>\n<li><p>对于每个子类Si，创建一个新表Ti; </p>\n</li>\n<li><p>将Si的简单属性和复合属性的简单组合属性放入Ti的属性集中；</p>\n</li>\n<li><p><strong>将O的主键放入Ti的属性集中，作为Ti的外键</strong></p>\n<p>  &#x3D;&#x3D;超类创建一个表，各子类一个表&#x3D;&#x3D;</p>\n</li>\n</ul>\n<img data-src=\"https://s2.loli.net/2022/04/13/vscW9OjZQRDkaIP.png\" alt=\"image-20220413234448229\" style=\"zoom:67%;\" />\n"},{"title":"一、操作系统绪论","abbrlink":61434,"date":"2022-06-27T15:02:58.000Z","_content":"\n# 一、操作系统绪论\n\n## ==重点考察概念==\n\n操作系统的定义，操作系统在计算机系统中的地位，操作系统的主要功能，资源复用、虚化、抽象，操作系统的特征，多道程序设计，并发，中断，系统调用，CPU 的两种工作模式（用户态、内核态），特权指令和非特权指令 \n\n## 1、操作系统概念、功能及提供的接口\n\n**操作系统的概念**：管理计算机硬件并提供应用程序运行环境的软件。操作系统是配置在计算机硬件上的第一层软件，是对硬件的首次扩充，形成了虚拟计算机/扩展机。它位于硬件与其它软件之间，是所有其他软件运行的基础。\n\n**操作系统的作用：**\n\n**用户视角：** 操作系统是用户与计算机硬件之间的接口。为用户使用计算机提供服务。\n\n**系统视角：** \n\n- ==资源管理器== ：管理计算机系统的软硬件资源。**资源复用、资源虚化以及资源抽象** 。\n    - 资源复用：分为时间复用和空间复用。时间复用指的是多个用户或程序轮流使用某个资源，如CPU使用；空间复用指的是多个用户或程序同时使用资源的一部分，如内存使用。\n    - 资源虚化：让一个物理设备变成多个相对独立的对应物\n    - 资源抽象：对内封装细节，对外通过管理对象与访问接口，如：面向进程而不是CPU，面向文件而不是物理存储介质，面向窗口而不是屏幕\n    - ==复用与虚拟化解决的是资源不足的问题。资源抽象解决的是资源复杂的问题。==\n- ==控制程序== ：控制程序执行过程，防止错误和计算机的不当使用\n\n![image-20220513191418134](https://s2.loli.net/2022/05/13/msaGykqzLiVtrDT.png)\n\n![image-20220513193433159](https://s2.loli.net/2022/05/13/HKJvnRhTVw89bdC.png)\n\n![image-20220513192502110](https://s2.loli.net/2022/05/13/AQW3CRkS6fHpBNw.png)\n\n![image-20220513193123123](https://s2.loli.net/2022/05/13/LiEpfK6Awz8WFvs.png)\n\n联机命令接口 = 交互命令接口，如命令行\n\n脱机命令接口 = 批处理命令接口，如*.bat文件\n\n程序接口：如dll文件，调用dll文件即可进行系统调用，只能通过应用程序间接使用\n\n## 2、操作系统的特征\n\n- **并发性：** 多个事件在同一事件间隔内发生（并行：同一时刻）。并发的实质是一个物理CPU(也可以多个物理CPU) 在若干道程序之间多路复用，并发性是对有限物理资源强制行使多用户共享以提高效率。\n\n- **共享性：** 系统中的资源可供多个并发执行的进程共同使用。有两种资源共享方式：\n\n    - 互斥共享：一段时间只允许一个进程访问。如对摄像头设备的共享使用\n    - 同时访问：一段时间允许多个进程访问。如对硬盘资源的共享使用\n\n    ==并发和共享是操作系统的两个最基本特征，二者之间互为存在条件。== \n\n- **虚拟性：** 把一个物理上的实体变为若干个逻辑上的对应物；或把物理上的多个实体变成逻辑上的一个对应物的技术。eg.虚拟存储器\n\n    - 空分复用技术：如虚拟存储技术\n\n    - 时分复用技术：如虚拟处理器技术\n\n        并发性是虚拟性存在的基础\n\n- **异步性（或不确定性）：** 多个作业的执行过程是走走停停的，其执行顺序和每个作业的执行时间是不确定的。\n\n## 3、操作系统的发展与分类\n\n![image-20220513201053867](https://s2.loli.net/2022/05/13/3AWQXpLSTGkobFC.png)\n\n批处理技术是指计算机系统对一批作业自动进行处理的一种技术。\n\n分类：\n\n- 联机批处理：采用联机输入/输出，即输入/输出操作在监督程序控制下，同步进行。 缺点：速度慢 \n- 脱机批处理：外围机：独立于主机，负责把作业任务写入磁带，以及从磁带输出到打印机。主机：负责从磁带上把作业调入内存，或者把结果写回磁带。实现了部分异步能力、减少了CPU的空闲时间、提高了I/O速度\n\n---\n\n多道程序设计：\n\n- **核心思想：** 将多个作业存放在主存中，这些程序在管理程序的控制下交替运行，共享处理机和系统中的其他资源。即通过安排作业（编码与数据）==使得CPU无论何时都有进程执行，从而最大化CPU利用率== \n- 没有提供用户与计算机系统的交互\n- 多道程序宏观上并行，微观上串行\n- 多道程序设计的道数不是任意的\n- **优缺点：** \n    - 提高了CPU的利用率\n    - 提高了内存和I/O设备的利用率\n    - 改进了系统的吞吐率\n    - 充分发挥了系统的并行性\n    - 其主要缺点是: 作业周转时间延长\n- **多重处理系统:   ** 指配置了多个物理CPU，能真正同时执行多道程序的系统。\n\n---\n\n==操作系统的三种基本类型：批处理操作系统、分时操作系统、实时操作系统== \n\n分时系统：允许多个联机用户同时使用一台计算机系统进行计算的操作系统称分时操作系统\n\n**分时技术：** 把处理机的运行时间分成很短的时间片，按时间片轮流把处理机分配给各联机作业使用。\n\n是多道程序设计的自然延伸\n\n采用调度算法，以快速切换作业，好像每个作业同时执行\n\n**特征：** \n\n- 多路性：也称同时性，一台计算机与若干台终端相连接，终端上的这些用户可以同时使用计算机。\n- 交互性：用户通过终端采用人机会话的方式直接控制程序运行，同程序进行交互。\n- 独立性：用户彼此之间都感觉不到别人也在使用这台计算机，好像只有自己独占计算机一样。\n- 及时性：用户请求能在很短时间内获得响应。\n\n## 4、操作系统的运行机制与体系结构\n\n![image-20220513203343485](https://s2.loli.net/2022/05/13/uCvXRb5ixgc4ep9.png)\n\n> 用程序状态字寄存器（PSW， program status word）中的某标志位来标识当前处理器处于什么状态。如0为用户态，1为核心态\n\n---\n\n内核是操作系统的构件，或称基本单位。 \n\n内核作用：  为进程提供管理 、为进程执行提供良好的运行环境\n\n==基本功能:==  \n\n- 中断处理：截获中断，转向中断处理例程\n- 短程调度：CPU调度，保存与恢复现场\n- 原语管理：原语是不可中断过程\n\n==基本属性:== \n\n- 内核是由中断驱动的\n- 内核的执行是连续的\n- 内核在屏蔽中断状态下执行\n- 内核可以使用特权指令\n\n==分类：==\n\n- **模块结构（整体式结构）**：将内核划分为一个个独立的模块，模块之间相互调用。效率高但是结构不清晰，访问控制困难\n\n- **层次结构**：一种特殊的模块结构。将内核划分为一系列相互依赖的层次，每个层次也可以分解为一系列更小的模块。\n\n    ![](https://s2.loli.net/2022/03/04/2PkGeSmIBXyOTai.png)\n\n- **微内核结构**\n\n![image-20220513202231353](https://s2.loli.net/2022/05/13/OzmplexJuwFcj24.png)\n\n![image-20220513202617422](https://s2.loli.net/2022/05/13/7S4E6d3gHUeNlpI.png)\n\n## 5、中断和异常\n\n![image-20220513205554625](https://s2.loli.net/2022/05/13/ojrdODLXqEezi3G.png)\n\n==用户态 → 核心态是通过中断实现的，并且中断是唯一途径==\n\n==核心态 → 用户态的切换是通过执行一个特权指令，将程序状态字（PSW）的标志位设置为“用户态”==\n\n![image-20220513205029547](https://s2.loli.net/2022/05/13/twndlTegkLJ6x9X.png)\n\n![image-20220513205136837](https://s2.loli.net/2022/05/13/EYTzjIOvW7drqfx.png)\n\n**外中断的处理过程：**\n\n![image-20220513205420243](https://s2.loli.net/2022/05/13/oRmXYrNvBUkTgfI.png)\n\n## 6、系统调用\n\n![image-20220513213014300](https://s2.loli.net/2022/05/13/xzmwb1KdrT5MIsp.png)\n\n系统调用是操作系统提供给应用程序（程序员/编程人员）使用的接口，可以理解为一种可供应用程序调用的特殊函数，应用程序可以发出系统调用请求来获得操作系统的服务。\n\n系统调用与库函数的区别：\n\n![image-20220513211951839](https://s2.loli.net/2022/05/13/tK9mNhM6OdzepCP.png)\n\n系统调用背后的过程：\n\n![image-20220513212751507](https://s2.loli.net/2022/05/13/obNKP1RrQt9sBuV.png)\n\n中断、异常和系统调用：\n\n|              | 产生原因                                         | 实现机制                     | 区别                                                         | 保存地址                                                 | 处理                                                         |\n| ------------ | ------------------------------------------------ | ---------------------------- | ------------------------------------------------------------ | -------------------------------------------------------- | ------------------------------------------------------------ |\n| **中断**     | 由定时器和I/O设备产生（来自硬件设备的处理请求）  | 中断机制                     | ①由与现行指令无关的中断信号触发的(异步的)；②中断的发生与CPU处在用户模式或内核模式无关，系统不能确定中断发生的时间 ；③一般来说，中断处理程序提供的服务不是为当前进程所需的 | 保存的是下一条指令的地址，以便在指令结束后检测有没有中断 | **硬件和软件结合** 。①定时器：定时器是OS回收控制的重要方式，可设置为在指定周期（固定或可变）后中断计算机。防止用户程序陷入死循环，或不调用系统服务并且不将控制返回给操作系统。在将控制交到用户之前，操作系统确保定时器已设置好以便产生中断；②中断装置（发生中断源并产生中断的**硬件** ）：发现中断源、保护现场、启动中断处理程序（IDTR寄存器中存放了中断描述符表在内存的起始地址）；③中断处理程序： 保护未被硬件保护的一些必需的处理状态 （CPU自动保存的只有EIP/EFLAGS/ESP/SS/CS） ；识别各个中断源，分析产生中断的原因；处理中断事件；恢复正常操作；④OS必须保证中断前后的同步性，必须保证现场保护的原子性（保护现场的过程不能被中断） |\n| **异常**     | 由程序错误产生，或者由内核必须处理的异常条件产生 | 中断机制                     | ① 由处理器正在执行现行指令而引起的； ②异常处理程序提供的服务是为当前进程所用的；③异常包括出错、陷入、终止和编程异常等等；④异常通常由意想不到的行为触发 | 出错保存的是当前指令的地址，陷入保存的是下一条指令的地址 | ①由硬件检测并处理（如除0）；②硬件自身出错产生的异常：通常会在检测错误之后重新执行该指令，CPU保存运行状态；③有些异常是修复后返回并重新执行出错的指令（如页错误）；有些异常是OS通知相应进程；④异常发生在内核会导致OS崩溃 |\n| **系统调用** | 程序主动请求操作系统服务                         | 通常通过一种特殊的异常来实现 | 程序主动请求系统服务                                         | 保存的是下一条指令的地址                                 | 提供给用户态程序执行特权操作的接口；触发事件，切换至内核态；传递系统调用的参数； 保存状态以便完成系统调用后恢复执行 |\n\n## 7、==可能的大题：多道程序运行、简答题==\n\n### 甘特图\n\n计算作业完成时间，CPU或者I/O设备的利用率等等\n\n资源利用率：CPU利用率 = CPU有效工作时间/CPU总的运行时间， CPU总的运行时间 = CPU有效工作时间+CPU空闲等待时间。\n\nI/O设备的利用率同理。\n\n==注意考虑优先级以及是否能够抢占==\n\n**（1）**在单CPU和两台I/O(I1,I2)设备的多道程序设计环境下，同时投入三个作业运行。它们的执行轨迹如下：\n\nJob1：I2(30ms)、CPU(10ms)、I1(30ms)、CPU(10ms)\n\nJob2：I1(20ms)、CPU(20ms)、I2(40ms)\n\nJob3：CPU(30ms)、I1(20ms)\n\n如果CPU、I1和I2都能并行工作，优先级从高到低为Job1、Job2和Job3，优先级高的作业可以抢占优先级低的作业的CPU。试求：(1)每个作业从投入到完成分别所需的时间。(2) 每个作业投入到完成CPU的利用率。(3)I/O设备利用率。\n\n**答：**画出三个作业并行工作图如下(图中着色部分为作业等待时间)：\n\n![img](https://s2.loli.net/2022/05/14/FxBnaZuVIQ8Nhe7.png)\n\n(1) Job1从投入到运行完成需80ms，Job2从投入到运行完成需90ms，Job3从投入到运行完成需90ms。\n\n(2) CPU空闲时间段为：60ms至70ms，80ms至90ms。所以CPU利用率为(90-20)/90=77.78%。\n\n(3) 设备I1空闲时间段为：20ms至40ms，故I1的利用率为(90-20)/90=77.78%。设备I2空闲时间段为：30ms至50ms，故I2的利用率为(90-20)/90=77.78%。\n\n \n\n2、 若内存中有3道程序A、B、C，它们按A、B、C优先次序运行（不考虑强占）。各程序的计算轨迹为：\n\nA：计算(20)、I/O(30)、计算(10) \n\nB：计算(40)、I/O(20)、计算(10)\n\nC：计算(10)、I/O(30)、计算(20)\n\n如果三道程序都使用相同设备进行I/O(即程序用串行方式使用设备，调度开销忽略不计)。试分别画出单道和多道运行的时间关系图。两种情况下，CPU的平均利用率各为多少?\n\n**答**：分别画出单道和多道运行的时间图\n\n(1) 单道运行时间关系图\n\n  ![img](https://s2.loli.net/2022/05/14/FhG1CTOSvzJu8EM.png)\n\n单道总运行时间为190ms。CPU利用率为(190-80)/190=57.9%\n\n(2) 多道运行时间关系图\n\n  ![img](https://s2.loli.net/2022/05/14/vworFI23sGiWeKp.png)\n\n多道总运行时间为140ms。CPU利用率为(140-30)/140=78.6%\n","source":"_posts/一、操作系统绪论.md","raw":"---\ntitle: 一、操作系统绪论\ntags:\n  - 操作系统\ncategory:\n  - 操作系统\nabbrlink: 61434\ndate: 2022-06-27 23:02:58\n---\n\n# 一、操作系统绪论\n\n## ==重点考察概念==\n\n操作系统的定义，操作系统在计算机系统中的地位，操作系统的主要功能，资源复用、虚化、抽象，操作系统的特征，多道程序设计，并发，中断，系统调用，CPU 的两种工作模式（用户态、内核态），特权指令和非特权指令 \n\n## 1、操作系统概念、功能及提供的接口\n\n**操作系统的概念**：管理计算机硬件并提供应用程序运行环境的软件。操作系统是配置在计算机硬件上的第一层软件，是对硬件的首次扩充，形成了虚拟计算机/扩展机。它位于硬件与其它软件之间，是所有其他软件运行的基础。\n\n**操作系统的作用：**\n\n**用户视角：** 操作系统是用户与计算机硬件之间的接口。为用户使用计算机提供服务。\n\n**系统视角：** \n\n- ==资源管理器== ：管理计算机系统的软硬件资源。**资源复用、资源虚化以及资源抽象** 。\n    - 资源复用：分为时间复用和空间复用。时间复用指的是多个用户或程序轮流使用某个资源，如CPU使用；空间复用指的是多个用户或程序同时使用资源的一部分，如内存使用。\n    - 资源虚化：让一个物理设备变成多个相对独立的对应物\n    - 资源抽象：对内封装细节，对外通过管理对象与访问接口，如：面向进程而不是CPU，面向文件而不是物理存储介质，面向窗口而不是屏幕\n    - ==复用与虚拟化解决的是资源不足的问题。资源抽象解决的是资源复杂的问题。==\n- ==控制程序== ：控制程序执行过程，防止错误和计算机的不当使用\n\n![image-20220513191418134](https://s2.loli.net/2022/05/13/msaGykqzLiVtrDT.png)\n\n![image-20220513193433159](https://s2.loli.net/2022/05/13/HKJvnRhTVw89bdC.png)\n\n![image-20220513192502110](https://s2.loli.net/2022/05/13/AQW3CRkS6fHpBNw.png)\n\n![image-20220513193123123](https://s2.loli.net/2022/05/13/LiEpfK6Awz8WFvs.png)\n\n联机命令接口 = 交互命令接口，如命令行\n\n脱机命令接口 = 批处理命令接口，如*.bat文件\n\n程序接口：如dll文件，调用dll文件即可进行系统调用，只能通过应用程序间接使用\n\n## 2、操作系统的特征\n\n- **并发性：** 多个事件在同一事件间隔内发生（并行：同一时刻）。并发的实质是一个物理CPU(也可以多个物理CPU) 在若干道程序之间多路复用，并发性是对有限物理资源强制行使多用户共享以提高效率。\n\n- **共享性：** 系统中的资源可供多个并发执行的进程共同使用。有两种资源共享方式：\n\n    - 互斥共享：一段时间只允许一个进程访问。如对摄像头设备的共享使用\n    - 同时访问：一段时间允许多个进程访问。如对硬盘资源的共享使用\n\n    ==并发和共享是操作系统的两个最基本特征，二者之间互为存在条件。== \n\n- **虚拟性：** 把一个物理上的实体变为若干个逻辑上的对应物；或把物理上的多个实体变成逻辑上的一个对应物的技术。eg.虚拟存储器\n\n    - 空分复用技术：如虚拟存储技术\n\n    - 时分复用技术：如虚拟处理器技术\n\n        并发性是虚拟性存在的基础\n\n- **异步性（或不确定性）：** 多个作业的执行过程是走走停停的，其执行顺序和每个作业的执行时间是不确定的。\n\n## 3、操作系统的发展与分类\n\n![image-20220513201053867](https://s2.loli.net/2022/05/13/3AWQXpLSTGkobFC.png)\n\n批处理技术是指计算机系统对一批作业自动进行处理的一种技术。\n\n分类：\n\n- 联机批处理：采用联机输入/输出，即输入/输出操作在监督程序控制下，同步进行。 缺点：速度慢 \n- 脱机批处理：外围机：独立于主机，负责把作业任务写入磁带，以及从磁带输出到打印机。主机：负责从磁带上把作业调入内存，或者把结果写回磁带。实现了部分异步能力、减少了CPU的空闲时间、提高了I/O速度\n\n---\n\n多道程序设计：\n\n- **核心思想：** 将多个作业存放在主存中，这些程序在管理程序的控制下交替运行，共享处理机和系统中的其他资源。即通过安排作业（编码与数据）==使得CPU无论何时都有进程执行，从而最大化CPU利用率== \n- 没有提供用户与计算机系统的交互\n- 多道程序宏观上并行，微观上串行\n- 多道程序设计的道数不是任意的\n- **优缺点：** \n    - 提高了CPU的利用率\n    - 提高了内存和I/O设备的利用率\n    - 改进了系统的吞吐率\n    - 充分发挥了系统的并行性\n    - 其主要缺点是: 作业周转时间延长\n- **多重处理系统:   ** 指配置了多个物理CPU，能真正同时执行多道程序的系统。\n\n---\n\n==操作系统的三种基本类型：批处理操作系统、分时操作系统、实时操作系统== \n\n分时系统：允许多个联机用户同时使用一台计算机系统进行计算的操作系统称分时操作系统\n\n**分时技术：** 把处理机的运行时间分成很短的时间片，按时间片轮流把处理机分配给各联机作业使用。\n\n是多道程序设计的自然延伸\n\n采用调度算法，以快速切换作业，好像每个作业同时执行\n\n**特征：** \n\n- 多路性：也称同时性，一台计算机与若干台终端相连接，终端上的这些用户可以同时使用计算机。\n- 交互性：用户通过终端采用人机会话的方式直接控制程序运行，同程序进行交互。\n- 独立性：用户彼此之间都感觉不到别人也在使用这台计算机，好像只有自己独占计算机一样。\n- 及时性：用户请求能在很短时间内获得响应。\n\n## 4、操作系统的运行机制与体系结构\n\n![image-20220513203343485](https://s2.loli.net/2022/05/13/uCvXRb5ixgc4ep9.png)\n\n> 用程序状态字寄存器（PSW， program status word）中的某标志位来标识当前处理器处于什么状态。如0为用户态，1为核心态\n\n---\n\n内核是操作系统的构件，或称基本单位。 \n\n内核作用：  为进程提供管理 、为进程执行提供良好的运行环境\n\n==基本功能:==  \n\n- 中断处理：截获中断，转向中断处理例程\n- 短程调度：CPU调度，保存与恢复现场\n- 原语管理：原语是不可中断过程\n\n==基本属性:== \n\n- 内核是由中断驱动的\n- 内核的执行是连续的\n- 内核在屏蔽中断状态下执行\n- 内核可以使用特权指令\n\n==分类：==\n\n- **模块结构（整体式结构）**：将内核划分为一个个独立的模块，模块之间相互调用。效率高但是结构不清晰，访问控制困难\n\n- **层次结构**：一种特殊的模块结构。将内核划分为一系列相互依赖的层次，每个层次也可以分解为一系列更小的模块。\n\n    ![](https://s2.loli.net/2022/03/04/2PkGeSmIBXyOTai.png)\n\n- **微内核结构**\n\n![image-20220513202231353](https://s2.loli.net/2022/05/13/OzmplexJuwFcj24.png)\n\n![image-20220513202617422](https://s2.loli.net/2022/05/13/7S4E6d3gHUeNlpI.png)\n\n## 5、中断和异常\n\n![image-20220513205554625](https://s2.loli.net/2022/05/13/ojrdODLXqEezi3G.png)\n\n==用户态 → 核心态是通过中断实现的，并且中断是唯一途径==\n\n==核心态 → 用户态的切换是通过执行一个特权指令，将程序状态字（PSW）的标志位设置为“用户态”==\n\n![image-20220513205029547](https://s2.loli.net/2022/05/13/twndlTegkLJ6x9X.png)\n\n![image-20220513205136837](https://s2.loli.net/2022/05/13/EYTzjIOvW7drqfx.png)\n\n**外中断的处理过程：**\n\n![image-20220513205420243](https://s2.loli.net/2022/05/13/oRmXYrNvBUkTgfI.png)\n\n## 6、系统调用\n\n![image-20220513213014300](https://s2.loli.net/2022/05/13/xzmwb1KdrT5MIsp.png)\n\n系统调用是操作系统提供给应用程序（程序员/编程人员）使用的接口，可以理解为一种可供应用程序调用的特殊函数，应用程序可以发出系统调用请求来获得操作系统的服务。\n\n系统调用与库函数的区别：\n\n![image-20220513211951839](https://s2.loli.net/2022/05/13/tK9mNhM6OdzepCP.png)\n\n系统调用背后的过程：\n\n![image-20220513212751507](https://s2.loli.net/2022/05/13/obNKP1RrQt9sBuV.png)\n\n中断、异常和系统调用：\n\n|              | 产生原因                                         | 实现机制                     | 区别                                                         | 保存地址                                                 | 处理                                                         |\n| ------------ | ------------------------------------------------ | ---------------------------- | ------------------------------------------------------------ | -------------------------------------------------------- | ------------------------------------------------------------ |\n| **中断**     | 由定时器和I/O设备产生（来自硬件设备的处理请求）  | 中断机制                     | ①由与现行指令无关的中断信号触发的(异步的)；②中断的发生与CPU处在用户模式或内核模式无关，系统不能确定中断发生的时间 ；③一般来说，中断处理程序提供的服务不是为当前进程所需的 | 保存的是下一条指令的地址，以便在指令结束后检测有没有中断 | **硬件和软件结合** 。①定时器：定时器是OS回收控制的重要方式，可设置为在指定周期（固定或可变）后中断计算机。防止用户程序陷入死循环，或不调用系统服务并且不将控制返回给操作系统。在将控制交到用户之前，操作系统确保定时器已设置好以便产生中断；②中断装置（发生中断源并产生中断的**硬件** ）：发现中断源、保护现场、启动中断处理程序（IDTR寄存器中存放了中断描述符表在内存的起始地址）；③中断处理程序： 保护未被硬件保护的一些必需的处理状态 （CPU自动保存的只有EIP/EFLAGS/ESP/SS/CS） ；识别各个中断源，分析产生中断的原因；处理中断事件；恢复正常操作；④OS必须保证中断前后的同步性，必须保证现场保护的原子性（保护现场的过程不能被中断） |\n| **异常**     | 由程序错误产生，或者由内核必须处理的异常条件产生 | 中断机制                     | ① 由处理器正在执行现行指令而引起的； ②异常处理程序提供的服务是为当前进程所用的；③异常包括出错、陷入、终止和编程异常等等；④异常通常由意想不到的行为触发 | 出错保存的是当前指令的地址，陷入保存的是下一条指令的地址 | ①由硬件检测并处理（如除0）；②硬件自身出错产生的异常：通常会在检测错误之后重新执行该指令，CPU保存运行状态；③有些异常是修复后返回并重新执行出错的指令（如页错误）；有些异常是OS通知相应进程；④异常发生在内核会导致OS崩溃 |\n| **系统调用** | 程序主动请求操作系统服务                         | 通常通过一种特殊的异常来实现 | 程序主动请求系统服务                                         | 保存的是下一条指令的地址                                 | 提供给用户态程序执行特权操作的接口；触发事件，切换至内核态；传递系统调用的参数； 保存状态以便完成系统调用后恢复执行 |\n\n## 7、==可能的大题：多道程序运行、简答题==\n\n### 甘特图\n\n计算作业完成时间，CPU或者I/O设备的利用率等等\n\n资源利用率：CPU利用率 = CPU有效工作时间/CPU总的运行时间， CPU总的运行时间 = CPU有效工作时间+CPU空闲等待时间。\n\nI/O设备的利用率同理。\n\n==注意考虑优先级以及是否能够抢占==\n\n**（1）**在单CPU和两台I/O(I1,I2)设备的多道程序设计环境下，同时投入三个作业运行。它们的执行轨迹如下：\n\nJob1：I2(30ms)、CPU(10ms)、I1(30ms)、CPU(10ms)\n\nJob2：I1(20ms)、CPU(20ms)、I2(40ms)\n\nJob3：CPU(30ms)、I1(20ms)\n\n如果CPU、I1和I2都能并行工作，优先级从高到低为Job1、Job2和Job3，优先级高的作业可以抢占优先级低的作业的CPU。试求：(1)每个作业从投入到完成分别所需的时间。(2) 每个作业投入到完成CPU的利用率。(3)I/O设备利用率。\n\n**答：**画出三个作业并行工作图如下(图中着色部分为作业等待时间)：\n\n![img](https://s2.loli.net/2022/05/14/FxBnaZuVIQ8Nhe7.png)\n\n(1) Job1从投入到运行完成需80ms，Job2从投入到运行完成需90ms，Job3从投入到运行完成需90ms。\n\n(2) CPU空闲时间段为：60ms至70ms，80ms至90ms。所以CPU利用率为(90-20)/90=77.78%。\n\n(3) 设备I1空闲时间段为：20ms至40ms，故I1的利用率为(90-20)/90=77.78%。设备I2空闲时间段为：30ms至50ms，故I2的利用率为(90-20)/90=77.78%。\n\n \n\n2、 若内存中有3道程序A、B、C，它们按A、B、C优先次序运行（不考虑强占）。各程序的计算轨迹为：\n\nA：计算(20)、I/O(30)、计算(10) \n\nB：计算(40)、I/O(20)、计算(10)\n\nC：计算(10)、I/O(30)、计算(20)\n\n如果三道程序都使用相同设备进行I/O(即程序用串行方式使用设备，调度开销忽略不计)。试分别画出单道和多道运行的时间关系图。两种情况下，CPU的平均利用率各为多少?\n\n**答**：分别画出单道和多道运行的时间图\n\n(1) 单道运行时间关系图\n\n  ![img](https://s2.loli.net/2022/05/14/FhG1CTOSvzJu8EM.png)\n\n单道总运行时间为190ms。CPU利用率为(190-80)/190=57.9%\n\n(2) 多道运行时间关系图\n\n  ![img](https://s2.loli.net/2022/05/14/vworFI23sGiWeKp.png)\n\n多道总运行时间为140ms。CPU利用率为(140-30)/140=78.6%\n","slug":"一、操作系统绪论","published":1,"updated":"2022-06-27T15:12:30.867Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4ww0pzd00005oskf40i4qkj","content":"<h1 id=\"一、操作系统绪论\"><a href=\"#一、操作系统绪论\" class=\"headerlink\" title=\"一、操作系统绪论\"></a>一、操作系统绪论</h1><h2 id=\"x3D-x3D-重点考察概念-x3D-x3D\"><a href=\"#x3D-x3D-重点考察概念-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;重点考察概念&#x3D;&#x3D;\"></a>&#x3D;&#x3D;重点考察概念&#x3D;&#x3D;</h2><p>操作系统的定义，操作系统在计算机系统中的地位，操作系统的主要功能，资源复用、虚化、抽象，操作系统的特征，多道程序设计，并发，中断，系统调用，CPU 的两种工作模式（用户态、内核态），特权指令和非特权指令 </p>\n<h2 id=\"1、操作系统概念、功能及提供的接口\"><a href=\"#1、操作系统概念、功能及提供的接口\" class=\"headerlink\" title=\"1、操作系统概念、功能及提供的接口\"></a>1、操作系统概念、功能及提供的接口</h2><p><strong>操作系统的概念</strong>：管理计算机硬件并提供应用程序运行环境的软件。操作系统是配置在计算机硬件上的第一层软件，是对硬件的首次扩充，形成了虚拟计算机&#x2F;扩展机。它位于硬件与其它软件之间，是所有其他软件运行的基础。</p>\n<p><strong>操作系统的作用：</strong></p>\n<p><strong>用户视角：</strong> 操作系统是用户与计算机硬件之间的接口。为用户使用计算机提供服务。</p>\n<p><strong>系统视角：</strong> </p>\n<ul>\n<li>&#x3D;&#x3D;资源管理器&#x3D;&#x3D; ：管理计算机系统的软硬件资源。<strong>资源复用、资源虚化以及资源抽象</strong> 。<ul>\n<li>资源复用：分为时间复用和空间复用。时间复用指的是多个用户或程序轮流使用某个资源，如CPU使用；空间复用指的是多个用户或程序同时使用资源的一部分，如内存使用。</li>\n<li>资源虚化：让一个物理设备变成多个相对独立的对应物</li>\n<li>资源抽象：对内封装细节，对外通过管理对象与访问接口，如：面向进程而不是CPU，面向文件而不是物理存储介质，面向窗口而不是屏幕</li>\n<li>&#x3D;&#x3D;复用与虚拟化解决的是资源不足的问题。资源抽象解决的是资源复杂的问题。&#x3D;&#x3D;</li>\n</ul>\n</li>\n<li>&#x3D;&#x3D;控制程序&#x3D;&#x3D; ：控制程序执行过程，防止错误和计算机的不当使用</li>\n</ul>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/msaGykqzLiVtrDT.png\" alt=\"image-20220513191418134\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/HKJvnRhTVw89bdC.png\" alt=\"image-20220513193433159\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/AQW3CRkS6fHpBNw.png\" alt=\"image-20220513192502110\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/LiEpfK6Awz8WFvs.png\" alt=\"image-20220513193123123\"></p>\n<p>联机命令接口 &#x3D; 交互命令接口，如命令行</p>\n<p>脱机命令接口 &#x3D; 批处理命令接口，如*.bat文件</p>\n<p>程序接口：如dll文件，调用dll文件即可进行系统调用，只能通过应用程序间接使用</p>\n<h2 id=\"2、操作系统的特征\"><a href=\"#2、操作系统的特征\" class=\"headerlink\" title=\"2、操作系统的特征\"></a>2、操作系统的特征</h2><ul>\n<li><p><strong>并发性：</strong> 多个事件在同一事件间隔内发生（并行：同一时刻）。并发的实质是一个物理CPU(也可以多个物理CPU) 在若干道程序之间多路复用，并发性是对有限物理资源强制行使多用户共享以提高效率。</p>\n</li>\n<li><p><strong>共享性：</strong> 系统中的资源可供多个并发执行的进程共同使用。有两种资源共享方式：</p>\n<ul>\n<li>互斥共享：一段时间只允许一个进程访问。如对摄像头设备的共享使用</li>\n<li>同时访问：一段时间允许多个进程访问。如对硬盘资源的共享使用</li>\n</ul>\n<p>  &#x3D;&#x3D;并发和共享是操作系统的两个最基本特征，二者之间互为存在条件。&#x3D;&#x3D; </p>\n</li>\n<li><p><strong>虚拟性：</strong> 把一个物理上的实体变为若干个逻辑上的对应物；或把物理上的多个实体变成逻辑上的一个对应物的技术。eg.虚拟存储器</p>\n<ul>\n<li><p>空分复用技术：如虚拟存储技术</p>\n</li>\n<li><p>时分复用技术：如虚拟处理器技术</p>\n<p>  并发性是虚拟性存在的基础</p>\n</li>\n</ul>\n</li>\n<li><p><strong>异步性（或不确定性）：</strong> 多个作业的执行过程是走走停停的，其执行顺序和每个作业的执行时间是不确定的。</p>\n</li>\n</ul>\n<h2 id=\"3、操作系统的发展与分类\"><a href=\"#3、操作系统的发展与分类\" class=\"headerlink\" title=\"3、操作系统的发展与分类\"></a>3、操作系统的发展与分类</h2><p><img data-src=\"https://s2.loli.net/2022/05/13/3AWQXpLSTGkobFC.png\" alt=\"image-20220513201053867\"></p>\n<p>批处理技术是指计算机系统对一批作业自动进行处理的一种技术。</p>\n<p>分类：</p>\n<ul>\n<li>联机批处理：采用联机输入&#x2F;输出，即输入&#x2F;输出操作在监督程序控制下，同步进行。 缺点：速度慢 </li>\n<li>脱机批处理：外围机：独立于主机，负责把作业任务写入磁带，以及从磁带输出到打印机。主机：负责从磁带上把作业调入内存，或者把结果写回磁带。实现了部分异步能力、减少了CPU的空闲时间、提高了I&#x2F;O速度</li>\n</ul>\n<hr>\n<p>多道程序设计：</p>\n<ul>\n<li><strong>核心思想：</strong> 将多个作业存放在主存中，这些程序在管理程序的控制下交替运行，共享处理机和系统中的其他资源。即通过安排作业（编码与数据）&#x3D;&#x3D;使得CPU无论何时都有进程执行，从而最大化CPU利用率&#x3D;&#x3D; </li>\n<li>没有提供用户与计算机系统的交互</li>\n<li>多道程序宏观上并行，微观上串行</li>\n<li>多道程序设计的道数不是任意的</li>\n<li><strong>优缺点：</strong> <ul>\n<li>提高了CPU的利用率</li>\n<li>提高了内存和I&#x2F;O设备的利用率</li>\n<li>改进了系统的吞吐率</li>\n<li>充分发挥了系统的并行性</li>\n<li>其主要缺点是: 作业周转时间延长</li>\n</ul>\n</li>\n<li>**多重处理系统:   ** 指配置了多个物理CPU，能真正同时执行多道程序的系统。</li>\n</ul>\n<hr>\n<p>&#x3D;&#x3D;操作系统的三种基本类型：批处理操作系统、分时操作系统、实时操作系统&#x3D;&#x3D; </p>\n<p>分时系统：允许多个联机用户同时使用一台计算机系统进行计算的操作系统称分时操作系统</p>\n<p><strong>分时技术：</strong> 把处理机的运行时间分成很短的时间片，按时间片轮流把处理机分配给各联机作业使用。</p>\n<p>是多道程序设计的自然延伸</p>\n<p>采用调度算法，以快速切换作业，好像每个作业同时执行</p>\n<p><strong>特征：</strong> </p>\n<ul>\n<li>多路性：也称同时性，一台计算机与若干台终端相连接，终端上的这些用户可以同时使用计算机。</li>\n<li>交互性：用户通过终端采用人机会话的方式直接控制程序运行，同程序进行交互。</li>\n<li>独立性：用户彼此之间都感觉不到别人也在使用这台计算机，好像只有自己独占计算机一样。</li>\n<li>及时性：用户请求能在很短时间内获得响应。</li>\n</ul>\n<h2 id=\"4、操作系统的运行机制与体系结构\"><a href=\"#4、操作系统的运行机制与体系结构\" class=\"headerlink\" title=\"4、操作系统的运行机制与体系结构\"></a>4、操作系统的运行机制与体系结构</h2><p><img data-src=\"https://s2.loli.net/2022/05/13/uCvXRb5ixgc4ep9.png\" alt=\"image-20220513203343485\"></p>\n<blockquote>\n<p>用程序状态字寄存器（PSW， program status word）中的某标志位来标识当前处理器处于什么状态。如0为用户态，1为核心态</p>\n</blockquote>\n<hr>\n<p>内核是操作系统的构件，或称基本单位。 </p>\n<p>内核作用：  为进程提供管理 、为进程执行提供良好的运行环境</p>\n<p>&#x3D;&#x3D;基本功能:&#x3D;&#x3D;  </p>\n<ul>\n<li>中断处理：截获中断，转向中断处理例程</li>\n<li>短程调度：CPU调度，保存与恢复现场</li>\n<li>原语管理：原语是不可中断过程</li>\n</ul>\n<p>&#x3D;&#x3D;基本属性:&#x3D;&#x3D; </p>\n<ul>\n<li>内核是由中断驱动的</li>\n<li>内核的执行是连续的</li>\n<li>内核在屏蔽中断状态下执行</li>\n<li>内核可以使用特权指令</li>\n</ul>\n<p>&#x3D;&#x3D;分类：&#x3D;&#x3D;</p>\n<ul>\n<li><p><strong>模块结构（整体式结构）</strong>：将内核划分为一个个独立的模块，模块之间相互调用。效率高但是结构不清晰，访问控制困难</p>\n</li>\n<li><p><strong>层次结构</strong>：一种特殊的模块结构。将内核划分为一系列相互依赖的层次，每个层次也可以分解为一系列更小的模块。</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/04/2PkGeSmIBXyOTai.png\"></p>\n</li>\n<li><p><strong>微内核结构</strong></p>\n</li>\n</ul>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/OzmplexJuwFcj24.png\" alt=\"image-20220513202231353\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/7S4E6d3gHUeNlpI.png\" alt=\"image-20220513202617422\"></p>\n<h2 id=\"5、中断和异常\"><a href=\"#5、中断和异常\" class=\"headerlink\" title=\"5、中断和异常\"></a>5、中断和异常</h2><p><img data-src=\"https://s2.loli.net/2022/05/13/ojrdODLXqEezi3G.png\" alt=\"image-20220513205554625\"></p>\n<p>&#x3D;&#x3D;用户态 → 核心态是通过中断实现的，并且中断是唯一途径&#x3D;&#x3D;</p>\n<p>&#x3D;&#x3D;核心态 → 用户态的切换是通过执行一个特权指令，将程序状态字（PSW）的标志位设置为“用户态”&#x3D;&#x3D;</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/twndlTegkLJ6x9X.png\" alt=\"image-20220513205029547\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/EYTzjIOvW7drqfx.png\" alt=\"image-20220513205136837\"></p>\n<p><strong>外中断的处理过程：</strong></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/oRmXYrNvBUkTgfI.png\" alt=\"image-20220513205420243\"></p>\n<h2 id=\"6、系统调用\"><a href=\"#6、系统调用\" class=\"headerlink\" title=\"6、系统调用\"></a>6、系统调用</h2><p><img data-src=\"https://s2.loli.net/2022/05/13/xzmwb1KdrT5MIsp.png\" alt=\"image-20220513213014300\"></p>\n<p>系统调用是操作系统提供给应用程序（程序员&#x2F;编程人员）使用的接口，可以理解为一种可供应用程序调用的特殊函数，应用程序可以发出系统调用请求来获得操作系统的服务。</p>\n<p>系统调用与库函数的区别：</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/tK9mNhM6OdzepCP.png\" alt=\"image-20220513211951839\"></p>\n<p>系统调用背后的过程：</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/obNKP1RrQt9sBuV.png\" alt=\"image-20220513212751507\"></p>\n<p>中断、异常和系统调用：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>产生原因</th>\n<th>实现机制</th>\n<th>区别</th>\n<th>保存地址</th>\n<th>处理</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>中断</strong></td>\n<td>由定时器和I&#x2F;O设备产生（来自硬件设备的处理请求）</td>\n<td>中断机制</td>\n<td>①由与现行指令无关的中断信号触发的(异步的)；②中断的发生与CPU处在用户模式或内核模式无关，系统不能确定中断发生的时间 ；③一般来说，中断处理程序提供的服务不是为当前进程所需的</td>\n<td>保存的是下一条指令的地址，以便在指令结束后检测有没有中断</td>\n<td><strong>硬件和软件结合</strong> 。①定时器：定时器是OS回收控制的重要方式，可设置为在指定周期（固定或可变）后中断计算机。防止用户程序陷入死循环，或不调用系统服务并且不将控制返回给操作系统。在将控制交到用户之前，操作系统确保定时器已设置好以便产生中断；②中断装置（发生中断源并产生中断的<strong>硬件</strong> ）：发现中断源、保护现场、启动中断处理程序（IDTR寄存器中存放了中断描述符表在内存的起始地址）；③中断处理程序： 保护未被硬件保护的一些必需的处理状态 （CPU自动保存的只有EIP&#x2F;EFLAGS&#x2F;ESP&#x2F;SS&#x2F;CS） ；识别各个中断源，分析产生中断的原因；处理中断事件；恢复正常操作；④OS必须保证中断前后的同步性，必须保证现场保护的原子性（保护现场的过程不能被中断）</td>\n</tr>\n<tr>\n<td><strong>异常</strong></td>\n<td>由程序错误产生，或者由内核必须处理的异常条件产生</td>\n<td>中断机制</td>\n<td>① 由处理器正在执行现行指令而引起的； ②异常处理程序提供的服务是为当前进程所用的；③异常包括出错、陷入、终止和编程异常等等；④异常通常由意想不到的行为触发</td>\n<td>出错保存的是当前指令的地址，陷入保存的是下一条指令的地址</td>\n<td>①由硬件检测并处理（如除0）；②硬件自身出错产生的异常：通常会在检测错误之后重新执行该指令，CPU保存运行状态；③有些异常是修复后返回并重新执行出错的指令（如页错误）；有些异常是OS通知相应进程；④异常发生在内核会导致OS崩溃</td>\n</tr>\n<tr>\n<td><strong>系统调用</strong></td>\n<td>程序主动请求操作系统服务</td>\n<td>通常通过一种特殊的异常来实现</td>\n<td>程序主动请求系统服务</td>\n<td>保存的是下一条指令的地址</td>\n<td>提供给用户态程序执行特权操作的接口；触发事件，切换至内核态；传递系统调用的参数； 保存状态以便完成系统调用后恢复执行</td>\n</tr>\n</tbody></table>\n<h2 id=\"7、-x3D-x3D-可能的大题：多道程序运行、简答题-x3D-x3D\"><a href=\"#7、-x3D-x3D-可能的大题：多道程序运行、简答题-x3D-x3D\" class=\"headerlink\" title=\"7、&#x3D;&#x3D;可能的大题：多道程序运行、简答题&#x3D;&#x3D;\"></a>7、&#x3D;&#x3D;可能的大题：多道程序运行、简答题&#x3D;&#x3D;</h2><h3 id=\"甘特图\"><a href=\"#甘特图\" class=\"headerlink\" title=\"甘特图\"></a>甘特图</h3><p>计算作业完成时间，CPU或者I&#x2F;O设备的利用率等等</p>\n<p>资源利用率：CPU利用率 &#x3D; CPU有效工作时间&#x2F;CPU总的运行时间， CPU总的运行时间 &#x3D; CPU有效工作时间+CPU空闲等待时间。</p>\n<p>I&#x2F;O设备的利用率同理。</p>\n<p>&#x3D;&#x3D;注意考虑优先级以及是否能够抢占&#x3D;&#x3D;</p>\n<p><strong>（1）</strong>在单CPU和两台I&#x2F;O(I1,I2)设备的多道程序设计环境下，同时投入三个作业运行。它们的执行轨迹如下：</p>\n<p>Job1：I2(30ms)、CPU(10ms)、I1(30ms)、CPU(10ms)</p>\n<p>Job2：I1(20ms)、CPU(20ms)、I2(40ms)</p>\n<p>Job3：CPU(30ms)、I1(20ms)</p>\n<p>如果CPU、I1和I2都能并行工作，优先级从高到低为Job1、Job2和Job3，优先级高的作业可以抢占优先级低的作业的CPU。试求：(1)每个作业从投入到完成分别所需的时间。(2) 每个作业投入到完成CPU的利用率。(3)I&#x2F;O设备利用率。</p>\n<p><strong>答：</strong>画出三个作业并行工作图如下(图中着色部分为作业等待时间)：</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/14/FxBnaZuVIQ8Nhe7.png\" alt=\"img\"></p>\n<p>(1) Job1从投入到运行完成需80ms，Job2从投入到运行完成需90ms，Job3从投入到运行完成需90ms。</p>\n<p>(2) CPU空闲时间段为：60ms至70ms，80ms至90ms。所以CPU利用率为(90-20)&#x2F;90&#x3D;77.78%。</p>\n<p>(3) 设备I1空闲时间段为：20ms至40ms，故I1的利用率为(90-20)&#x2F;90&#x3D;77.78%。设备I2空闲时间段为：30ms至50ms，故I2的利用率为(90-20)&#x2F;90&#x3D;77.78%。</p>\n<p>2、 若内存中有3道程序A、B、C，它们按A、B、C优先次序运行（不考虑强占）。各程序的计算轨迹为：</p>\n<p>A：计算(20)、I&#x2F;O(30)、计算(10) </p>\n<p>B：计算(40)、I&#x2F;O(20)、计算(10)</p>\n<p>C：计算(10)、I&#x2F;O(30)、计算(20)</p>\n<p>如果三道程序都使用相同设备进行I&#x2F;O(即程序用串行方式使用设备，调度开销忽略不计)。试分别画出单道和多道运行的时间关系图。两种情况下，CPU的平均利用率各为多少?</p>\n<p><strong>答</strong>：分别画出单道和多道运行的时间图</p>\n<p>(1) 单道运行时间关系图</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/05/14/FhG1CTOSvzJu8EM.png\" alt=\"img\"></p>\n<p>单道总运行时间为190ms。CPU利用率为(190-80)&#x2F;190&#x3D;57.9%</p>\n<p>(2) 多道运行时间关系图</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/05/14/vworFI23sGiWeKp.png\" alt=\"img\"></p>\n<p>多道总运行时间为140ms。CPU利用率为(140-30)&#x2F;140&#x3D;78.6%</p>\n","site":{"data":{"post-body-end":"<div>\n    \n</div>\n","styles":"body {\n  background: url(\"/images/background.png\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 100% 100%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.8);\n}\n.popup {\n  opacity: 0.8;\n}\n.post-block {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.comments {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.post {\n  margin-top: 60px;\n  padding: 20px;\n  margin-bottom: 60px;\n  -webkit-box-shadow: 0 0 0px #788072;\n  -moz-box-shadow: 0 0 0px rgba(202,203,204,0.5);\n}\n.post-button .btn {\n  color: #555 !important;\n  background-color: #fff;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  border: none !important;\n  transition-property: unset;\n  padding: 0px 15px;\n}\n.post-button .btn:hover {\n  color: #fff !important;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  background-image: linear-gradient(90deg, #a166ab 0%, #ef4e7b 25%, #f37055 50%, #ef4e7b 75%, #a166ab 100%);\n}\n","variables":""}},"length":4655,"excerpt":"","more":"<h1 id=\"一、操作系统绪论\"><a href=\"#一、操作系统绪论\" class=\"headerlink\" title=\"一、操作系统绪论\"></a>一、操作系统绪论</h1><h2 id=\"x3D-x3D-重点考察概念-x3D-x3D\"><a href=\"#x3D-x3D-重点考察概念-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;重点考察概念&#x3D;&#x3D;\"></a>&#x3D;&#x3D;重点考察概念&#x3D;&#x3D;</h2><p>操作系统的定义，操作系统在计算机系统中的地位，操作系统的主要功能，资源复用、虚化、抽象，操作系统的特征，多道程序设计，并发，中断，系统调用，CPU 的两种工作模式（用户态、内核态），特权指令和非特权指令 </p>\n<h2 id=\"1、操作系统概念、功能及提供的接口\"><a href=\"#1、操作系统概念、功能及提供的接口\" class=\"headerlink\" title=\"1、操作系统概念、功能及提供的接口\"></a>1、操作系统概念、功能及提供的接口</h2><p><strong>操作系统的概念</strong>：管理计算机硬件并提供应用程序运行环境的软件。操作系统是配置在计算机硬件上的第一层软件，是对硬件的首次扩充，形成了虚拟计算机&#x2F;扩展机。它位于硬件与其它软件之间，是所有其他软件运行的基础。</p>\n<p><strong>操作系统的作用：</strong></p>\n<p><strong>用户视角：</strong> 操作系统是用户与计算机硬件之间的接口。为用户使用计算机提供服务。</p>\n<p><strong>系统视角：</strong> </p>\n<ul>\n<li>&#x3D;&#x3D;资源管理器&#x3D;&#x3D; ：管理计算机系统的软硬件资源。<strong>资源复用、资源虚化以及资源抽象</strong> 。<ul>\n<li>资源复用：分为时间复用和空间复用。时间复用指的是多个用户或程序轮流使用某个资源，如CPU使用；空间复用指的是多个用户或程序同时使用资源的一部分，如内存使用。</li>\n<li>资源虚化：让一个物理设备变成多个相对独立的对应物</li>\n<li>资源抽象：对内封装细节，对外通过管理对象与访问接口，如：面向进程而不是CPU，面向文件而不是物理存储介质，面向窗口而不是屏幕</li>\n<li>&#x3D;&#x3D;复用与虚拟化解决的是资源不足的问题。资源抽象解决的是资源复杂的问题。&#x3D;&#x3D;</li>\n</ul>\n</li>\n<li>&#x3D;&#x3D;控制程序&#x3D;&#x3D; ：控制程序执行过程，防止错误和计算机的不当使用</li>\n</ul>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/msaGykqzLiVtrDT.png\" alt=\"image-20220513191418134\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/HKJvnRhTVw89bdC.png\" alt=\"image-20220513193433159\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/AQW3CRkS6fHpBNw.png\" alt=\"image-20220513192502110\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/LiEpfK6Awz8WFvs.png\" alt=\"image-20220513193123123\"></p>\n<p>联机命令接口 &#x3D; 交互命令接口，如命令行</p>\n<p>脱机命令接口 &#x3D; 批处理命令接口，如*.bat文件</p>\n<p>程序接口：如dll文件，调用dll文件即可进行系统调用，只能通过应用程序间接使用</p>\n<h2 id=\"2、操作系统的特征\"><a href=\"#2、操作系统的特征\" class=\"headerlink\" title=\"2、操作系统的特征\"></a>2、操作系统的特征</h2><ul>\n<li><p><strong>并发性：</strong> 多个事件在同一事件间隔内发生（并行：同一时刻）。并发的实质是一个物理CPU(也可以多个物理CPU) 在若干道程序之间多路复用，并发性是对有限物理资源强制行使多用户共享以提高效率。</p>\n</li>\n<li><p><strong>共享性：</strong> 系统中的资源可供多个并发执行的进程共同使用。有两种资源共享方式：</p>\n<ul>\n<li>互斥共享：一段时间只允许一个进程访问。如对摄像头设备的共享使用</li>\n<li>同时访问：一段时间允许多个进程访问。如对硬盘资源的共享使用</li>\n</ul>\n<p>  &#x3D;&#x3D;并发和共享是操作系统的两个最基本特征，二者之间互为存在条件。&#x3D;&#x3D; </p>\n</li>\n<li><p><strong>虚拟性：</strong> 把一个物理上的实体变为若干个逻辑上的对应物；或把物理上的多个实体变成逻辑上的一个对应物的技术。eg.虚拟存储器</p>\n<ul>\n<li><p>空分复用技术：如虚拟存储技术</p>\n</li>\n<li><p>时分复用技术：如虚拟处理器技术</p>\n<p>  并发性是虚拟性存在的基础</p>\n</li>\n</ul>\n</li>\n<li><p><strong>异步性（或不确定性）：</strong> 多个作业的执行过程是走走停停的，其执行顺序和每个作业的执行时间是不确定的。</p>\n</li>\n</ul>\n<h2 id=\"3、操作系统的发展与分类\"><a href=\"#3、操作系统的发展与分类\" class=\"headerlink\" title=\"3、操作系统的发展与分类\"></a>3、操作系统的发展与分类</h2><p><img data-src=\"https://s2.loli.net/2022/05/13/3AWQXpLSTGkobFC.png\" alt=\"image-20220513201053867\"></p>\n<p>批处理技术是指计算机系统对一批作业自动进行处理的一种技术。</p>\n<p>分类：</p>\n<ul>\n<li>联机批处理：采用联机输入&#x2F;输出，即输入&#x2F;输出操作在监督程序控制下，同步进行。 缺点：速度慢 </li>\n<li>脱机批处理：外围机：独立于主机，负责把作业任务写入磁带，以及从磁带输出到打印机。主机：负责从磁带上把作业调入内存，或者把结果写回磁带。实现了部分异步能力、减少了CPU的空闲时间、提高了I&#x2F;O速度</li>\n</ul>\n<hr>\n<p>多道程序设计：</p>\n<ul>\n<li><strong>核心思想：</strong> 将多个作业存放在主存中，这些程序在管理程序的控制下交替运行，共享处理机和系统中的其他资源。即通过安排作业（编码与数据）&#x3D;&#x3D;使得CPU无论何时都有进程执行，从而最大化CPU利用率&#x3D;&#x3D; </li>\n<li>没有提供用户与计算机系统的交互</li>\n<li>多道程序宏观上并行，微观上串行</li>\n<li>多道程序设计的道数不是任意的</li>\n<li><strong>优缺点：</strong> <ul>\n<li>提高了CPU的利用率</li>\n<li>提高了内存和I&#x2F;O设备的利用率</li>\n<li>改进了系统的吞吐率</li>\n<li>充分发挥了系统的并行性</li>\n<li>其主要缺点是: 作业周转时间延长</li>\n</ul>\n</li>\n<li>**多重处理系统:   ** 指配置了多个物理CPU，能真正同时执行多道程序的系统。</li>\n</ul>\n<hr>\n<p>&#x3D;&#x3D;操作系统的三种基本类型：批处理操作系统、分时操作系统、实时操作系统&#x3D;&#x3D; </p>\n<p>分时系统：允许多个联机用户同时使用一台计算机系统进行计算的操作系统称分时操作系统</p>\n<p><strong>分时技术：</strong> 把处理机的运行时间分成很短的时间片，按时间片轮流把处理机分配给各联机作业使用。</p>\n<p>是多道程序设计的自然延伸</p>\n<p>采用调度算法，以快速切换作业，好像每个作业同时执行</p>\n<p><strong>特征：</strong> </p>\n<ul>\n<li>多路性：也称同时性，一台计算机与若干台终端相连接，终端上的这些用户可以同时使用计算机。</li>\n<li>交互性：用户通过终端采用人机会话的方式直接控制程序运行，同程序进行交互。</li>\n<li>独立性：用户彼此之间都感觉不到别人也在使用这台计算机，好像只有自己独占计算机一样。</li>\n<li>及时性：用户请求能在很短时间内获得响应。</li>\n</ul>\n<h2 id=\"4、操作系统的运行机制与体系结构\"><a href=\"#4、操作系统的运行机制与体系结构\" class=\"headerlink\" title=\"4、操作系统的运行机制与体系结构\"></a>4、操作系统的运行机制与体系结构</h2><p><img data-src=\"https://s2.loli.net/2022/05/13/uCvXRb5ixgc4ep9.png\" alt=\"image-20220513203343485\"></p>\n<blockquote>\n<p>用程序状态字寄存器（PSW， program status word）中的某标志位来标识当前处理器处于什么状态。如0为用户态，1为核心态</p>\n</blockquote>\n<hr>\n<p>内核是操作系统的构件，或称基本单位。 </p>\n<p>内核作用：  为进程提供管理 、为进程执行提供良好的运行环境</p>\n<p>&#x3D;&#x3D;基本功能:&#x3D;&#x3D;  </p>\n<ul>\n<li>中断处理：截获中断，转向中断处理例程</li>\n<li>短程调度：CPU调度，保存与恢复现场</li>\n<li>原语管理：原语是不可中断过程</li>\n</ul>\n<p>&#x3D;&#x3D;基本属性:&#x3D;&#x3D; </p>\n<ul>\n<li>内核是由中断驱动的</li>\n<li>内核的执行是连续的</li>\n<li>内核在屏蔽中断状态下执行</li>\n<li>内核可以使用特权指令</li>\n</ul>\n<p>&#x3D;&#x3D;分类：&#x3D;&#x3D;</p>\n<ul>\n<li><p><strong>模块结构（整体式结构）</strong>：将内核划分为一个个独立的模块，模块之间相互调用。效率高但是结构不清晰，访问控制困难</p>\n</li>\n<li><p><strong>层次结构</strong>：一种特殊的模块结构。将内核划分为一系列相互依赖的层次，每个层次也可以分解为一系列更小的模块。</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/04/2PkGeSmIBXyOTai.png\"></p>\n</li>\n<li><p><strong>微内核结构</strong></p>\n</li>\n</ul>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/OzmplexJuwFcj24.png\" alt=\"image-20220513202231353\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/7S4E6d3gHUeNlpI.png\" alt=\"image-20220513202617422\"></p>\n<h2 id=\"5、中断和异常\"><a href=\"#5、中断和异常\" class=\"headerlink\" title=\"5、中断和异常\"></a>5、中断和异常</h2><p><img data-src=\"https://s2.loli.net/2022/05/13/ojrdODLXqEezi3G.png\" alt=\"image-20220513205554625\"></p>\n<p>&#x3D;&#x3D;用户态 → 核心态是通过中断实现的，并且中断是唯一途径&#x3D;&#x3D;</p>\n<p>&#x3D;&#x3D;核心态 → 用户态的切换是通过执行一个特权指令，将程序状态字（PSW）的标志位设置为“用户态”&#x3D;&#x3D;</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/twndlTegkLJ6x9X.png\" alt=\"image-20220513205029547\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/EYTzjIOvW7drqfx.png\" alt=\"image-20220513205136837\"></p>\n<p><strong>外中断的处理过程：</strong></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/oRmXYrNvBUkTgfI.png\" alt=\"image-20220513205420243\"></p>\n<h2 id=\"6、系统调用\"><a href=\"#6、系统调用\" class=\"headerlink\" title=\"6、系统调用\"></a>6、系统调用</h2><p><img data-src=\"https://s2.loli.net/2022/05/13/xzmwb1KdrT5MIsp.png\" alt=\"image-20220513213014300\"></p>\n<p>系统调用是操作系统提供给应用程序（程序员&#x2F;编程人员）使用的接口，可以理解为一种可供应用程序调用的特殊函数，应用程序可以发出系统调用请求来获得操作系统的服务。</p>\n<p>系统调用与库函数的区别：</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/tK9mNhM6OdzepCP.png\" alt=\"image-20220513211951839\"></p>\n<p>系统调用背后的过程：</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/obNKP1RrQt9sBuV.png\" alt=\"image-20220513212751507\"></p>\n<p>中断、异常和系统调用：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>产生原因</th>\n<th>实现机制</th>\n<th>区别</th>\n<th>保存地址</th>\n<th>处理</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>中断</strong></td>\n<td>由定时器和I&#x2F;O设备产生（来自硬件设备的处理请求）</td>\n<td>中断机制</td>\n<td>①由与现行指令无关的中断信号触发的(异步的)；②中断的发生与CPU处在用户模式或内核模式无关，系统不能确定中断发生的时间 ；③一般来说，中断处理程序提供的服务不是为当前进程所需的</td>\n<td>保存的是下一条指令的地址，以便在指令结束后检测有没有中断</td>\n<td><strong>硬件和软件结合</strong> 。①定时器：定时器是OS回收控制的重要方式，可设置为在指定周期（固定或可变）后中断计算机。防止用户程序陷入死循环，或不调用系统服务并且不将控制返回给操作系统。在将控制交到用户之前，操作系统确保定时器已设置好以便产生中断；②中断装置（发生中断源并产生中断的<strong>硬件</strong> ）：发现中断源、保护现场、启动中断处理程序（IDTR寄存器中存放了中断描述符表在内存的起始地址）；③中断处理程序： 保护未被硬件保护的一些必需的处理状态 （CPU自动保存的只有EIP&#x2F;EFLAGS&#x2F;ESP&#x2F;SS&#x2F;CS） ；识别各个中断源，分析产生中断的原因；处理中断事件；恢复正常操作；④OS必须保证中断前后的同步性，必须保证现场保护的原子性（保护现场的过程不能被中断）</td>\n</tr>\n<tr>\n<td><strong>异常</strong></td>\n<td>由程序错误产生，或者由内核必须处理的异常条件产生</td>\n<td>中断机制</td>\n<td>① 由处理器正在执行现行指令而引起的； ②异常处理程序提供的服务是为当前进程所用的；③异常包括出错、陷入、终止和编程异常等等；④异常通常由意想不到的行为触发</td>\n<td>出错保存的是当前指令的地址，陷入保存的是下一条指令的地址</td>\n<td>①由硬件检测并处理（如除0）；②硬件自身出错产生的异常：通常会在检测错误之后重新执行该指令，CPU保存运行状态；③有些异常是修复后返回并重新执行出错的指令（如页错误）；有些异常是OS通知相应进程；④异常发生在内核会导致OS崩溃</td>\n</tr>\n<tr>\n<td><strong>系统调用</strong></td>\n<td>程序主动请求操作系统服务</td>\n<td>通常通过一种特殊的异常来实现</td>\n<td>程序主动请求系统服务</td>\n<td>保存的是下一条指令的地址</td>\n<td>提供给用户态程序执行特权操作的接口；触发事件，切换至内核态；传递系统调用的参数； 保存状态以便完成系统调用后恢复执行</td>\n</tr>\n</tbody></table>\n<h2 id=\"7、-x3D-x3D-可能的大题：多道程序运行、简答题-x3D-x3D\"><a href=\"#7、-x3D-x3D-可能的大题：多道程序运行、简答题-x3D-x3D\" class=\"headerlink\" title=\"7、&#x3D;&#x3D;可能的大题：多道程序运行、简答题&#x3D;&#x3D;\"></a>7、&#x3D;&#x3D;可能的大题：多道程序运行、简答题&#x3D;&#x3D;</h2><h3 id=\"甘特图\"><a href=\"#甘特图\" class=\"headerlink\" title=\"甘特图\"></a>甘特图</h3><p>计算作业完成时间，CPU或者I&#x2F;O设备的利用率等等</p>\n<p>资源利用率：CPU利用率 &#x3D; CPU有效工作时间&#x2F;CPU总的运行时间， CPU总的运行时间 &#x3D; CPU有效工作时间+CPU空闲等待时间。</p>\n<p>I&#x2F;O设备的利用率同理。</p>\n<p>&#x3D;&#x3D;注意考虑优先级以及是否能够抢占&#x3D;&#x3D;</p>\n<p><strong>（1）</strong>在单CPU和两台I&#x2F;O(I1,I2)设备的多道程序设计环境下，同时投入三个作业运行。它们的执行轨迹如下：</p>\n<p>Job1：I2(30ms)、CPU(10ms)、I1(30ms)、CPU(10ms)</p>\n<p>Job2：I1(20ms)、CPU(20ms)、I2(40ms)</p>\n<p>Job3：CPU(30ms)、I1(20ms)</p>\n<p>如果CPU、I1和I2都能并行工作，优先级从高到低为Job1、Job2和Job3，优先级高的作业可以抢占优先级低的作业的CPU。试求：(1)每个作业从投入到完成分别所需的时间。(2) 每个作业投入到完成CPU的利用率。(3)I&#x2F;O设备利用率。</p>\n<p><strong>答：</strong>画出三个作业并行工作图如下(图中着色部分为作业等待时间)：</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/14/FxBnaZuVIQ8Nhe7.png\" alt=\"img\"></p>\n<p>(1) Job1从投入到运行完成需80ms，Job2从投入到运行完成需90ms，Job3从投入到运行完成需90ms。</p>\n<p>(2) CPU空闲时间段为：60ms至70ms，80ms至90ms。所以CPU利用率为(90-20)&#x2F;90&#x3D;77.78%。</p>\n<p>(3) 设备I1空闲时间段为：20ms至40ms，故I1的利用率为(90-20)&#x2F;90&#x3D;77.78%。设备I2空闲时间段为：30ms至50ms，故I2的利用率为(90-20)&#x2F;90&#x3D;77.78%。</p>\n<p>2、 若内存中有3道程序A、B、C，它们按A、B、C优先次序运行（不考虑强占）。各程序的计算轨迹为：</p>\n<p>A：计算(20)、I&#x2F;O(30)、计算(10) </p>\n<p>B：计算(40)、I&#x2F;O(20)、计算(10)</p>\n<p>C：计算(10)、I&#x2F;O(30)、计算(20)</p>\n<p>如果三道程序都使用相同设备进行I&#x2F;O(即程序用串行方式使用设备，调度开销忽略不计)。试分别画出单道和多道运行的时间关系图。两种情况下，CPU的平均利用率各为多少?</p>\n<p><strong>答</strong>：分别画出单道和多道运行的时间图</p>\n<p>(1) 单道运行时间关系图</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/05/14/FhG1CTOSvzJu8EM.png\" alt=\"img\"></p>\n<p>单道总运行时间为190ms。CPU利用率为(190-80)&#x2F;190&#x3D;57.9%</p>\n<p>(2) 多道运行时间关系图</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/05/14/vworFI23sGiWeKp.png\" alt=\"img\"></p>\n<p>多道总运行时间为140ms。CPU利用率为(140-30)&#x2F;140&#x3D;78.6%</p>\n"},{"title":"三、进程调度","abbrlink":35788,"date":"2022-06-27T15:05:46.000Z","_content":"\n# 三、进程调度\n\n## ==重点：==\n\n调度的层次：低级调度、中级调度、高级调度\n\n引起进程调度的原因\n\n抢占式和非抢占式调度，周转时间，等待时间\n\n==调度算法==  时间片，进程优先级，高响应比可以不管， 重视多级队列，不超过作业题难度\n\n实时调度概念\n\n## 1、处理机调度的基本概念\n\n![image-20220520083413143](https://s2.loli.net/2022/05/20/PqpV7zcuSgAUL5v.png)\n\n![image-20220314093421092](https://s2.loli.net/2022/03/14/2GmBQDkHjsiAPy6.png)\n\n \n\n## 2、进程调度的时机、过程和方式\n\n![image-20220520085145159](https://s2.loli.net/2022/05/20/Fmr7aO5N9dtszGb.png)\n\n![image-20220520085014437](https://s2.loli.net/2022/05/20/pcZnNOMo5ugamv8.png)\n\n## 3、调度算法的评价指标\n\n![image-20220520090857781](https://s2.loli.net/2022/05/20/ecKivlW2Lb1jnNF.png)\n\n- CPU利用率指CPU忙碌的时间占总时间的比例。CPU利用率 = 忙碌的时间/总时间\n\n- 系统吞吐量指单位时间内完成作业的数量。系统吞吐量 = 总共完成了多少道作业 / 总共花了多少时间\n\n- 周转时间：从作业提交给系统开始，到作业完成为止的这段时间间隔。周转时间 = 作业完成时间 - 作业提交时间。\n\n- 平均周转时间 = 各作业周转时间之和 / 作业数\n\n- 带权周转时间 = 作业周转时间 / 作业实际运行的时间 = (作业完成时间 - 作业提交时间) / 作业实际运行的时间\n\n- 平均带权周转时间 = 各作业带权周转时间之和 / 作业数\n\n- 等待时间：指进程/作业处于等待处理机状态时间之和\n\n    ![image-20220520090716035](https://s2.loli.net/2022/05/20/AlPaLcNSMfE8YC7.png)\n\n- 响应时间：从用户提交请求到首次产生响应所用的时间\n\n## ==4、调度算法==\n\n![image-20220520095505721](https://s2.loli.net/2022/05/20/JoeG3fn18mzbvIp.png)\n\n![image-20220520104630768](https://s2.loli.net/2022/05/20/MKsupUYmCxJE7WG.png)\n\n### （1）先来先服务（FCFS）\n\n考虑作业的等待时间\n\n![image-20220520092445844](https://s2.loli.net/2022/05/20/v8k5tBYWVThbQ4g.png)\n\n![image-20220520092236752](https://s2.loli.net/2022/05/20/SHnKZd7Wa3vcPmr.png)\n\n### （2）短作业优先\n\n考虑作业的运行时间\n\n![image-20220520094247319](https://s2.loli.net/2022/05/20/94JzSmAiaP5jBRb.png)\n\n![image-20220520094114612](https://s2.loli.net/2022/05/20/Bk3YS9dGruoTWOl.png)\n\n![image-20220520092954098](https://s2.loli.net/2022/05/20/cn1wtYv6B78lpTe.png)\n\n![image-20220520093622737](https://s2.loli.net/2022/05/20/osPMXSpyvK3NTCZ.png)\n\n![image-20220520093730231](https://s2.loli.net/2022/05/20/sG3ZJP9DRdKlH2e.png)\n\n### （3）高响应比优先\n\n![image-20220520095245768](https://s2.loli.net/2022/05/20/my9UwruzFTjLt5N.png)\n\n\n\n![image-20220520095132854](https://s2.loli.net/2022/05/20/zgEpmj17vwMSbo5.png)\n\n-----------------------\n\n\n\n### （4）时间片轮转调度算法（RR）\n\n![image-20220520101410525](https://s2.loli.net/2022/05/20/mcwBOxYhr8otI7z.png)\n\n![image-20220520100727740](https://s2.loli.net/2022/05/20/BeYU9XjykCD24sR.png)\n\n\n\n![image-20220520101604794](https://s2.loli.net/2022/05/20/l8L1IdpDo2h9HfS.png)\n\n> 如果RR和优先级结合考虑的话，那么FCFS队列变为优先级队列，同优先级则FCFS。当一个进程正在运行时，如果有更高优先级的进程到来，处理机立即被抢占；如果有同等优先级的进程在等待，执行完当前时间片后让出处理机；如果有低优先级的进程到来或者在等待，则不会被抢占。\n\n### （5）优先级调度算法\n\n![image-20220520102840867](https://s2.loli.net/2022/05/20/G5VbhWiEMqUoNQg.png)\n\n![image-20220520101957020](https://s2.loli.net/2022/05/20/5Jr2HGj3YQd4sFC.png)\n\n![image-20220520102237628](https://s2.loli.net/2022/05/20/8ZshCGOIJfSFBo1.png)\n\n![image-20220520102742626](https://s2.loli.net/2022/05/20/if6V8BLPaINGKhn.png)\n\n### （6）多级反馈队列调度算法\n\n![image-20220520104355407](https://s2.loli.net/2022/05/20/g8Kju6BQw52FMPd.png)\n\n![image-20220520103557785](https://s2.loli.net/2022/05/20/7T4HiSVvycBFeAL.png)\n\n----\n\n对于实时调度，调度器必须支持**抢占的基于优先权的调度**。可以根据进程的截止期限、任务速率来进行分配优先级\n","source":"_posts/三、进程调度.md","raw":"---\ntitle: 三、进程调度\ntags:\n  - 操作系统\ncategory:\n  - 操作系统\nabbrlink: 35788\ndate: 2022-06-27 23:05:46\n---\n\n# 三、进程调度\n\n## ==重点：==\n\n调度的层次：低级调度、中级调度、高级调度\n\n引起进程调度的原因\n\n抢占式和非抢占式调度，周转时间，等待时间\n\n==调度算法==  时间片，进程优先级，高响应比可以不管， 重视多级队列，不超过作业题难度\n\n实时调度概念\n\n## 1、处理机调度的基本概念\n\n![image-20220520083413143](https://s2.loli.net/2022/05/20/PqpV7zcuSgAUL5v.png)\n\n![image-20220314093421092](https://s2.loli.net/2022/03/14/2GmBQDkHjsiAPy6.png)\n\n \n\n## 2、进程调度的时机、过程和方式\n\n![image-20220520085145159](https://s2.loli.net/2022/05/20/Fmr7aO5N9dtszGb.png)\n\n![image-20220520085014437](https://s2.loli.net/2022/05/20/pcZnNOMo5ugamv8.png)\n\n## 3、调度算法的评价指标\n\n![image-20220520090857781](https://s2.loli.net/2022/05/20/ecKivlW2Lb1jnNF.png)\n\n- CPU利用率指CPU忙碌的时间占总时间的比例。CPU利用率 = 忙碌的时间/总时间\n\n- 系统吞吐量指单位时间内完成作业的数量。系统吞吐量 = 总共完成了多少道作业 / 总共花了多少时间\n\n- 周转时间：从作业提交给系统开始，到作业完成为止的这段时间间隔。周转时间 = 作业完成时间 - 作业提交时间。\n\n- 平均周转时间 = 各作业周转时间之和 / 作业数\n\n- 带权周转时间 = 作业周转时间 / 作业实际运行的时间 = (作业完成时间 - 作业提交时间) / 作业实际运行的时间\n\n- 平均带权周转时间 = 各作业带权周转时间之和 / 作业数\n\n- 等待时间：指进程/作业处于等待处理机状态时间之和\n\n    ![image-20220520090716035](https://s2.loli.net/2022/05/20/AlPaLcNSMfE8YC7.png)\n\n- 响应时间：从用户提交请求到首次产生响应所用的时间\n\n## ==4、调度算法==\n\n![image-20220520095505721](https://s2.loli.net/2022/05/20/JoeG3fn18mzbvIp.png)\n\n![image-20220520104630768](https://s2.loli.net/2022/05/20/MKsupUYmCxJE7WG.png)\n\n### （1）先来先服务（FCFS）\n\n考虑作业的等待时间\n\n![image-20220520092445844](https://s2.loli.net/2022/05/20/v8k5tBYWVThbQ4g.png)\n\n![image-20220520092236752](https://s2.loli.net/2022/05/20/SHnKZd7Wa3vcPmr.png)\n\n### （2）短作业优先\n\n考虑作业的运行时间\n\n![image-20220520094247319](https://s2.loli.net/2022/05/20/94JzSmAiaP5jBRb.png)\n\n![image-20220520094114612](https://s2.loli.net/2022/05/20/Bk3YS9dGruoTWOl.png)\n\n![image-20220520092954098](https://s2.loli.net/2022/05/20/cn1wtYv6B78lpTe.png)\n\n![image-20220520093622737](https://s2.loli.net/2022/05/20/osPMXSpyvK3NTCZ.png)\n\n![image-20220520093730231](https://s2.loli.net/2022/05/20/sG3ZJP9DRdKlH2e.png)\n\n### （3）高响应比优先\n\n![image-20220520095245768](https://s2.loli.net/2022/05/20/my9UwruzFTjLt5N.png)\n\n\n\n![image-20220520095132854](https://s2.loli.net/2022/05/20/zgEpmj17vwMSbo5.png)\n\n-----------------------\n\n\n\n### （4）时间片轮转调度算法（RR）\n\n![image-20220520101410525](https://s2.loli.net/2022/05/20/mcwBOxYhr8otI7z.png)\n\n![image-20220520100727740](https://s2.loli.net/2022/05/20/BeYU9XjykCD24sR.png)\n\n\n\n![image-20220520101604794](https://s2.loli.net/2022/05/20/l8L1IdpDo2h9HfS.png)\n\n> 如果RR和优先级结合考虑的话，那么FCFS队列变为优先级队列，同优先级则FCFS。当一个进程正在运行时，如果有更高优先级的进程到来，处理机立即被抢占；如果有同等优先级的进程在等待，执行完当前时间片后让出处理机；如果有低优先级的进程到来或者在等待，则不会被抢占。\n\n### （5）优先级调度算法\n\n![image-20220520102840867](https://s2.loli.net/2022/05/20/G5VbhWiEMqUoNQg.png)\n\n![image-20220520101957020](https://s2.loli.net/2022/05/20/5Jr2HGj3YQd4sFC.png)\n\n![image-20220520102237628](https://s2.loli.net/2022/05/20/8ZshCGOIJfSFBo1.png)\n\n![image-20220520102742626](https://s2.loli.net/2022/05/20/if6V8BLPaINGKhn.png)\n\n### （6）多级反馈队列调度算法\n\n![image-20220520104355407](https://s2.loli.net/2022/05/20/g8Kju6BQw52FMPd.png)\n\n![image-20220520103557785](https://s2.loli.net/2022/05/20/7T4HiSVvycBFeAL.png)\n\n----\n\n对于实时调度，调度器必须支持**抢占的基于优先权的调度**。可以根据进程的截止期限、任务速率来进行分配优先级\n","slug":"三、进程调度","published":1,"updated":"2022-06-27T15:16:47.722Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4ww0pzi00015osk3eb51lsf","content":"<h1 id=\"三、进程调度\"><a href=\"#三、进程调度\" class=\"headerlink\" title=\"三、进程调度\"></a>三、进程调度</h1><h2 id=\"x3D-x3D-重点：-x3D-x3D\"><a href=\"#x3D-x3D-重点：-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;重点：&#x3D;&#x3D;\"></a>&#x3D;&#x3D;重点：&#x3D;&#x3D;</h2><p>调度的层次：低级调度、中级调度、高级调度</p>\n<p>引起进程调度的原因</p>\n<p>抢占式和非抢占式调度，周转时间，等待时间</p>\n<p>&#x3D;&#x3D;调度算法&#x3D;&#x3D;  时间片，进程优先级，高响应比可以不管， 重视多级队列，不超过作业题难度</p>\n<p>实时调度概念</p>\n<h2 id=\"1、处理机调度的基本概念\"><a href=\"#1、处理机调度的基本概念\" class=\"headerlink\" title=\"1、处理机调度的基本概念\"></a>1、处理机调度的基本概念</h2><p><img data-src=\"https://s2.loli.net/2022/05/20/PqpV7zcuSgAUL5v.png\" alt=\"image-20220520083413143\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/03/14/2GmBQDkHjsiAPy6.png\" alt=\"image-20220314093421092\"></p>\n<h2 id=\"2、进程调度的时机、过程和方式\"><a href=\"#2、进程调度的时机、过程和方式\" class=\"headerlink\" title=\"2、进程调度的时机、过程和方式\"></a>2、进程调度的时机、过程和方式</h2><p><img data-src=\"https://s2.loli.net/2022/05/20/Fmr7aO5N9dtszGb.png\" alt=\"image-20220520085145159\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/20/pcZnNOMo5ugamv8.png\" alt=\"image-20220520085014437\"></p>\n<h2 id=\"3、调度算法的评价指标\"><a href=\"#3、调度算法的评价指标\" class=\"headerlink\" title=\"3、调度算法的评价指标\"></a>3、调度算法的评价指标</h2><p><img data-src=\"https://s2.loli.net/2022/05/20/ecKivlW2Lb1jnNF.png\" alt=\"image-20220520090857781\"></p>\n<ul>\n<li><p>CPU利用率指CPU忙碌的时间占总时间的比例。CPU利用率 &#x3D; 忙碌的时间&#x2F;总时间</p>\n</li>\n<li><p>系统吞吐量指单位时间内完成作业的数量。系统吞吐量 &#x3D; 总共完成了多少道作业 &#x2F; 总共花了多少时间</p>\n</li>\n<li><p>周转时间：从作业提交给系统开始，到作业完成为止的这段时间间隔。周转时间 &#x3D; 作业完成时间 - 作业提交时间。</p>\n</li>\n<li><p>平均周转时间 &#x3D; 各作业周转时间之和 &#x2F; 作业数</p>\n</li>\n<li><p>带权周转时间 &#x3D; 作业周转时间 &#x2F; 作业实际运行的时间 &#x3D; (作业完成时间 - 作业提交时间) &#x2F; 作业实际运行的时间</p>\n</li>\n<li><p>平均带权周转时间 &#x3D; 各作业带权周转时间之和 &#x2F; 作业数</p>\n</li>\n<li><p>等待时间：指进程&#x2F;作业处于等待处理机状态时间之和</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/05/20/AlPaLcNSMfE8YC7.png\" alt=\"image-20220520090716035\"></p>\n</li>\n<li><p>响应时间：从用户提交请求到首次产生响应所用的时间</p>\n</li>\n</ul>\n<h2 id=\"x3D-x3D-4、调度算法-x3D-x3D\"><a href=\"#x3D-x3D-4、调度算法-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;4、调度算法&#x3D;&#x3D;\"></a>&#x3D;&#x3D;4、调度算法&#x3D;&#x3D;</h2><p><img data-src=\"https://s2.loli.net/2022/05/20/JoeG3fn18mzbvIp.png\" alt=\"image-20220520095505721\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/20/MKsupUYmCxJE7WG.png\" alt=\"image-20220520104630768\"></p>\n<h3 id=\"（1）先来先服务（FCFS）\"><a href=\"#（1）先来先服务（FCFS）\" class=\"headerlink\" title=\"（1）先来先服务（FCFS）\"></a>（1）先来先服务（FCFS）</h3><p>考虑作业的等待时间</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/20/v8k5tBYWVThbQ4g.png\" alt=\"image-20220520092445844\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/20/SHnKZd7Wa3vcPmr.png\" alt=\"image-20220520092236752\"></p>\n<h3 id=\"（2）短作业优先\"><a href=\"#（2）短作业优先\" class=\"headerlink\" title=\"（2）短作业优先\"></a>（2）短作业优先</h3><p>考虑作业的运行时间</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/20/94JzSmAiaP5jBRb.png\" alt=\"image-20220520094247319\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/20/Bk3YS9dGruoTWOl.png\" alt=\"image-20220520094114612\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/20/cn1wtYv6B78lpTe.png\" alt=\"image-20220520092954098\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/20/osPMXSpyvK3NTCZ.png\" alt=\"image-20220520093622737\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/20/sG3ZJP9DRdKlH2e.png\" alt=\"image-20220520093730231\"></p>\n<h3 id=\"（3）高响应比优先\"><a href=\"#（3）高响应比优先\" class=\"headerlink\" title=\"（3）高响应比优先\"></a>（3）高响应比优先</h3><p><img data-src=\"https://s2.loli.net/2022/05/20/my9UwruzFTjLt5N.png\" alt=\"image-20220520095245768\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/20/zgEpmj17vwMSbo5.png\" alt=\"image-20220520095132854\"></p>\n<hr>\n<h3 id=\"（4）时间片轮转调度算法（RR）\"><a href=\"#（4）时间片轮转调度算法（RR）\" class=\"headerlink\" title=\"（4）时间片轮转调度算法（RR）\"></a>（4）时间片轮转调度算法（RR）</h3><p><img data-src=\"https://s2.loli.net/2022/05/20/mcwBOxYhr8otI7z.png\" alt=\"image-20220520101410525\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/20/BeYU9XjykCD24sR.png\" alt=\"image-20220520100727740\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/20/l8L1IdpDo2h9HfS.png\" alt=\"image-20220520101604794\"></p>\n<blockquote>\n<p>如果RR和优先级结合考虑的话，那么FCFS队列变为优先级队列，同优先级则FCFS。当一个进程正在运行时，如果有更高优先级的进程到来，处理机立即被抢占；如果有同等优先级的进程在等待，执行完当前时间片后让出处理机；如果有低优先级的进程到来或者在等待，则不会被抢占。</p>\n</blockquote>\n<h3 id=\"（5）优先级调度算法\"><a href=\"#（5）优先级调度算法\" class=\"headerlink\" title=\"（5）优先级调度算法\"></a>（5）优先级调度算法</h3><p><img data-src=\"https://s2.loli.net/2022/05/20/G5VbhWiEMqUoNQg.png\" alt=\"image-20220520102840867\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/20/5Jr2HGj3YQd4sFC.png\" alt=\"image-20220520101957020\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/20/8ZshCGOIJfSFBo1.png\" alt=\"image-20220520102237628\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/20/if6V8BLPaINGKhn.png\" alt=\"image-20220520102742626\"></p>\n<h3 id=\"（6）多级反馈队列调度算法\"><a href=\"#（6）多级反馈队列调度算法\" class=\"headerlink\" title=\"（6）多级反馈队列调度算法\"></a>（6）多级反馈队列调度算法</h3><p><img data-src=\"https://s2.loli.net/2022/05/20/g8Kju6BQw52FMPd.png\" alt=\"image-20220520104355407\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/20/7T4HiSVvycBFeAL.png\" alt=\"image-20220520103557785\"></p>\n<hr>\n<p>对于实时调度，调度器必须支持<strong>抢占的基于优先权的调度</strong>。可以根据进程的截止期限、任务速率来进行分配优先级</p>\n","site":{"data":{"post-body-end":"<div>\n    \n</div>\n","styles":"body {\n  background: url(\"/images/background.png\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 100% 100%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.8);\n}\n.popup {\n  opacity: 0.8;\n}\n.post-block {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.comments {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.post {\n  margin-top: 60px;\n  padding: 20px;\n  margin-bottom: 60px;\n  -webkit-box-shadow: 0 0 0px #788072;\n  -moz-box-shadow: 0 0 0px rgba(202,203,204,0.5);\n}\n.post-button .btn {\n  color: #555 !important;\n  background-color: #fff;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  border: none !important;\n  transition-property: unset;\n  padding: 0px 15px;\n}\n.post-button .btn:hover {\n  color: #fff !important;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  background-image: linear-gradient(90deg, #a166ab 0%, #ef4e7b 25%, #f37055 50%, #ef4e7b 75%, #a166ab 100%);\n}\n","variables":""}},"length":863,"excerpt":"","more":"<h1 id=\"三、进程调度\"><a href=\"#三、进程调度\" class=\"headerlink\" title=\"三、进程调度\"></a>三、进程调度</h1><h2 id=\"x3D-x3D-重点：-x3D-x3D\"><a href=\"#x3D-x3D-重点：-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;重点：&#x3D;&#x3D;\"></a>&#x3D;&#x3D;重点：&#x3D;&#x3D;</h2><p>调度的层次：低级调度、中级调度、高级调度</p>\n<p>引起进程调度的原因</p>\n<p>抢占式和非抢占式调度，周转时间，等待时间</p>\n<p>&#x3D;&#x3D;调度算法&#x3D;&#x3D;  时间片，进程优先级，高响应比可以不管， 重视多级队列，不超过作业题难度</p>\n<p>实时调度概念</p>\n<h2 id=\"1、处理机调度的基本概念\"><a href=\"#1、处理机调度的基本概念\" class=\"headerlink\" title=\"1、处理机调度的基本概念\"></a>1、处理机调度的基本概念</h2><p><img data-src=\"https://s2.loli.net/2022/05/20/PqpV7zcuSgAUL5v.png\" alt=\"image-20220520083413143\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/03/14/2GmBQDkHjsiAPy6.png\" alt=\"image-20220314093421092\"></p>\n<h2 id=\"2、进程调度的时机、过程和方式\"><a href=\"#2、进程调度的时机、过程和方式\" class=\"headerlink\" title=\"2、进程调度的时机、过程和方式\"></a>2、进程调度的时机、过程和方式</h2><p><img data-src=\"https://s2.loli.net/2022/05/20/Fmr7aO5N9dtszGb.png\" alt=\"image-20220520085145159\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/20/pcZnNOMo5ugamv8.png\" alt=\"image-20220520085014437\"></p>\n<h2 id=\"3、调度算法的评价指标\"><a href=\"#3、调度算法的评价指标\" class=\"headerlink\" title=\"3、调度算法的评价指标\"></a>3、调度算法的评价指标</h2><p><img data-src=\"https://s2.loli.net/2022/05/20/ecKivlW2Lb1jnNF.png\" alt=\"image-20220520090857781\"></p>\n<ul>\n<li><p>CPU利用率指CPU忙碌的时间占总时间的比例。CPU利用率 &#x3D; 忙碌的时间&#x2F;总时间</p>\n</li>\n<li><p>系统吞吐量指单位时间内完成作业的数量。系统吞吐量 &#x3D; 总共完成了多少道作业 &#x2F; 总共花了多少时间</p>\n</li>\n<li><p>周转时间：从作业提交给系统开始，到作业完成为止的这段时间间隔。周转时间 &#x3D; 作业完成时间 - 作业提交时间。</p>\n</li>\n<li><p>平均周转时间 &#x3D; 各作业周转时间之和 &#x2F; 作业数</p>\n</li>\n<li><p>带权周转时间 &#x3D; 作业周转时间 &#x2F; 作业实际运行的时间 &#x3D; (作业完成时间 - 作业提交时间) &#x2F; 作业实际运行的时间</p>\n</li>\n<li><p>平均带权周转时间 &#x3D; 各作业带权周转时间之和 &#x2F; 作业数</p>\n</li>\n<li><p>等待时间：指进程&#x2F;作业处于等待处理机状态时间之和</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/05/20/AlPaLcNSMfE8YC7.png\" alt=\"image-20220520090716035\"></p>\n</li>\n<li><p>响应时间：从用户提交请求到首次产生响应所用的时间</p>\n</li>\n</ul>\n<h2 id=\"x3D-x3D-4、调度算法-x3D-x3D\"><a href=\"#x3D-x3D-4、调度算法-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;4、调度算法&#x3D;&#x3D;\"></a>&#x3D;&#x3D;4、调度算法&#x3D;&#x3D;</h2><p><img data-src=\"https://s2.loli.net/2022/05/20/JoeG3fn18mzbvIp.png\" alt=\"image-20220520095505721\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/20/MKsupUYmCxJE7WG.png\" alt=\"image-20220520104630768\"></p>\n<h3 id=\"（1）先来先服务（FCFS）\"><a href=\"#（1）先来先服务（FCFS）\" class=\"headerlink\" title=\"（1）先来先服务（FCFS）\"></a>（1）先来先服务（FCFS）</h3><p>考虑作业的等待时间</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/20/v8k5tBYWVThbQ4g.png\" alt=\"image-20220520092445844\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/20/SHnKZd7Wa3vcPmr.png\" alt=\"image-20220520092236752\"></p>\n<h3 id=\"（2）短作业优先\"><a href=\"#（2）短作业优先\" class=\"headerlink\" title=\"（2）短作业优先\"></a>（2）短作业优先</h3><p>考虑作业的运行时间</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/20/94JzSmAiaP5jBRb.png\" alt=\"image-20220520094247319\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/20/Bk3YS9dGruoTWOl.png\" alt=\"image-20220520094114612\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/20/cn1wtYv6B78lpTe.png\" alt=\"image-20220520092954098\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/20/osPMXSpyvK3NTCZ.png\" alt=\"image-20220520093622737\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/20/sG3ZJP9DRdKlH2e.png\" alt=\"image-20220520093730231\"></p>\n<h3 id=\"（3）高响应比优先\"><a href=\"#（3）高响应比优先\" class=\"headerlink\" title=\"（3）高响应比优先\"></a>（3）高响应比优先</h3><p><img data-src=\"https://s2.loli.net/2022/05/20/my9UwruzFTjLt5N.png\" alt=\"image-20220520095245768\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/20/zgEpmj17vwMSbo5.png\" alt=\"image-20220520095132854\"></p>\n<hr>\n<h3 id=\"（4）时间片轮转调度算法（RR）\"><a href=\"#（4）时间片轮转调度算法（RR）\" class=\"headerlink\" title=\"（4）时间片轮转调度算法（RR）\"></a>（4）时间片轮转调度算法（RR）</h3><p><img data-src=\"https://s2.loli.net/2022/05/20/mcwBOxYhr8otI7z.png\" alt=\"image-20220520101410525\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/20/BeYU9XjykCD24sR.png\" alt=\"image-20220520100727740\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/20/l8L1IdpDo2h9HfS.png\" alt=\"image-20220520101604794\"></p>\n<blockquote>\n<p>如果RR和优先级结合考虑的话，那么FCFS队列变为优先级队列，同优先级则FCFS。当一个进程正在运行时，如果有更高优先级的进程到来，处理机立即被抢占；如果有同等优先级的进程在等待，执行完当前时间片后让出处理机；如果有低优先级的进程到来或者在等待，则不会被抢占。</p>\n</blockquote>\n<h3 id=\"（5）优先级调度算法\"><a href=\"#（5）优先级调度算法\" class=\"headerlink\" title=\"（5）优先级调度算法\"></a>（5）优先级调度算法</h3><p><img data-src=\"https://s2.loli.net/2022/05/20/G5VbhWiEMqUoNQg.png\" alt=\"image-20220520102840867\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/20/5Jr2HGj3YQd4sFC.png\" alt=\"image-20220520101957020\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/20/8ZshCGOIJfSFBo1.png\" alt=\"image-20220520102237628\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/20/if6V8BLPaINGKhn.png\" alt=\"image-20220520102742626\"></p>\n<h3 id=\"（6）多级反馈队列调度算法\"><a href=\"#（6）多级反馈队列调度算法\" class=\"headerlink\" title=\"（6）多级反馈队列调度算法\"></a>（6）多级反馈队列调度算法</h3><p><img data-src=\"https://s2.loli.net/2022/05/20/g8Kju6BQw52FMPd.png\" alt=\"image-20220520104355407\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/20/7T4HiSVvycBFeAL.png\" alt=\"image-20220520103557785\"></p>\n<hr>\n<p>对于实时调度，调度器必须支持<strong>抢占的基于优先权的调度</strong>。可以根据进程的截止期限、任务速率来进行分配优先级</p>\n"},{"title":"二、进程与线程","abbrlink":43282,"date":"2022-06-27T15:04:22.000Z","_content":"\n# 二、进程与线程\n\n## ==重点：==\n\n进程定义，进程控制块（PCB），进程的状态及其变化，进程切换与CPU模式切换，进程调度，上下文切换，\n\n进程队列，进程家族树和进程创建\n\n进程通信机制（共享内存，消息传递） ， 信号与中断的区别。  通信中的同步问题：阻塞/非阻塞\n\n线程，线程和进程的区别，引入线程的好处，多线程模型\n\n## 1、进程的定义、特征、描述和组织\n\n![image-20220516084814747](https://s2.loli.net/2022/05/16/OXPfK5pxMcrZldW.png)\n\n**概念：** 进程是一个可并发执行的具有独立功能的，是程序关于某个数据集合的一次执行过程，也是操作系统进行资源分配和保护的基本单位 。\n\n从理论角度看，进程是对正在运行的程序过程的抽象；从实现角度看，进程是一种数据结构。\n\n进程与程序的关系：m对n\n\n|                  | 进程                | 程序（本质就是文本段、代码段） |\n| ---------------- | ------------------- | ------------------------------ |\n| **状态**         | 动态                | 静态                           |\n| **能否长久保存** | 暂时                | 永久                           |\n| **组成**         | 代码段、数据段、PCB | 代码段                         |\n| **能否“再生”**   | 进程可以创建新进程  | 程序不能形成新程序             |\n\n\n\n**特征：** \n\n- **动态性**：进程是程序的一次执行过程，是动态地产生、变化和消亡的\n\n- 并发性：内存中有多个进程实体，各进程可并发执行\n\n- 独立性：进程是能独立运行、独立获得资源、独立接受调度的基本单位\n\n- 异步性：进程以各自独立的不可预知的速度向前推进，操作系统要提供“进程同步机制”来解决异步问题\n\n- 结构性：**进程实体由程序段、数据段及进程控制块（PCB）组成**，又称为进程映像\n\n- 共享性\n\n      \n\n**进程的描述** \n\n- ==进程实体（进程映像）== ：某时刻进程的内容及其状态的集合\n\n    组成：\n\n    - 控制块（PCB）：每个进程捆绑一个控制块，用于存储进程的标识信息、现场信息、控制信息\n    - 程序块\n    - 数据块\n    - 核心栈：每个进程捆绑一个核心栈，用于保存进程在核心态工作时的现场保护\n\n- ==进程的上下文== ：操作系统把进程物理实体和支持进程运行的环境合称为进程上下文\n\n    ![image-20220308204451231](https://s2.loli.net/2022/03/08/Bm2kuy8A1qFrclS.png)\n\n    > 所谓的“进程上下文”，就是一个进程在执行的时候，CPU的所有寄存器中的值、进程的状态以及堆栈上的内容，当内核需要切换到另一个进程时，它需要保存当前进程的所有状态，即保存当前进程的进程上下文，以便再次执行该进程时，能够恢复切换时的状态，继续执行。\n\n==进程控制块（PCB）：== 是描述和管理进程的数据结构。它是进程实体的一部分。PCB是进程存在的唯一标志。由OS创建和管理。\n\n组成：\n\n- 进程标识信息：包括进程标识符、家族关系、用户标识符（进程的拥有者）\n- 进程现场信息：进程在运行时存放在处理器中的各种信息\n- 进程控制信息：包括进程当前状态、进程队列指针、进程优先级、通信信息、程序和数据地址、资源清单\n\n常用组织方式：\n\n- 线性方式：PCB顺序存放在一片连续内存中\n\n- 链表方式：将同一状态的PCB组成一个链表，如就绪队列\n\n    ![image-20220308151522468](https://s2.loli.net/2022/03/08/E5d48CvRicSFhu7.png)\n\n- 索引方式：将同一状态的PCB归入一个索引表，再由索引指向相应的PCB\n\n    ![](https://s2.loli.net/2022/03/04/rBc4xuVa5UCjWfO.png)\n\n\n\n## 2、进程的状态与转换\n\n![image-20220516090546798](https://s2.loli.net/2022/05/16/o52c8EevKiyhGVw.png)\n\n- **三种基本状态**\n\n    ![image-20220516085509970](https://s2.loli.net/2022/05/16/gj96ZM8BfuHdAEG.png)\n\n    M个处理器，N个进程：\n\n    ①M>=N：运行态：0 \\~ N，**就绪态：0**（有空闲处理器，无就绪进程），阻塞态：0\\~N\n\n    ②M<N：运行态：0 \\~ M，就绪态：0 \\~ N-M，阻塞态：0~N\n\n- **另外两种状态：**\n\n    ![image-20220516090014634](https://s2.loli.net/2022/05/16/FNZCy2cio3bSHsK.png)\n\n- **状态之间的转换**\n\n    ![image-20220516090418952](https://s2.loli.net/2022/05/16/fqFW2jUAmJcL6Dl.png)\n\n> **挂起状态：**把某些进程挂起（suspend），==对换到磁盘镜像区中== ，暂时不参与进程调度， 起到减轻系统负荷或者进行检查和改正的目的。\n>\n> 原因：\n>\n> - 系统中的进程均处于等待状态，需要把一些阻塞进程对换出去，腾出内存给就绪进程运行\n>\n> - 进程竞争资源，系统负荷过重，需挂起部分进程以调整系统负荷\n>\n> - 将定期执行的进程对换出去以减轻系统负荷\n>\n> - 用户要求挂起自己的进程，以进行检查和改正\n>\n> - 父进程要求挂起后代进程，以进行检查和改正\n>\n> - 操作系统需要挂起某些进程，以进行检查和改正\n>\n> \n>\n> **七态模型：**\n>\n> ![](https://s2.loli.net/2022/03/04/986gRwPzeKnG3Yo.png)\n>\n> ![image-20220520082727937](https://s2.loli.net/2022/05/20/k36EOZQYuFsGBNq.png)\n\n## 3、进程控制\n\n![image-20220516092854030](https://s2.loli.net/2022/05/16/2VmzyaKN8WbXTkn.png)\n\n**进程控制：**对系统中的所有进程实施有效的管理，即实现进程状态转换\n\n![image-20220516091105817](https://s2.loli.net/2022/05/16/C2KUzIQlknVs89f.png)\n\n**原语的概念：**由若干机器指令构成的，用以完成特定功能的一段程序，这段程序在执行期间不允许中断，只能一气呵成。\n\n![image-20220516091342486](https://s2.loli.net/2022/05/16/w867Je3mhGfvLct.png)\n\n进程控制相关的原语要做的事情：\n\n- 更新PCB中的信息（如修改进程状态标志、将运行环境保存到PCB、从PCB恢复运行环境）\n\n- 将PCB插入合适的队列\n\n- 分配/回收资源\n\n      \n\n**进程的创建和终止：**\n\n![image-20220516092101256](https://s2.loli.net/2022/05/16/DdXkcIGeZi6hUWj.png)\n\n![image-20220516092402405](https://s2.loli.net/2022/05/16/l6x3gat7U5KHW2u.png)\n\n> **僵尸进程：** 子进程已终止，但父进程尚未调用wait()\n>\n> **孤儿进程 ：**子进程还在执行的时候父进程已终止。Linux和UNIX会将init进程作为孤儿进程的父进程。\n\n**进程的阻塞和唤醒**\n\n![image-20220516092526462](https://s2.loli.net/2022/05/16/kLQ4ewEbNZBj7xa.png)\n\n> 阻塞是主动过程（进程自己调用阻塞原语），唤醒是被动过程（另一个发现者进程（合作的并发进程）调用唤醒原语）\n\n**进程的挂起与激活：**\n\n挂起原语的功能 ：将指定进程挂起😶\n\n过程：\n\n```mermaid\ngraph LR\n a[在PCB表中查找PCB]-->b[检查进程状态]\n b[检查进程状态]-->|活动阻塞|c[挂起阻塞]\n b[检查进程状态]-->|活动就绪|d[挂起就绪]\n b[检查进程状态]-->|执行|e[停止执行并保护现场信息]\n e[停止执行并保护现场信息]-->f[挂起就绪]\n f[挂起就绪]-->g[转进程调度]\n```\n\n\n\n激活原语的功能：将指定进程激活😶\n\n过程：\n\n```mermaid\ngraph LR\n a[在PCB表中查找PCB]-->b[检查进程状态]\n b[检查进程状态]-->|挂起阻塞|c[活动阻塞]\n b[检查进程状态]-->|挂起就绪|d[活动就绪]\n d[活动就绪]-->|可能需要|e[转进程调度]\n```\n\n**进程的调度和切换**\n\n![image-20220516092621336](https://s2.loli.net/2022/05/16/Rqatu1ylzhiZfpF.png)\n\n**调度和切换的时机问题**：调度和切换并不一定能一气呵成。通常的做法是，由内核置请求调度标志，延迟到敏感性操作完成后再进行进程调度和进程上下文切换。\n\n\n\n**CPU模式切换：**\n\n处理器总处于以下状态中的一种：\n\n- 内核态，运行于进程上下文，内核代表进程运行于内核空间，使用核心栈。 (进程请求系统调用，陷入内核)\n- 内核态，运行于中断上下文，内核代表硬件运行于内核空间，与任何进程无关，中断服务程序正在处理特定中断。 (进程被中断)\n- 用户态，运行于进程上下文，用户进程在运行，使用用户栈。 （进程正常运行)\n\n内核可以处于两种上下文：进程上下文和中断上下文。\n\n- 在系统调用之后，用户应用程序进入内核空间，此后内核空间针对用户空间相应进程的代表就运行于进程上下文。\n- 异步发生的中断会引发中断处理程序被调用，中断处理程序就运行于中断上下文。\n- 中断上下文和进程上下文不可能同时发生。\n- 运行于进程上下文的内核代码是可抢占的，但中断上下文则会一直运行至结束，不会被抢占。\n\n![image-20220308203423763](https://s2.loli.net/2022/03/08/kytGVsrFjpeDh5C.png)\n\n\n\n## 5、进程通信\n\n![image-20220516094111006](https://s2.loli.net/2022/05/16/vgB2kzlGcLA4IQE.png)\n\n**概念：**进程之间的信息交换。为了保证安全，一个进程不能直接访问另一个进程的地址空间\n\n**方法：**共享内存、消息传递、信号机制、管道、RPC、Socket等等。其中共享内存和消息传递是IPC的两种**基本模型**。\n\n共享内存：快。仅在建立共享内存区域时才采用系统调用。\n\n消息传递：适合交换少量数据、易实现。常采用系统调用。\n\n==共享内存：==\n\n![image-20220516093334379](https://s2.loli.net/2022/05/16/TBisA6XZtbx5CRc.png)\n\n==消息传递==\n\n![image-20220516093950844](https://s2.loli.net/2022/05/16/yAuDL9CeaZJc5pK.png)\n\n> **同步或异步的通信**\n>\n> 同步（阻塞）：发送之后需等待被接收；接收进程需等待有消息可用\n>\n> 异步（非阻塞） ：发送之后可继续其他操作；接收进程收到有效消息或者空消息，继续其他操作\n>\n> 有效的组合：阻塞发送，阻塞接收；非阻塞发送，阻塞接收（如客户机-服务器）；非阻塞发送，非阻塞接收。==没有阻塞发送，非阻塞接收，否则发送进程可能死等。==\n\n==信号机制：==\n\n**概念：**软件中断通知事件机制，一种古老且简单的通信机制。通过发送一个**指定信号**来通知进程某个异常事件发生。每个信号都有一个名字和编号，这些名字都以“SIG”开头，如SIGKILL。\n\n**信号与中断的相同点及区别**\n\n相同点：采用异步通信方式；获得请求时，暂停正在执行的任务转而执行相应的处理程序，处理完毕后返回断点；都可以被屏蔽。\n\n区别：\n\n|          | 实现           | 优先级 | 运行态 | 及时           | 其他                     |\n| -------- | -------------- | ------ | ------ | -------------- | ------------------------ |\n| **中断** | 硬件、软件结合 | 有     | 核心态 | 及时           | 程序并不知道自己被中断。 |\n| **信号** | 软件           | 无     | 用户态 | 有较大时间延迟 | 由程序接收               |\n\n![image-20220308212641169](https://s2.loli.net/2022/03/08/pgZGS5wv3LhP9DI.png)\n\n==管道机制==\n\n**管道的概念**：连接读写进程的一个特殊文件。==本质：共享文件==，可借助文件系统的机制实现。用于同一机器的进程间通信\n\n![image-20220516093711586](https://s2.loli.net/2022/05/16/hNZYEUatvnwJgzr.png)\n\n**管道的分类：**匿名管道（半双工、只能用于具有亲缘关系的进程间通信）、有名管道（克服了只能用于具有亲缘关系的进程之间通信的限制）\n\n\n\n## 6、线程概念、多线程模型\n\n![image-20220516100255832](https://s2.loli.net/2022/05/16/tyE8R4JhQMmKfNF.png)\n\n**引入线程的目的**\n\n- 在操作系统中引入进程的目的是使多道程序能并发执行，以改善资源利用率及提高系统吞吐量；\n\n- 在操作系统中再引入线程，则是为了减少程序并发执行所付出的时空开销，使操作系统具有更好的**并发性**。\n\n**概念**：\n\n- 线程是进程内一个相对独立的、可调度的执行单元。\n\n- 线程是CPU调度的基本单位\n\n- 它由线程ID、程序计数器、寄存器集合和栈组成。 \n\n- ==它与属于同一进程的其他线程共享代码段、数据段和其他操作系统资源。== \n\n- 线程自己基本上不拥有资源，只拥有一点在运行时必不可少的资源（如程序计数器、一组寄存器和栈），但它可以与同属一个进程的其他线程共享进程拥有的全部资源\n\n![image-20220516094855723](https://s2.loli.net/2022/05/16/58qohj4kQFBwfx2.png)\n\n**线程与进程的比较：**\n\n> 线程可以主动让出处理器，进程可以通过wait()来让出处理器\n\n|          | 调度                                       | 拥有的资源                                                   | 系统开销 |\n| -------- | ------------------------------------------ | ------------------------------------------------------------ | -------- |\n| **进程** | 在传统OS中，进程是调度和分配资源的基本单位 | 进程是拥有资源的基本单位，由一个或多个线程及相关资源构成     | 大       |\n| **线程** | 引入线程后，线程是调度和分派的基本单位     | 基本上不拥有资源，只拥有一点在运行时必不可少的资源（如程序计数器、一组寄存器和栈），但它可以与同属一个进程的其他线程共享进程拥有的全部资源 | 小       |\n\n\n\n**属性**\n\n![image-20220516095238427](https://s2.loli.net/2022/05/16/6248bugjiR3mZAT.png)\n\n\n\n**实现方式**\n\n- 用户级线程\n\n    - 概念：不依赖于操作系统核心，由应用进程利用**用户级线程库**提供创建、同步、调度和管理线程的函数来控制的线程。\n\n    - **用户级线程对OS不可见，OS调度的依然是内核级线程**\n\n    - 纯用户级线程之间不能抢占，除非主动放弃处理器\n\n    - 优势：速度快（因为它不需要内核干预）\n\n    - 限制：\n\n        - 当一个线程阻塞时，整个进程都必须等待（因为用户级线程对OS不可见）\n        - 处理机时间分配对象是进程，每个用户级线程的执行时间相对少一些\n\n- 内核级线程\n\n    - 概念：依赖于内核，由**操作系统内核** 完成创建和撤消工作的线程。 \n    - 一个内核级线程阻塞时不会影响同一进程的其他线程的运行。（因为可以调度其他线程）\n    - 处理机时间分配对象是线程，所以有多个线程的进程将获得更多处理机时间。\n\n    - 缺点：系统开销\n\n    \n\n    ![image-20220516095708821](https://s2.loli.net/2022/05/16/HQngtqdIwNY4rmL.png)\n\n    \n\n- **多线程模型**\n\n    ![image-20220516095905848](https://s2.loli.net/2022/05/16/Ao4CZvHWhyiUd3p.png)\n\n    ![image-20220516100022950](https://s2.loli.net/2022/05/16/AiIb8h46MvJHq1r.png)\n\n    ![image-20220516100112838](https://s2.loli.net/2022/05/16/OzZUoPM7pvnby9q.png)\n\n    \n\n## ==7、可能的大题：代码？==😫\n\n### 1、fork()、exec()、vfork()、clone()\n\n**fork():**  创造的子进程是父进程的完整副本，复制了父亲进程的所有资源\n\n**exec():**   fork()函数会调用此系统调用，使用指定的新程序填充进程空间\n\n**vfork()**：创建的子进程与父进程共享数据段,而且由vfork()创建的子进程将先于父进程运行\n\n**clone()：**允许子进程有选择的共享父进程资源\n\n例子：\n\n```c\nvoid main( ) { \n    pid_t pid;\n    pid = fork();\n    if (pid < 0){\n        printf(“fork new process error!\\n”);\n        exit(-1); \n    }\n    else if (pid ==0){\t\t//child process\n        execlp(“/bin/ls”,”ls”, NULL);\n        printf(\"LINE J\");\t//只有excelp调用失败时才会执行这条语句\n    } \n    else{\n        wait(NULL);\n        printf(“Child Complete”);\n        exit(0);\n    }\n}\n```\n\n### ==***2、fork()、getpid()和printf()==\n\n==进程家族树：==\n\n![image-20220516144045281](https://s2.loli.net/2022/05/16/sMmaLV4gUexGBfW.png)\n\n![image-20220516144104234](https://s2.loli.net/2022/05/16/7MbVpWcmZ6Pki5R.png)\n\n----------------------------------------\n\n\n\n![image-20220516145352414](https://s2.loli.net/2022/05/16/cNyvatSV4WY3HA7.png)\n\n# \n","source":"_posts/二、进程与线程.md","raw":"---\ntitle: 二、进程与线程\ntags:\n  - 操作系统\ncategory:\n  - 操作系统\nabbrlink: 43282\ndate: 2022-06-27 23:04:22\n---\n\n# 二、进程与线程\n\n## ==重点：==\n\n进程定义，进程控制块（PCB），进程的状态及其变化，进程切换与CPU模式切换，进程调度，上下文切换，\n\n进程队列，进程家族树和进程创建\n\n进程通信机制（共享内存，消息传递） ， 信号与中断的区别。  通信中的同步问题：阻塞/非阻塞\n\n线程，线程和进程的区别，引入线程的好处，多线程模型\n\n## 1、进程的定义、特征、描述和组织\n\n![image-20220516084814747](https://s2.loli.net/2022/05/16/OXPfK5pxMcrZldW.png)\n\n**概念：** 进程是一个可并发执行的具有独立功能的，是程序关于某个数据集合的一次执行过程，也是操作系统进行资源分配和保护的基本单位 。\n\n从理论角度看，进程是对正在运行的程序过程的抽象；从实现角度看，进程是一种数据结构。\n\n进程与程序的关系：m对n\n\n|                  | 进程                | 程序（本质就是文本段、代码段） |\n| ---------------- | ------------------- | ------------------------------ |\n| **状态**         | 动态                | 静态                           |\n| **能否长久保存** | 暂时                | 永久                           |\n| **组成**         | 代码段、数据段、PCB | 代码段                         |\n| **能否“再生”**   | 进程可以创建新进程  | 程序不能形成新程序             |\n\n\n\n**特征：** \n\n- **动态性**：进程是程序的一次执行过程，是动态地产生、变化和消亡的\n\n- 并发性：内存中有多个进程实体，各进程可并发执行\n\n- 独立性：进程是能独立运行、独立获得资源、独立接受调度的基本单位\n\n- 异步性：进程以各自独立的不可预知的速度向前推进，操作系统要提供“进程同步机制”来解决异步问题\n\n- 结构性：**进程实体由程序段、数据段及进程控制块（PCB）组成**，又称为进程映像\n\n- 共享性\n\n      \n\n**进程的描述** \n\n- ==进程实体（进程映像）== ：某时刻进程的内容及其状态的集合\n\n    组成：\n\n    - 控制块（PCB）：每个进程捆绑一个控制块，用于存储进程的标识信息、现场信息、控制信息\n    - 程序块\n    - 数据块\n    - 核心栈：每个进程捆绑一个核心栈，用于保存进程在核心态工作时的现场保护\n\n- ==进程的上下文== ：操作系统把进程物理实体和支持进程运行的环境合称为进程上下文\n\n    ![image-20220308204451231](https://s2.loli.net/2022/03/08/Bm2kuy8A1qFrclS.png)\n\n    > 所谓的“进程上下文”，就是一个进程在执行的时候，CPU的所有寄存器中的值、进程的状态以及堆栈上的内容，当内核需要切换到另一个进程时，它需要保存当前进程的所有状态，即保存当前进程的进程上下文，以便再次执行该进程时，能够恢复切换时的状态，继续执行。\n\n==进程控制块（PCB）：== 是描述和管理进程的数据结构。它是进程实体的一部分。PCB是进程存在的唯一标志。由OS创建和管理。\n\n组成：\n\n- 进程标识信息：包括进程标识符、家族关系、用户标识符（进程的拥有者）\n- 进程现场信息：进程在运行时存放在处理器中的各种信息\n- 进程控制信息：包括进程当前状态、进程队列指针、进程优先级、通信信息、程序和数据地址、资源清单\n\n常用组织方式：\n\n- 线性方式：PCB顺序存放在一片连续内存中\n\n- 链表方式：将同一状态的PCB组成一个链表，如就绪队列\n\n    ![image-20220308151522468](https://s2.loli.net/2022/03/08/E5d48CvRicSFhu7.png)\n\n- 索引方式：将同一状态的PCB归入一个索引表，再由索引指向相应的PCB\n\n    ![](https://s2.loli.net/2022/03/04/rBc4xuVa5UCjWfO.png)\n\n\n\n## 2、进程的状态与转换\n\n![image-20220516090546798](https://s2.loli.net/2022/05/16/o52c8EevKiyhGVw.png)\n\n- **三种基本状态**\n\n    ![image-20220516085509970](https://s2.loli.net/2022/05/16/gj96ZM8BfuHdAEG.png)\n\n    M个处理器，N个进程：\n\n    ①M>=N：运行态：0 \\~ N，**就绪态：0**（有空闲处理器，无就绪进程），阻塞态：0\\~N\n\n    ②M<N：运行态：0 \\~ M，就绪态：0 \\~ N-M，阻塞态：0~N\n\n- **另外两种状态：**\n\n    ![image-20220516090014634](https://s2.loli.net/2022/05/16/FNZCy2cio3bSHsK.png)\n\n- **状态之间的转换**\n\n    ![image-20220516090418952](https://s2.loli.net/2022/05/16/fqFW2jUAmJcL6Dl.png)\n\n> **挂起状态：**把某些进程挂起（suspend），==对换到磁盘镜像区中== ，暂时不参与进程调度， 起到减轻系统负荷或者进行检查和改正的目的。\n>\n> 原因：\n>\n> - 系统中的进程均处于等待状态，需要把一些阻塞进程对换出去，腾出内存给就绪进程运行\n>\n> - 进程竞争资源，系统负荷过重，需挂起部分进程以调整系统负荷\n>\n> - 将定期执行的进程对换出去以减轻系统负荷\n>\n> - 用户要求挂起自己的进程，以进行检查和改正\n>\n> - 父进程要求挂起后代进程，以进行检查和改正\n>\n> - 操作系统需要挂起某些进程，以进行检查和改正\n>\n> \n>\n> **七态模型：**\n>\n> ![](https://s2.loli.net/2022/03/04/986gRwPzeKnG3Yo.png)\n>\n> ![image-20220520082727937](https://s2.loli.net/2022/05/20/k36EOZQYuFsGBNq.png)\n\n## 3、进程控制\n\n![image-20220516092854030](https://s2.loli.net/2022/05/16/2VmzyaKN8WbXTkn.png)\n\n**进程控制：**对系统中的所有进程实施有效的管理，即实现进程状态转换\n\n![image-20220516091105817](https://s2.loli.net/2022/05/16/C2KUzIQlknVs89f.png)\n\n**原语的概念：**由若干机器指令构成的，用以完成特定功能的一段程序，这段程序在执行期间不允许中断，只能一气呵成。\n\n![image-20220516091342486](https://s2.loli.net/2022/05/16/w867Je3mhGfvLct.png)\n\n进程控制相关的原语要做的事情：\n\n- 更新PCB中的信息（如修改进程状态标志、将运行环境保存到PCB、从PCB恢复运行环境）\n\n- 将PCB插入合适的队列\n\n- 分配/回收资源\n\n      \n\n**进程的创建和终止：**\n\n![image-20220516092101256](https://s2.loli.net/2022/05/16/DdXkcIGeZi6hUWj.png)\n\n![image-20220516092402405](https://s2.loli.net/2022/05/16/l6x3gat7U5KHW2u.png)\n\n> **僵尸进程：** 子进程已终止，但父进程尚未调用wait()\n>\n> **孤儿进程 ：**子进程还在执行的时候父进程已终止。Linux和UNIX会将init进程作为孤儿进程的父进程。\n\n**进程的阻塞和唤醒**\n\n![image-20220516092526462](https://s2.loli.net/2022/05/16/kLQ4ewEbNZBj7xa.png)\n\n> 阻塞是主动过程（进程自己调用阻塞原语），唤醒是被动过程（另一个发现者进程（合作的并发进程）调用唤醒原语）\n\n**进程的挂起与激活：**\n\n挂起原语的功能 ：将指定进程挂起😶\n\n过程：\n\n```mermaid\ngraph LR\n a[在PCB表中查找PCB]-->b[检查进程状态]\n b[检查进程状态]-->|活动阻塞|c[挂起阻塞]\n b[检查进程状态]-->|活动就绪|d[挂起就绪]\n b[检查进程状态]-->|执行|e[停止执行并保护现场信息]\n e[停止执行并保护现场信息]-->f[挂起就绪]\n f[挂起就绪]-->g[转进程调度]\n```\n\n\n\n激活原语的功能：将指定进程激活😶\n\n过程：\n\n```mermaid\ngraph LR\n a[在PCB表中查找PCB]-->b[检查进程状态]\n b[检查进程状态]-->|挂起阻塞|c[活动阻塞]\n b[检查进程状态]-->|挂起就绪|d[活动就绪]\n d[活动就绪]-->|可能需要|e[转进程调度]\n```\n\n**进程的调度和切换**\n\n![image-20220516092621336](https://s2.loli.net/2022/05/16/Rqatu1ylzhiZfpF.png)\n\n**调度和切换的时机问题**：调度和切换并不一定能一气呵成。通常的做法是，由内核置请求调度标志，延迟到敏感性操作完成后再进行进程调度和进程上下文切换。\n\n\n\n**CPU模式切换：**\n\n处理器总处于以下状态中的一种：\n\n- 内核态，运行于进程上下文，内核代表进程运行于内核空间，使用核心栈。 (进程请求系统调用，陷入内核)\n- 内核态，运行于中断上下文，内核代表硬件运行于内核空间，与任何进程无关，中断服务程序正在处理特定中断。 (进程被中断)\n- 用户态，运行于进程上下文，用户进程在运行，使用用户栈。 （进程正常运行)\n\n内核可以处于两种上下文：进程上下文和中断上下文。\n\n- 在系统调用之后，用户应用程序进入内核空间，此后内核空间针对用户空间相应进程的代表就运行于进程上下文。\n- 异步发生的中断会引发中断处理程序被调用，中断处理程序就运行于中断上下文。\n- 中断上下文和进程上下文不可能同时发生。\n- 运行于进程上下文的内核代码是可抢占的，但中断上下文则会一直运行至结束，不会被抢占。\n\n![image-20220308203423763](https://s2.loli.net/2022/03/08/kytGVsrFjpeDh5C.png)\n\n\n\n## 5、进程通信\n\n![image-20220516094111006](https://s2.loli.net/2022/05/16/vgB2kzlGcLA4IQE.png)\n\n**概念：**进程之间的信息交换。为了保证安全，一个进程不能直接访问另一个进程的地址空间\n\n**方法：**共享内存、消息传递、信号机制、管道、RPC、Socket等等。其中共享内存和消息传递是IPC的两种**基本模型**。\n\n共享内存：快。仅在建立共享内存区域时才采用系统调用。\n\n消息传递：适合交换少量数据、易实现。常采用系统调用。\n\n==共享内存：==\n\n![image-20220516093334379](https://s2.loli.net/2022/05/16/TBisA6XZtbx5CRc.png)\n\n==消息传递==\n\n![image-20220516093950844](https://s2.loli.net/2022/05/16/yAuDL9CeaZJc5pK.png)\n\n> **同步或异步的通信**\n>\n> 同步（阻塞）：发送之后需等待被接收；接收进程需等待有消息可用\n>\n> 异步（非阻塞） ：发送之后可继续其他操作；接收进程收到有效消息或者空消息，继续其他操作\n>\n> 有效的组合：阻塞发送，阻塞接收；非阻塞发送，阻塞接收（如客户机-服务器）；非阻塞发送，非阻塞接收。==没有阻塞发送，非阻塞接收，否则发送进程可能死等。==\n\n==信号机制：==\n\n**概念：**软件中断通知事件机制，一种古老且简单的通信机制。通过发送一个**指定信号**来通知进程某个异常事件发生。每个信号都有一个名字和编号，这些名字都以“SIG”开头，如SIGKILL。\n\n**信号与中断的相同点及区别**\n\n相同点：采用异步通信方式；获得请求时，暂停正在执行的任务转而执行相应的处理程序，处理完毕后返回断点；都可以被屏蔽。\n\n区别：\n\n|          | 实现           | 优先级 | 运行态 | 及时           | 其他                     |\n| -------- | -------------- | ------ | ------ | -------------- | ------------------------ |\n| **中断** | 硬件、软件结合 | 有     | 核心态 | 及时           | 程序并不知道自己被中断。 |\n| **信号** | 软件           | 无     | 用户态 | 有较大时间延迟 | 由程序接收               |\n\n![image-20220308212641169](https://s2.loli.net/2022/03/08/pgZGS5wv3LhP9DI.png)\n\n==管道机制==\n\n**管道的概念**：连接读写进程的一个特殊文件。==本质：共享文件==，可借助文件系统的机制实现。用于同一机器的进程间通信\n\n![image-20220516093711586](https://s2.loli.net/2022/05/16/hNZYEUatvnwJgzr.png)\n\n**管道的分类：**匿名管道（半双工、只能用于具有亲缘关系的进程间通信）、有名管道（克服了只能用于具有亲缘关系的进程之间通信的限制）\n\n\n\n## 6、线程概念、多线程模型\n\n![image-20220516100255832](https://s2.loli.net/2022/05/16/tyE8R4JhQMmKfNF.png)\n\n**引入线程的目的**\n\n- 在操作系统中引入进程的目的是使多道程序能并发执行，以改善资源利用率及提高系统吞吐量；\n\n- 在操作系统中再引入线程，则是为了减少程序并发执行所付出的时空开销，使操作系统具有更好的**并发性**。\n\n**概念**：\n\n- 线程是进程内一个相对独立的、可调度的执行单元。\n\n- 线程是CPU调度的基本单位\n\n- 它由线程ID、程序计数器、寄存器集合和栈组成。 \n\n- ==它与属于同一进程的其他线程共享代码段、数据段和其他操作系统资源。== \n\n- 线程自己基本上不拥有资源，只拥有一点在运行时必不可少的资源（如程序计数器、一组寄存器和栈），但它可以与同属一个进程的其他线程共享进程拥有的全部资源\n\n![image-20220516094855723](https://s2.loli.net/2022/05/16/58qohj4kQFBwfx2.png)\n\n**线程与进程的比较：**\n\n> 线程可以主动让出处理器，进程可以通过wait()来让出处理器\n\n|          | 调度                                       | 拥有的资源                                                   | 系统开销 |\n| -------- | ------------------------------------------ | ------------------------------------------------------------ | -------- |\n| **进程** | 在传统OS中，进程是调度和分配资源的基本单位 | 进程是拥有资源的基本单位，由一个或多个线程及相关资源构成     | 大       |\n| **线程** | 引入线程后，线程是调度和分派的基本单位     | 基本上不拥有资源，只拥有一点在运行时必不可少的资源（如程序计数器、一组寄存器和栈），但它可以与同属一个进程的其他线程共享进程拥有的全部资源 | 小       |\n\n\n\n**属性**\n\n![image-20220516095238427](https://s2.loli.net/2022/05/16/6248bugjiR3mZAT.png)\n\n\n\n**实现方式**\n\n- 用户级线程\n\n    - 概念：不依赖于操作系统核心，由应用进程利用**用户级线程库**提供创建、同步、调度和管理线程的函数来控制的线程。\n\n    - **用户级线程对OS不可见，OS调度的依然是内核级线程**\n\n    - 纯用户级线程之间不能抢占，除非主动放弃处理器\n\n    - 优势：速度快（因为它不需要内核干预）\n\n    - 限制：\n\n        - 当一个线程阻塞时，整个进程都必须等待（因为用户级线程对OS不可见）\n        - 处理机时间分配对象是进程，每个用户级线程的执行时间相对少一些\n\n- 内核级线程\n\n    - 概念：依赖于内核，由**操作系统内核** 完成创建和撤消工作的线程。 \n    - 一个内核级线程阻塞时不会影响同一进程的其他线程的运行。（因为可以调度其他线程）\n    - 处理机时间分配对象是线程，所以有多个线程的进程将获得更多处理机时间。\n\n    - 缺点：系统开销\n\n    \n\n    ![image-20220516095708821](https://s2.loli.net/2022/05/16/HQngtqdIwNY4rmL.png)\n\n    \n\n- **多线程模型**\n\n    ![image-20220516095905848](https://s2.loli.net/2022/05/16/Ao4CZvHWhyiUd3p.png)\n\n    ![image-20220516100022950](https://s2.loli.net/2022/05/16/AiIb8h46MvJHq1r.png)\n\n    ![image-20220516100112838](https://s2.loli.net/2022/05/16/OzZUoPM7pvnby9q.png)\n\n    \n\n## ==7、可能的大题：代码？==😫\n\n### 1、fork()、exec()、vfork()、clone()\n\n**fork():**  创造的子进程是父进程的完整副本，复制了父亲进程的所有资源\n\n**exec():**   fork()函数会调用此系统调用，使用指定的新程序填充进程空间\n\n**vfork()**：创建的子进程与父进程共享数据段,而且由vfork()创建的子进程将先于父进程运行\n\n**clone()：**允许子进程有选择的共享父进程资源\n\n例子：\n\n```c\nvoid main( ) { \n    pid_t pid;\n    pid = fork();\n    if (pid < 0){\n        printf(“fork new process error!\\n”);\n        exit(-1); \n    }\n    else if (pid ==0){\t\t//child process\n        execlp(“/bin/ls”,”ls”, NULL);\n        printf(\"LINE J\");\t//只有excelp调用失败时才会执行这条语句\n    } \n    else{\n        wait(NULL);\n        printf(“Child Complete”);\n        exit(0);\n    }\n}\n```\n\n### ==***2、fork()、getpid()和printf()==\n\n==进程家族树：==\n\n![image-20220516144045281](https://s2.loli.net/2022/05/16/sMmaLV4gUexGBfW.png)\n\n![image-20220516144104234](https://s2.loli.net/2022/05/16/7MbVpWcmZ6Pki5R.png)\n\n----------------------------------------\n\n\n\n![image-20220516145352414](https://s2.loli.net/2022/05/16/cNyvatSV4WY3HA7.png)\n\n# \n","slug":"二、进程与线程","published":1,"updated":"2022-06-27T15:12:30.871Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4ww0pzl00035oskfatj3r8v","content":"<h1 id=\"二、进程与线程\"><a href=\"#二、进程与线程\" class=\"headerlink\" title=\"二、进程与线程\"></a>二、进程与线程</h1><h2 id=\"x3D-x3D-重点：-x3D-x3D\"><a href=\"#x3D-x3D-重点：-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;重点：&#x3D;&#x3D;\"></a>&#x3D;&#x3D;重点：&#x3D;&#x3D;</h2><p>进程定义，进程控制块（PCB），进程的状态及其变化，进程切换与CPU模式切换，进程调度，上下文切换，</p>\n<p>进程队列，进程家族树和进程创建</p>\n<p>进程通信机制（共享内存，消息传递） ， 信号与中断的区别。  通信中的同步问题：阻塞&#x2F;非阻塞</p>\n<p>线程，线程和进程的区别，引入线程的好处，多线程模型</p>\n<h2 id=\"1、进程的定义、特征、描述和组织\"><a href=\"#1、进程的定义、特征、描述和组织\" class=\"headerlink\" title=\"1、进程的定义、特征、描述和组织\"></a>1、进程的定义、特征、描述和组织</h2><p><img data-src=\"https://s2.loli.net/2022/05/16/OXPfK5pxMcrZldW.png\" alt=\"image-20220516084814747\"></p>\n<p><strong>概念：</strong> 进程是一个可并发执行的具有独立功能的，是程序关于某个数据集合的一次执行过程，也是操作系统进行资源分配和保护的基本单位 。</p>\n<p>从理论角度看，进程是对正在运行的程序过程的抽象；从实现角度看，进程是一种数据结构。</p>\n<p>进程与程序的关系：m对n</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>进程</th>\n<th>程序（本质就是文本段、代码段）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>状态</strong></td>\n<td>动态</td>\n<td>静态</td>\n</tr>\n<tr>\n<td><strong>能否长久保存</strong></td>\n<td>暂时</td>\n<td>永久</td>\n</tr>\n<tr>\n<td><strong>组成</strong></td>\n<td>代码段、数据段、PCB</td>\n<td>代码段</td>\n</tr>\n<tr>\n<td><strong>能否“再生”</strong></td>\n<td>进程可以创建新进程</td>\n<td>程序不能形成新程序</td>\n</tr>\n</tbody></table>\n<p><strong>特征：</strong> </p>\n<ul>\n<li><p><strong>动态性</strong>：进程是程序的一次执行过程，是动态地产生、变化和消亡的</p>\n</li>\n<li><p>并发性：内存中有多个进程实体，各进程可并发执行</p>\n</li>\n<li><p>独立性：进程是能独立运行、独立获得资源、独立接受调度的基本单位</p>\n</li>\n<li><p>异步性：进程以各自独立的不可预知的速度向前推进，操作系统要提供“进程同步机制”来解决异步问题</p>\n</li>\n<li><p>结构性：<strong>进程实体由程序段、数据段及进程控制块（PCB）组成</strong>，又称为进程映像</p>\n</li>\n<li><p>共享性</p>\n</li>\n</ul>\n<p><strong>进程的描述</strong> </p>\n<ul>\n<li><p>&#x3D;&#x3D;进程实体（进程映像）&#x3D;&#x3D; ：某时刻进程的内容及其状态的集合</p>\n<p>  组成：</p>\n<ul>\n<li>控制块（PCB）：每个进程捆绑一个控制块，用于存储进程的标识信息、现场信息、控制信息</li>\n<li>程序块</li>\n<li>数据块</li>\n<li>核心栈：每个进程捆绑一个核心栈，用于保存进程在核心态工作时的现场保护</li>\n</ul>\n</li>\n<li><p>&#x3D;&#x3D;进程的上下文&#x3D;&#x3D; ：操作系统把进程物理实体和支持进程运行的环境合称为进程上下文</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/08/Bm2kuy8A1qFrclS.png\" alt=\"image-20220308204451231\"></p>\n<blockquote>\n<p>所谓的“进程上下文”，就是一个进程在执行的时候，CPU的所有寄存器中的值、进程的状态以及堆栈上的内容，当内核需要切换到另一个进程时，它需要保存当前进程的所有状态，即保存当前进程的进程上下文，以便再次执行该进程时，能够恢复切换时的状态，继续执行。</p>\n</blockquote>\n</li>\n</ul>\n<p>&#x3D;&#x3D;进程控制块（PCB）：&#x3D;&#x3D; 是描述和管理进程的数据结构。它是进程实体的一部分。PCB是进程存在的唯一标志。由OS创建和管理。</p>\n<p>组成：</p>\n<ul>\n<li>进程标识信息：包括进程标识符、家族关系、用户标识符（进程的拥有者）</li>\n<li>进程现场信息：进程在运行时存放在处理器中的各种信息</li>\n<li>进程控制信息：包括进程当前状态、进程队列指针、进程优先级、通信信息、程序和数据地址、资源清单</li>\n</ul>\n<p>常用组织方式：</p>\n<ul>\n<li><p>线性方式：PCB顺序存放在一片连续内存中</p>\n</li>\n<li><p>链表方式：将同一状态的PCB组成一个链表，如就绪队列</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/08/E5d48CvRicSFhu7.png\" alt=\"image-20220308151522468\"></p>\n</li>\n<li><p>索引方式：将同一状态的PCB归入一个索引表，再由索引指向相应的PCB</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/04/rBc4xuVa5UCjWfO.png\"></p>\n</li>\n</ul>\n<h2 id=\"2、进程的状态与转换\"><a href=\"#2、进程的状态与转换\" class=\"headerlink\" title=\"2、进程的状态与转换\"></a>2、进程的状态与转换</h2><p><img data-src=\"https://s2.loli.net/2022/05/16/o52c8EevKiyhGVw.png\" alt=\"image-20220516090546798\"></p>\n<ul>\n<li><p><strong>三种基本状态</strong></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/05/16/gj96ZM8BfuHdAEG.png\" alt=\"image-20220516085509970\"></p>\n<p>  M个处理器，N个进程：</p>\n<p>  ①M&gt;&#x3D;N：运行态：0 ~ N，<strong>就绪态：0</strong>（有空闲处理器，无就绪进程），阻塞态：0~N</p>\n<p>  ②M&lt;N：运行态：0 ~ M，就绪态：0 ~ N-M，阻塞态：0~N</p>\n</li>\n<li><p><strong>另外两种状态：</strong></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/05/16/FNZCy2cio3bSHsK.png\" alt=\"image-20220516090014634\"></p>\n</li>\n<li><p><strong>状态之间的转换</strong></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/05/16/fqFW2jUAmJcL6Dl.png\" alt=\"image-20220516090418952\"></p>\n</li>\n</ul>\n<blockquote>\n<p><strong>挂起状态：</strong>把某些进程挂起（suspend），&#x3D;&#x3D;对换到磁盘镜像区中&#x3D;&#x3D; ，暂时不参与进程调度， 起到减轻系统负荷或者进行检查和改正的目的。</p>\n<p>原因：</p>\n<ul>\n<li><p>系统中的进程均处于等待状态，需要把一些阻塞进程对换出去，腾出内存给就绪进程运行</p>\n</li>\n<li><p>进程竞争资源，系统负荷过重，需挂起部分进程以调整系统负荷</p>\n</li>\n<li><p>将定期执行的进程对换出去以减轻系统负荷</p>\n</li>\n<li><p>用户要求挂起自己的进程，以进行检查和改正</p>\n</li>\n<li><p>父进程要求挂起后代进程，以进行检查和改正</p>\n</li>\n<li><p>操作系统需要挂起某些进程，以进行检查和改正</p>\n</li>\n</ul>\n<p><strong>七态模型：</strong></p>\n<p><img data-src=\"https://s2.loli.net/2022/03/04/986gRwPzeKnG3Yo.png\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/20/k36EOZQYuFsGBNq.png\" alt=\"image-20220520082727937\"></p>\n</blockquote>\n<h2 id=\"3、进程控制\"><a href=\"#3、进程控制\" class=\"headerlink\" title=\"3、进程控制\"></a>3、进程控制</h2><p><img data-src=\"https://s2.loli.net/2022/05/16/2VmzyaKN8WbXTkn.png\" alt=\"image-20220516092854030\"></p>\n<p><strong>进程控制：</strong>对系统中的所有进程实施有效的管理，即实现进程状态转换</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/16/C2KUzIQlknVs89f.png\" alt=\"image-20220516091105817\"></p>\n<p><strong>原语的概念：</strong>由若干机器指令构成的，用以完成特定功能的一段程序，这段程序在执行期间不允许中断，只能一气呵成。</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/16/w867Je3mhGfvLct.png\" alt=\"image-20220516091342486\"></p>\n<p>进程控制相关的原语要做的事情：</p>\n<ul>\n<li><p>更新PCB中的信息（如修改进程状态标志、将运行环境保存到PCB、从PCB恢复运行环境）</p>\n</li>\n<li><p>将PCB插入合适的队列</p>\n</li>\n<li><p>分配&#x2F;回收资源</p>\n</li>\n</ul>\n<p><strong>进程的创建和终止：</strong></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/16/DdXkcIGeZi6hUWj.png\" alt=\"image-20220516092101256\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/16/l6x3gat7U5KHW2u.png\" alt=\"image-20220516092402405\"></p>\n<blockquote>\n<p><strong>僵尸进程：</strong> 子进程已终止，但父进程尚未调用wait()</p>\n<p><strong>孤儿进程 ：</strong>子进程还在执行的时候父进程已终止。Linux和UNIX会将init进程作为孤儿进程的父进程。</p>\n</blockquote>\n<p><strong>进程的阻塞和唤醒</strong></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/16/kLQ4ewEbNZBj7xa.png\" alt=\"image-20220516092526462\"></p>\n<blockquote>\n<p>阻塞是主动过程（进程自己调用阻塞原语），唤醒是被动过程（另一个发现者进程（合作的并发进程）调用唤醒原语）</p>\n</blockquote>\n<p><strong>进程的挂起与激活：</strong></p>\n<p>挂起原语的功能 ：将指定进程挂起😶</p>\n<p>过程：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph LR</span><br><span class=\"line\"> a[在PCB表中查找PCB]--&gt;b[检查进程状态]</span><br><span class=\"line\"> b[检查进程状态]--&gt;|活动阻塞|c[挂起阻塞]</span><br><span class=\"line\"> b[检查进程状态]--&gt;|活动就绪|d[挂起就绪]</span><br><span class=\"line\"> b[检查进程状态]--&gt;|执行|e[停止执行并保护现场信息]</span><br><span class=\"line\"> e[停止执行并保护现场信息]--&gt;f[挂起就绪]</span><br><span class=\"line\"> f[挂起就绪]--&gt;g[转进程调度]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>激活原语的功能：将指定进程激活😶</p>\n<p>过程：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph LR</span><br><span class=\"line\"> a[在PCB表中查找PCB]--&gt;b[检查进程状态]</span><br><span class=\"line\"> b[检查进程状态]--&gt;|挂起阻塞|c[活动阻塞]</span><br><span class=\"line\"> b[检查进程状态]--&gt;|挂起就绪|d[活动就绪]</span><br><span class=\"line\"> d[活动就绪]--&gt;|可能需要|e[转进程调度]</span><br></pre></td></tr></table></figure>\n\n<p><strong>进程的调度和切换</strong></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/16/Rqatu1ylzhiZfpF.png\" alt=\"image-20220516092621336\"></p>\n<p><strong>调度和切换的时机问题</strong>：调度和切换并不一定能一气呵成。通常的做法是，由内核置请求调度标志，延迟到敏感性操作完成后再进行进程调度和进程上下文切换。</p>\n<p><strong>CPU模式切换：</strong></p>\n<p>处理器总处于以下状态中的一种：</p>\n<ul>\n<li>内核态，运行于进程上下文，内核代表进程运行于内核空间，使用核心栈。 (进程请求系统调用，陷入内核)</li>\n<li>内核态，运行于中断上下文，内核代表硬件运行于内核空间，与任何进程无关，中断服务程序正在处理特定中断。 (进程被中断)</li>\n<li>用户态，运行于进程上下文，用户进程在运行，使用用户栈。 （进程正常运行)</li>\n</ul>\n<p>内核可以处于两种上下文：进程上下文和中断上下文。</p>\n<ul>\n<li>在系统调用之后，用户应用程序进入内核空间，此后内核空间针对用户空间相应进程的代表就运行于进程上下文。</li>\n<li>异步发生的中断会引发中断处理程序被调用，中断处理程序就运行于中断上下文。</li>\n<li>中断上下文和进程上下文不可能同时发生。</li>\n<li>运行于进程上下文的内核代码是可抢占的，但中断上下文则会一直运行至结束，不会被抢占。</li>\n</ul>\n<p><img data-src=\"https://s2.loli.net/2022/03/08/kytGVsrFjpeDh5C.png\" alt=\"image-20220308203423763\"></p>\n<h2 id=\"5、进程通信\"><a href=\"#5、进程通信\" class=\"headerlink\" title=\"5、进程通信\"></a>5、进程通信</h2><p><img data-src=\"https://s2.loli.net/2022/05/16/vgB2kzlGcLA4IQE.png\" alt=\"image-20220516094111006\"></p>\n<p><strong>概念：</strong>进程之间的信息交换。为了保证安全，一个进程不能直接访问另一个进程的地址空间</p>\n<p><strong>方法：</strong>共享内存、消息传递、信号机制、管道、RPC、Socket等等。其中共享内存和消息传递是IPC的两种<strong>基本模型</strong>。</p>\n<p>共享内存：快。仅在建立共享内存区域时才采用系统调用。</p>\n<p>消息传递：适合交换少量数据、易实现。常采用系统调用。</p>\n<p>&#x3D;&#x3D;共享内存：&#x3D;&#x3D;</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/16/TBisA6XZtbx5CRc.png\" alt=\"image-20220516093334379\"></p>\n<p>&#x3D;&#x3D;消息传递&#x3D;&#x3D;</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/16/yAuDL9CeaZJc5pK.png\" alt=\"image-20220516093950844\"></p>\n<blockquote>\n<p><strong>同步或异步的通信</strong></p>\n<p>同步（阻塞）：发送之后需等待被接收；接收进程需等待有消息可用</p>\n<p>异步（非阻塞） ：发送之后可继续其他操作；接收进程收到有效消息或者空消息，继续其他操作</p>\n<p>有效的组合：阻塞发送，阻塞接收；非阻塞发送，阻塞接收（如客户机-服务器）；非阻塞发送，非阻塞接收。&#x3D;&#x3D;没有阻塞发送，非阻塞接收，否则发送进程可能死等。&#x3D;&#x3D;</p>\n</blockquote>\n<p>&#x3D;&#x3D;信号机制：&#x3D;&#x3D;</p>\n<p><strong>概念：</strong>软件中断通知事件机制，一种古老且简单的通信机制。通过发送一个<strong>指定信号</strong>来通知进程某个异常事件发生。每个信号都有一个名字和编号，这些名字都以“SIG”开头，如SIGKILL。</p>\n<p><strong>信号与中断的相同点及区别</strong></p>\n<p>相同点：采用异步通信方式；获得请求时，暂停正在执行的任务转而执行相应的处理程序，处理完毕后返回断点；都可以被屏蔽。</p>\n<p>区别：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>实现</th>\n<th>优先级</th>\n<th>运行态</th>\n<th>及时</th>\n<th>其他</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>中断</strong></td>\n<td>硬件、软件结合</td>\n<td>有</td>\n<td>核心态</td>\n<td>及时</td>\n<td>程序并不知道自己被中断。</td>\n</tr>\n<tr>\n<td><strong>信号</strong></td>\n<td>软件</td>\n<td>无</td>\n<td>用户态</td>\n<td>有较大时间延迟</td>\n<td>由程序接收</td>\n</tr>\n</tbody></table>\n<p><img data-src=\"https://s2.loli.net/2022/03/08/pgZGS5wv3LhP9DI.png\" alt=\"image-20220308212641169\"></p>\n<p>&#x3D;&#x3D;管道机制&#x3D;&#x3D;</p>\n<p><strong>管道的概念</strong>：连接读写进程的一个特殊文件。&#x3D;&#x3D;本质：共享文件&#x3D;&#x3D;，可借助文件系统的机制实现。用于同一机器的进程间通信</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/16/hNZYEUatvnwJgzr.png\" alt=\"image-20220516093711586\"></p>\n<p><strong>管道的分类：</strong>匿名管道（半双工、只能用于具有亲缘关系的进程间通信）、有名管道（克服了只能用于具有亲缘关系的进程之间通信的限制）</p>\n<h2 id=\"6、线程概念、多线程模型\"><a href=\"#6、线程概念、多线程模型\" class=\"headerlink\" title=\"6、线程概念、多线程模型\"></a>6、线程概念、多线程模型</h2><p><img data-src=\"https://s2.loli.net/2022/05/16/tyE8R4JhQMmKfNF.png\" alt=\"image-20220516100255832\"></p>\n<p><strong>引入线程的目的</strong></p>\n<ul>\n<li><p>在操作系统中引入进程的目的是使多道程序能并发执行，以改善资源利用率及提高系统吞吐量；</p>\n</li>\n<li><p>在操作系统中再引入线程，则是为了减少程序并发执行所付出的时空开销，使操作系统具有更好的<strong>并发性</strong>。</p>\n</li>\n</ul>\n<p><strong>概念</strong>：</p>\n<ul>\n<li><p>线程是进程内一个相对独立的、可调度的执行单元。</p>\n</li>\n<li><p>线程是CPU调度的基本单位</p>\n</li>\n<li><p>它由线程ID、程序计数器、寄存器集合和栈组成。 </p>\n</li>\n<li><p>&#x3D;&#x3D;它与属于同一进程的其他线程共享代码段、数据段和其他操作系统资源。&#x3D;&#x3D; </p>\n</li>\n<li><p>线程自己基本上不拥有资源，只拥有一点在运行时必不可少的资源（如程序计数器、一组寄存器和栈），但它可以与同属一个进程的其他线程共享进程拥有的全部资源</p>\n</li>\n</ul>\n<p><img data-src=\"https://s2.loli.net/2022/05/16/58qohj4kQFBwfx2.png\" alt=\"image-20220516094855723\"></p>\n<p><strong>线程与进程的比较：</strong></p>\n<blockquote>\n<p>线程可以主动让出处理器，进程可以通过wait()来让出处理器</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>调度</th>\n<th>拥有的资源</th>\n<th>系统开销</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>进程</strong></td>\n<td>在传统OS中，进程是调度和分配资源的基本单位</td>\n<td>进程是拥有资源的基本单位，由一个或多个线程及相关资源构成</td>\n<td>大</td>\n</tr>\n<tr>\n<td><strong>线程</strong></td>\n<td>引入线程后，线程是调度和分派的基本单位</td>\n<td>基本上不拥有资源，只拥有一点在运行时必不可少的资源（如程序计数器、一组寄存器和栈），但它可以与同属一个进程的其他线程共享进程拥有的全部资源</td>\n<td>小</td>\n</tr>\n</tbody></table>\n<p><strong>属性</strong></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/16/6248bugjiR3mZAT.png\" alt=\"image-20220516095238427\"></p>\n<p><strong>实现方式</strong></p>\n<ul>\n<li><p>用户级线程</p>\n<ul>\n<li><p>概念：不依赖于操作系统核心，由应用进程利用<strong>用户级线程库</strong>提供创建、同步、调度和管理线程的函数来控制的线程。</p>\n</li>\n<li><p><strong>用户级线程对OS不可见，OS调度的依然是内核级线程</strong></p>\n</li>\n<li><p>纯用户级线程之间不能抢占，除非主动放弃处理器</p>\n</li>\n<li><p>优势：速度快（因为它不需要内核干预）</p>\n</li>\n<li><p>限制：</p>\n<ul>\n<li>当一个线程阻塞时，整个进程都必须等待（因为用户级线程对OS不可见）</li>\n<li>处理机时间分配对象是进程，每个用户级线程的执行时间相对少一些</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>内核级线程</p>\n<ul>\n<li><p>概念：依赖于内核，由<strong>操作系统内核</strong> 完成创建和撤消工作的线程。 </p>\n</li>\n<li><p>一个内核级线程阻塞时不会影响同一进程的其他线程的运行。（因为可以调度其他线程）</p>\n</li>\n<li><p>处理机时间分配对象是线程，所以有多个线程的进程将获得更多处理机时间。</p>\n</li>\n<li><p>缺点：系统开销</p>\n</li>\n</ul>\n<p>  <img data-src=\"https://s2.loli.net/2022/05/16/HQngtqdIwNY4rmL.png\" alt=\"image-20220516095708821\"></p>\n</li>\n<li><p><strong>多线程模型</strong></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/05/16/Ao4CZvHWhyiUd3p.png\" alt=\"image-20220516095905848\"></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/05/16/AiIb8h46MvJHq1r.png\" alt=\"image-20220516100022950\"></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/05/16/OzZUoPM7pvnby9q.png\" alt=\"image-20220516100112838\"></p>\n</li>\n</ul>\n<h2 id=\"x3D-x3D-7、可能的大题：代码？-x3D-x3D-😫\"><a href=\"#x3D-x3D-7、可能的大题：代码？-x3D-x3D-😫\" class=\"headerlink\" title=\"&#x3D;&#x3D;7、可能的大题：代码？&#x3D;&#x3D;😫\"></a>&#x3D;&#x3D;7、可能的大题：代码？&#x3D;&#x3D;😫</h2><h3 id=\"1、fork-、exec-、vfork-、clone\"><a href=\"#1、fork-、exec-、vfork-、clone\" class=\"headerlink\" title=\"1、fork()、exec()、vfork()、clone()\"></a>1、fork()、exec()、vfork()、clone()</h3><p><strong>fork():</strong>  创造的子进程是父进程的完整副本，复制了父亲进程的所有资源</p>\n<p><strong>exec():</strong>   fork()函数会调用此系统调用，使用指定的新程序填充进程空间</p>\n<p>**vfork()**：创建的子进程与父进程共享数据段,而且由vfork()创建的子进程将先于父进程运行</p>\n<p><strong>clone()：</strong>允许子进程有选择的共享父进程资源</p>\n<p>例子：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">( )</span> &#123; </span><br><span class=\"line\">    <span class=\"type\">pid_t</span> pid;</span><br><span class=\"line\">    pid = fork();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pid &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(“fork new process error!\\n”);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pid ==<span class=\"number\">0</span>)&#123;\t\t<span class=\"comment\">//child process</span></span><br><span class=\"line\">        execlp(“/bin/ls”,”ls”, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;LINE J&quot;</span>);\t<span class=\"comment\">//只有excelp调用失败时才会执行这条语句</span></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        wait(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(“Child Complete”);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"x3D-x3D-2、fork-、getpid-和printf-x3D-x3D\"><a href=\"#x3D-x3D-2、fork-、getpid-和printf-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;***2、fork()、getpid()和printf()&#x3D;&#x3D;\"></a>&#x3D;&#x3D;***2、fork()、getpid()和printf()&#x3D;&#x3D;</h3><p>&#x3D;&#x3D;进程家族树：&#x3D;&#x3D;</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/16/sMmaLV4gUexGBfW.png\" alt=\"image-20220516144045281\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/16/7MbVpWcmZ6Pki5R.png\" alt=\"image-20220516144104234\"></p>\n<hr>\n<p><img data-src=\"https://s2.loli.net/2022/05/16/cNyvatSV4WY3HA7.png\" alt=\"image-20220516145352414\"></p>\n<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","site":{"data":{"post-body-end":"<div>\n    \n</div>\n","styles":"body {\n  background: url(\"/images/background.png\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 100% 100%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.8);\n}\n.popup {\n  opacity: 0.8;\n}\n.post-block {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.comments {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.post {\n  margin-top: 60px;\n  padding: 20px;\n  margin-bottom: 60px;\n  -webkit-box-shadow: 0 0 0px #788072;\n  -moz-box-shadow: 0 0 0px rgba(202,203,204,0.5);\n}\n.post-button .btn {\n  color: #555 !important;\n  background-color: #fff;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  border: none !important;\n  transition-property: unset;\n  padding: 0px 15px;\n}\n.post-button .btn:hover {\n  color: #fff !important;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  background-image: linear-gradient(90deg, #a166ab 0%, #ef4e7b 25%, #f37055 50%, #ef4e7b 75%, #a166ab 100%);\n}\n","variables":""}},"length":5004,"excerpt":"","more":"<h1 id=\"二、进程与线程\"><a href=\"#二、进程与线程\" class=\"headerlink\" title=\"二、进程与线程\"></a>二、进程与线程</h1><h2 id=\"x3D-x3D-重点：-x3D-x3D\"><a href=\"#x3D-x3D-重点：-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;重点：&#x3D;&#x3D;\"></a>&#x3D;&#x3D;重点：&#x3D;&#x3D;</h2><p>进程定义，进程控制块（PCB），进程的状态及其变化，进程切换与CPU模式切换，进程调度，上下文切换，</p>\n<p>进程队列，进程家族树和进程创建</p>\n<p>进程通信机制（共享内存，消息传递） ， 信号与中断的区别。  通信中的同步问题：阻塞&#x2F;非阻塞</p>\n<p>线程，线程和进程的区别，引入线程的好处，多线程模型</p>\n<h2 id=\"1、进程的定义、特征、描述和组织\"><a href=\"#1、进程的定义、特征、描述和组织\" class=\"headerlink\" title=\"1、进程的定义、特征、描述和组织\"></a>1、进程的定义、特征、描述和组织</h2><p><img data-src=\"https://s2.loli.net/2022/05/16/OXPfK5pxMcrZldW.png\" alt=\"image-20220516084814747\"></p>\n<p><strong>概念：</strong> 进程是一个可并发执行的具有独立功能的，是程序关于某个数据集合的一次执行过程，也是操作系统进行资源分配和保护的基本单位 。</p>\n<p>从理论角度看，进程是对正在运行的程序过程的抽象；从实现角度看，进程是一种数据结构。</p>\n<p>进程与程序的关系：m对n</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>进程</th>\n<th>程序（本质就是文本段、代码段）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>状态</strong></td>\n<td>动态</td>\n<td>静态</td>\n</tr>\n<tr>\n<td><strong>能否长久保存</strong></td>\n<td>暂时</td>\n<td>永久</td>\n</tr>\n<tr>\n<td><strong>组成</strong></td>\n<td>代码段、数据段、PCB</td>\n<td>代码段</td>\n</tr>\n<tr>\n<td><strong>能否“再生”</strong></td>\n<td>进程可以创建新进程</td>\n<td>程序不能形成新程序</td>\n</tr>\n</tbody></table>\n<p><strong>特征：</strong> </p>\n<ul>\n<li><p><strong>动态性</strong>：进程是程序的一次执行过程，是动态地产生、变化和消亡的</p>\n</li>\n<li><p>并发性：内存中有多个进程实体，各进程可并发执行</p>\n</li>\n<li><p>独立性：进程是能独立运行、独立获得资源、独立接受调度的基本单位</p>\n</li>\n<li><p>异步性：进程以各自独立的不可预知的速度向前推进，操作系统要提供“进程同步机制”来解决异步问题</p>\n</li>\n<li><p>结构性：<strong>进程实体由程序段、数据段及进程控制块（PCB）组成</strong>，又称为进程映像</p>\n</li>\n<li><p>共享性</p>\n</li>\n</ul>\n<p><strong>进程的描述</strong> </p>\n<ul>\n<li><p>&#x3D;&#x3D;进程实体（进程映像）&#x3D;&#x3D; ：某时刻进程的内容及其状态的集合</p>\n<p>  组成：</p>\n<ul>\n<li>控制块（PCB）：每个进程捆绑一个控制块，用于存储进程的标识信息、现场信息、控制信息</li>\n<li>程序块</li>\n<li>数据块</li>\n<li>核心栈：每个进程捆绑一个核心栈，用于保存进程在核心态工作时的现场保护</li>\n</ul>\n</li>\n<li><p>&#x3D;&#x3D;进程的上下文&#x3D;&#x3D; ：操作系统把进程物理实体和支持进程运行的环境合称为进程上下文</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/08/Bm2kuy8A1qFrclS.png\" alt=\"image-20220308204451231\"></p>\n<blockquote>\n<p>所谓的“进程上下文”，就是一个进程在执行的时候，CPU的所有寄存器中的值、进程的状态以及堆栈上的内容，当内核需要切换到另一个进程时，它需要保存当前进程的所有状态，即保存当前进程的进程上下文，以便再次执行该进程时，能够恢复切换时的状态，继续执行。</p>\n</blockquote>\n</li>\n</ul>\n<p>&#x3D;&#x3D;进程控制块（PCB）：&#x3D;&#x3D; 是描述和管理进程的数据结构。它是进程实体的一部分。PCB是进程存在的唯一标志。由OS创建和管理。</p>\n<p>组成：</p>\n<ul>\n<li>进程标识信息：包括进程标识符、家族关系、用户标识符（进程的拥有者）</li>\n<li>进程现场信息：进程在运行时存放在处理器中的各种信息</li>\n<li>进程控制信息：包括进程当前状态、进程队列指针、进程优先级、通信信息、程序和数据地址、资源清单</li>\n</ul>\n<p>常用组织方式：</p>\n<ul>\n<li><p>线性方式：PCB顺序存放在一片连续内存中</p>\n</li>\n<li><p>链表方式：将同一状态的PCB组成一个链表，如就绪队列</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/08/E5d48CvRicSFhu7.png\" alt=\"image-20220308151522468\"></p>\n</li>\n<li><p>索引方式：将同一状态的PCB归入一个索引表，再由索引指向相应的PCB</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/04/rBc4xuVa5UCjWfO.png\"></p>\n</li>\n</ul>\n<h2 id=\"2、进程的状态与转换\"><a href=\"#2、进程的状态与转换\" class=\"headerlink\" title=\"2、进程的状态与转换\"></a>2、进程的状态与转换</h2><p><img data-src=\"https://s2.loli.net/2022/05/16/o52c8EevKiyhGVw.png\" alt=\"image-20220516090546798\"></p>\n<ul>\n<li><p><strong>三种基本状态</strong></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/05/16/gj96ZM8BfuHdAEG.png\" alt=\"image-20220516085509970\"></p>\n<p>  M个处理器，N个进程：</p>\n<p>  ①M&gt;&#x3D;N：运行态：0 ~ N，<strong>就绪态：0</strong>（有空闲处理器，无就绪进程），阻塞态：0~N</p>\n<p>  ②M&lt;N：运行态：0 ~ M，就绪态：0 ~ N-M，阻塞态：0~N</p>\n</li>\n<li><p><strong>另外两种状态：</strong></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/05/16/FNZCy2cio3bSHsK.png\" alt=\"image-20220516090014634\"></p>\n</li>\n<li><p><strong>状态之间的转换</strong></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/05/16/fqFW2jUAmJcL6Dl.png\" alt=\"image-20220516090418952\"></p>\n</li>\n</ul>\n<blockquote>\n<p><strong>挂起状态：</strong>把某些进程挂起（suspend），&#x3D;&#x3D;对换到磁盘镜像区中&#x3D;&#x3D; ，暂时不参与进程调度， 起到减轻系统负荷或者进行检查和改正的目的。</p>\n<p>原因：</p>\n<ul>\n<li><p>系统中的进程均处于等待状态，需要把一些阻塞进程对换出去，腾出内存给就绪进程运行</p>\n</li>\n<li><p>进程竞争资源，系统负荷过重，需挂起部分进程以调整系统负荷</p>\n</li>\n<li><p>将定期执行的进程对换出去以减轻系统负荷</p>\n</li>\n<li><p>用户要求挂起自己的进程，以进行检查和改正</p>\n</li>\n<li><p>父进程要求挂起后代进程，以进行检查和改正</p>\n</li>\n<li><p>操作系统需要挂起某些进程，以进行检查和改正</p>\n</li>\n</ul>\n<p><strong>七态模型：</strong></p>\n<p><img data-src=\"https://s2.loli.net/2022/03/04/986gRwPzeKnG3Yo.png\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/20/k36EOZQYuFsGBNq.png\" alt=\"image-20220520082727937\"></p>\n</blockquote>\n<h2 id=\"3、进程控制\"><a href=\"#3、进程控制\" class=\"headerlink\" title=\"3、进程控制\"></a>3、进程控制</h2><p><img data-src=\"https://s2.loli.net/2022/05/16/2VmzyaKN8WbXTkn.png\" alt=\"image-20220516092854030\"></p>\n<p><strong>进程控制：</strong>对系统中的所有进程实施有效的管理，即实现进程状态转换</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/16/C2KUzIQlknVs89f.png\" alt=\"image-20220516091105817\"></p>\n<p><strong>原语的概念：</strong>由若干机器指令构成的，用以完成特定功能的一段程序，这段程序在执行期间不允许中断，只能一气呵成。</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/16/w867Je3mhGfvLct.png\" alt=\"image-20220516091342486\"></p>\n<p>进程控制相关的原语要做的事情：</p>\n<ul>\n<li><p>更新PCB中的信息（如修改进程状态标志、将运行环境保存到PCB、从PCB恢复运行环境）</p>\n</li>\n<li><p>将PCB插入合适的队列</p>\n</li>\n<li><p>分配&#x2F;回收资源</p>\n</li>\n</ul>\n<p><strong>进程的创建和终止：</strong></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/16/DdXkcIGeZi6hUWj.png\" alt=\"image-20220516092101256\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/16/l6x3gat7U5KHW2u.png\" alt=\"image-20220516092402405\"></p>\n<blockquote>\n<p><strong>僵尸进程：</strong> 子进程已终止，但父进程尚未调用wait()</p>\n<p><strong>孤儿进程 ：</strong>子进程还在执行的时候父进程已终止。Linux和UNIX会将init进程作为孤儿进程的父进程。</p>\n</blockquote>\n<p><strong>进程的阻塞和唤醒</strong></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/16/kLQ4ewEbNZBj7xa.png\" alt=\"image-20220516092526462\"></p>\n<blockquote>\n<p>阻塞是主动过程（进程自己调用阻塞原语），唤醒是被动过程（另一个发现者进程（合作的并发进程）调用唤醒原语）</p>\n</blockquote>\n<p><strong>进程的挂起与激活：</strong></p>\n<p>挂起原语的功能 ：将指定进程挂起😶</p>\n<p>过程：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph LR</span><br><span class=\"line\"> a[在PCB表中查找PCB]--&gt;b[检查进程状态]</span><br><span class=\"line\"> b[检查进程状态]--&gt;|活动阻塞|c[挂起阻塞]</span><br><span class=\"line\"> b[检查进程状态]--&gt;|活动就绪|d[挂起就绪]</span><br><span class=\"line\"> b[检查进程状态]--&gt;|执行|e[停止执行并保护现场信息]</span><br><span class=\"line\"> e[停止执行并保护现场信息]--&gt;f[挂起就绪]</span><br><span class=\"line\"> f[挂起就绪]--&gt;g[转进程调度]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>激活原语的功能：将指定进程激活😶</p>\n<p>过程：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph LR</span><br><span class=\"line\"> a[在PCB表中查找PCB]--&gt;b[检查进程状态]</span><br><span class=\"line\"> b[检查进程状态]--&gt;|挂起阻塞|c[活动阻塞]</span><br><span class=\"line\"> b[检查进程状态]--&gt;|挂起就绪|d[活动就绪]</span><br><span class=\"line\"> d[活动就绪]--&gt;|可能需要|e[转进程调度]</span><br></pre></td></tr></table></figure>\n\n<p><strong>进程的调度和切换</strong></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/16/Rqatu1ylzhiZfpF.png\" alt=\"image-20220516092621336\"></p>\n<p><strong>调度和切换的时机问题</strong>：调度和切换并不一定能一气呵成。通常的做法是，由内核置请求调度标志，延迟到敏感性操作完成后再进行进程调度和进程上下文切换。</p>\n<p><strong>CPU模式切换：</strong></p>\n<p>处理器总处于以下状态中的一种：</p>\n<ul>\n<li>内核态，运行于进程上下文，内核代表进程运行于内核空间，使用核心栈。 (进程请求系统调用，陷入内核)</li>\n<li>内核态，运行于中断上下文，内核代表硬件运行于内核空间，与任何进程无关，中断服务程序正在处理特定中断。 (进程被中断)</li>\n<li>用户态，运行于进程上下文，用户进程在运行，使用用户栈。 （进程正常运行)</li>\n</ul>\n<p>内核可以处于两种上下文：进程上下文和中断上下文。</p>\n<ul>\n<li>在系统调用之后，用户应用程序进入内核空间，此后内核空间针对用户空间相应进程的代表就运行于进程上下文。</li>\n<li>异步发生的中断会引发中断处理程序被调用，中断处理程序就运行于中断上下文。</li>\n<li>中断上下文和进程上下文不可能同时发生。</li>\n<li>运行于进程上下文的内核代码是可抢占的，但中断上下文则会一直运行至结束，不会被抢占。</li>\n</ul>\n<p><img data-src=\"https://s2.loli.net/2022/03/08/kytGVsrFjpeDh5C.png\" alt=\"image-20220308203423763\"></p>\n<h2 id=\"5、进程通信\"><a href=\"#5、进程通信\" class=\"headerlink\" title=\"5、进程通信\"></a>5、进程通信</h2><p><img data-src=\"https://s2.loli.net/2022/05/16/vgB2kzlGcLA4IQE.png\" alt=\"image-20220516094111006\"></p>\n<p><strong>概念：</strong>进程之间的信息交换。为了保证安全，一个进程不能直接访问另一个进程的地址空间</p>\n<p><strong>方法：</strong>共享内存、消息传递、信号机制、管道、RPC、Socket等等。其中共享内存和消息传递是IPC的两种<strong>基本模型</strong>。</p>\n<p>共享内存：快。仅在建立共享内存区域时才采用系统调用。</p>\n<p>消息传递：适合交换少量数据、易实现。常采用系统调用。</p>\n<p>&#x3D;&#x3D;共享内存：&#x3D;&#x3D;</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/16/TBisA6XZtbx5CRc.png\" alt=\"image-20220516093334379\"></p>\n<p>&#x3D;&#x3D;消息传递&#x3D;&#x3D;</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/16/yAuDL9CeaZJc5pK.png\" alt=\"image-20220516093950844\"></p>\n<blockquote>\n<p><strong>同步或异步的通信</strong></p>\n<p>同步（阻塞）：发送之后需等待被接收；接收进程需等待有消息可用</p>\n<p>异步（非阻塞） ：发送之后可继续其他操作；接收进程收到有效消息或者空消息，继续其他操作</p>\n<p>有效的组合：阻塞发送，阻塞接收；非阻塞发送，阻塞接收（如客户机-服务器）；非阻塞发送，非阻塞接收。&#x3D;&#x3D;没有阻塞发送，非阻塞接收，否则发送进程可能死等。&#x3D;&#x3D;</p>\n</blockquote>\n<p>&#x3D;&#x3D;信号机制：&#x3D;&#x3D;</p>\n<p><strong>概念：</strong>软件中断通知事件机制，一种古老且简单的通信机制。通过发送一个<strong>指定信号</strong>来通知进程某个异常事件发生。每个信号都有一个名字和编号，这些名字都以“SIG”开头，如SIGKILL。</p>\n<p><strong>信号与中断的相同点及区别</strong></p>\n<p>相同点：采用异步通信方式；获得请求时，暂停正在执行的任务转而执行相应的处理程序，处理完毕后返回断点；都可以被屏蔽。</p>\n<p>区别：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>实现</th>\n<th>优先级</th>\n<th>运行态</th>\n<th>及时</th>\n<th>其他</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>中断</strong></td>\n<td>硬件、软件结合</td>\n<td>有</td>\n<td>核心态</td>\n<td>及时</td>\n<td>程序并不知道自己被中断。</td>\n</tr>\n<tr>\n<td><strong>信号</strong></td>\n<td>软件</td>\n<td>无</td>\n<td>用户态</td>\n<td>有较大时间延迟</td>\n<td>由程序接收</td>\n</tr>\n</tbody></table>\n<p><img data-src=\"https://s2.loli.net/2022/03/08/pgZGS5wv3LhP9DI.png\" alt=\"image-20220308212641169\"></p>\n<p>&#x3D;&#x3D;管道机制&#x3D;&#x3D;</p>\n<p><strong>管道的概念</strong>：连接读写进程的一个特殊文件。&#x3D;&#x3D;本质：共享文件&#x3D;&#x3D;，可借助文件系统的机制实现。用于同一机器的进程间通信</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/16/hNZYEUatvnwJgzr.png\" alt=\"image-20220516093711586\"></p>\n<p><strong>管道的分类：</strong>匿名管道（半双工、只能用于具有亲缘关系的进程间通信）、有名管道（克服了只能用于具有亲缘关系的进程之间通信的限制）</p>\n<h2 id=\"6、线程概念、多线程模型\"><a href=\"#6、线程概念、多线程模型\" class=\"headerlink\" title=\"6、线程概念、多线程模型\"></a>6、线程概念、多线程模型</h2><p><img data-src=\"https://s2.loli.net/2022/05/16/tyE8R4JhQMmKfNF.png\" alt=\"image-20220516100255832\"></p>\n<p><strong>引入线程的目的</strong></p>\n<ul>\n<li><p>在操作系统中引入进程的目的是使多道程序能并发执行，以改善资源利用率及提高系统吞吐量；</p>\n</li>\n<li><p>在操作系统中再引入线程，则是为了减少程序并发执行所付出的时空开销，使操作系统具有更好的<strong>并发性</strong>。</p>\n</li>\n</ul>\n<p><strong>概念</strong>：</p>\n<ul>\n<li><p>线程是进程内一个相对独立的、可调度的执行单元。</p>\n</li>\n<li><p>线程是CPU调度的基本单位</p>\n</li>\n<li><p>它由线程ID、程序计数器、寄存器集合和栈组成。 </p>\n</li>\n<li><p>&#x3D;&#x3D;它与属于同一进程的其他线程共享代码段、数据段和其他操作系统资源。&#x3D;&#x3D; </p>\n</li>\n<li><p>线程自己基本上不拥有资源，只拥有一点在运行时必不可少的资源（如程序计数器、一组寄存器和栈），但它可以与同属一个进程的其他线程共享进程拥有的全部资源</p>\n</li>\n</ul>\n<p><img data-src=\"https://s2.loli.net/2022/05/16/58qohj4kQFBwfx2.png\" alt=\"image-20220516094855723\"></p>\n<p><strong>线程与进程的比较：</strong></p>\n<blockquote>\n<p>线程可以主动让出处理器，进程可以通过wait()来让出处理器</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>调度</th>\n<th>拥有的资源</th>\n<th>系统开销</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>进程</strong></td>\n<td>在传统OS中，进程是调度和分配资源的基本单位</td>\n<td>进程是拥有资源的基本单位，由一个或多个线程及相关资源构成</td>\n<td>大</td>\n</tr>\n<tr>\n<td><strong>线程</strong></td>\n<td>引入线程后，线程是调度和分派的基本单位</td>\n<td>基本上不拥有资源，只拥有一点在运行时必不可少的资源（如程序计数器、一组寄存器和栈），但它可以与同属一个进程的其他线程共享进程拥有的全部资源</td>\n<td>小</td>\n</tr>\n</tbody></table>\n<p><strong>属性</strong></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/16/6248bugjiR3mZAT.png\" alt=\"image-20220516095238427\"></p>\n<p><strong>实现方式</strong></p>\n<ul>\n<li><p>用户级线程</p>\n<ul>\n<li><p>概念：不依赖于操作系统核心，由应用进程利用<strong>用户级线程库</strong>提供创建、同步、调度和管理线程的函数来控制的线程。</p>\n</li>\n<li><p><strong>用户级线程对OS不可见，OS调度的依然是内核级线程</strong></p>\n</li>\n<li><p>纯用户级线程之间不能抢占，除非主动放弃处理器</p>\n</li>\n<li><p>优势：速度快（因为它不需要内核干预）</p>\n</li>\n<li><p>限制：</p>\n<ul>\n<li>当一个线程阻塞时，整个进程都必须等待（因为用户级线程对OS不可见）</li>\n<li>处理机时间分配对象是进程，每个用户级线程的执行时间相对少一些</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>内核级线程</p>\n<ul>\n<li><p>概念：依赖于内核，由<strong>操作系统内核</strong> 完成创建和撤消工作的线程。 </p>\n</li>\n<li><p>一个内核级线程阻塞时不会影响同一进程的其他线程的运行。（因为可以调度其他线程）</p>\n</li>\n<li><p>处理机时间分配对象是线程，所以有多个线程的进程将获得更多处理机时间。</p>\n</li>\n<li><p>缺点：系统开销</p>\n</li>\n</ul>\n<p>  <img data-src=\"https://s2.loli.net/2022/05/16/HQngtqdIwNY4rmL.png\" alt=\"image-20220516095708821\"></p>\n</li>\n<li><p><strong>多线程模型</strong></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/05/16/Ao4CZvHWhyiUd3p.png\" alt=\"image-20220516095905848\"></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/05/16/AiIb8h46MvJHq1r.png\" alt=\"image-20220516100022950\"></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/05/16/OzZUoPM7pvnby9q.png\" alt=\"image-20220516100112838\"></p>\n</li>\n</ul>\n<h2 id=\"x3D-x3D-7、可能的大题：代码？-x3D-x3D-😫\"><a href=\"#x3D-x3D-7、可能的大题：代码？-x3D-x3D-😫\" class=\"headerlink\" title=\"&#x3D;&#x3D;7、可能的大题：代码？&#x3D;&#x3D;😫\"></a>&#x3D;&#x3D;7、可能的大题：代码？&#x3D;&#x3D;😫</h2><h3 id=\"1、fork-、exec-、vfork-、clone\"><a href=\"#1、fork-、exec-、vfork-、clone\" class=\"headerlink\" title=\"1、fork()、exec()、vfork()、clone()\"></a>1、fork()、exec()、vfork()、clone()</h3><p><strong>fork():</strong>  创造的子进程是父进程的完整副本，复制了父亲进程的所有资源</p>\n<p><strong>exec():</strong>   fork()函数会调用此系统调用，使用指定的新程序填充进程空间</p>\n<p>**vfork()**：创建的子进程与父进程共享数据段,而且由vfork()创建的子进程将先于父进程运行</p>\n<p><strong>clone()：</strong>允许子进程有选择的共享父进程资源</p>\n<p>例子：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">( )</span> &#123; </span><br><span class=\"line\">    <span class=\"type\">pid_t</span> pid;</span><br><span class=\"line\">    pid = fork();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pid &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(“fork new process error!\\n”);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pid ==<span class=\"number\">0</span>)&#123;\t\t<span class=\"comment\">//child process</span></span><br><span class=\"line\">        execlp(“/bin/ls”,”ls”, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;LINE J&quot;</span>);\t<span class=\"comment\">//只有excelp调用失败时才会执行这条语句</span></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        wait(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(“Child Complete”);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"x3D-x3D-2、fork-、getpid-和printf-x3D-x3D\"><a href=\"#x3D-x3D-2、fork-、getpid-和printf-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;***2、fork()、getpid()和printf()&#x3D;&#x3D;\"></a>&#x3D;&#x3D;***2、fork()、getpid()和printf()&#x3D;&#x3D;</h3><p>&#x3D;&#x3D;进程家族树：&#x3D;&#x3D;</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/16/sMmaLV4gUexGBfW.png\" alt=\"image-20220516144045281\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/16/7MbVpWcmZ6Pki5R.png\" alt=\"image-20220516144104234\"></p>\n<hr>\n<p><img data-src=\"https://s2.loli.net/2022/05/16/cNyvatSV4WY3HA7.png\" alt=\"image-20220516145352414\"></p>\n<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>"},{"title":"七、虚拟内存管理","abbrlink":43908,"date":"2022-06-27T15:08:44.000Z","_content":"\n# 第7章 虚拟内存管理\n\n虚拟内存的概念 \n\n局部性原理\n\n请求分页系统\n\nTLB刷新问题可以忽略\n\nEAT计算，缺页中断，缺页率\n\n==页面分配和替换的算法==  重点： 简单时钟及其变形\n\n后面的基本是概念\n\n局部页面替换：重点掌握局部最佳页面和工作集\n\n抖动\n\n## 1、概念\n\n### （1）局部性原理✳\n\nCPU访问存储器时，无论是存取指令还是存取数据，单元都趋于聚集在一个较小的连续区域中，**局部性体现为**：\n\n1. **时间局部性**：一条指令的一次执行和下次执行， 一个数据的一次访问和下次访问， 都集中在一个较短时间内\n2. **空间局部性**：当前执行的指令和将要执行的指令， 当前访问的数据和将要访问的数据， 都集中在一个较小范围内  \n3. **顺序局部性**：顺序执行与跳转比例5： 1  \n\n局部性原理是虚拟内存的理论基础\n\n### （2）虚拟内存的定义\n\n> 虚拟内存，也称为虚拟存储器，指具有请求调入和替换功能， 能从逻辑上对内存容量加以扩充的一种存储器系统（是以时间换空间的技术）\n\n**虚拟内存的特征**：\n\n- 离散性：不连续内存分配\n- 多次性：一个作业分多次装入内存\n- 对换性：允许运行中换进换出\n- 虚拟性：逻辑上扩充内存\n\n**常用技术**：\n\n- 请求分页存储管理\n- 请求分段存储管理\n\n与前章区别：\n\n- 非请求分页/段：一次性调入\n- 请求分页/段：按需调入，不需的换出\n\n## 2、请求分页系统✳\n\n> 请求分页存储管理方法：在分页存储管理的基础上增加了请求调页和页面置换功能 \n\n**支持机构**：\n\n- **物理部件**：内存管理单元（MMU）\n- **页表**\n- **缺页中断机构**\n- **地址变换机构**\n- **请求调页和页面置换软件**\n\n**优点**：\n\n- 作业的程序和数据可按页分散存放在内存中，减少移动开销，有效解决碎片问题\n- 既有利于改进主存利用率，又有利于多道程序运行\n\n**缺点**：\n\n- 要有硬件支持，进行缺页中断处理，机器成本增加，系统开销加大\n\n### （1）内存管理单元MMU\n\n> MMU：完成逻辑地址到物理地址的转换功能，它接受虚拟地址作为输入，物理地址作为输出，直接送到总线上，对内存单元进行寻址 \n\n<img src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205291534881.png\" alt=\"image-20220529153445797\" style=\"zoom:50%;\" />\n\n**MMU的主要功能**\n\n- 管理硬件页表基址寄存器\n- 分解逻辑地址\n- 管理快表\n- 访问页表\n- 发出缺页中断或越界中断，将控制权交给内核存储管理处理\n- 管理特征位，设置和检查页表中各个特征位\n\n### （2）页表\n\n与前一章相同，请求分页系统中使用的主要数据结构仍然是页表，但由于每次只将作业的一部分调入内存， 还有一部分内容存放在磁盘上， 故需要在页表中增加若干项，如下表所示：\n\n![image-20220529154142586](https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205291541612.png)\n\n- 页号和物理块号：其定义同分页存储管理 \n- 存在位：用于表示该页是否在主存中 \n- 访问字段：用于记录本页在一段时间内被访问的次数， 或最近已有多长时间未被访问\n- 修改位：用于表示该页调入内存后是否被修改过\n- 外存地址：用于指出该页在外存上的地址\n\n### （3）缺页中断✳\n\n> 在请求分页系统中， 硬件查页表发现所访问的页不在内存时， 便产生缺页中断， 请求OS将缺页调入内存 操作系统执行缺页中断处理程序根据该页在外存的地址把它调入内存 \n\n**缺页中断的处理过程**\n\n![image-20220529154500817](https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205291545861.png)\n\n如上图所示，包括以下6步\n\n1. **查找页表**：发起对地址的访问，MMU到页表中检查引用情况  \n2. **缺页中断**：若不在内存，产生缺页中断，陷入缺页中断程序  \n3. **查找外存**：OS在外存中寻找外存中的页面备份\n4. **调入内存**：寻找空闲页帧，或依据某种替换算法选择被替换的页帧，将页面调入内存  \n5. **修改页表**：修改页表项信息\n6. **重新执行**：重新执行产生缺页的指令\n\n**缺页中断与一般中断的区别**\n\n1. 缺页中断在指令的执行期间产生和处理\n2. 一条指令可以产生多个缺页中断，例如复制指令copy A to B\n3. 缺页中断返回时执行产生中断的指令，一般中断返回时执行下条指令\n\n> 请求分页虚拟存储管理系统的地址变换过程类似于分页存储管理，但当被访问页不在内存时应进行缺页中断处理  \n\n### （4）地址变换\n\n<img src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205291636817.png\" alt=\"image-20220529163638765\" style=\"zoom:50%;\" />\n\n地址变换的数据通路如上图所示，而以下是进行地址变换的流程图\n\n<img src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205291637270.png\" alt=\"image-20220529163711225\" style=\"zoom:50%;\" />\n\n### （5）EAT计算✳✳✳感觉很大概率考！\n\n<img src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205291642336.png\" alt=\"image-20220529164207293\" style=\"zoom:50%;\" />\n\n> 如上图所示，令查找和修改快表的时间为ε，访存（包括查找页表和访问内存）的时间为t，快表命中率为α，页表缺页率为f，处理缺页中断时间为t1\n\n#### 访问内存时间计算（单次）\n\n1. **若页在主存中且页表项在快表中**：访问时间=查快表时间+访问内存时间=$\\epsilon+t$\n2. **若页在主存中且页表项不在快表中**：访问时间=查快表时间+查页表时间+修改快表时间\n    +访问内存时间=$\\epsilon+t+\\epsilon+t=2(\\epsilon+t)$\n3. **若页不在主存之中**：访问时间=查快表时间+查页表时间+处理缺页中断时间t1+查快表时间+访问内存时间 =$\\epsilon+t+t_1+\\epsilon+t=t_1+2(\\epsilon+t)$\n\n#### 有效访问时间计算（多次平均情况）\n\n考虑以上三种情况的概率，其中①出现的概率为α、②出现的概率为(1-α)\\*(1-f)、③出现的概率为(1-α)\\*f，所以有效访问时间为：\n$$\nEAT=\\alpha*(\\epsilon+t)+(1-\\alpha)*[(1-f)*2(\\epsilon+t)+f*(t_1+2(\\epsilon+t))]\\\\\n=(2-\\alpha)(\\epsilon+t)+(1-\\alpha)ft_1\n$$\n\n## 3、页面替换\n\n### （1）页面装入与清除策略\n\n**两种页面装入策略**：\n\n- **请求式调度**：按需装入，但是需要频繁的磁盘I/O\n- **预调式调度**：利用局部性原理进行动态预测，预先装入\n\n两种页面清除策略：\n\n- **请求式清除**：当一页被选中进行替换且被修改过，则进行写回磁盘，缺点：效率低下\n- **预约式清除**：对所有修改的页面，替换前，提前成批写回，要写回的页仍然在主存，直到被替换算法选中此页从主存中移出，若该页面在刚被写回后，在替换回前，再次被大量修改，则该策略失效\n\n**页面的两个来源**：\n\n- **文件区**：用于存放文件，采用离散分配方式\n- **对换区**：用于存放对换页面，采用连续分配方式，I/O速度比文件区高\n\n**缺页时的三种情况**：\n\n- **当系统拥有足够的对换区空间**：全部从对换区调入所需页面，以提高调页速度  \n- **当系统缺少足够的对换区空间**：这时凡是不会被修改的文件，都直接从文件区调入；而当换出这些页面时，由于它们未被修改而不必再将它们换出，以后再调入时，仍从文件区直接调入，但对于那些可能被修改的部分，在将它们换出时，便须调到对换区，以后需要时，再从对换区调入  \n- **UNIX方式**：与进程有关的文件都放在文件区，故凡是未运行过的页面，都应从文件区调入，对于曾经运行过但又被换出的页面，由于是被放在对换区，因此在下次调入时，应从对换区调入                                                                                                                                                                                                                                           \n\n### （2）页面分配与替换策略\n\n**两种页面分配策略**：\n\n- **固定分配**：进程保持页框数固定不变，只要有一个缺页中断产生，进程就会有一页被替换\n- **可变分配**：进程分得的页框数可变，如果进程缺页率较高，说明目前局部性较差，可增加分配页框以降低缺页率；反之说明局部性较好，可减少分配页框数\n\n两种页面替换策略：\n\n- **全局替换**：替换算法的作用范围是整个系统，可以在运行的进程之间动态地分配页框\n- **局部替换**：替换算法的作用范围局限于本进程，需要为每个进程分配固定的页框\n\n**三种分配和替换算法的配合**\n\n1. **固定分配+局部替换**：容易、但是性能差\n2. **可变分配+全局替换**：容易，已经应用于若干操作系统中\n3. **可变分配+局部替换**：比较复杂，但是性能好\n\n### （3）页面替换算法✳✳✳必考！\n\n#### 最佳替换算法（OPT）\n\n> 核心思想：淘汰掉将来不再访问， 或者距现在最长时间后才可能会访问的页面  \n\n> 缺点：因页面访问的未来顺序很难精确预测，但算法具有理论意义，可用来评价其他算法的优劣\n\n实例如下：\n\n![image-20220529225933474](https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205292259528.png)\n\n#### 先进先出算法（FIFO）\n\n> 前提假设：程序按照线性顺序来访问物理空间\n\n> 核心思想：选择调入主存时间最长的页面予以淘汰， 认为驻留时间最长的页面不再使用的可能性较大  \n\n实例如下：\n\n![image-20220529230143996](https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205292301046.png)\n\n**特点**\n\n- 实现比较简单\n- 对按照线性顺序访问的程序比较合适，对其他特性的程序效率不高\n- Belady现象：在某些情况下分配给进程的页面数增多，缺页次数反而增加（选择题可能考），其原因是FIFO算法的置换特征与进程访问内存的动态特征是矛盾的， 即被置换的页面并不是进程不会访问的  \n\n**改进**：页面缓冲算法\n\n- 采用FIFO选择被替换页面， 选择出的页面不是立即换出， 而是按照修改与否， 放到相应队列末尾：\n    - 空闲队列：页面未修改则放入空闲队列末尾， 该链表也是可直接装入页面的页框所构成  \n    - 修改队列：页面已修改则放入修改队列末尾  \n- 需要装入的页面被读进空闲队列队首页框中， 而不用等待淘汰页写回再装入  \n- 当修改页面到一定数量， 就成批写回， 并把所占用页框挂到空闲链上\n\n#### 最近最久未使用算法（LRU）\n\n> 核心思想：基于局部性原理：刚被使用过的页面可能还会立即被使用， 较长时间内未被使用的页面可能不会立即使用。进行页面替换时，选择最近一段时间内最长时间未被访问过的页面予以淘汰。为了实现，则赋予每个页面一个访问字段， 用于记录页面自上次访问以来所经历的时间， 同时维护一个淘汰队列  \n\n实例如下：\n\n![image-20220529231452025](https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205292314078.png)\n\n具体实现方法包括：\n\n- **基于计数器的方法**：为每个页表项关联一个时间域字段，为CPU增加一个计数器或者逻辑时钟，每次时钟中断，计数器加1，每当访问一页时，将计数器值复制到相应页所对应页表项的时间域内，当发生缺页中断时，可选择时间域数值最小的对应页面淘汰  \n- 基于栈的方法：用一个特殊的栈保存当前进程所访问的各页面号，每当进程访问某页面， 便将它对应的页面号从栈中移出， 压入栈顶，栈顶是最近访问的页面，栈底是最近最久未使用的页面  \n- 引用位法：每一个页面关联一个bit，初始为0，当页面被引用时，设置为1，需要替换页面时，替换bit=0的页面\n- 附加引用位法（老化算法）：每页都有引用位，并为每页设一个8位内存信息，每隔规定时间，时钟定时器触发中断，将控制权交给OS；OS将每个页的引用位转移到8位字节的高位，并将其他位右移1位，抛弃最低位。这8位就表明了最近8个时间周期，页面的使用情况，发生缺页时挑选最小的为LRU页替换    \n\n#### 二次机会算法\n\n> 核心思想：使用FIFO算法选择一页淘汰时，先检查该页的访问位：\n>\n> - 如果是0就立即淘汰该页  \n> - 如果是1就给它第二次机会， 将其访问位清0，并将它放入页面链的末尾，将其装入时间置为当前时间，然后选择下一个页面  \n\n#### 简单时钟算法\n\n> 核心思想：将页面排成一个循环队列， 类似于时钟表面，并使用一个替换指针，当发生缺页时， 检查指针指向的页面：\n>\n> - 若其访问位为0，则淘汰该页\n> - 否则将该页的访问位清0，指针前移并重复上述过程， 直到找到访问位为0的淘汰页为止；最后指针停留在被替换页的下一页上（如下方流程图所示）\n\n<img src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205292326018.png\" alt=\"image-20220529232625984\" style=\"zoom:50%;\" />\n\n实例如下：\n\n![image-20220529232533212](https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205292325259.png)\n\n如上图，此时需要替换入page12，则将指针找到的第一个访问位为0的page21淘汰\n\n![image-20220529232811539](https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205292328587.png)\n\n之所以块2、块3均无*标记，是因为时钟已经转过了块1、2、3，将其标志位置为0，然后替换的是块1\n\n**算法极端情况**：所有页都被引用，则选择时，需要先把所有页面遍历，清除所有引用位，则退化为FIFO\n\n**算法的改进**：考虑修改问题，定义R为访问位，M为修改位，则有以下4种类型：\n\n| R    | M    | 定义               |\n| ---- | ---- | ------------------ |\n| 0    | 0    | 未被访问也未被修改 |\n| 0    | 1    | 未被访问但已被修改 |\n| 1    | 0    | 已被访问但未被修改 |\n| 1    | 1    | 已被访问且已被修改 |\n\n进行以下3步骤：\n\n1. 从指针当前位置开始扫描循环队列， 寻找R=0， M=0的页面， 将满足条件的第一个页面作为淘汰页， 本轮扫描不修改“访问位R” （若失败， 则所有队列项中：若R=0,M=1；若R=1, M=0/1）\n2. 若第1步失败， 则开始第2轮扫描， 寻找R=0， M=1的页面， 将满足条件的第一个页面作为淘汰页， 并将所有经历过页面的访问位R置0（若失败，  则所有队列项中：R=1,M=0/1）\n3. 若第2步失败， 则将指针返回到开始位置， 然后重复第1步， 若仍失败则必须重复第2步， 此时一定能找到淘汰页面  \n\n#### 工作集模型\n\n> 核心思想：根据程序的局部性原理，一般情况下，进程在一段时间内总是集中访问一些页面，这些页面称为活跃页面，如果分配给一个进程的物理页面数太少了，使该进程所需的活跃页面不能全部装入内存，则进程在运行过程中将频繁发生中断  \n>\n> 定义工作集：一个进程当前正在使用的页框集合，用W(T, Δ)表示，即该进程在过去的Δ个虚拟时间单位中访问到的页面的集合，如下方实例所示：\n>\n> ![image-20220529234937052](https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205292349087.png)\n\n> 基本思路：找出一个不在工作集之中的页面并置换之\n\n![image-20220529235041046](https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205292350104.png)\n\n**特点**：概念上好，但监督驻留页面变化的开销很大，估算合适的窗口Δ大小也是个难题  \n\n### 4、抖动问题✳\n\n**定义**：由于频繁缺页，导致运行进程的大部分时间都用于页面的换入/换出，而几乎不能完成任何有效的工作，则称此进程处于抖动状态。抖动又称为颠簸、颤动  \n\n**分为两种**：\n\n1. 局部抖动\n2. 全局抖动\n\n**产生原因**：\n\n1. 进程分配的物理块太少\n2. 替换算法选择不当\n3. 全局替换使抖动传播\n\n**抖动的预防和接触**：\n\n- 采用局部替换策略可以防止抖动传播  \n- 通过挂起进程来解除抖动，所选择挂起进程的判断依据：\n    - 优先级最低：符合进程调度原则\n    - 发生缺页中断的进程：内存不含工作集，缺页时应阻塞\n    - 最后被激活的进程：工作集可能不在内存\n    - 最大的进程：可释放较多空间  \n\n*不在重点的一个东西：页面大小选择分析*\n\n![image-20220529235508873](https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205292355923.png)\n\n![image-20220529235516534](https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205292355578.png)\n","source":"_posts/七、虚拟内存管理.md","raw":"---\ntitle: 七、虚拟内存管理\ntags:\n  - 操作系统\ncategory:\n  - 操作系统\nabbrlink: 43908\ndate: 2022-06-27 23:08:44\n---\n\n# 第7章 虚拟内存管理\n\n虚拟内存的概念 \n\n局部性原理\n\n请求分页系统\n\nTLB刷新问题可以忽略\n\nEAT计算，缺页中断，缺页率\n\n==页面分配和替换的算法==  重点： 简单时钟及其变形\n\n后面的基本是概念\n\n局部页面替换：重点掌握局部最佳页面和工作集\n\n抖动\n\n## 1、概念\n\n### （1）局部性原理✳\n\nCPU访问存储器时，无论是存取指令还是存取数据，单元都趋于聚集在一个较小的连续区域中，**局部性体现为**：\n\n1. **时间局部性**：一条指令的一次执行和下次执行， 一个数据的一次访问和下次访问， 都集中在一个较短时间内\n2. **空间局部性**：当前执行的指令和将要执行的指令， 当前访问的数据和将要访问的数据， 都集中在一个较小范围内  \n3. **顺序局部性**：顺序执行与跳转比例5： 1  \n\n局部性原理是虚拟内存的理论基础\n\n### （2）虚拟内存的定义\n\n> 虚拟内存，也称为虚拟存储器，指具有请求调入和替换功能， 能从逻辑上对内存容量加以扩充的一种存储器系统（是以时间换空间的技术）\n\n**虚拟内存的特征**：\n\n- 离散性：不连续内存分配\n- 多次性：一个作业分多次装入内存\n- 对换性：允许运行中换进换出\n- 虚拟性：逻辑上扩充内存\n\n**常用技术**：\n\n- 请求分页存储管理\n- 请求分段存储管理\n\n与前章区别：\n\n- 非请求分页/段：一次性调入\n- 请求分页/段：按需调入，不需的换出\n\n## 2、请求分页系统✳\n\n> 请求分页存储管理方法：在分页存储管理的基础上增加了请求调页和页面置换功能 \n\n**支持机构**：\n\n- **物理部件**：内存管理单元（MMU）\n- **页表**\n- **缺页中断机构**\n- **地址变换机构**\n- **请求调页和页面置换软件**\n\n**优点**：\n\n- 作业的程序和数据可按页分散存放在内存中，减少移动开销，有效解决碎片问题\n- 既有利于改进主存利用率，又有利于多道程序运行\n\n**缺点**：\n\n- 要有硬件支持，进行缺页中断处理，机器成本增加，系统开销加大\n\n### （1）内存管理单元MMU\n\n> MMU：完成逻辑地址到物理地址的转换功能，它接受虚拟地址作为输入，物理地址作为输出，直接送到总线上，对内存单元进行寻址 \n\n<img src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205291534881.png\" alt=\"image-20220529153445797\" style=\"zoom:50%;\" />\n\n**MMU的主要功能**\n\n- 管理硬件页表基址寄存器\n- 分解逻辑地址\n- 管理快表\n- 访问页表\n- 发出缺页中断或越界中断，将控制权交给内核存储管理处理\n- 管理特征位，设置和检查页表中各个特征位\n\n### （2）页表\n\n与前一章相同，请求分页系统中使用的主要数据结构仍然是页表，但由于每次只将作业的一部分调入内存， 还有一部分内容存放在磁盘上， 故需要在页表中增加若干项，如下表所示：\n\n![image-20220529154142586](https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205291541612.png)\n\n- 页号和物理块号：其定义同分页存储管理 \n- 存在位：用于表示该页是否在主存中 \n- 访问字段：用于记录本页在一段时间内被访问的次数， 或最近已有多长时间未被访问\n- 修改位：用于表示该页调入内存后是否被修改过\n- 外存地址：用于指出该页在外存上的地址\n\n### （3）缺页中断✳\n\n> 在请求分页系统中， 硬件查页表发现所访问的页不在内存时， 便产生缺页中断， 请求OS将缺页调入内存 操作系统执行缺页中断处理程序根据该页在外存的地址把它调入内存 \n\n**缺页中断的处理过程**\n\n![image-20220529154500817](https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205291545861.png)\n\n如上图所示，包括以下6步\n\n1. **查找页表**：发起对地址的访问，MMU到页表中检查引用情况  \n2. **缺页中断**：若不在内存，产生缺页中断，陷入缺页中断程序  \n3. **查找外存**：OS在外存中寻找外存中的页面备份\n4. **调入内存**：寻找空闲页帧，或依据某种替换算法选择被替换的页帧，将页面调入内存  \n5. **修改页表**：修改页表项信息\n6. **重新执行**：重新执行产生缺页的指令\n\n**缺页中断与一般中断的区别**\n\n1. 缺页中断在指令的执行期间产生和处理\n2. 一条指令可以产生多个缺页中断，例如复制指令copy A to B\n3. 缺页中断返回时执行产生中断的指令，一般中断返回时执行下条指令\n\n> 请求分页虚拟存储管理系统的地址变换过程类似于分页存储管理，但当被访问页不在内存时应进行缺页中断处理  \n\n### （4）地址变换\n\n<img src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205291636817.png\" alt=\"image-20220529163638765\" style=\"zoom:50%;\" />\n\n地址变换的数据通路如上图所示，而以下是进行地址变换的流程图\n\n<img src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205291637270.png\" alt=\"image-20220529163711225\" style=\"zoom:50%;\" />\n\n### （5）EAT计算✳✳✳感觉很大概率考！\n\n<img src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205291642336.png\" alt=\"image-20220529164207293\" style=\"zoom:50%;\" />\n\n> 如上图所示，令查找和修改快表的时间为ε，访存（包括查找页表和访问内存）的时间为t，快表命中率为α，页表缺页率为f，处理缺页中断时间为t1\n\n#### 访问内存时间计算（单次）\n\n1. **若页在主存中且页表项在快表中**：访问时间=查快表时间+访问内存时间=$\\epsilon+t$\n2. **若页在主存中且页表项不在快表中**：访问时间=查快表时间+查页表时间+修改快表时间\n    +访问内存时间=$\\epsilon+t+\\epsilon+t=2(\\epsilon+t)$\n3. **若页不在主存之中**：访问时间=查快表时间+查页表时间+处理缺页中断时间t1+查快表时间+访问内存时间 =$\\epsilon+t+t_1+\\epsilon+t=t_1+2(\\epsilon+t)$\n\n#### 有效访问时间计算（多次平均情况）\n\n考虑以上三种情况的概率，其中①出现的概率为α、②出现的概率为(1-α)\\*(1-f)、③出现的概率为(1-α)\\*f，所以有效访问时间为：\n$$\nEAT=\\alpha*(\\epsilon+t)+(1-\\alpha)*[(1-f)*2(\\epsilon+t)+f*(t_1+2(\\epsilon+t))]\\\\\n=(2-\\alpha)(\\epsilon+t)+(1-\\alpha)ft_1\n$$\n\n## 3、页面替换\n\n### （1）页面装入与清除策略\n\n**两种页面装入策略**：\n\n- **请求式调度**：按需装入，但是需要频繁的磁盘I/O\n- **预调式调度**：利用局部性原理进行动态预测，预先装入\n\n两种页面清除策略：\n\n- **请求式清除**：当一页被选中进行替换且被修改过，则进行写回磁盘，缺点：效率低下\n- **预约式清除**：对所有修改的页面，替换前，提前成批写回，要写回的页仍然在主存，直到被替换算法选中此页从主存中移出，若该页面在刚被写回后，在替换回前，再次被大量修改，则该策略失效\n\n**页面的两个来源**：\n\n- **文件区**：用于存放文件，采用离散分配方式\n- **对换区**：用于存放对换页面，采用连续分配方式，I/O速度比文件区高\n\n**缺页时的三种情况**：\n\n- **当系统拥有足够的对换区空间**：全部从对换区调入所需页面，以提高调页速度  \n- **当系统缺少足够的对换区空间**：这时凡是不会被修改的文件，都直接从文件区调入；而当换出这些页面时，由于它们未被修改而不必再将它们换出，以后再调入时，仍从文件区直接调入，但对于那些可能被修改的部分，在将它们换出时，便须调到对换区，以后需要时，再从对换区调入  \n- **UNIX方式**：与进程有关的文件都放在文件区，故凡是未运行过的页面，都应从文件区调入，对于曾经运行过但又被换出的页面，由于是被放在对换区，因此在下次调入时，应从对换区调入                                                                                                                                                                                                                                           \n\n### （2）页面分配与替换策略\n\n**两种页面分配策略**：\n\n- **固定分配**：进程保持页框数固定不变，只要有一个缺页中断产生，进程就会有一页被替换\n- **可变分配**：进程分得的页框数可变，如果进程缺页率较高，说明目前局部性较差，可增加分配页框以降低缺页率；反之说明局部性较好，可减少分配页框数\n\n两种页面替换策略：\n\n- **全局替换**：替换算法的作用范围是整个系统，可以在运行的进程之间动态地分配页框\n- **局部替换**：替换算法的作用范围局限于本进程，需要为每个进程分配固定的页框\n\n**三种分配和替换算法的配合**\n\n1. **固定分配+局部替换**：容易、但是性能差\n2. **可变分配+全局替换**：容易，已经应用于若干操作系统中\n3. **可变分配+局部替换**：比较复杂，但是性能好\n\n### （3）页面替换算法✳✳✳必考！\n\n#### 最佳替换算法（OPT）\n\n> 核心思想：淘汰掉将来不再访问， 或者距现在最长时间后才可能会访问的页面  \n\n> 缺点：因页面访问的未来顺序很难精确预测，但算法具有理论意义，可用来评价其他算法的优劣\n\n实例如下：\n\n![image-20220529225933474](https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205292259528.png)\n\n#### 先进先出算法（FIFO）\n\n> 前提假设：程序按照线性顺序来访问物理空间\n\n> 核心思想：选择调入主存时间最长的页面予以淘汰， 认为驻留时间最长的页面不再使用的可能性较大  \n\n实例如下：\n\n![image-20220529230143996](https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205292301046.png)\n\n**特点**\n\n- 实现比较简单\n- 对按照线性顺序访问的程序比较合适，对其他特性的程序效率不高\n- Belady现象：在某些情况下分配给进程的页面数增多，缺页次数反而增加（选择题可能考），其原因是FIFO算法的置换特征与进程访问内存的动态特征是矛盾的， 即被置换的页面并不是进程不会访问的  \n\n**改进**：页面缓冲算法\n\n- 采用FIFO选择被替换页面， 选择出的页面不是立即换出， 而是按照修改与否， 放到相应队列末尾：\n    - 空闲队列：页面未修改则放入空闲队列末尾， 该链表也是可直接装入页面的页框所构成  \n    - 修改队列：页面已修改则放入修改队列末尾  \n- 需要装入的页面被读进空闲队列队首页框中， 而不用等待淘汰页写回再装入  \n- 当修改页面到一定数量， 就成批写回， 并把所占用页框挂到空闲链上\n\n#### 最近最久未使用算法（LRU）\n\n> 核心思想：基于局部性原理：刚被使用过的页面可能还会立即被使用， 较长时间内未被使用的页面可能不会立即使用。进行页面替换时，选择最近一段时间内最长时间未被访问过的页面予以淘汰。为了实现，则赋予每个页面一个访问字段， 用于记录页面自上次访问以来所经历的时间， 同时维护一个淘汰队列  \n\n实例如下：\n\n![image-20220529231452025](https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205292314078.png)\n\n具体实现方法包括：\n\n- **基于计数器的方法**：为每个页表项关联一个时间域字段，为CPU增加一个计数器或者逻辑时钟，每次时钟中断，计数器加1，每当访问一页时，将计数器值复制到相应页所对应页表项的时间域内，当发生缺页中断时，可选择时间域数值最小的对应页面淘汰  \n- 基于栈的方法：用一个特殊的栈保存当前进程所访问的各页面号，每当进程访问某页面， 便将它对应的页面号从栈中移出， 压入栈顶，栈顶是最近访问的页面，栈底是最近最久未使用的页面  \n- 引用位法：每一个页面关联一个bit，初始为0，当页面被引用时，设置为1，需要替换页面时，替换bit=0的页面\n- 附加引用位法（老化算法）：每页都有引用位，并为每页设一个8位内存信息，每隔规定时间，时钟定时器触发中断，将控制权交给OS；OS将每个页的引用位转移到8位字节的高位，并将其他位右移1位，抛弃最低位。这8位就表明了最近8个时间周期，页面的使用情况，发生缺页时挑选最小的为LRU页替换    \n\n#### 二次机会算法\n\n> 核心思想：使用FIFO算法选择一页淘汰时，先检查该页的访问位：\n>\n> - 如果是0就立即淘汰该页  \n> - 如果是1就给它第二次机会， 将其访问位清0，并将它放入页面链的末尾，将其装入时间置为当前时间，然后选择下一个页面  \n\n#### 简单时钟算法\n\n> 核心思想：将页面排成一个循环队列， 类似于时钟表面，并使用一个替换指针，当发生缺页时， 检查指针指向的页面：\n>\n> - 若其访问位为0，则淘汰该页\n> - 否则将该页的访问位清0，指针前移并重复上述过程， 直到找到访问位为0的淘汰页为止；最后指针停留在被替换页的下一页上（如下方流程图所示）\n\n<img src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205292326018.png\" alt=\"image-20220529232625984\" style=\"zoom:50%;\" />\n\n实例如下：\n\n![image-20220529232533212](https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205292325259.png)\n\n如上图，此时需要替换入page12，则将指针找到的第一个访问位为0的page21淘汰\n\n![image-20220529232811539](https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205292328587.png)\n\n之所以块2、块3均无*标记，是因为时钟已经转过了块1、2、3，将其标志位置为0，然后替换的是块1\n\n**算法极端情况**：所有页都被引用，则选择时，需要先把所有页面遍历，清除所有引用位，则退化为FIFO\n\n**算法的改进**：考虑修改问题，定义R为访问位，M为修改位，则有以下4种类型：\n\n| R    | M    | 定义               |\n| ---- | ---- | ------------------ |\n| 0    | 0    | 未被访问也未被修改 |\n| 0    | 1    | 未被访问但已被修改 |\n| 1    | 0    | 已被访问但未被修改 |\n| 1    | 1    | 已被访问且已被修改 |\n\n进行以下3步骤：\n\n1. 从指针当前位置开始扫描循环队列， 寻找R=0， M=0的页面， 将满足条件的第一个页面作为淘汰页， 本轮扫描不修改“访问位R” （若失败， 则所有队列项中：若R=0,M=1；若R=1, M=0/1）\n2. 若第1步失败， 则开始第2轮扫描， 寻找R=0， M=1的页面， 将满足条件的第一个页面作为淘汰页， 并将所有经历过页面的访问位R置0（若失败，  则所有队列项中：R=1,M=0/1）\n3. 若第2步失败， 则将指针返回到开始位置， 然后重复第1步， 若仍失败则必须重复第2步， 此时一定能找到淘汰页面  \n\n#### 工作集模型\n\n> 核心思想：根据程序的局部性原理，一般情况下，进程在一段时间内总是集中访问一些页面，这些页面称为活跃页面，如果分配给一个进程的物理页面数太少了，使该进程所需的活跃页面不能全部装入内存，则进程在运行过程中将频繁发生中断  \n>\n> 定义工作集：一个进程当前正在使用的页框集合，用W(T, Δ)表示，即该进程在过去的Δ个虚拟时间单位中访问到的页面的集合，如下方实例所示：\n>\n> ![image-20220529234937052](https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205292349087.png)\n\n> 基本思路：找出一个不在工作集之中的页面并置换之\n\n![image-20220529235041046](https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205292350104.png)\n\n**特点**：概念上好，但监督驻留页面变化的开销很大，估算合适的窗口Δ大小也是个难题  \n\n### 4、抖动问题✳\n\n**定义**：由于频繁缺页，导致运行进程的大部分时间都用于页面的换入/换出，而几乎不能完成任何有效的工作，则称此进程处于抖动状态。抖动又称为颠簸、颤动  \n\n**分为两种**：\n\n1. 局部抖动\n2. 全局抖动\n\n**产生原因**：\n\n1. 进程分配的物理块太少\n2. 替换算法选择不当\n3. 全局替换使抖动传播\n\n**抖动的预防和接触**：\n\n- 采用局部替换策略可以防止抖动传播  \n- 通过挂起进程来解除抖动，所选择挂起进程的判断依据：\n    - 优先级最低：符合进程调度原则\n    - 发生缺页中断的进程：内存不含工作集，缺页时应阻塞\n    - 最后被激活的进程：工作集可能不在内存\n    - 最大的进程：可释放较多空间  \n\n*不在重点的一个东西：页面大小选择分析*\n\n![image-20220529235508873](https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205292355923.png)\n\n![image-20220529235516534](https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205292355578.png)\n","slug":"七、虚拟内存管理","published":1,"updated":"2022-06-27T15:12:30.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4ww15sh0000nksk1u542alz","content":"<h1 id=\"第7章-虚拟内存管理\"><a href=\"#第7章-虚拟内存管理\" class=\"headerlink\" title=\"第7章 虚拟内存管理\"></a>第7章 虚拟内存管理</h1><p>虚拟内存的概念 </p>\n<p>局部性原理</p>\n<p>请求分页系统</p>\n<p>TLB刷新问题可以忽略</p>\n<p>EAT计算，缺页中断，缺页率</p>\n<p>&#x3D;&#x3D;页面分配和替换的算法&#x3D;&#x3D;  重点： 简单时钟及其变形</p>\n<p>后面的基本是概念</p>\n<p>局部页面替换：重点掌握局部最佳页面和工作集</p>\n<p>抖动</p>\n<h2 id=\"1、概念\"><a href=\"#1、概念\" class=\"headerlink\" title=\"1、概念\"></a>1、概念</h2><h3 id=\"（1）局部性原理✳\"><a href=\"#（1）局部性原理✳\" class=\"headerlink\" title=\"（1）局部性原理✳\"></a>（1）局部性原理✳</h3><p>CPU访问存储器时，无论是存取指令还是存取数据，单元都趋于聚集在一个较小的连续区域中，<strong>局部性体现为</strong>：</p>\n<ol>\n<li><strong>时间局部性</strong>：一条指令的一次执行和下次执行， 一个数据的一次访问和下次访问， 都集中在一个较短时间内</li>\n<li><strong>空间局部性</strong>：当前执行的指令和将要执行的指令， 当前访问的数据和将要访问的数据， 都集中在一个较小范围内  </li>\n<li><strong>顺序局部性</strong>：顺序执行与跳转比例5： 1</li>\n</ol>\n<p>局部性原理是虚拟内存的理论基础</p>\n<h3 id=\"（2）虚拟内存的定义\"><a href=\"#（2）虚拟内存的定义\" class=\"headerlink\" title=\"（2）虚拟内存的定义\"></a>（2）虚拟内存的定义</h3><blockquote>\n<p>虚拟内存，也称为虚拟存储器，指具有请求调入和替换功能， 能从逻辑上对内存容量加以扩充的一种存储器系统（是以时间换空间的技术）</p>\n</blockquote>\n<p><strong>虚拟内存的特征</strong>：</p>\n<ul>\n<li>离散性：不连续内存分配</li>\n<li>多次性：一个作业分多次装入内存</li>\n<li>对换性：允许运行中换进换出</li>\n<li>虚拟性：逻辑上扩充内存</li>\n</ul>\n<p><strong>常用技术</strong>：</p>\n<ul>\n<li>请求分页存储管理</li>\n<li>请求分段存储管理</li>\n</ul>\n<p>与前章区别：</p>\n<ul>\n<li>非请求分页&#x2F;段：一次性调入</li>\n<li>请求分页&#x2F;段：按需调入，不需的换出</li>\n</ul>\n<h2 id=\"2、请求分页系统✳\"><a href=\"#2、请求分页系统✳\" class=\"headerlink\" title=\"2、请求分页系统✳\"></a>2、请求分页系统✳</h2><blockquote>\n<p>请求分页存储管理方法：在分页存储管理的基础上增加了请求调页和页面置换功能 </p>\n</blockquote>\n<p><strong>支持机构</strong>：</p>\n<ul>\n<li><strong>物理部件</strong>：内存管理单元（MMU）</li>\n<li><strong>页表</strong></li>\n<li><strong>缺页中断机构</strong></li>\n<li><strong>地址变换机构</strong></li>\n<li><strong>请求调页和页面置换软件</strong></li>\n</ul>\n<p><strong>优点</strong>：</p>\n<ul>\n<li>作业的程序和数据可按页分散存放在内存中，减少移动开销，有效解决碎片问题</li>\n<li>既有利于改进主存利用率，又有利于多道程序运行</li>\n</ul>\n<p><strong>缺点</strong>：</p>\n<ul>\n<li>要有硬件支持，进行缺页中断处理，机器成本增加，系统开销加大</li>\n</ul>\n<h3 id=\"（1）内存管理单元MMU\"><a href=\"#（1）内存管理单元MMU\" class=\"headerlink\" title=\"（1）内存管理单元MMU\"></a>（1）内存管理单元MMU</h3><blockquote>\n<p>MMU：完成逻辑地址到物理地址的转换功能，它接受虚拟地址作为输入，物理地址作为输出，直接送到总线上，对内存单元进行寻址 </p>\n</blockquote>\n<img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205291534881.png\" alt=\"image-20220529153445797\" style=\"zoom:50%;\" />\n\n<p><strong>MMU的主要功能</strong></p>\n<ul>\n<li>管理硬件页表基址寄存器</li>\n<li>分解逻辑地址</li>\n<li>管理快表</li>\n<li>访问页表</li>\n<li>发出缺页中断或越界中断，将控制权交给内核存储管理处理</li>\n<li>管理特征位，设置和检查页表中各个特征位</li>\n</ul>\n<h3 id=\"（2）页表\"><a href=\"#（2）页表\" class=\"headerlink\" title=\"（2）页表\"></a>（2）页表</h3><p>与前一章相同，请求分页系统中使用的主要数据结构仍然是页表，但由于每次只将作业的一部分调入内存， 还有一部分内容存放在磁盘上， 故需要在页表中增加若干项，如下表所示：</p>\n<p><img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205291541612.png\" alt=\"image-20220529154142586\"></p>\n<ul>\n<li>页号和物理块号：其定义同分页存储管理 </li>\n<li>存在位：用于表示该页是否在主存中 </li>\n<li>访问字段：用于记录本页在一段时间内被访问的次数， 或最近已有多长时间未被访问</li>\n<li>修改位：用于表示该页调入内存后是否被修改过</li>\n<li>外存地址：用于指出该页在外存上的地址</li>\n</ul>\n<h3 id=\"（3）缺页中断✳\"><a href=\"#（3）缺页中断✳\" class=\"headerlink\" title=\"（3）缺页中断✳\"></a>（3）缺页中断✳</h3><blockquote>\n<p>在请求分页系统中， 硬件查页表发现所访问的页不在内存时， 便产生缺页中断， 请求OS将缺页调入内存 操作系统执行缺页中断处理程序根据该页在外存的地址把它调入内存 </p>\n</blockquote>\n<p><strong>缺页中断的处理过程</strong></p>\n<p><img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205291545861.png\" alt=\"image-20220529154500817\"></p>\n<p>如上图所示，包括以下6步</p>\n<ol>\n<li><strong>查找页表</strong>：发起对地址的访问，MMU到页表中检查引用情况  </li>\n<li><strong>缺页中断</strong>：若不在内存，产生缺页中断，陷入缺页中断程序  </li>\n<li><strong>查找外存</strong>：OS在外存中寻找外存中的页面备份</li>\n<li><strong>调入内存</strong>：寻找空闲页帧，或依据某种替换算法选择被替换的页帧，将页面调入内存  </li>\n<li><strong>修改页表</strong>：修改页表项信息</li>\n<li><strong>重新执行</strong>：重新执行产生缺页的指令</li>\n</ol>\n<p><strong>缺页中断与一般中断的区别</strong></p>\n<ol>\n<li>缺页中断在指令的执行期间产生和处理</li>\n<li>一条指令可以产生多个缺页中断，例如复制指令copy A to B</li>\n<li>缺页中断返回时执行产生中断的指令，一般中断返回时执行下条指令</li>\n</ol>\n<blockquote>\n<p>请求分页虚拟存储管理系统的地址变换过程类似于分页存储管理，但当被访问页不在内存时应进行缺页中断处理  </p>\n</blockquote>\n<h3 id=\"（4）地址变换\"><a href=\"#（4）地址变换\" class=\"headerlink\" title=\"（4）地址变换\"></a>（4）地址变换</h3><img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205291636817.png\" alt=\"image-20220529163638765\" style=\"zoom:50%;\" />\n\n<p>地址变换的数据通路如上图所示，而以下是进行地址变换的流程图</p>\n<img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205291637270.png\" alt=\"image-20220529163711225\" style=\"zoom:50%;\" />\n\n<h3 id=\"（5）EAT计算✳✳✳感觉很大概率考！\"><a href=\"#（5）EAT计算✳✳✳感觉很大概率考！\" class=\"headerlink\" title=\"（5）EAT计算✳✳✳感觉很大概率考！\"></a>（5）EAT计算✳✳✳感觉很大概率考！</h3><img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205291642336.png\" alt=\"image-20220529164207293\" style=\"zoom:50%;\" />\n\n<blockquote>\n<p>如上图所示，令查找和修改快表的时间为ε，访存（包括查找页表和访问内存）的时间为t，快表命中率为α，页表缺页率为f，处理缺页中断时间为t1</p>\n</blockquote>\n<h4 id=\"访问内存时间计算（单次）\"><a href=\"#访问内存时间计算（单次）\" class=\"headerlink\" title=\"访问内存时间计算（单次）\"></a>访问内存时间计算（单次）</h4><ol>\n<li><strong>若页在主存中且页表项在快表中</strong>：访问时间&#x3D;查快表时间+访问内存时间&#x3D;$\\epsilon+t$</li>\n<li><strong>若页在主存中且页表项不在快表中</strong>：访问时间&#x3D;查快表时间+查页表时间+修改快表时间<br> +访问内存时间&#x3D;$\\epsilon+t+\\epsilon+t&#x3D;2(\\epsilon+t)$</li>\n<li><strong>若页不在主存之中</strong>：访问时间&#x3D;查快表时间+查页表时间+处理缺页中断时间t1+查快表时间+访问内存时间 &#x3D;$\\epsilon+t+t_1+\\epsilon+t&#x3D;t_1+2(\\epsilon+t)$</li>\n</ol>\n<h4 id=\"有效访问时间计算（多次平均情况）\"><a href=\"#有效访问时间计算（多次平均情况）\" class=\"headerlink\" title=\"有效访问时间计算（多次平均情况）\"></a>有效访问时间计算（多次平均情况）</h4><p>考虑以上三种情况的概率，其中①出现的概率为α、②出现的概率为(1-α)*(1-f)、③出现的概率为(1-α)*f，所以有效访问时间为：<br>$$<br>EAT&#x3D;\\alpha*(\\epsilon+t)+(1-\\alpha)*[(1-f)<em>2(\\epsilon+t)+f</em>(t_1+2(\\epsilon+t))]\\<br>&#x3D;(2-\\alpha)(\\epsilon+t)+(1-\\alpha)ft_1<br>$$</p>\n<h2 id=\"3、页面替换\"><a href=\"#3、页面替换\" class=\"headerlink\" title=\"3、页面替换\"></a>3、页面替换</h2><h3 id=\"（1）页面装入与清除策略\"><a href=\"#（1）页面装入与清除策略\" class=\"headerlink\" title=\"（1）页面装入与清除策略\"></a>（1）页面装入与清除策略</h3><p><strong>两种页面装入策略</strong>：</p>\n<ul>\n<li><strong>请求式调度</strong>：按需装入，但是需要频繁的磁盘I&#x2F;O</li>\n<li><strong>预调式调度</strong>：利用局部性原理进行动态预测，预先装入</li>\n</ul>\n<p>两种页面清除策略：</p>\n<ul>\n<li><strong>请求式清除</strong>：当一页被选中进行替换且被修改过，则进行写回磁盘，缺点：效率低下</li>\n<li><strong>预约式清除</strong>：对所有修改的页面，替换前，提前成批写回，要写回的页仍然在主存，直到被替换算法选中此页从主存中移出，若该页面在刚被写回后，在替换回前，再次被大量修改，则该策略失效</li>\n</ul>\n<p><strong>页面的两个来源</strong>：</p>\n<ul>\n<li><strong>文件区</strong>：用于存放文件，采用离散分配方式</li>\n<li><strong>对换区</strong>：用于存放对换页面，采用连续分配方式，I&#x2F;O速度比文件区高</li>\n</ul>\n<p><strong>缺页时的三种情况</strong>：</p>\n<ul>\n<li><strong>当系统拥有足够的对换区空间</strong>：全部从对换区调入所需页面，以提高调页速度  </li>\n<li><strong>当系统缺少足够的对换区空间</strong>：这时凡是不会被修改的文件，都直接从文件区调入；而当换出这些页面时，由于它们未被修改而不必再将它们换出，以后再调入时，仍从文件区直接调入，但对于那些可能被修改的部分，在将它们换出时，便须调到对换区，以后需要时，再从对换区调入  </li>\n<li><strong>UNIX方式</strong>：与进程有关的文件都放在文件区，故凡是未运行过的页面，都应从文件区调入，对于曾经运行过但又被换出的页面，由于是被放在对换区，因此在下次调入时，应从对换区调入</li>\n</ul>\n<h3 id=\"（2）页面分配与替换策略\"><a href=\"#（2）页面分配与替换策略\" class=\"headerlink\" title=\"（2）页面分配与替换策略\"></a>（2）页面分配与替换策略</h3><p><strong>两种页面分配策略</strong>：</p>\n<ul>\n<li><strong>固定分配</strong>：进程保持页框数固定不变，只要有一个缺页中断产生，进程就会有一页被替换</li>\n<li><strong>可变分配</strong>：进程分得的页框数可变，如果进程缺页率较高，说明目前局部性较差，可增加分配页框以降低缺页率；反之说明局部性较好，可减少分配页框数</li>\n</ul>\n<p>两种页面替换策略：</p>\n<ul>\n<li><strong>全局替换</strong>：替换算法的作用范围是整个系统，可以在运行的进程之间动态地分配页框</li>\n<li><strong>局部替换</strong>：替换算法的作用范围局限于本进程，需要为每个进程分配固定的页框</li>\n</ul>\n<p><strong>三种分配和替换算法的配合</strong></p>\n<ol>\n<li><strong>固定分配+局部替换</strong>：容易、但是性能差</li>\n<li><strong>可变分配+全局替换</strong>：容易，已经应用于若干操作系统中</li>\n<li><strong>可变分配+局部替换</strong>：比较复杂，但是性能好</li>\n</ol>\n<h3 id=\"（3）页面替换算法✳✳✳必考！\"><a href=\"#（3）页面替换算法✳✳✳必考！\" class=\"headerlink\" title=\"（3）页面替换算法✳✳✳必考！\"></a>（3）页面替换算法✳✳✳必考！</h3><h4 id=\"最佳替换算法（OPT）\"><a href=\"#最佳替换算法（OPT）\" class=\"headerlink\" title=\"最佳替换算法（OPT）\"></a>最佳替换算法（OPT）</h4><blockquote>\n<p>核心思想：淘汰掉将来不再访问， 或者距现在最长时间后才可能会访问的页面  </p>\n</blockquote>\n<blockquote>\n<p>缺点：因页面访问的未来顺序很难精确预测，但算法具有理论意义，可用来评价其他算法的优劣</p>\n</blockquote>\n<p>实例如下：</p>\n<p><img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205292259528.png\" alt=\"image-20220529225933474\"></p>\n<h4 id=\"先进先出算法（FIFO）\"><a href=\"#先进先出算法（FIFO）\" class=\"headerlink\" title=\"先进先出算法（FIFO）\"></a>先进先出算法（FIFO）</h4><blockquote>\n<p>前提假设：程序按照线性顺序来访问物理空间</p>\n</blockquote>\n<blockquote>\n<p>核心思想：选择调入主存时间最长的页面予以淘汰， 认为驻留时间最长的页面不再使用的可能性较大  </p>\n</blockquote>\n<p>实例如下：</p>\n<p><img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205292301046.png\" alt=\"image-20220529230143996\"></p>\n<p><strong>特点</strong></p>\n<ul>\n<li>实现比较简单</li>\n<li>对按照线性顺序访问的程序比较合适，对其他特性的程序效率不高</li>\n<li>Belady现象：在某些情况下分配给进程的页面数增多，缺页次数反而增加（选择题可能考），其原因是FIFO算法的置换特征与进程访问内存的动态特征是矛盾的， 即被置换的页面并不是进程不会访问的</li>\n</ul>\n<p><strong>改进</strong>：页面缓冲算法</p>\n<ul>\n<li>采用FIFO选择被替换页面， 选择出的页面不是立即换出， 而是按照修改与否， 放到相应队列末尾：<ul>\n<li>空闲队列：页面未修改则放入空闲队列末尾， 该链表也是可直接装入页面的页框所构成  </li>\n<li>修改队列：页面已修改则放入修改队列末尾</li>\n</ul>\n</li>\n<li>需要装入的页面被读进空闲队列队首页框中， 而不用等待淘汰页写回再装入  </li>\n<li>当修改页面到一定数量， 就成批写回， 并把所占用页框挂到空闲链上</li>\n</ul>\n<h4 id=\"最近最久未使用算法（LRU）\"><a href=\"#最近最久未使用算法（LRU）\" class=\"headerlink\" title=\"最近最久未使用算法（LRU）\"></a>最近最久未使用算法（LRU）</h4><blockquote>\n<p>核心思想：基于局部性原理：刚被使用过的页面可能还会立即被使用， 较长时间内未被使用的页面可能不会立即使用。进行页面替换时，选择最近一段时间内最长时间未被访问过的页面予以淘汰。为了实现，则赋予每个页面一个访问字段， 用于记录页面自上次访问以来所经历的时间， 同时维护一个淘汰队列  </p>\n</blockquote>\n<p>实例如下：</p>\n<p><img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205292314078.png\" alt=\"image-20220529231452025\"></p>\n<p>具体实现方法包括：</p>\n<ul>\n<li><strong>基于计数器的方法</strong>：为每个页表项关联一个时间域字段，为CPU增加一个计数器或者逻辑时钟，每次时钟中断，计数器加1，每当访问一页时，将计数器值复制到相应页所对应页表项的时间域内，当发生缺页中断时，可选择时间域数值最小的对应页面淘汰  </li>\n<li>基于栈的方法：用一个特殊的栈保存当前进程所访问的各页面号，每当进程访问某页面， 便将它对应的页面号从栈中移出， 压入栈顶，栈顶是最近访问的页面，栈底是最近最久未使用的页面  </li>\n<li>引用位法：每一个页面关联一个bit，初始为0，当页面被引用时，设置为1，需要替换页面时，替换bit&#x3D;0的页面</li>\n<li>附加引用位法（老化算法）：每页都有引用位，并为每页设一个8位内存信息，每隔规定时间，时钟定时器触发中断，将控制权交给OS；OS将每个页的引用位转移到8位字节的高位，并将其他位右移1位，抛弃最低位。这8位就表明了最近8个时间周期，页面的使用情况，发生缺页时挑选最小的为LRU页替换</li>\n</ul>\n<h4 id=\"二次机会算法\"><a href=\"#二次机会算法\" class=\"headerlink\" title=\"二次机会算法\"></a>二次机会算法</h4><blockquote>\n<p>核心思想：使用FIFO算法选择一页淘汰时，先检查该页的访问位：</p>\n<ul>\n<li>如果是0就立即淘汰该页  </li>\n<li>如果是1就给它第二次机会， 将其访问位清0，并将它放入页面链的末尾，将其装入时间置为当前时间，然后选择下一个页面</li>\n</ul>\n</blockquote>\n<h4 id=\"简单时钟算法\"><a href=\"#简单时钟算法\" class=\"headerlink\" title=\"简单时钟算法\"></a>简单时钟算法</h4><blockquote>\n<p>核心思想：将页面排成一个循环队列， 类似于时钟表面，并使用一个替换指针，当发生缺页时， 检查指针指向的页面：</p>\n<ul>\n<li>若其访问位为0，则淘汰该页</li>\n<li>否则将该页的访问位清0，指针前移并重复上述过程， 直到找到访问位为0的淘汰页为止；最后指针停留在被替换页的下一页上（如下方流程图所示）</li>\n</ul>\n</blockquote>\n<img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205292326018.png\" alt=\"image-20220529232625984\" style=\"zoom:50%;\" />\n\n<p>实例如下：</p>\n<p><img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205292325259.png\" alt=\"image-20220529232533212\"></p>\n<p>如上图，此时需要替换入page12，则将指针找到的第一个访问位为0的page21淘汰</p>\n<p><img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205292328587.png\" alt=\"image-20220529232811539\"></p>\n<p>之所以块2、块3均无*标记，是因为时钟已经转过了块1、2、3，将其标志位置为0，然后替换的是块1</p>\n<p><strong>算法极端情况</strong>：所有页都被引用，则选择时，需要先把所有页面遍历，清除所有引用位，则退化为FIFO</p>\n<p><strong>算法的改进</strong>：考虑修改问题，定义R为访问位，M为修改位，则有以下4种类型：</p>\n<table>\n<thead>\n<tr>\n<th>R</th>\n<th>M</th>\n<th>定义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>0</td>\n<td>未被访问也未被修改</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>未被访问但已被修改</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>已被访问但未被修改</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>已被访问且已被修改</td>\n</tr>\n</tbody></table>\n<p>进行以下3步骤：</p>\n<ol>\n<li>从指针当前位置开始扫描循环队列， 寻找R&#x3D;0， M&#x3D;0的页面， 将满足条件的第一个页面作为淘汰页， 本轮扫描不修改“访问位R” （若失败， 则所有队列项中：若R&#x3D;0,M&#x3D;1；若R&#x3D;1, M&#x3D;0&#x2F;1）</li>\n<li>若第1步失败， 则开始第2轮扫描， 寻找R&#x3D;0， M&#x3D;1的页面， 将满足条件的第一个页面作为淘汰页， 并将所有经历过页面的访问位R置0（若失败，  则所有队列项中：R&#x3D;1,M&#x3D;0&#x2F;1）</li>\n<li>若第2步失败， 则将指针返回到开始位置， 然后重复第1步， 若仍失败则必须重复第2步， 此时一定能找到淘汰页面</li>\n</ol>\n<h4 id=\"工作集模型\"><a href=\"#工作集模型\" class=\"headerlink\" title=\"工作集模型\"></a>工作集模型</h4><blockquote>\n<p>核心思想：根据程序的局部性原理，一般情况下，进程在一段时间内总是集中访问一些页面，这些页面称为活跃页面，如果分配给一个进程的物理页面数太少了，使该进程所需的活跃页面不能全部装入内存，则进程在运行过程中将频繁发生中断  </p>\n<p>定义工作集：一个进程当前正在使用的页框集合，用W(T, Δ)表示，即该进程在过去的Δ个虚拟时间单位中访问到的页面的集合，如下方实例所示：</p>\n<p><img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205292349087.png\" alt=\"image-20220529234937052\"></p>\n</blockquote>\n<blockquote>\n<p>基本思路：找出一个不在工作集之中的页面并置换之</p>\n</blockquote>\n<p><img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205292350104.png\" alt=\"image-20220529235041046\"></p>\n<p><strong>特点</strong>：概念上好，但监督驻留页面变化的开销很大，估算合适的窗口Δ大小也是个难题  </p>\n<h3 id=\"4、抖动问题✳\"><a href=\"#4、抖动问题✳\" class=\"headerlink\" title=\"4、抖动问题✳\"></a>4、抖动问题✳</h3><p><strong>定义</strong>：由于频繁缺页，导致运行进程的大部分时间都用于页面的换入&#x2F;换出，而几乎不能完成任何有效的工作，则称此进程处于抖动状态。抖动又称为颠簸、颤动  </p>\n<p><strong>分为两种</strong>：</p>\n<ol>\n<li>局部抖动</li>\n<li>全局抖动</li>\n</ol>\n<p><strong>产生原因</strong>：</p>\n<ol>\n<li>进程分配的物理块太少</li>\n<li>替换算法选择不当</li>\n<li>全局替换使抖动传播</li>\n</ol>\n<p><strong>抖动的预防和接触</strong>：</p>\n<ul>\n<li>采用局部替换策略可以防止抖动传播  </li>\n<li>通过挂起进程来解除抖动，所选择挂起进程的判断依据：<ul>\n<li>优先级最低：符合进程调度原则</li>\n<li>发生缺页中断的进程：内存不含工作集，缺页时应阻塞</li>\n<li>最后被激活的进程：工作集可能不在内存</li>\n<li>最大的进程：可释放较多空间</li>\n</ul>\n</li>\n</ul>\n<p><em>不在重点的一个东西：页面大小选择分析</em></p>\n<p><img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205292355923.png\" alt=\"image-20220529235508873\"></p>\n<p><img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205292355578.png\" alt=\"image-20220529235516534\"></p>\n","site":{"data":{"post-body-end":"<div>\n    \n</div>\n","styles":"body {\n  background: url(\"/images/background.png\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 100% 100%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.8);\n}\n.popup {\n  opacity: 0.8;\n}\n.post-block {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.comments {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.post {\n  margin-top: 60px;\n  padding: 20px;\n  margin-bottom: 60px;\n  -webkit-box-shadow: 0 0 0px #788072;\n  -moz-box-shadow: 0 0 0px rgba(202,203,204,0.5);\n}\n.post-button .btn {\n  color: #555 !important;\n  background-color: #fff;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  border: none !important;\n  transition-property: unset;\n  padding: 0px 15px;\n}\n.post-button .btn:hover {\n  color: #fff !important;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  background-image: linear-gradient(90deg, #a166ab 0%, #ef4e7b 25%, #f37055 50%, #ef4e7b 75%, #a166ab 100%);\n}\n","variables":""}},"length":5266,"excerpt":"","more":"<h1 id=\"第7章-虚拟内存管理\"><a href=\"#第7章-虚拟内存管理\" class=\"headerlink\" title=\"第7章 虚拟内存管理\"></a>第7章 虚拟内存管理</h1><p>虚拟内存的概念 </p>\n<p>局部性原理</p>\n<p>请求分页系统</p>\n<p>TLB刷新问题可以忽略</p>\n<p>EAT计算，缺页中断，缺页率</p>\n<p>&#x3D;&#x3D;页面分配和替换的算法&#x3D;&#x3D;  重点： 简单时钟及其变形</p>\n<p>后面的基本是概念</p>\n<p>局部页面替换：重点掌握局部最佳页面和工作集</p>\n<p>抖动</p>\n<h2 id=\"1、概念\"><a href=\"#1、概念\" class=\"headerlink\" title=\"1、概念\"></a>1、概念</h2><h3 id=\"（1）局部性原理✳\"><a href=\"#（1）局部性原理✳\" class=\"headerlink\" title=\"（1）局部性原理✳\"></a>（1）局部性原理✳</h3><p>CPU访问存储器时，无论是存取指令还是存取数据，单元都趋于聚集在一个较小的连续区域中，<strong>局部性体现为</strong>：</p>\n<ol>\n<li><strong>时间局部性</strong>：一条指令的一次执行和下次执行， 一个数据的一次访问和下次访问， 都集中在一个较短时间内</li>\n<li><strong>空间局部性</strong>：当前执行的指令和将要执行的指令， 当前访问的数据和将要访问的数据， 都集中在一个较小范围内  </li>\n<li><strong>顺序局部性</strong>：顺序执行与跳转比例5： 1</li>\n</ol>\n<p>局部性原理是虚拟内存的理论基础</p>\n<h3 id=\"（2）虚拟内存的定义\"><a href=\"#（2）虚拟内存的定义\" class=\"headerlink\" title=\"（2）虚拟内存的定义\"></a>（2）虚拟内存的定义</h3><blockquote>\n<p>虚拟内存，也称为虚拟存储器，指具有请求调入和替换功能， 能从逻辑上对内存容量加以扩充的一种存储器系统（是以时间换空间的技术）</p>\n</blockquote>\n<p><strong>虚拟内存的特征</strong>：</p>\n<ul>\n<li>离散性：不连续内存分配</li>\n<li>多次性：一个作业分多次装入内存</li>\n<li>对换性：允许运行中换进换出</li>\n<li>虚拟性：逻辑上扩充内存</li>\n</ul>\n<p><strong>常用技术</strong>：</p>\n<ul>\n<li>请求分页存储管理</li>\n<li>请求分段存储管理</li>\n</ul>\n<p>与前章区别：</p>\n<ul>\n<li>非请求分页&#x2F;段：一次性调入</li>\n<li>请求分页&#x2F;段：按需调入，不需的换出</li>\n</ul>\n<h2 id=\"2、请求分页系统✳\"><a href=\"#2、请求分页系统✳\" class=\"headerlink\" title=\"2、请求分页系统✳\"></a>2、请求分页系统✳</h2><blockquote>\n<p>请求分页存储管理方法：在分页存储管理的基础上增加了请求调页和页面置换功能 </p>\n</blockquote>\n<p><strong>支持机构</strong>：</p>\n<ul>\n<li><strong>物理部件</strong>：内存管理单元（MMU）</li>\n<li><strong>页表</strong></li>\n<li><strong>缺页中断机构</strong></li>\n<li><strong>地址变换机构</strong></li>\n<li><strong>请求调页和页面置换软件</strong></li>\n</ul>\n<p><strong>优点</strong>：</p>\n<ul>\n<li>作业的程序和数据可按页分散存放在内存中，减少移动开销，有效解决碎片问题</li>\n<li>既有利于改进主存利用率，又有利于多道程序运行</li>\n</ul>\n<p><strong>缺点</strong>：</p>\n<ul>\n<li>要有硬件支持，进行缺页中断处理，机器成本增加，系统开销加大</li>\n</ul>\n<h3 id=\"（1）内存管理单元MMU\"><a href=\"#（1）内存管理单元MMU\" class=\"headerlink\" title=\"（1）内存管理单元MMU\"></a>（1）内存管理单元MMU</h3><blockquote>\n<p>MMU：完成逻辑地址到物理地址的转换功能，它接受虚拟地址作为输入，物理地址作为输出，直接送到总线上，对内存单元进行寻址 </p>\n</blockquote>\n<img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205291534881.png\" alt=\"image-20220529153445797\" style=\"zoom:50%;\" />\n\n<p><strong>MMU的主要功能</strong></p>\n<ul>\n<li>管理硬件页表基址寄存器</li>\n<li>分解逻辑地址</li>\n<li>管理快表</li>\n<li>访问页表</li>\n<li>发出缺页中断或越界中断，将控制权交给内核存储管理处理</li>\n<li>管理特征位，设置和检查页表中各个特征位</li>\n</ul>\n<h3 id=\"（2）页表\"><a href=\"#（2）页表\" class=\"headerlink\" title=\"（2）页表\"></a>（2）页表</h3><p>与前一章相同，请求分页系统中使用的主要数据结构仍然是页表，但由于每次只将作业的一部分调入内存， 还有一部分内容存放在磁盘上， 故需要在页表中增加若干项，如下表所示：</p>\n<p><img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205291541612.png\" alt=\"image-20220529154142586\"></p>\n<ul>\n<li>页号和物理块号：其定义同分页存储管理 </li>\n<li>存在位：用于表示该页是否在主存中 </li>\n<li>访问字段：用于记录本页在一段时间内被访问的次数， 或最近已有多长时间未被访问</li>\n<li>修改位：用于表示该页调入内存后是否被修改过</li>\n<li>外存地址：用于指出该页在外存上的地址</li>\n</ul>\n<h3 id=\"（3）缺页中断✳\"><a href=\"#（3）缺页中断✳\" class=\"headerlink\" title=\"（3）缺页中断✳\"></a>（3）缺页中断✳</h3><blockquote>\n<p>在请求分页系统中， 硬件查页表发现所访问的页不在内存时， 便产生缺页中断， 请求OS将缺页调入内存 操作系统执行缺页中断处理程序根据该页在外存的地址把它调入内存 </p>\n</blockquote>\n<p><strong>缺页中断的处理过程</strong></p>\n<p><img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205291545861.png\" alt=\"image-20220529154500817\"></p>\n<p>如上图所示，包括以下6步</p>\n<ol>\n<li><strong>查找页表</strong>：发起对地址的访问，MMU到页表中检查引用情况  </li>\n<li><strong>缺页中断</strong>：若不在内存，产生缺页中断，陷入缺页中断程序  </li>\n<li><strong>查找外存</strong>：OS在外存中寻找外存中的页面备份</li>\n<li><strong>调入内存</strong>：寻找空闲页帧，或依据某种替换算法选择被替换的页帧，将页面调入内存  </li>\n<li><strong>修改页表</strong>：修改页表项信息</li>\n<li><strong>重新执行</strong>：重新执行产生缺页的指令</li>\n</ol>\n<p><strong>缺页中断与一般中断的区别</strong></p>\n<ol>\n<li>缺页中断在指令的执行期间产生和处理</li>\n<li>一条指令可以产生多个缺页中断，例如复制指令copy A to B</li>\n<li>缺页中断返回时执行产生中断的指令，一般中断返回时执行下条指令</li>\n</ol>\n<blockquote>\n<p>请求分页虚拟存储管理系统的地址变换过程类似于分页存储管理，但当被访问页不在内存时应进行缺页中断处理  </p>\n</blockquote>\n<h3 id=\"（4）地址变换\"><a href=\"#（4）地址变换\" class=\"headerlink\" title=\"（4）地址变换\"></a>（4）地址变换</h3><img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205291636817.png\" alt=\"image-20220529163638765\" style=\"zoom:50%;\" />\n\n<p>地址变换的数据通路如上图所示，而以下是进行地址变换的流程图</p>\n<img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205291637270.png\" alt=\"image-20220529163711225\" style=\"zoom:50%;\" />\n\n<h3 id=\"（5）EAT计算✳✳✳感觉很大概率考！\"><a href=\"#（5）EAT计算✳✳✳感觉很大概率考！\" class=\"headerlink\" title=\"（5）EAT计算✳✳✳感觉很大概率考！\"></a>（5）EAT计算✳✳✳感觉很大概率考！</h3><img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205291642336.png\" alt=\"image-20220529164207293\" style=\"zoom:50%;\" />\n\n<blockquote>\n<p>如上图所示，令查找和修改快表的时间为ε，访存（包括查找页表和访问内存）的时间为t，快表命中率为α，页表缺页率为f，处理缺页中断时间为t1</p>\n</blockquote>\n<h4 id=\"访问内存时间计算（单次）\"><a href=\"#访问内存时间计算（单次）\" class=\"headerlink\" title=\"访问内存时间计算（单次）\"></a>访问内存时间计算（单次）</h4><ol>\n<li><strong>若页在主存中且页表项在快表中</strong>：访问时间&#x3D;查快表时间+访问内存时间&#x3D;$\\epsilon+t$</li>\n<li><strong>若页在主存中且页表项不在快表中</strong>：访问时间&#x3D;查快表时间+查页表时间+修改快表时间<br> +访问内存时间&#x3D;$\\epsilon+t+\\epsilon+t&#x3D;2(\\epsilon+t)$</li>\n<li><strong>若页不在主存之中</strong>：访问时间&#x3D;查快表时间+查页表时间+处理缺页中断时间t1+查快表时间+访问内存时间 &#x3D;$\\epsilon+t+t_1+\\epsilon+t&#x3D;t_1+2(\\epsilon+t)$</li>\n</ol>\n<h4 id=\"有效访问时间计算（多次平均情况）\"><a href=\"#有效访问时间计算（多次平均情况）\" class=\"headerlink\" title=\"有效访问时间计算（多次平均情况）\"></a>有效访问时间计算（多次平均情况）</h4><p>考虑以上三种情况的概率，其中①出现的概率为α、②出现的概率为(1-α)*(1-f)、③出现的概率为(1-α)*f，所以有效访问时间为：<br>$$<br>EAT&#x3D;\\alpha*(\\epsilon+t)+(1-\\alpha)*[(1-f)<em>2(\\epsilon+t)+f</em>(t_1+2(\\epsilon+t))]\\<br>&#x3D;(2-\\alpha)(\\epsilon+t)+(1-\\alpha)ft_1<br>$$</p>\n<h2 id=\"3、页面替换\"><a href=\"#3、页面替换\" class=\"headerlink\" title=\"3、页面替换\"></a>3、页面替换</h2><h3 id=\"（1）页面装入与清除策略\"><a href=\"#（1）页面装入与清除策略\" class=\"headerlink\" title=\"（1）页面装入与清除策略\"></a>（1）页面装入与清除策略</h3><p><strong>两种页面装入策略</strong>：</p>\n<ul>\n<li><strong>请求式调度</strong>：按需装入，但是需要频繁的磁盘I&#x2F;O</li>\n<li><strong>预调式调度</strong>：利用局部性原理进行动态预测，预先装入</li>\n</ul>\n<p>两种页面清除策略：</p>\n<ul>\n<li><strong>请求式清除</strong>：当一页被选中进行替换且被修改过，则进行写回磁盘，缺点：效率低下</li>\n<li><strong>预约式清除</strong>：对所有修改的页面，替换前，提前成批写回，要写回的页仍然在主存，直到被替换算法选中此页从主存中移出，若该页面在刚被写回后，在替换回前，再次被大量修改，则该策略失效</li>\n</ul>\n<p><strong>页面的两个来源</strong>：</p>\n<ul>\n<li><strong>文件区</strong>：用于存放文件，采用离散分配方式</li>\n<li><strong>对换区</strong>：用于存放对换页面，采用连续分配方式，I&#x2F;O速度比文件区高</li>\n</ul>\n<p><strong>缺页时的三种情况</strong>：</p>\n<ul>\n<li><strong>当系统拥有足够的对换区空间</strong>：全部从对换区调入所需页面，以提高调页速度  </li>\n<li><strong>当系统缺少足够的对换区空间</strong>：这时凡是不会被修改的文件，都直接从文件区调入；而当换出这些页面时，由于它们未被修改而不必再将它们换出，以后再调入时，仍从文件区直接调入，但对于那些可能被修改的部分，在将它们换出时，便须调到对换区，以后需要时，再从对换区调入  </li>\n<li><strong>UNIX方式</strong>：与进程有关的文件都放在文件区，故凡是未运行过的页面，都应从文件区调入，对于曾经运行过但又被换出的页面，由于是被放在对换区，因此在下次调入时，应从对换区调入</li>\n</ul>\n<h3 id=\"（2）页面分配与替换策略\"><a href=\"#（2）页面分配与替换策略\" class=\"headerlink\" title=\"（2）页面分配与替换策略\"></a>（2）页面分配与替换策略</h3><p><strong>两种页面分配策略</strong>：</p>\n<ul>\n<li><strong>固定分配</strong>：进程保持页框数固定不变，只要有一个缺页中断产生，进程就会有一页被替换</li>\n<li><strong>可变分配</strong>：进程分得的页框数可变，如果进程缺页率较高，说明目前局部性较差，可增加分配页框以降低缺页率；反之说明局部性较好，可减少分配页框数</li>\n</ul>\n<p>两种页面替换策略：</p>\n<ul>\n<li><strong>全局替换</strong>：替换算法的作用范围是整个系统，可以在运行的进程之间动态地分配页框</li>\n<li><strong>局部替换</strong>：替换算法的作用范围局限于本进程，需要为每个进程分配固定的页框</li>\n</ul>\n<p><strong>三种分配和替换算法的配合</strong></p>\n<ol>\n<li><strong>固定分配+局部替换</strong>：容易、但是性能差</li>\n<li><strong>可变分配+全局替换</strong>：容易，已经应用于若干操作系统中</li>\n<li><strong>可变分配+局部替换</strong>：比较复杂，但是性能好</li>\n</ol>\n<h3 id=\"（3）页面替换算法✳✳✳必考！\"><a href=\"#（3）页面替换算法✳✳✳必考！\" class=\"headerlink\" title=\"（3）页面替换算法✳✳✳必考！\"></a>（3）页面替换算法✳✳✳必考！</h3><h4 id=\"最佳替换算法（OPT）\"><a href=\"#最佳替换算法（OPT）\" class=\"headerlink\" title=\"最佳替换算法（OPT）\"></a>最佳替换算法（OPT）</h4><blockquote>\n<p>核心思想：淘汰掉将来不再访问， 或者距现在最长时间后才可能会访问的页面  </p>\n</blockquote>\n<blockquote>\n<p>缺点：因页面访问的未来顺序很难精确预测，但算法具有理论意义，可用来评价其他算法的优劣</p>\n</blockquote>\n<p>实例如下：</p>\n<p><img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205292259528.png\" alt=\"image-20220529225933474\"></p>\n<h4 id=\"先进先出算法（FIFO）\"><a href=\"#先进先出算法（FIFO）\" class=\"headerlink\" title=\"先进先出算法（FIFO）\"></a>先进先出算法（FIFO）</h4><blockquote>\n<p>前提假设：程序按照线性顺序来访问物理空间</p>\n</blockquote>\n<blockquote>\n<p>核心思想：选择调入主存时间最长的页面予以淘汰， 认为驻留时间最长的页面不再使用的可能性较大  </p>\n</blockquote>\n<p>实例如下：</p>\n<p><img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205292301046.png\" alt=\"image-20220529230143996\"></p>\n<p><strong>特点</strong></p>\n<ul>\n<li>实现比较简单</li>\n<li>对按照线性顺序访问的程序比较合适，对其他特性的程序效率不高</li>\n<li>Belady现象：在某些情况下分配给进程的页面数增多，缺页次数反而增加（选择题可能考），其原因是FIFO算法的置换特征与进程访问内存的动态特征是矛盾的， 即被置换的页面并不是进程不会访问的</li>\n</ul>\n<p><strong>改进</strong>：页面缓冲算法</p>\n<ul>\n<li>采用FIFO选择被替换页面， 选择出的页面不是立即换出， 而是按照修改与否， 放到相应队列末尾：<ul>\n<li>空闲队列：页面未修改则放入空闲队列末尾， 该链表也是可直接装入页面的页框所构成  </li>\n<li>修改队列：页面已修改则放入修改队列末尾</li>\n</ul>\n</li>\n<li>需要装入的页面被读进空闲队列队首页框中， 而不用等待淘汰页写回再装入  </li>\n<li>当修改页面到一定数量， 就成批写回， 并把所占用页框挂到空闲链上</li>\n</ul>\n<h4 id=\"最近最久未使用算法（LRU）\"><a href=\"#最近最久未使用算法（LRU）\" class=\"headerlink\" title=\"最近最久未使用算法（LRU）\"></a>最近最久未使用算法（LRU）</h4><blockquote>\n<p>核心思想：基于局部性原理：刚被使用过的页面可能还会立即被使用， 较长时间内未被使用的页面可能不会立即使用。进行页面替换时，选择最近一段时间内最长时间未被访问过的页面予以淘汰。为了实现，则赋予每个页面一个访问字段， 用于记录页面自上次访问以来所经历的时间， 同时维护一个淘汰队列  </p>\n</blockquote>\n<p>实例如下：</p>\n<p><img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205292314078.png\" alt=\"image-20220529231452025\"></p>\n<p>具体实现方法包括：</p>\n<ul>\n<li><strong>基于计数器的方法</strong>：为每个页表项关联一个时间域字段，为CPU增加一个计数器或者逻辑时钟，每次时钟中断，计数器加1，每当访问一页时，将计数器值复制到相应页所对应页表项的时间域内，当发生缺页中断时，可选择时间域数值最小的对应页面淘汰  </li>\n<li>基于栈的方法：用一个特殊的栈保存当前进程所访问的各页面号，每当进程访问某页面， 便将它对应的页面号从栈中移出， 压入栈顶，栈顶是最近访问的页面，栈底是最近最久未使用的页面  </li>\n<li>引用位法：每一个页面关联一个bit，初始为0，当页面被引用时，设置为1，需要替换页面时，替换bit&#x3D;0的页面</li>\n<li>附加引用位法（老化算法）：每页都有引用位，并为每页设一个8位内存信息，每隔规定时间，时钟定时器触发中断，将控制权交给OS；OS将每个页的引用位转移到8位字节的高位，并将其他位右移1位，抛弃最低位。这8位就表明了最近8个时间周期，页面的使用情况，发生缺页时挑选最小的为LRU页替换</li>\n</ul>\n<h4 id=\"二次机会算法\"><a href=\"#二次机会算法\" class=\"headerlink\" title=\"二次机会算法\"></a>二次机会算法</h4><blockquote>\n<p>核心思想：使用FIFO算法选择一页淘汰时，先检查该页的访问位：</p>\n<ul>\n<li>如果是0就立即淘汰该页  </li>\n<li>如果是1就给它第二次机会， 将其访问位清0，并将它放入页面链的末尾，将其装入时间置为当前时间，然后选择下一个页面</li>\n</ul>\n</blockquote>\n<h4 id=\"简单时钟算法\"><a href=\"#简单时钟算法\" class=\"headerlink\" title=\"简单时钟算法\"></a>简单时钟算法</h4><blockquote>\n<p>核心思想：将页面排成一个循环队列， 类似于时钟表面，并使用一个替换指针，当发生缺页时， 检查指针指向的页面：</p>\n<ul>\n<li>若其访问位为0，则淘汰该页</li>\n<li>否则将该页的访问位清0，指针前移并重复上述过程， 直到找到访问位为0的淘汰页为止；最后指针停留在被替换页的下一页上（如下方流程图所示）</li>\n</ul>\n</blockquote>\n<img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205292326018.png\" alt=\"image-20220529232625984\" style=\"zoom:50%;\" />\n\n<p>实例如下：</p>\n<p><img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205292325259.png\" alt=\"image-20220529232533212\"></p>\n<p>如上图，此时需要替换入page12，则将指针找到的第一个访问位为0的page21淘汰</p>\n<p><img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205292328587.png\" alt=\"image-20220529232811539\"></p>\n<p>之所以块2、块3均无*标记，是因为时钟已经转过了块1、2、3，将其标志位置为0，然后替换的是块1</p>\n<p><strong>算法极端情况</strong>：所有页都被引用，则选择时，需要先把所有页面遍历，清除所有引用位，则退化为FIFO</p>\n<p><strong>算法的改进</strong>：考虑修改问题，定义R为访问位，M为修改位，则有以下4种类型：</p>\n<table>\n<thead>\n<tr>\n<th>R</th>\n<th>M</th>\n<th>定义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>0</td>\n<td>未被访问也未被修改</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>未被访问但已被修改</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>已被访问但未被修改</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>已被访问且已被修改</td>\n</tr>\n</tbody></table>\n<p>进行以下3步骤：</p>\n<ol>\n<li>从指针当前位置开始扫描循环队列， 寻找R&#x3D;0， M&#x3D;0的页面， 将满足条件的第一个页面作为淘汰页， 本轮扫描不修改“访问位R” （若失败， 则所有队列项中：若R&#x3D;0,M&#x3D;1；若R&#x3D;1, M&#x3D;0&#x2F;1）</li>\n<li>若第1步失败， 则开始第2轮扫描， 寻找R&#x3D;0， M&#x3D;1的页面， 将满足条件的第一个页面作为淘汰页， 并将所有经历过页面的访问位R置0（若失败，  则所有队列项中：R&#x3D;1,M&#x3D;0&#x2F;1）</li>\n<li>若第2步失败， 则将指针返回到开始位置， 然后重复第1步， 若仍失败则必须重复第2步， 此时一定能找到淘汰页面</li>\n</ol>\n<h4 id=\"工作集模型\"><a href=\"#工作集模型\" class=\"headerlink\" title=\"工作集模型\"></a>工作集模型</h4><blockquote>\n<p>核心思想：根据程序的局部性原理，一般情况下，进程在一段时间内总是集中访问一些页面，这些页面称为活跃页面，如果分配给一个进程的物理页面数太少了，使该进程所需的活跃页面不能全部装入内存，则进程在运行过程中将频繁发生中断  </p>\n<p>定义工作集：一个进程当前正在使用的页框集合，用W(T, Δ)表示，即该进程在过去的Δ个虚拟时间单位中访问到的页面的集合，如下方实例所示：</p>\n<p><img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205292349087.png\" alt=\"image-20220529234937052\"></p>\n</blockquote>\n<blockquote>\n<p>基本思路：找出一个不在工作集之中的页面并置换之</p>\n</blockquote>\n<p><img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205292350104.png\" alt=\"image-20220529235041046\"></p>\n<p><strong>特点</strong>：概念上好，但监督驻留页面变化的开销很大，估算合适的窗口Δ大小也是个难题  </p>\n<h3 id=\"4、抖动问题✳\"><a href=\"#4、抖动问题✳\" class=\"headerlink\" title=\"4、抖动问题✳\"></a>4、抖动问题✳</h3><p><strong>定义</strong>：由于频繁缺页，导致运行进程的大部分时间都用于页面的换入&#x2F;换出，而几乎不能完成任何有效的工作，则称此进程处于抖动状态。抖动又称为颠簸、颤动  </p>\n<p><strong>分为两种</strong>：</p>\n<ol>\n<li>局部抖动</li>\n<li>全局抖动</li>\n</ol>\n<p><strong>产生原因</strong>：</p>\n<ol>\n<li>进程分配的物理块太少</li>\n<li>替换算法选择不当</li>\n<li>全局替换使抖动传播</li>\n</ol>\n<p><strong>抖动的预防和接触</strong>：</p>\n<ul>\n<li>采用局部替换策略可以防止抖动传播  </li>\n<li>通过挂起进程来解除抖动，所选择挂起进程的判断依据：<ul>\n<li>优先级最低：符合进程调度原则</li>\n<li>发生缺页中断的进程：内存不含工作集，缺页时应阻塞</li>\n<li>最后被激活的进程：工作集可能不在内存</li>\n<li>最大的进程：可释放较多空间</li>\n</ul>\n</li>\n</ul>\n<p><em>不在重点的一个东西：页面大小选择分析</em></p>\n<p><img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205292355923.png\" alt=\"image-20220529235508873\"></p>\n<p><img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205292355578.png\" alt=\"image-20220529235516534\"></p>\n"},{"title":"五、死锁","abbrlink":45543,"date":"2022-06-27T15:07:21.000Z","_content":"\n# 5、死锁\n\n## 基本概念\n\n### （1）死锁产生的原因\n\n- 竞争资源：多个进程竞争资源，而资源又不能同时满足其需求（如下图1）\n- 进程推进顺序不当：进程申请资源和释放资源的顺序不当（如下图2）\n\n图1：竞争资源引起的死锁\n\n<img src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205152043664.png\" alt=\"image-20220515204316626\" style=\"zoom:50%;\" />\n\n这类图中的`Pi`表示进程，`Ri`表示资源，由`Ri`指向`Pi`的箭头表示`Ri`已经被分配给了`Pi`，而由`Pi`指向`Ri`的箭头表示`Pi`请求`Ri`\n\n图2：进程推进顺序不当引起的死锁\n\n<img src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205152048260.png\" alt=\"image-20220515204834225\" style=\"zoom:50%;\" />\n\n如上图，当进程的推进路线进入了死锁不可避免区，就会产生死锁\n\n### （2）死锁产生的4个必要条件\n\n1. 互斥条件：在一段时间内某资源仅为一个进程所占有\n2. 请求和保持条件（占有并等待）：又称为部分分配条件。当进程因请求资源被阻塞时，已分配资源保持不放\n3. 不剥夺条件（非抢占）：进程所获得的资源在未使用完毕之前，不能被其他进程强行夺走\n4. 循环等待条件：死锁发生时存在一个进程资源的循环\n\n### （3）资源分配图\n\n用来表示系统资源的分配关系，由一组结点N和一组边E所构成，其中：\n\n- N包括进程节点P和资源节点R，进程节点用圆圈表示，资源节点用方框表示，每个方框对应着一种资源，方框中的一个点表示一种资源里的一个资源\n- E包括资源请求边（由P节点指向R节点）和资源分配边（由R节点指向P节点）\n\n**✳使用资源分配图来初步分析死锁：**\n\n- 如果分配图没有环：无死锁\n- 如果分配图包含环：如果每个R节点中都只有一个资源，则一定会死锁；如果有多个资源，则只是存在死锁的可能，并不一定会死锁\n\n### （4）死锁的解除\n\n1. 系统重启法\n2. 进程终止（进程撤销、逐步撤销）\n3. 资源抢占\n\n## 处理死锁的基本方法\n\n1. 忽略死锁：被大多数系统采用，因为死锁出现概率低，忽略死锁的代价小\n2. 预防死锁：设置某些限制条件，通过破坏死锁产生的四个必要条件之一来预防死锁\n3. 避免死锁：在资源的动态分配过程之中，用某种方法防止系统进入不安全状态\n4. 检测死锁及解除：系统定期检测是否出现死锁，如果出现则解除之\n\n### （1）预防死锁\n\n可以通过破坏产生死锁的四个必要条件之中的一个或几个条件来防止死锁的发生\n\n#### ①破坏互斥条件\n\n- 主要思路：使资源可以同时访问，而非互斥使用\n- 局限性：互斥对一些资源是固有属性不能改变\n\n#### ②破坏请求和保持条件\n\n- 主要思路：当每个进程申请一个资源时，不能占有其他资源\n- *方法1：要求进程一次申请其所需的全部资源，如果有足够的资源则分配给进程，否则不分配，进程等待（静态资源分配法）*\n- *方法2：允许进程仅在没有资源时才可以申请资源，一个进程申请资源并使用，但是在申请更多资源时应释放已经分配的所有资源*\n- 优点：简单并且易于实现\n- 缺点：资源利用率低，进程延迟运行，可能发生饥饿\n\n#### ③破坏不可剥夺条件\n\n- 主要思路：对一个已经获得某些资源的进程，若新的资源请求的不到满足，则其已经占有的资源都可以被抢占，即这些资源都被隐式释放了（常用于状态已于恢复和保存的资源）\n- 局限性：这种释放有可能造成已有工作的失效，重新申请和释放会带来新的系统开销\n\n#### ④破坏循环等待条件\n\n采取层次分配策略，将资源分为多个层次，并且应用如下规则：\n\n- 当进程得到某一层的一个资源后，只能申请较高层次的资源\n- 当进程释放某层的一个资源时，必须先释放占有的较高层次的资源  \n- 当进程得到某一层的一个资源后，它想申请该层的另一个资源时，必须先释放该层中的已占资源  \n\n采取层次分配的变种：按序分配策略\n\n首先将系统的所有资源排一个顺序，如系统若共有n个进程，有m个资源，用$r_i$表示第$i$个资源，则这$m$个资源是$r_1,r_2,......,r_m$，并应用如下规则：\n\n- 进程不得在占用资源$r_i$后再申请$r_j(j<i)$\n- 即只能申请编号之后的资源，不许申请编号之前的资源\n\n证明：\n\n![image-20220515214959740](https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205152149789.png)\n\n### （2）避免死锁\n\n允许系统中存在前3个必要条件，通过合适的资源分配算法，防止系统进入不安全状态 ，确保不会出现第四个必要条件，从而避免死锁。  \n\n**【定义】安全状态**：如果系统能按照某种顺序来为每个进程分配其所需的资源直到最大需求，使每个进程都可以顺利完成，则称此时的系统状态为安全状态，称序列为安全序列\n\n**【定义】不安全状态**：某一时刻系统中不存在安全序列\n\n#### ①资源分配图算法\n\n资源分配图的简化：\n\n- 在资源分配图中找到一个既不阻塞又非孤立的进程节点Pi（不阻塞：该节点并未处于等待中，非孤立：有边项链）\n- 将Pi运行完成，删掉其所有的请求边和分配边\n\n不断进行上述两个过程，如果能消去图中所有的边，则该图为可完全简化的，否则是不可完全简化\n\n> 死锁定理： S为死锁状态的条件，当且仅当S状态的资源分配图是不可完全简化的  \n\n#### ②银行家算法\n\n----------\n\n***首先进行初始化***\n\n假设系统中有n个进程，所需求的资源有m类，则定义以下的数据结构：\n\n- **最大需求矩阵Max**（n行m列）：定义了系统中每个进程对m类资源的最大需求数目\n- **分配矩阵Allocation**（n行m列）：定义了系统中每个进程对m类资源的已经分配的情况\n- **需求矩阵Need**（n行m列）：定义了系统中的每一个进程还需要的各类资源数目\n- **可用资源向量Available**（m列）：定义了系统中的每类资源所剩余的数目\n\n资源分配表由以上的数据结构构成，如下图所示：\n\n![image-20220516232351253](https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205162323289.png)\n\n-----------\n\n***其次进行预分配***\n\n假设进程Pi对场上的资源做出请求，该请求用请求向量**Requesti**（m列）来表示，对应所分别请求的m类资源的数目，首先进行以下两步检查：\n\n1. 如果$Request_i\\le Need_i$，则说明该进程请求的不比自己需要的多，可以继续向下，否则报错\n2. 如果$Request_i\\le Available$，则说明该进程的请求可以被剩余资源所满足，可以继续向下，否则报错\n\n经过以上两步检查之后，尝试将资源做出分配满足请求，更新资源分配表，方法如下：\n$$\nAvailable=Available-Request_i\\\\\nAllocation_i=Allocation_i+Request_i\\\\\nNeed_i=Need_i-Request_i\n$$\n\n---------------\n\n***最后进行安全性检查***\n\n新定义两个数据结构\n\n- **空闲资源向量Work**（m列）：是一个随着安全性检查改变的向量，指的是安全性检查的过程中，系统的每类资源剩余的数目，其初始定义为Available，之后随着进程的释放会发生改变\n- **完成向量Finish**（n行）：表示某个进程是否可以完成，初始定义为false，随着进程的完成会发生改变\n\n安全性检查的过程为：\n\n- 在几个进程之中找到一个未完成的进程$i$，$Need_i$向量小于Work向量，执行之，将其填入安全性检查表，而$Work+Allocation_i$作为新的Work，置$Finish_i=true$\n- 重复以上操作，直至将安全性检查表填满，或者遇到无法分配的状况\n\n安全性检查表示意图如下：\n\n![image-20220516232237019](https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205162322116.png)\n\n> 可以证明：只要存在一个序列不是安全序列，那么任意路径都不是安全序列。只要有一个序列是安全序列，那么在算法进行过程中出现的任何分叉点所构成的其它序列就都是安全序列  \n","source":"_posts/五、死锁.md","raw":"---\ntitle: 五、死锁\ntags:\n  - 操作系统\ncategory:\n  - 操作系统\nabbrlink: 45543\ndate: 2022-06-27 23:07:21\n---\n\n# 5、死锁\n\n## 基本概念\n\n### （1）死锁产生的原因\n\n- 竞争资源：多个进程竞争资源，而资源又不能同时满足其需求（如下图1）\n- 进程推进顺序不当：进程申请资源和释放资源的顺序不当（如下图2）\n\n图1：竞争资源引起的死锁\n\n<img src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205152043664.png\" alt=\"image-20220515204316626\" style=\"zoom:50%;\" />\n\n这类图中的`Pi`表示进程，`Ri`表示资源，由`Ri`指向`Pi`的箭头表示`Ri`已经被分配给了`Pi`，而由`Pi`指向`Ri`的箭头表示`Pi`请求`Ri`\n\n图2：进程推进顺序不当引起的死锁\n\n<img src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205152048260.png\" alt=\"image-20220515204834225\" style=\"zoom:50%;\" />\n\n如上图，当进程的推进路线进入了死锁不可避免区，就会产生死锁\n\n### （2）死锁产生的4个必要条件\n\n1. 互斥条件：在一段时间内某资源仅为一个进程所占有\n2. 请求和保持条件（占有并等待）：又称为部分分配条件。当进程因请求资源被阻塞时，已分配资源保持不放\n3. 不剥夺条件（非抢占）：进程所获得的资源在未使用完毕之前，不能被其他进程强行夺走\n4. 循环等待条件：死锁发生时存在一个进程资源的循环\n\n### （3）资源分配图\n\n用来表示系统资源的分配关系，由一组结点N和一组边E所构成，其中：\n\n- N包括进程节点P和资源节点R，进程节点用圆圈表示，资源节点用方框表示，每个方框对应着一种资源，方框中的一个点表示一种资源里的一个资源\n- E包括资源请求边（由P节点指向R节点）和资源分配边（由R节点指向P节点）\n\n**✳使用资源分配图来初步分析死锁：**\n\n- 如果分配图没有环：无死锁\n- 如果分配图包含环：如果每个R节点中都只有一个资源，则一定会死锁；如果有多个资源，则只是存在死锁的可能，并不一定会死锁\n\n### （4）死锁的解除\n\n1. 系统重启法\n2. 进程终止（进程撤销、逐步撤销）\n3. 资源抢占\n\n## 处理死锁的基本方法\n\n1. 忽略死锁：被大多数系统采用，因为死锁出现概率低，忽略死锁的代价小\n2. 预防死锁：设置某些限制条件，通过破坏死锁产生的四个必要条件之一来预防死锁\n3. 避免死锁：在资源的动态分配过程之中，用某种方法防止系统进入不安全状态\n4. 检测死锁及解除：系统定期检测是否出现死锁，如果出现则解除之\n\n### （1）预防死锁\n\n可以通过破坏产生死锁的四个必要条件之中的一个或几个条件来防止死锁的发生\n\n#### ①破坏互斥条件\n\n- 主要思路：使资源可以同时访问，而非互斥使用\n- 局限性：互斥对一些资源是固有属性不能改变\n\n#### ②破坏请求和保持条件\n\n- 主要思路：当每个进程申请一个资源时，不能占有其他资源\n- *方法1：要求进程一次申请其所需的全部资源，如果有足够的资源则分配给进程，否则不分配，进程等待（静态资源分配法）*\n- *方法2：允许进程仅在没有资源时才可以申请资源，一个进程申请资源并使用，但是在申请更多资源时应释放已经分配的所有资源*\n- 优点：简单并且易于实现\n- 缺点：资源利用率低，进程延迟运行，可能发生饥饿\n\n#### ③破坏不可剥夺条件\n\n- 主要思路：对一个已经获得某些资源的进程，若新的资源请求的不到满足，则其已经占有的资源都可以被抢占，即这些资源都被隐式释放了（常用于状态已于恢复和保存的资源）\n- 局限性：这种释放有可能造成已有工作的失效，重新申请和释放会带来新的系统开销\n\n#### ④破坏循环等待条件\n\n采取层次分配策略，将资源分为多个层次，并且应用如下规则：\n\n- 当进程得到某一层的一个资源后，只能申请较高层次的资源\n- 当进程释放某层的一个资源时，必须先释放占有的较高层次的资源  \n- 当进程得到某一层的一个资源后，它想申请该层的另一个资源时，必须先释放该层中的已占资源  \n\n采取层次分配的变种：按序分配策略\n\n首先将系统的所有资源排一个顺序，如系统若共有n个进程，有m个资源，用$r_i$表示第$i$个资源，则这$m$个资源是$r_1,r_2,......,r_m$，并应用如下规则：\n\n- 进程不得在占用资源$r_i$后再申请$r_j(j<i)$\n- 即只能申请编号之后的资源，不许申请编号之前的资源\n\n证明：\n\n![image-20220515214959740](https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205152149789.png)\n\n### （2）避免死锁\n\n允许系统中存在前3个必要条件，通过合适的资源分配算法，防止系统进入不安全状态 ，确保不会出现第四个必要条件，从而避免死锁。  \n\n**【定义】安全状态**：如果系统能按照某种顺序来为每个进程分配其所需的资源直到最大需求，使每个进程都可以顺利完成，则称此时的系统状态为安全状态，称序列为安全序列\n\n**【定义】不安全状态**：某一时刻系统中不存在安全序列\n\n#### ①资源分配图算法\n\n资源分配图的简化：\n\n- 在资源分配图中找到一个既不阻塞又非孤立的进程节点Pi（不阻塞：该节点并未处于等待中，非孤立：有边项链）\n- 将Pi运行完成，删掉其所有的请求边和分配边\n\n不断进行上述两个过程，如果能消去图中所有的边，则该图为可完全简化的，否则是不可完全简化\n\n> 死锁定理： S为死锁状态的条件，当且仅当S状态的资源分配图是不可完全简化的  \n\n#### ②银行家算法\n\n----------\n\n***首先进行初始化***\n\n假设系统中有n个进程，所需求的资源有m类，则定义以下的数据结构：\n\n- **最大需求矩阵Max**（n行m列）：定义了系统中每个进程对m类资源的最大需求数目\n- **分配矩阵Allocation**（n行m列）：定义了系统中每个进程对m类资源的已经分配的情况\n- **需求矩阵Need**（n行m列）：定义了系统中的每一个进程还需要的各类资源数目\n- **可用资源向量Available**（m列）：定义了系统中的每类资源所剩余的数目\n\n资源分配表由以上的数据结构构成，如下图所示：\n\n![image-20220516232351253](https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205162323289.png)\n\n-----------\n\n***其次进行预分配***\n\n假设进程Pi对场上的资源做出请求，该请求用请求向量**Requesti**（m列）来表示，对应所分别请求的m类资源的数目，首先进行以下两步检查：\n\n1. 如果$Request_i\\le Need_i$，则说明该进程请求的不比自己需要的多，可以继续向下，否则报错\n2. 如果$Request_i\\le Available$，则说明该进程的请求可以被剩余资源所满足，可以继续向下，否则报错\n\n经过以上两步检查之后，尝试将资源做出分配满足请求，更新资源分配表，方法如下：\n$$\nAvailable=Available-Request_i\\\\\nAllocation_i=Allocation_i+Request_i\\\\\nNeed_i=Need_i-Request_i\n$$\n\n---------------\n\n***最后进行安全性检查***\n\n新定义两个数据结构\n\n- **空闲资源向量Work**（m列）：是一个随着安全性检查改变的向量，指的是安全性检查的过程中，系统的每类资源剩余的数目，其初始定义为Available，之后随着进程的释放会发生改变\n- **完成向量Finish**（n行）：表示某个进程是否可以完成，初始定义为false，随着进程的完成会发生改变\n\n安全性检查的过程为：\n\n- 在几个进程之中找到一个未完成的进程$i$，$Need_i$向量小于Work向量，执行之，将其填入安全性检查表，而$Work+Allocation_i$作为新的Work，置$Finish_i=true$\n- 重复以上操作，直至将安全性检查表填满，或者遇到无法分配的状况\n\n安全性检查表示意图如下：\n\n![image-20220516232237019](https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205162322116.png)\n\n> 可以证明：只要存在一个序列不是安全序列，那么任意路径都不是安全序列。只要有一个序列是安全序列，那么在算法进行过程中出现的任何分叉点所构成的其它序列就都是安全序列  \n","slug":"五、死锁","published":1,"updated":"2022-06-27T15:12:30.875Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4ww15sn0001nksk61rv9btg","content":"<h1 id=\"5、死锁\"><a href=\"#5、死锁\" class=\"headerlink\" title=\"5、死锁\"></a>5、死锁</h1><h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><h3 id=\"（1）死锁产生的原因\"><a href=\"#（1）死锁产生的原因\" class=\"headerlink\" title=\"（1）死锁产生的原因\"></a>（1）死锁产生的原因</h3><ul>\n<li>竞争资源：多个进程竞争资源，而资源又不能同时满足其需求（如下图1）</li>\n<li>进程推进顺序不当：进程申请资源和释放资源的顺序不当（如下图2）</li>\n</ul>\n<p>图1：竞争资源引起的死锁</p>\n<img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205152043664.png\" alt=\"image-20220515204316626\" style=\"zoom:50%;\" />\n\n<p>这类图中的<code>Pi</code>表示进程，<code>Ri</code>表示资源，由<code>Ri</code>指向<code>Pi</code>的箭头表示<code>Ri</code>已经被分配给了<code>Pi</code>，而由<code>Pi</code>指向<code>Ri</code>的箭头表示<code>Pi</code>请求<code>Ri</code></p>\n<p>图2：进程推进顺序不当引起的死锁</p>\n<img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205152048260.png\" alt=\"image-20220515204834225\" style=\"zoom:50%;\" />\n\n<p>如上图，当进程的推进路线进入了死锁不可避免区，就会产生死锁</p>\n<h3 id=\"（2）死锁产生的4个必要条件\"><a href=\"#（2）死锁产生的4个必要条件\" class=\"headerlink\" title=\"（2）死锁产生的4个必要条件\"></a>（2）死锁产生的4个必要条件</h3><ol>\n<li>互斥条件：在一段时间内某资源仅为一个进程所占有</li>\n<li>请求和保持条件（占有并等待）：又称为部分分配条件。当进程因请求资源被阻塞时，已分配资源保持不放</li>\n<li>不剥夺条件（非抢占）：进程所获得的资源在未使用完毕之前，不能被其他进程强行夺走</li>\n<li>循环等待条件：死锁发生时存在一个进程资源的循环</li>\n</ol>\n<h3 id=\"（3）资源分配图\"><a href=\"#（3）资源分配图\" class=\"headerlink\" title=\"（3）资源分配图\"></a>（3）资源分配图</h3><p>用来表示系统资源的分配关系，由一组结点N和一组边E所构成，其中：</p>\n<ul>\n<li>N包括进程节点P和资源节点R，进程节点用圆圈表示，资源节点用方框表示，每个方框对应着一种资源，方框中的一个点表示一种资源里的一个资源</li>\n<li>E包括资源请求边（由P节点指向R节点）和资源分配边（由R节点指向P节点）</li>\n</ul>\n<p><strong>✳使用资源分配图来初步分析死锁：</strong></p>\n<ul>\n<li>如果分配图没有环：无死锁</li>\n<li>如果分配图包含环：如果每个R节点中都只有一个资源，则一定会死锁；如果有多个资源，则只是存在死锁的可能，并不一定会死锁</li>\n</ul>\n<h3 id=\"（4）死锁的解除\"><a href=\"#（4）死锁的解除\" class=\"headerlink\" title=\"（4）死锁的解除\"></a>（4）死锁的解除</h3><ol>\n<li>系统重启法</li>\n<li>进程终止（进程撤销、逐步撤销）</li>\n<li>资源抢占</li>\n</ol>\n<h2 id=\"处理死锁的基本方法\"><a href=\"#处理死锁的基本方法\" class=\"headerlink\" title=\"处理死锁的基本方法\"></a>处理死锁的基本方法</h2><ol>\n<li>忽略死锁：被大多数系统采用，因为死锁出现概率低，忽略死锁的代价小</li>\n<li>预防死锁：设置某些限制条件，通过破坏死锁产生的四个必要条件之一来预防死锁</li>\n<li>避免死锁：在资源的动态分配过程之中，用某种方法防止系统进入不安全状态</li>\n<li>检测死锁及解除：系统定期检测是否出现死锁，如果出现则解除之</li>\n</ol>\n<h3 id=\"（1）预防死锁\"><a href=\"#（1）预防死锁\" class=\"headerlink\" title=\"（1）预防死锁\"></a>（1）预防死锁</h3><p>可以通过破坏产生死锁的四个必要条件之中的一个或几个条件来防止死锁的发生</p>\n<h4 id=\"①破坏互斥条件\"><a href=\"#①破坏互斥条件\" class=\"headerlink\" title=\"①破坏互斥条件\"></a>①破坏互斥条件</h4><ul>\n<li>主要思路：使资源可以同时访问，而非互斥使用</li>\n<li>局限性：互斥对一些资源是固有属性不能改变</li>\n</ul>\n<h4 id=\"②破坏请求和保持条件\"><a href=\"#②破坏请求和保持条件\" class=\"headerlink\" title=\"②破坏请求和保持条件\"></a>②破坏请求和保持条件</h4><ul>\n<li>主要思路：当每个进程申请一个资源时，不能占有其他资源</li>\n<li><em>方法1：要求进程一次申请其所需的全部资源，如果有足够的资源则分配给进程，否则不分配，进程等待（静态资源分配法）</em></li>\n<li><em>方法2：允许进程仅在没有资源时才可以申请资源，一个进程申请资源并使用，但是在申请更多资源时应释放已经分配的所有资源</em></li>\n<li>优点：简单并且易于实现</li>\n<li>缺点：资源利用率低，进程延迟运行，可能发生饥饿</li>\n</ul>\n<h4 id=\"③破坏不可剥夺条件\"><a href=\"#③破坏不可剥夺条件\" class=\"headerlink\" title=\"③破坏不可剥夺条件\"></a>③破坏不可剥夺条件</h4><ul>\n<li>主要思路：对一个已经获得某些资源的进程，若新的资源请求的不到满足，则其已经占有的资源都可以被抢占，即这些资源都被隐式释放了（常用于状态已于恢复和保存的资源）</li>\n<li>局限性：这种释放有可能造成已有工作的失效，重新申请和释放会带来新的系统开销</li>\n</ul>\n<h4 id=\"④破坏循环等待条件\"><a href=\"#④破坏循环等待条件\" class=\"headerlink\" title=\"④破坏循环等待条件\"></a>④破坏循环等待条件</h4><p>采取层次分配策略，将资源分为多个层次，并且应用如下规则：</p>\n<ul>\n<li>当进程得到某一层的一个资源后，只能申请较高层次的资源</li>\n<li>当进程释放某层的一个资源时，必须先释放占有的较高层次的资源  </li>\n<li>当进程得到某一层的一个资源后，它想申请该层的另一个资源时，必须先释放该层中的已占资源</li>\n</ul>\n<p>采取层次分配的变种：按序分配策略</p>\n<p>首先将系统的所有资源排一个顺序，如系统若共有n个进程，有m个资源，用$r_i$表示第$i$个资源，则这$m$个资源是$r_1,r_2,……,r_m$，并应用如下规则：</p>\n<ul>\n<li>进程不得在占用资源$r_i$后再申请$r_j(j&lt;i)$</li>\n<li>即只能申请编号之后的资源，不许申请编号之前的资源</li>\n</ul>\n<p>证明：</p>\n<p><img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205152149789.png\" alt=\"image-20220515214959740\"></p>\n<h3 id=\"（2）避免死锁\"><a href=\"#（2）避免死锁\" class=\"headerlink\" title=\"（2）避免死锁\"></a>（2）避免死锁</h3><p>允许系统中存在前3个必要条件，通过合适的资源分配算法，防止系统进入不安全状态 ，确保不会出现第四个必要条件，从而避免死锁。  </p>\n<p><strong>【定义】安全状态</strong>：如果系统能按照某种顺序来为每个进程分配其所需的资源直到最大需求，使每个进程都可以顺利完成，则称此时的系统状态为安全状态，称序列为安全序列</p>\n<p><strong>【定义】不安全状态</strong>：某一时刻系统中不存在安全序列</p>\n<h4 id=\"①资源分配图算法\"><a href=\"#①资源分配图算法\" class=\"headerlink\" title=\"①资源分配图算法\"></a>①资源分配图算法</h4><p>资源分配图的简化：</p>\n<ul>\n<li>在资源分配图中找到一个既不阻塞又非孤立的进程节点Pi（不阻塞：该节点并未处于等待中，非孤立：有边项链）</li>\n<li>将Pi运行完成，删掉其所有的请求边和分配边</li>\n</ul>\n<p>不断进行上述两个过程，如果能消去图中所有的边，则该图为可完全简化的，否则是不可完全简化</p>\n<blockquote>\n<p>死锁定理： S为死锁状态的条件，当且仅当S状态的资源分配图是不可完全简化的  </p>\n</blockquote>\n<h4 id=\"②银行家算法\"><a href=\"#②银行家算法\" class=\"headerlink\" title=\"②银行家算法\"></a>②银行家算法</h4><hr>\n<p><em><strong>首先进行初始化</strong></em></p>\n<p>假设系统中有n个进程，所需求的资源有m类，则定义以下的数据结构：</p>\n<ul>\n<li><strong>最大需求矩阵Max</strong>（n行m列）：定义了系统中每个进程对m类资源的最大需求数目</li>\n<li><strong>分配矩阵Allocation</strong>（n行m列）：定义了系统中每个进程对m类资源的已经分配的情况</li>\n<li><strong>需求矩阵Need</strong>（n行m列）：定义了系统中的每一个进程还需要的各类资源数目</li>\n<li><strong>可用资源向量Available</strong>（m列）：定义了系统中的每类资源所剩余的数目</li>\n</ul>\n<p>资源分配表由以上的数据结构构成，如下图所示：</p>\n<p><img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205162323289.png\" alt=\"image-20220516232351253\"></p>\n<hr>\n<p><em><strong>其次进行预分配</strong></em></p>\n<p>假设进程Pi对场上的资源做出请求，该请求用请求向量<strong>Requesti</strong>（m列）来表示，对应所分别请求的m类资源的数目，首先进行以下两步检查：</p>\n<ol>\n<li>如果$Request_i\\le Need_i$，则说明该进程请求的不比自己需要的多，可以继续向下，否则报错</li>\n<li>如果$Request_i\\le Available$，则说明该进程的请求可以被剩余资源所满足，可以继续向下，否则报错</li>\n</ol>\n<p>经过以上两步检查之后，尝试将资源做出分配满足请求，更新资源分配表，方法如下：<br>$$<br>Available&#x3D;Available-Request_i\\<br>Allocation_i&#x3D;Allocation_i+Request_i\\<br>Need_i&#x3D;Need_i-Request_i<br>$$</p>\n<hr>\n<p><em><strong>最后进行安全性检查</strong></em></p>\n<p>新定义两个数据结构</p>\n<ul>\n<li><strong>空闲资源向量Work</strong>（m列）：是一个随着安全性检查改变的向量，指的是安全性检查的过程中，系统的每类资源剩余的数目，其初始定义为Available，之后随着进程的释放会发生改变</li>\n<li><strong>完成向量Finish</strong>（n行）：表示某个进程是否可以完成，初始定义为false，随着进程的完成会发生改变</li>\n</ul>\n<p>安全性检查的过程为：</p>\n<ul>\n<li>在几个进程之中找到一个未完成的进程$i$，$Need_i$向量小于Work向量，执行之，将其填入安全性检查表，而$Work+Allocation_i$作为新的Work，置$Finish_i&#x3D;true$</li>\n<li>重复以上操作，直至将安全性检查表填满，或者遇到无法分配的状况</li>\n</ul>\n<p>安全性检查表示意图如下：</p>\n<p><img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205162322116.png\" alt=\"image-20220516232237019\"></p>\n<blockquote>\n<p>可以证明：只要存在一个序列不是安全序列，那么任意路径都不是安全序列。只要有一个序列是安全序列，那么在算法进行过程中出现的任何分叉点所构成的其它序列就都是安全序列  </p>\n</blockquote>\n","site":{"data":{"post-body-end":"<div>\n    \n</div>\n","styles":"body {\n  background: url(\"/images/background.png\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 100% 100%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.8);\n}\n.popup {\n  opacity: 0.8;\n}\n.post-block {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.comments {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.post {\n  margin-top: 60px;\n  padding: 20px;\n  margin-bottom: 60px;\n  -webkit-box-shadow: 0 0 0px #788072;\n  -moz-box-shadow: 0 0 0px rgba(202,203,204,0.5);\n}\n.post-button .btn {\n  color: #555 !important;\n  background-color: #fff;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  border: none !important;\n  transition-property: unset;\n  padding: 0px 15px;\n}\n.post-button .btn:hover {\n  color: #fff !important;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  background-image: linear-gradient(90deg, #a166ab 0%, #ef4e7b 25%, #f37055 50%, #ef4e7b 75%, #a166ab 100%);\n}\n","variables":""}},"length":2728,"excerpt":"","more":"<h1 id=\"5、死锁\"><a href=\"#5、死锁\" class=\"headerlink\" title=\"5、死锁\"></a>5、死锁</h1><h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><h3 id=\"（1）死锁产生的原因\"><a href=\"#（1）死锁产生的原因\" class=\"headerlink\" title=\"（1）死锁产生的原因\"></a>（1）死锁产生的原因</h3><ul>\n<li>竞争资源：多个进程竞争资源，而资源又不能同时满足其需求（如下图1）</li>\n<li>进程推进顺序不当：进程申请资源和释放资源的顺序不当（如下图2）</li>\n</ul>\n<p>图1：竞争资源引起的死锁</p>\n<img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205152043664.png\" alt=\"image-20220515204316626\" style=\"zoom:50%;\" />\n\n<p>这类图中的<code>Pi</code>表示进程，<code>Ri</code>表示资源，由<code>Ri</code>指向<code>Pi</code>的箭头表示<code>Ri</code>已经被分配给了<code>Pi</code>，而由<code>Pi</code>指向<code>Ri</code>的箭头表示<code>Pi</code>请求<code>Ri</code></p>\n<p>图2：进程推进顺序不当引起的死锁</p>\n<img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205152048260.png\" alt=\"image-20220515204834225\" style=\"zoom:50%;\" />\n\n<p>如上图，当进程的推进路线进入了死锁不可避免区，就会产生死锁</p>\n<h3 id=\"（2）死锁产生的4个必要条件\"><a href=\"#（2）死锁产生的4个必要条件\" class=\"headerlink\" title=\"（2）死锁产生的4个必要条件\"></a>（2）死锁产生的4个必要条件</h3><ol>\n<li>互斥条件：在一段时间内某资源仅为一个进程所占有</li>\n<li>请求和保持条件（占有并等待）：又称为部分分配条件。当进程因请求资源被阻塞时，已分配资源保持不放</li>\n<li>不剥夺条件（非抢占）：进程所获得的资源在未使用完毕之前，不能被其他进程强行夺走</li>\n<li>循环等待条件：死锁发生时存在一个进程资源的循环</li>\n</ol>\n<h3 id=\"（3）资源分配图\"><a href=\"#（3）资源分配图\" class=\"headerlink\" title=\"（3）资源分配图\"></a>（3）资源分配图</h3><p>用来表示系统资源的分配关系，由一组结点N和一组边E所构成，其中：</p>\n<ul>\n<li>N包括进程节点P和资源节点R，进程节点用圆圈表示，资源节点用方框表示，每个方框对应着一种资源，方框中的一个点表示一种资源里的一个资源</li>\n<li>E包括资源请求边（由P节点指向R节点）和资源分配边（由R节点指向P节点）</li>\n</ul>\n<p><strong>✳使用资源分配图来初步分析死锁：</strong></p>\n<ul>\n<li>如果分配图没有环：无死锁</li>\n<li>如果分配图包含环：如果每个R节点中都只有一个资源，则一定会死锁；如果有多个资源，则只是存在死锁的可能，并不一定会死锁</li>\n</ul>\n<h3 id=\"（4）死锁的解除\"><a href=\"#（4）死锁的解除\" class=\"headerlink\" title=\"（4）死锁的解除\"></a>（4）死锁的解除</h3><ol>\n<li>系统重启法</li>\n<li>进程终止（进程撤销、逐步撤销）</li>\n<li>资源抢占</li>\n</ol>\n<h2 id=\"处理死锁的基本方法\"><a href=\"#处理死锁的基本方法\" class=\"headerlink\" title=\"处理死锁的基本方法\"></a>处理死锁的基本方法</h2><ol>\n<li>忽略死锁：被大多数系统采用，因为死锁出现概率低，忽略死锁的代价小</li>\n<li>预防死锁：设置某些限制条件，通过破坏死锁产生的四个必要条件之一来预防死锁</li>\n<li>避免死锁：在资源的动态分配过程之中，用某种方法防止系统进入不安全状态</li>\n<li>检测死锁及解除：系统定期检测是否出现死锁，如果出现则解除之</li>\n</ol>\n<h3 id=\"（1）预防死锁\"><a href=\"#（1）预防死锁\" class=\"headerlink\" title=\"（1）预防死锁\"></a>（1）预防死锁</h3><p>可以通过破坏产生死锁的四个必要条件之中的一个或几个条件来防止死锁的发生</p>\n<h4 id=\"①破坏互斥条件\"><a href=\"#①破坏互斥条件\" class=\"headerlink\" title=\"①破坏互斥条件\"></a>①破坏互斥条件</h4><ul>\n<li>主要思路：使资源可以同时访问，而非互斥使用</li>\n<li>局限性：互斥对一些资源是固有属性不能改变</li>\n</ul>\n<h4 id=\"②破坏请求和保持条件\"><a href=\"#②破坏请求和保持条件\" class=\"headerlink\" title=\"②破坏请求和保持条件\"></a>②破坏请求和保持条件</h4><ul>\n<li>主要思路：当每个进程申请一个资源时，不能占有其他资源</li>\n<li><em>方法1：要求进程一次申请其所需的全部资源，如果有足够的资源则分配给进程，否则不分配，进程等待（静态资源分配法）</em></li>\n<li><em>方法2：允许进程仅在没有资源时才可以申请资源，一个进程申请资源并使用，但是在申请更多资源时应释放已经分配的所有资源</em></li>\n<li>优点：简单并且易于实现</li>\n<li>缺点：资源利用率低，进程延迟运行，可能发生饥饿</li>\n</ul>\n<h4 id=\"③破坏不可剥夺条件\"><a href=\"#③破坏不可剥夺条件\" class=\"headerlink\" title=\"③破坏不可剥夺条件\"></a>③破坏不可剥夺条件</h4><ul>\n<li>主要思路：对一个已经获得某些资源的进程，若新的资源请求的不到满足，则其已经占有的资源都可以被抢占，即这些资源都被隐式释放了（常用于状态已于恢复和保存的资源）</li>\n<li>局限性：这种释放有可能造成已有工作的失效，重新申请和释放会带来新的系统开销</li>\n</ul>\n<h4 id=\"④破坏循环等待条件\"><a href=\"#④破坏循环等待条件\" class=\"headerlink\" title=\"④破坏循环等待条件\"></a>④破坏循环等待条件</h4><p>采取层次分配策略，将资源分为多个层次，并且应用如下规则：</p>\n<ul>\n<li>当进程得到某一层的一个资源后，只能申请较高层次的资源</li>\n<li>当进程释放某层的一个资源时，必须先释放占有的较高层次的资源  </li>\n<li>当进程得到某一层的一个资源后，它想申请该层的另一个资源时，必须先释放该层中的已占资源</li>\n</ul>\n<p>采取层次分配的变种：按序分配策略</p>\n<p>首先将系统的所有资源排一个顺序，如系统若共有n个进程，有m个资源，用$r_i$表示第$i$个资源，则这$m$个资源是$r_1,r_2,……,r_m$，并应用如下规则：</p>\n<ul>\n<li>进程不得在占用资源$r_i$后再申请$r_j(j&lt;i)$</li>\n<li>即只能申请编号之后的资源，不许申请编号之前的资源</li>\n</ul>\n<p>证明：</p>\n<p><img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205152149789.png\" alt=\"image-20220515214959740\"></p>\n<h3 id=\"（2）避免死锁\"><a href=\"#（2）避免死锁\" class=\"headerlink\" title=\"（2）避免死锁\"></a>（2）避免死锁</h3><p>允许系统中存在前3个必要条件，通过合适的资源分配算法，防止系统进入不安全状态 ，确保不会出现第四个必要条件，从而避免死锁。  </p>\n<p><strong>【定义】安全状态</strong>：如果系统能按照某种顺序来为每个进程分配其所需的资源直到最大需求，使每个进程都可以顺利完成，则称此时的系统状态为安全状态，称序列为安全序列</p>\n<p><strong>【定义】不安全状态</strong>：某一时刻系统中不存在安全序列</p>\n<h4 id=\"①资源分配图算法\"><a href=\"#①资源分配图算法\" class=\"headerlink\" title=\"①资源分配图算法\"></a>①资源分配图算法</h4><p>资源分配图的简化：</p>\n<ul>\n<li>在资源分配图中找到一个既不阻塞又非孤立的进程节点Pi（不阻塞：该节点并未处于等待中，非孤立：有边项链）</li>\n<li>将Pi运行完成，删掉其所有的请求边和分配边</li>\n</ul>\n<p>不断进行上述两个过程，如果能消去图中所有的边，则该图为可完全简化的，否则是不可完全简化</p>\n<blockquote>\n<p>死锁定理： S为死锁状态的条件，当且仅当S状态的资源分配图是不可完全简化的  </p>\n</blockquote>\n<h4 id=\"②银行家算法\"><a href=\"#②银行家算法\" class=\"headerlink\" title=\"②银行家算法\"></a>②银行家算法</h4><hr>\n<p><em><strong>首先进行初始化</strong></em></p>\n<p>假设系统中有n个进程，所需求的资源有m类，则定义以下的数据结构：</p>\n<ul>\n<li><strong>最大需求矩阵Max</strong>（n行m列）：定义了系统中每个进程对m类资源的最大需求数目</li>\n<li><strong>分配矩阵Allocation</strong>（n行m列）：定义了系统中每个进程对m类资源的已经分配的情况</li>\n<li><strong>需求矩阵Need</strong>（n行m列）：定义了系统中的每一个进程还需要的各类资源数目</li>\n<li><strong>可用资源向量Available</strong>（m列）：定义了系统中的每类资源所剩余的数目</li>\n</ul>\n<p>资源分配表由以上的数据结构构成，如下图所示：</p>\n<p><img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205162323289.png\" alt=\"image-20220516232351253\"></p>\n<hr>\n<p><em><strong>其次进行预分配</strong></em></p>\n<p>假设进程Pi对场上的资源做出请求，该请求用请求向量<strong>Requesti</strong>（m列）来表示，对应所分别请求的m类资源的数目，首先进行以下两步检查：</p>\n<ol>\n<li>如果$Request_i\\le Need_i$，则说明该进程请求的不比自己需要的多，可以继续向下，否则报错</li>\n<li>如果$Request_i\\le Available$，则说明该进程的请求可以被剩余资源所满足，可以继续向下，否则报错</li>\n</ol>\n<p>经过以上两步检查之后，尝试将资源做出分配满足请求，更新资源分配表，方法如下：<br>$$<br>Available&#x3D;Available-Request_i\\<br>Allocation_i&#x3D;Allocation_i+Request_i\\<br>Need_i&#x3D;Need_i-Request_i<br>$$</p>\n<hr>\n<p><em><strong>最后进行安全性检查</strong></em></p>\n<p>新定义两个数据结构</p>\n<ul>\n<li><strong>空闲资源向量Work</strong>（m列）：是一个随着安全性检查改变的向量，指的是安全性检查的过程中，系统的每类资源剩余的数目，其初始定义为Available，之后随着进程的释放会发生改变</li>\n<li><strong>完成向量Finish</strong>（n行）：表示某个进程是否可以完成，初始定义为false，随着进程的完成会发生改变</li>\n</ul>\n<p>安全性检查的过程为：</p>\n<ul>\n<li>在几个进程之中找到一个未完成的进程$i$，$Need_i$向量小于Work向量，执行之，将其填入安全性检查表，而$Work+Allocation_i$作为新的Work，置$Finish_i&#x3D;true$</li>\n<li>重复以上操作，直至将安全性检查表填满，或者遇到无法分配的状况</li>\n</ul>\n<p>安全性检查表示意图如下：</p>\n<p><img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205162322116.png\" alt=\"image-20220516232237019\"></p>\n<blockquote>\n<p>可以证明：只要存在一个序列不是安全序列，那么任意路径都不是安全序列。只要有一个序列是安全序列，那么在算法进行过程中出现的任何分叉点所构成的其它序列就都是安全序列  </p>\n</blockquote>\n"},{"title":"六、主存储器管理","abbrlink":53712,"date":"2022-06-27T15:08:05.000Z","_content":"\n# 第六章  主存储器管理\n\n![image-20220426184538793](https://s2.loli.net/2022/04/26/9zCRymrJVXKgWdp.png)\n\n## 6.1 存储器管理的基本概念\n\n![image-20220422195823004](https://s2.loli.net/2022/04/22/9uJisnzPHkCyhqf.png)\n\n### 1、基本概念\n\n- 存储器的层次结构：\n\n    <img src=\"https://s2.loli.net/2022/04/18/kBPG8J9SEaDzYq5.png\" alt=\"image-20220418230644829\" style=\"zoom:67%;\" />\n\n- ==内存的概念与作用==：内存是用于存放数据的硬件。程序执行时需要先放到内存中才能被CPU处理。\n\n- ==存储单元和地址==：每个地址对应一个存储单元\n\n    ![image-20220422194032845](https://s2.loli.net/2022/04/22/RTVxmjzKpG9QhCs.png)\n\n    > 按字节编址的意思是一个字节对应一个地址，而一个地址又对应一个存储单元，故一个存储单元是一个字节。\n    >\n    > 1K = 2^10^; 1M = 2^20^;1G = 2^30^B\n\n- 主存储器分为两大部分：\n\n    - 系统区：存放操作系统内核程序与数据结构，供操作系统使用\n    - 用户区：存放应用程序与数据，往往被划分为一个或多个区域，供用户进程使用。\n\n- 存储器管理的主要目标：为用户提供方便、安全和充分大的存储器，支持大型应用和系统程序及数据的使用。\n\n- ==主存储器管理的四个功能==\n\n    - 存储空间的分配和回收\n    - （存储器的）抽象与（地址）映射\n    - 隔离与共享：进程对存储空间的独占式使用以及共享访问\n    - 存储扩充：在逻辑上为用户提供一个比实际物理内存更大的存储空间\n\n    ![image-20220422201759192](https://s2.loli.net/2022/04/22/wZlaXGmOqE3Rgnr.png)\n\n- ==逻辑地址：==用户编程时所使用的地址。又称相对地址、虚地址。\n\n    > 相对地址是指相对于进程在内存中的起始位置\n\n- 地址空间：逻辑地址的集合。\n\n- ==物理地址：==内存中的地址。又称绝对地址、实地址。\n\n- 主存空间：物理地址的集合。\n\n- 地址变换：将逻辑地址转换为物理地址。又称地址映射、重定位。\n\n### 2、程序的装入（三种方式）\n\n> 为将一个用户源程序变为一个在内存中可执行的文件，通常要经历以下步骤：编译、链接、装入。 \n>\n> ![image-20220422194535038](https://s2.loli.net/2022/04/22/kSb8GL1XeHc4yZA.png)\n\n==装入的三种方式：==（用三种不同的方法完成从逻辑地址到物理地址的转换）绝对装入、静态重定位、动态重定位\n\n![image-20220422201910868](https://s2.loli.net/2022/04/22/21KBG8SnQRJa3qA.png)\n\n---\n\n\n\n![image-20220422194810619](https://s2.loli.net/2022/04/22/BJuhFYnTjV1ftZq.png)\n\n特点：\n\n- 知道程序驻留在内存中的确定位置，编译之后代码中包含了程序的物理地址。\n- 装入模块之后，程序的逻辑地址与物理地址是完全相同的，不需要对程序和数据进行修改。\n- 只能将目标代码装入到内存中事先指定的位置，不适应多道程序环境的动态特性。\n- 通常在程序中采用符号地址，通过编译器，将符号地址转换为绝对地址\n\n---\n\n\n\n![image-20220422194854316](https://s2.loli.net/2022/04/22/xucXk1thRyiBHmq.png)\n\n特点：\n\n- 物理地址 = 程序起始地址 + 逻辑地址\n- 地址变换通常是在装入时一次完成的，以后不再改变，故称为静态重定位\n- 不需硬件支持，且要求分配连续存储空间，但程序运行时不能在内存移动，难以实现数据与代码的共享\n\n---\n\n\n\n![image-20220422194951839](https://s2.loli.net/2022/04/22/wc1LaQNlAHX7Yev.png)\n\n> 多道程序中，重定位寄存器的内容存储在进程PCB中。当进程被调入时，重定位寄存器被重新设置，原有进程的重定位寄存器的内容随进程上下文切换而得到保护\n\n### 3、程序的链接：（三种方式）\n\n![image-20220422195515438](https://s2.loli.net/2022/04/22/MYpJXOCoErfDwQU.png)\n\n![image-20220422195557231](https://s2.loli.net/2022/04/22/E1V3ZHSMBhIiuUn.png)\n\n> 在装入目标模块时，如果发生一个外部模块调用，就会引起装入程序去寻找相应的外部目标模块，并将其装入内存，同时还要修改目标模块中的相对地址\n\n----\n\n![image-20220422195610600](https://s2.loli.net/2022/04/22/mdWYMIwtRxn7y8r.png)\n\n### 4、内存保护\n\n概念：防止一个进程破坏操作系统或其他进程\n\n方法\n\n- **界限存储器法：**通过对每个进程设置一对界限寄存器来防止越界访问，达到存储保护的目的。两种实现方式：上下界寄存器、基址限长寄存器\n\n- **存储保护键：**通过保护键匹配来判断存储访问方式是否合法。为每个存储块分配一个保护键，相当于一把锁；进入系统的每个作业赋予一个保护键，相当于一把钥匙。当作业运行时，检查钥匙和锁是否匹配，若二者匹配，则允许访问。否则发出保护性中断信号\n\n- **环保护机制**：处理器状态分为多个环，分别具有不同的存储访问特权级，通常环的编号越小，特权级越高。\n\n    <img src=\"https://s2.loli.net/2022/04/22/uzQVWwOtlcnBYG1.png\" alt=\"image-20220422200314969\" style=\"zoom:67%;\" />\n\n- **访问权限**：只读、只能执行…\n\n\n\n## 6.2 连续分配管理方式\n\n> 连续分配：指为用户进程分配的必须是一个连续的内存空间\n\n![image-20220422212711179](https://s2.loli.net/2022/04/22/8cJ1SPaBdwxyoNH.png)\n\n### 1、单一连续分配\n\n![image-20220422212019478](https://s2.loli.net/2022/04/22/Uk51jlfVH7PoCwc.png)\n\n### 2、固定分区分配\n\n![image-20220422212047775](https://s2.loli.net/2022/04/22/q6tSomYnjTP2Mb7.png)\n\n![image-20220422212113844](https://s2.loli.net/2022/04/22/IDFb1U9ugJECczh.png)\n\n### 3、动态分区分配及内外部碎片\n\n![image-20220422212138065](https://s2.loli.net/2022/04/22/w18xeFYEnylipuZ.png)\n\n![image-20220422212158090](https://s2.loli.net/2022/04/22/v5Sokj4dAZJFr6I.png)\n\n![image-20220422212228592](https://s2.loli.net/2022/04/22/Ybwf3uDgi2MUls4.png)\n\n> 动态重定位装入方式，需要修改进程的起始地址，即重定位寄存器\n\n### 4、动态分区分配算法\n\n![image-20220422215829014](https://s2.loli.net/2022/04/22/RHy9NQuJXAzM7oP.png)\n\n> 首次适应和邻近适应一般都不需要对空闲分区队列重新排序，因为虽然空闲分区的大小变小了，但它在内存中的位置并没有发生变化，即在分区队列中的位置一般不会发生改变。\n>\n> 首次适应算法的缺点：低地址端有许多小空闲分区时会增加查找开销。\n>\n> 首次适应和最佳适应在执行时间和利用空间方面都好于最坏适应。\n>\n> 首次适应和最佳适应在利用空间方面能力相当，但首次适应更快\n\n**扩展：可重定位分区分配技术**\n\n<img src=\"https://s2.loli.net/2022/04/22/IBYsaClkRcHoE9u.png\" alt=\"image-20220422221246833\" style=\"zoom:67%;\" />\n\n### 5、伙伴系统（Knuth， 1973）\n\n- **算法思想：**伙伴系统采用伙伴算法对空闲内存进行管理。该方法通过不断以1/2的形式来分割大的空闲存储块，从而获得小的空闲存储块。当内存块释放时，应尽可能合并空闲块\n\n- **如何实现：**\n\n    - **内存分配：**设系统初始时可供分配的空间为2^m^个单元。当进程申请大小为n的空间时，设2^i-1^<n≤2^i^，则为进程分配大小为2^i^的空间。如系统不存在大小为2^i^的空闲块，则查找系统中是否存在大于2^i^的空闲块2^i+1^, 2^i+2^…，若找到则对其进行对半划分，直到产生大小为2^i^的空闲块为止。\n\n    - **内存回收：**当进程释放存储空间时，应检查释放块的伙伴是否空闲，若空闲则合并。如果这个较大的空闲块也存在空闲伙伴，此时也应合并。重复上述过程，直至没有可以合并的伙伴为止。\n\n        > 伙伴：当一个块被分成两个大小相等的块时，这两个块称为伙伴\n\n- **伙伴地址公式：**\n\n    <img src=\"https://s2.loli.net/2022/04/22/L7U5PkTdwH3OYEI.png\" alt=\"image-20220422222038028\" style=\"zoom:67%;\" />\n\n- **例子：**\n\n    <img src=\"https://s2.loli.net/2022/04/22/3slKQh9UVF61GNY.png\" alt=\"image-20220422222207775\" style=\"zoom:67%;\" />\n\n    <img src=\"https://s2.loli.net/2022/04/22/6rAveaZuP2FtsGl.png\" alt=\"image-20220422222218692\" style=\"zoom:67%;\" />\n\n- 伙伴系统可以用**二叉树**来表示\n\n    <img src=\"https://s2.loli.net/2022/04/22/5WgtNnbmEVT7U2q.png\" alt=\"image-20220422222353326\" style=\"zoom:50%;\" />\n\n- **伙伴系统的优缺点：**\n\n    - 适合于小数据量的内存管理（大数据量的内存管理采用段页式的分配管理）\n    - 分配和回收时需要对伙伴进行拆分和合并；存储空间有浪费\n\n## 6.3 内存空间的扩充----覆盖与交换技术\n\n![image-20220422204051322](https://s2.loli.net/2022/04/22/Birx7bMAGERwJ9t.png)\n\n### 1、覆盖技术：\n\n![image-20220422203902006](https://s2.loli.net/2022/04/22/Alw9ZgyxRfj8Kem.png)\n\n![image-20220422203914236](https://s2.loli.net/2022/04/22/1fzUj6pA2xSyuPr.png)\n\n> 可以理解为A先调用B再调用C。覆盖区的大小由覆盖段中最大的覆盖决定。\n\n### 2、交换技术\n\n![image-20220422203956311](https://s2.loli.net/2022/04/22/5zmfZlBMkPJbXIC.png)\n\n![image-20220422204018912](https://s2.loli.net/2022/04/22/o6CZmg17Vk9DtqN.png)\n\n\n\n![image-20220422204034668](https://s2.loli.net/2022/04/22/3mWqcjL49PvEoMu.png)\n\n### 3、覆盖技术与交换技术的区别\n\n- 由谁完成：交换技术由操作系统完成；而覆盖技术由程序员给出作业各部分之间的覆盖结构，并清楚系统的存储结构\n- 交换技术主要在不同作业之间进行，而覆盖技术是在同一个作业之间进行\n- 覆盖技术主要用于早期操作系统，而交换技术在现代操作系统中仍然在使用\n\n\n\n---\n\n## 非连续分配管理方式\n\n## 6.4 基本分页存储管理\n\n![image-20220426185513138](https://s2.loli.net/2022/04/26/shWHLjUf6P3EOMn.png)\n\n- **思想：**把内存分成一个个相等的内存块，再按照页面大小把进程拆分成一个个小部分\n\n    > 👉==页式管理中地址是一维的==，只要给出一个逻辑地址，系统就可以自动地算出页号、页内偏移量两个部分，不需要显式地告诉系统这个逻辑地址中，页内偏移量占多少位\n\n### 1、分页存储管理的基本概念与实现思想\n\n![image-20220426184900709](https://s2.loli.net/2022/04/26/6jOa9wRxq5kZpeE.png)\n\n> 页框：page frame\n\n### 2、分页的逻辑地址结构\n\n![image-20220426185131448](https://s2.loli.net/2022/04/26/fgxcYj4lD6J5t7Z.png)\n\n> 为了方便计算页号和页内偏移量，页面大小通常为2的整数幂，一般在512B到64KB之间\n\n\n\n### 3、页表机制及其相关技术\n\n#### （1）页表\n\n![image-20220426185341689](https://s2.loli.net/2022/04/26/1Ue85KMBbnET3ug.png)\n\n> 页号是隐含在索引中的。且进程页表通常是装在连续的内存块中的。\n>\n> 为了方便页表的查询，常常会让一个页表项占更多的字节，使得每个页面恰好可以装得下整数个页表项（如页面大小为4KB，内存块号需要20位，但页表项的大小为4B，这样一个页框就可以存放1K个页表项）。多余的空间可以用来存放别的东西。\n>\n> 不同的页号可能对应相同的块号，以实现内存共享。\n>\n> 页表一般存放在内存中，也可以在页表中设置存取控制字段，以实现存储保护。\n\n---\n\n\n\n#### （2）存储分块表\n\n- **作用**：记录内存中各物理块的使用情况及未分配物理块总数\n\n- **表示方法：**位示图或者空闲存储块链\n\n    - **位示图：**利用二进制的一位表示一个物理块的状态，1表示已分配，0表示未分配。所有物理块状态位的集合构成位示图。\n\n        ![image-20220426202759287](https://s2.loli.net/2022/04/26/DmTfiFCbVOxh7Wc.png)\n\n        > 位示图占用的存储空间为：物理块数/8（字节）\n\n    - **空闲存储块链：**将所有的空闲存储块用链表链接起来，利用空闲物理块中的单元存放指向下一个物理块的指针。\n\n#### （3）存储空间的分配和回收：\n\n- **页面分配**：计算进程所需页面数，然后在请求表中登记进程号、请求页面数等。如存储分块表中有足够的空闲块可供进程使用，则在系统中取得页表始址，并在页表中登记页号及其对应的物理块号，否则无法分配。\n\n- **页面回收**：将存储分块表中相应的物理块改为未分配，或将回收块加入到空闲存储块链中，并释放页表，修改请求表中的页表始址及状态。\n\n    ​    \n\n### 4、地址变换机构\n\n#### （1）基本地址变换机构\n\n![image-20220426191039460](https://s2.loli.net/2022/04/26/LI2TRfFBOoytP73.png)\n\n- **概念：**用于实现逻辑地址到物理地址转换的一组硬件机构\n\n- **作用：**借助进程的页表将逻辑地址转换为物理地址，也就是将逻辑地址中的页号转换为内存中的物理块号\n\n- 通常会在系统中设置一个==页表寄存器PTR==，存放页表在内存中的起始地址F和页表长度M。进程未执行时，==页表的始址和页表长度==（也就是页表有多少项）放在进程控制块PCB中，当进程被调度时，os内核会把它们放到页表寄存器中。\n\n- **地址变换过程：**\n\n    ![image-20220426190157556](https://s2.loli.net/2022/04/26/ceUhD6AbCLjO2xR.png)\n\n- ![image-20220426190052298](https://s2.loli.net/2022/04/26/gA7iu4MrpZRTPFf.png)\n\n    ​    \n\n- **例子：**\n\n    ![image-20220426190431148](https://s2.loli.net/2022/04/26/cbvfMPXd7yW89Qs.png)\n\n#### （2）具有快表的地址变换机构\n\n- **局部性原理：**\n\n    ![image-20220426191351742](https://s2.loli.net/2022/04/26/VUxWraSvYoB4Jhg.png)\n\n- **快表（TLB， translation look-aside buffer，联想寄存器）**：一种访问速度比内存快很多的高速缓冲存储器，用来存放当前访问的若干页表项，以加速地址变换的过程。与此对应，内存中的页表常称为**慢表**。\n\n- **引入快表后，地址的变换过程：**\n\n    ![image-20220426191704882](https://s2.loli.net/2022/04/26/S8IdibhkaMsR4BW.png)\n\n    ![image-20220426191721463](https://s2.loli.net/2022/04/26/8cIa4M9qDkFpbNm.png)\n\n    ---\n\n    > 当发生进程调度的时候，快表会invalid或者fflush，或者增加一个进程的标志，以防止命中错误\n\n> 由于成本关系，快表大小一般由64—1024个表项组成。\n>\n> 由于局部性原理，一般来说，快表的命中率可以达到80%~90%。\n>\n> ![image-20220426191925850](https://s2.loli.net/2022/04/26/slGYgA7d1MCbyvL.png)\n>\n> > ==有效内存访问时间：==\n> >\n> > <img src=\"https://s2.loli.net/2022/04/26/heXDntpmFlMWKsj.png\" alt=\"image-20220426212647995\" style=\"zoom:67%;\" />\n\n#### （3）基本地址变换机构和具有快表的地址变换机构的对比\n\n![image-20220426192036001](https://s2.loli.net/2022/04/26/jPJtQiqcYAU2IHD.png)\n\n### 5、两级页表\n\n- **单级页表中存在的问题：**\n\n    - 页表必须连续存放，因此当页表很大时，需要占用多个连续的页框\n    - 没有必要让整个页表常驻内存，因为进程在一段时间内可能只需要访问某几个特定的页面\n\n- 解决单级页表必须连续存放的问题：采用多级页表（==页目录表，外层页表，顶层页表）==\n\n- **两级页表的原理和地址结构**\n\n    ![image-20220426192645889](https://s2.loli.net/2022/04/26/2jpR47Q8aVzD1gE.png)\n\n    ![image-20220426192700866](https://s2.loli.net/2022/04/26/W4pJXv9qlIZ3VBw.png)\n\n- **如何实现地址变换**\n\n    ![image-20220426192838963](https://s2.loli.net/2022/04/26/edxUD4VpF2HsA8n.png)\n\n    > 也可以引入快表，以减少访存次数\n\n- **解决单级页表中不需要让整个页表常驻内存的问题：**\n\n    <img src=\"https://s2.loli.net/2022/04/26/p2avYgUiflN5FrV.png\" alt=\"image-20220426193011056\" style=\"zoom:80%;\" />\n\n- ==需要注意的几个细节==\n\n    ![image-20220426193150942](https://s2.loli.net/2022/04/26/4xwt1QhX8ZTLqID.png)\n\n    > 如果没有快表机构，则n级页表需要n+1次访存\n\n\n\n### 6、反向页表（Invert Page Table， IPT）\n\n- **思想**：为内存中的每一个**物理块**建立一个页表项并按照块号排序，每个页表项包含正在访问该页框的进程标识、页号以及特征位\n\n    > 整个系统只有一张表，每个物理内存的页只有一个条目对应\n\n- **作用**：完成主存页框到访问进程的页号即物理地址到逻辑地址的转换\n\n- **地址变换过程：**\n\n    <img src=\"https://s2.loli.net/2022/04/26/WQYzlCV81HUub2y.png\" alt=\"image-20220426205421650\" style=\"zoom:67%;\" />\n\n- **缺点：**\n\n    <img src=\"https://s2.loli.net/2022/04/26/I1FVZMurYnXgqDW.png\" alt=\"image-20220426205905801\" style=\"zoom:67%;\" />\n\n\n\n### 7、分页存储管理的保护与共享\n\n- **分页存储管理采用两种方式保护内存：**\n    - 地址越界保护：页表长度与逻辑地址中的页号比较\n    - 存取控制保护：在页表中增加保护位\n- **分页存储管理的共享方式**\n    - 数据共享：允许不同进程对共享的数据页用不同的页号来访问，即只需要页表指向共享的数据页框即可。\n    - 代码共享：由于共享代码页面内包含地址，不同逻辑空间若页号不同，则导致无法访问，因此必须赋予相同页号。\n\n## 6.5 基本分段存储管理\n\n![image-20220426194710516](https://s2.loli.net/2022/04/26/EUgOtpouZxdRrj7.png)\n\n> 与基本分页存储管理的最大区别：离散分配时所分配地址空间的基本单位不同\n\n### 1、分段的概念\n\n![image-20220426193521781](https://s2.loli.net/2022/04/26/6S8VgteFOHUaKGT.png)\n\n![image-20220426193535550](https://s2.loli.net/2022/04/26/KaqjebsJzuM8HyA.png)\n\n### 2、段表\n\n![image-20220426193632599](https://s2.loli.net/2022/04/26/upbHoCI6h7faYeZ.png)\n\n> 段表一般存放在内存\n\n### 3、地址变换机构\n\n![image-20220426193928129](https://s2.loli.net/2022/04/26/l9q2p3DKLEj6GrM.png)\n\n> 为了提高内存的访问速度，也可以使用快表\n\n### 4、分段、分页管理的对比\n\n![image-20220426194236685](https://s2.loli.net/2022/04/26/bs3XU8gmfHcN1Dt.png)\n\n<img src=\"https://s2.loli.net/2022/04/26/ywH4ZpnUKe9xPtS.png\" alt=\"image-20220426195041398\" style=\"zoom:67%;\" />\n\n![image-20220426194640929](https://s2.loli.net/2022/04/26/YRG4QD5itvZVHAN.png)\n\n![image-20220426194106414](https://s2.loli.net/2022/04/26/klur4s6xOcE871I.png)\n\n### 5、分段保护\n\n- **地址越界保护：**段号与段表长度的比较，段内位移与段长的比较\n- **存取控制保护：**设置存取权限，访问段时判断访问类型与存取权限是否相符\n\n\n\n## 6.6 段页式存储管理\n\n![image-20220426200531616](https://s2.loli.net/2022/04/26/Ja58EfCTXBvVmho.png)\n\n### 1、分页、分段的优缺点分析\n\n![image-20220426195201025](https://s2.loli.net/2022/04/26/AoFm2UpIqyGW54c.png)\n\n### 2、段页式存储管理：先分段后分页\n\n> 分段对用户可见，分页对用户不可见\n\n![image-20220426195338399](https://s2.loli.net/2022/04/26/JrxjkvDLqe67gi9.png)\n\n### 3、段页式管理的逻辑地址结构\n\n![image-20220426195806199](https://s2.loli.net/2022/04/26/nBUGbur8LSdHolX.png)\n\n### 4、段表和页表\n\n![image-20220426200023173](https://s2.loli.net/2022/04/26/YVDGOsEfQBhtPnl.png)\n\n> 一个进程对应一个段表，一个段又对应一个页表，因此一个进程可以对应多个页表\n\n### 5、地址变换机构\n\n![image-20220426200419461](https://s2.loli.net/2022/04/26/yCvbqgiJHwY7N4e.png)\n\n\n\n","source":"_posts/六、主存储器管理.md","raw":"---\ntitle: 六、主存储器管理\ntags:\n  - 操作系统\ncategory:\n  - 操作系统\nabbrlink: 53712\ndate: 2022-06-27 23:08:05\n---\n\n# 第六章  主存储器管理\n\n![image-20220426184538793](https://s2.loli.net/2022/04/26/9zCRymrJVXKgWdp.png)\n\n## 6.1 存储器管理的基本概念\n\n![image-20220422195823004](https://s2.loli.net/2022/04/22/9uJisnzPHkCyhqf.png)\n\n### 1、基本概念\n\n- 存储器的层次结构：\n\n    <img src=\"https://s2.loli.net/2022/04/18/kBPG8J9SEaDzYq5.png\" alt=\"image-20220418230644829\" style=\"zoom:67%;\" />\n\n- ==内存的概念与作用==：内存是用于存放数据的硬件。程序执行时需要先放到内存中才能被CPU处理。\n\n- ==存储单元和地址==：每个地址对应一个存储单元\n\n    ![image-20220422194032845](https://s2.loli.net/2022/04/22/RTVxmjzKpG9QhCs.png)\n\n    > 按字节编址的意思是一个字节对应一个地址，而一个地址又对应一个存储单元，故一个存储单元是一个字节。\n    >\n    > 1K = 2^10^; 1M = 2^20^;1G = 2^30^B\n\n- 主存储器分为两大部分：\n\n    - 系统区：存放操作系统内核程序与数据结构，供操作系统使用\n    - 用户区：存放应用程序与数据，往往被划分为一个或多个区域，供用户进程使用。\n\n- 存储器管理的主要目标：为用户提供方便、安全和充分大的存储器，支持大型应用和系统程序及数据的使用。\n\n- ==主存储器管理的四个功能==\n\n    - 存储空间的分配和回收\n    - （存储器的）抽象与（地址）映射\n    - 隔离与共享：进程对存储空间的独占式使用以及共享访问\n    - 存储扩充：在逻辑上为用户提供一个比实际物理内存更大的存储空间\n\n    ![image-20220422201759192](https://s2.loli.net/2022/04/22/wZlaXGmOqE3Rgnr.png)\n\n- ==逻辑地址：==用户编程时所使用的地址。又称相对地址、虚地址。\n\n    > 相对地址是指相对于进程在内存中的起始位置\n\n- 地址空间：逻辑地址的集合。\n\n- ==物理地址：==内存中的地址。又称绝对地址、实地址。\n\n- 主存空间：物理地址的集合。\n\n- 地址变换：将逻辑地址转换为物理地址。又称地址映射、重定位。\n\n### 2、程序的装入（三种方式）\n\n> 为将一个用户源程序变为一个在内存中可执行的文件，通常要经历以下步骤：编译、链接、装入。 \n>\n> ![image-20220422194535038](https://s2.loli.net/2022/04/22/kSb8GL1XeHc4yZA.png)\n\n==装入的三种方式：==（用三种不同的方法完成从逻辑地址到物理地址的转换）绝对装入、静态重定位、动态重定位\n\n![image-20220422201910868](https://s2.loli.net/2022/04/22/21KBG8SnQRJa3qA.png)\n\n---\n\n\n\n![image-20220422194810619](https://s2.loli.net/2022/04/22/BJuhFYnTjV1ftZq.png)\n\n特点：\n\n- 知道程序驻留在内存中的确定位置，编译之后代码中包含了程序的物理地址。\n- 装入模块之后，程序的逻辑地址与物理地址是完全相同的，不需要对程序和数据进行修改。\n- 只能将目标代码装入到内存中事先指定的位置，不适应多道程序环境的动态特性。\n- 通常在程序中采用符号地址，通过编译器，将符号地址转换为绝对地址\n\n---\n\n\n\n![image-20220422194854316](https://s2.loli.net/2022/04/22/xucXk1thRyiBHmq.png)\n\n特点：\n\n- 物理地址 = 程序起始地址 + 逻辑地址\n- 地址变换通常是在装入时一次完成的，以后不再改变，故称为静态重定位\n- 不需硬件支持，且要求分配连续存储空间，但程序运行时不能在内存移动，难以实现数据与代码的共享\n\n---\n\n\n\n![image-20220422194951839](https://s2.loli.net/2022/04/22/wc1LaQNlAHX7Yev.png)\n\n> 多道程序中，重定位寄存器的内容存储在进程PCB中。当进程被调入时，重定位寄存器被重新设置，原有进程的重定位寄存器的内容随进程上下文切换而得到保护\n\n### 3、程序的链接：（三种方式）\n\n![image-20220422195515438](https://s2.loli.net/2022/04/22/MYpJXOCoErfDwQU.png)\n\n![image-20220422195557231](https://s2.loli.net/2022/04/22/E1V3ZHSMBhIiuUn.png)\n\n> 在装入目标模块时，如果发生一个外部模块调用，就会引起装入程序去寻找相应的外部目标模块，并将其装入内存，同时还要修改目标模块中的相对地址\n\n----\n\n![image-20220422195610600](https://s2.loli.net/2022/04/22/mdWYMIwtRxn7y8r.png)\n\n### 4、内存保护\n\n概念：防止一个进程破坏操作系统或其他进程\n\n方法\n\n- **界限存储器法：**通过对每个进程设置一对界限寄存器来防止越界访问，达到存储保护的目的。两种实现方式：上下界寄存器、基址限长寄存器\n\n- **存储保护键：**通过保护键匹配来判断存储访问方式是否合法。为每个存储块分配一个保护键，相当于一把锁；进入系统的每个作业赋予一个保护键，相当于一把钥匙。当作业运行时，检查钥匙和锁是否匹配，若二者匹配，则允许访问。否则发出保护性中断信号\n\n- **环保护机制**：处理器状态分为多个环，分别具有不同的存储访问特权级，通常环的编号越小，特权级越高。\n\n    <img src=\"https://s2.loli.net/2022/04/22/uzQVWwOtlcnBYG1.png\" alt=\"image-20220422200314969\" style=\"zoom:67%;\" />\n\n- **访问权限**：只读、只能执行…\n\n\n\n## 6.2 连续分配管理方式\n\n> 连续分配：指为用户进程分配的必须是一个连续的内存空间\n\n![image-20220422212711179](https://s2.loli.net/2022/04/22/8cJ1SPaBdwxyoNH.png)\n\n### 1、单一连续分配\n\n![image-20220422212019478](https://s2.loli.net/2022/04/22/Uk51jlfVH7PoCwc.png)\n\n### 2、固定分区分配\n\n![image-20220422212047775](https://s2.loli.net/2022/04/22/q6tSomYnjTP2Mb7.png)\n\n![image-20220422212113844](https://s2.loli.net/2022/04/22/IDFb1U9ugJECczh.png)\n\n### 3、动态分区分配及内外部碎片\n\n![image-20220422212138065](https://s2.loli.net/2022/04/22/w18xeFYEnylipuZ.png)\n\n![image-20220422212158090](https://s2.loli.net/2022/04/22/v5Sokj4dAZJFr6I.png)\n\n![image-20220422212228592](https://s2.loli.net/2022/04/22/Ybwf3uDgi2MUls4.png)\n\n> 动态重定位装入方式，需要修改进程的起始地址，即重定位寄存器\n\n### 4、动态分区分配算法\n\n![image-20220422215829014](https://s2.loli.net/2022/04/22/RHy9NQuJXAzM7oP.png)\n\n> 首次适应和邻近适应一般都不需要对空闲分区队列重新排序，因为虽然空闲分区的大小变小了，但它在内存中的位置并没有发生变化，即在分区队列中的位置一般不会发生改变。\n>\n> 首次适应算法的缺点：低地址端有许多小空闲分区时会增加查找开销。\n>\n> 首次适应和最佳适应在执行时间和利用空间方面都好于最坏适应。\n>\n> 首次适应和最佳适应在利用空间方面能力相当，但首次适应更快\n\n**扩展：可重定位分区分配技术**\n\n<img src=\"https://s2.loli.net/2022/04/22/IBYsaClkRcHoE9u.png\" alt=\"image-20220422221246833\" style=\"zoom:67%;\" />\n\n### 5、伙伴系统（Knuth， 1973）\n\n- **算法思想：**伙伴系统采用伙伴算法对空闲内存进行管理。该方法通过不断以1/2的形式来分割大的空闲存储块，从而获得小的空闲存储块。当内存块释放时，应尽可能合并空闲块\n\n- **如何实现：**\n\n    - **内存分配：**设系统初始时可供分配的空间为2^m^个单元。当进程申请大小为n的空间时，设2^i-1^<n≤2^i^，则为进程分配大小为2^i^的空间。如系统不存在大小为2^i^的空闲块，则查找系统中是否存在大于2^i^的空闲块2^i+1^, 2^i+2^…，若找到则对其进行对半划分，直到产生大小为2^i^的空闲块为止。\n\n    - **内存回收：**当进程释放存储空间时，应检查释放块的伙伴是否空闲，若空闲则合并。如果这个较大的空闲块也存在空闲伙伴，此时也应合并。重复上述过程，直至没有可以合并的伙伴为止。\n\n        > 伙伴：当一个块被分成两个大小相等的块时，这两个块称为伙伴\n\n- **伙伴地址公式：**\n\n    <img src=\"https://s2.loli.net/2022/04/22/L7U5PkTdwH3OYEI.png\" alt=\"image-20220422222038028\" style=\"zoom:67%;\" />\n\n- **例子：**\n\n    <img src=\"https://s2.loli.net/2022/04/22/3slKQh9UVF61GNY.png\" alt=\"image-20220422222207775\" style=\"zoom:67%;\" />\n\n    <img src=\"https://s2.loli.net/2022/04/22/6rAveaZuP2FtsGl.png\" alt=\"image-20220422222218692\" style=\"zoom:67%;\" />\n\n- 伙伴系统可以用**二叉树**来表示\n\n    <img src=\"https://s2.loli.net/2022/04/22/5WgtNnbmEVT7U2q.png\" alt=\"image-20220422222353326\" style=\"zoom:50%;\" />\n\n- **伙伴系统的优缺点：**\n\n    - 适合于小数据量的内存管理（大数据量的内存管理采用段页式的分配管理）\n    - 分配和回收时需要对伙伴进行拆分和合并；存储空间有浪费\n\n## 6.3 内存空间的扩充----覆盖与交换技术\n\n![image-20220422204051322](https://s2.loli.net/2022/04/22/Birx7bMAGERwJ9t.png)\n\n### 1、覆盖技术：\n\n![image-20220422203902006](https://s2.loli.net/2022/04/22/Alw9ZgyxRfj8Kem.png)\n\n![image-20220422203914236](https://s2.loli.net/2022/04/22/1fzUj6pA2xSyuPr.png)\n\n> 可以理解为A先调用B再调用C。覆盖区的大小由覆盖段中最大的覆盖决定。\n\n### 2、交换技术\n\n![image-20220422203956311](https://s2.loli.net/2022/04/22/5zmfZlBMkPJbXIC.png)\n\n![image-20220422204018912](https://s2.loli.net/2022/04/22/o6CZmg17Vk9DtqN.png)\n\n\n\n![image-20220422204034668](https://s2.loli.net/2022/04/22/3mWqcjL49PvEoMu.png)\n\n### 3、覆盖技术与交换技术的区别\n\n- 由谁完成：交换技术由操作系统完成；而覆盖技术由程序员给出作业各部分之间的覆盖结构，并清楚系统的存储结构\n- 交换技术主要在不同作业之间进行，而覆盖技术是在同一个作业之间进行\n- 覆盖技术主要用于早期操作系统，而交换技术在现代操作系统中仍然在使用\n\n\n\n---\n\n## 非连续分配管理方式\n\n## 6.4 基本分页存储管理\n\n![image-20220426185513138](https://s2.loli.net/2022/04/26/shWHLjUf6P3EOMn.png)\n\n- **思想：**把内存分成一个个相等的内存块，再按照页面大小把进程拆分成一个个小部分\n\n    > 👉==页式管理中地址是一维的==，只要给出一个逻辑地址，系统就可以自动地算出页号、页内偏移量两个部分，不需要显式地告诉系统这个逻辑地址中，页内偏移量占多少位\n\n### 1、分页存储管理的基本概念与实现思想\n\n![image-20220426184900709](https://s2.loli.net/2022/04/26/6jOa9wRxq5kZpeE.png)\n\n> 页框：page frame\n\n### 2、分页的逻辑地址结构\n\n![image-20220426185131448](https://s2.loli.net/2022/04/26/fgxcYj4lD6J5t7Z.png)\n\n> 为了方便计算页号和页内偏移量，页面大小通常为2的整数幂，一般在512B到64KB之间\n\n\n\n### 3、页表机制及其相关技术\n\n#### （1）页表\n\n![image-20220426185341689](https://s2.loli.net/2022/04/26/1Ue85KMBbnET3ug.png)\n\n> 页号是隐含在索引中的。且进程页表通常是装在连续的内存块中的。\n>\n> 为了方便页表的查询，常常会让一个页表项占更多的字节，使得每个页面恰好可以装得下整数个页表项（如页面大小为4KB，内存块号需要20位，但页表项的大小为4B，这样一个页框就可以存放1K个页表项）。多余的空间可以用来存放别的东西。\n>\n> 不同的页号可能对应相同的块号，以实现内存共享。\n>\n> 页表一般存放在内存中，也可以在页表中设置存取控制字段，以实现存储保护。\n\n---\n\n\n\n#### （2）存储分块表\n\n- **作用**：记录内存中各物理块的使用情况及未分配物理块总数\n\n- **表示方法：**位示图或者空闲存储块链\n\n    - **位示图：**利用二进制的一位表示一个物理块的状态，1表示已分配，0表示未分配。所有物理块状态位的集合构成位示图。\n\n        ![image-20220426202759287](https://s2.loli.net/2022/04/26/DmTfiFCbVOxh7Wc.png)\n\n        > 位示图占用的存储空间为：物理块数/8（字节）\n\n    - **空闲存储块链：**将所有的空闲存储块用链表链接起来，利用空闲物理块中的单元存放指向下一个物理块的指针。\n\n#### （3）存储空间的分配和回收：\n\n- **页面分配**：计算进程所需页面数，然后在请求表中登记进程号、请求页面数等。如存储分块表中有足够的空闲块可供进程使用，则在系统中取得页表始址，并在页表中登记页号及其对应的物理块号，否则无法分配。\n\n- **页面回收**：将存储分块表中相应的物理块改为未分配，或将回收块加入到空闲存储块链中，并释放页表，修改请求表中的页表始址及状态。\n\n    ​    \n\n### 4、地址变换机构\n\n#### （1）基本地址变换机构\n\n![image-20220426191039460](https://s2.loli.net/2022/04/26/LI2TRfFBOoytP73.png)\n\n- **概念：**用于实现逻辑地址到物理地址转换的一组硬件机构\n\n- **作用：**借助进程的页表将逻辑地址转换为物理地址，也就是将逻辑地址中的页号转换为内存中的物理块号\n\n- 通常会在系统中设置一个==页表寄存器PTR==，存放页表在内存中的起始地址F和页表长度M。进程未执行时，==页表的始址和页表长度==（也就是页表有多少项）放在进程控制块PCB中，当进程被调度时，os内核会把它们放到页表寄存器中。\n\n- **地址变换过程：**\n\n    ![image-20220426190157556](https://s2.loli.net/2022/04/26/ceUhD6AbCLjO2xR.png)\n\n- ![image-20220426190052298](https://s2.loli.net/2022/04/26/gA7iu4MrpZRTPFf.png)\n\n    ​    \n\n- **例子：**\n\n    ![image-20220426190431148](https://s2.loli.net/2022/04/26/cbvfMPXd7yW89Qs.png)\n\n#### （2）具有快表的地址变换机构\n\n- **局部性原理：**\n\n    ![image-20220426191351742](https://s2.loli.net/2022/04/26/VUxWraSvYoB4Jhg.png)\n\n- **快表（TLB， translation look-aside buffer，联想寄存器）**：一种访问速度比内存快很多的高速缓冲存储器，用来存放当前访问的若干页表项，以加速地址变换的过程。与此对应，内存中的页表常称为**慢表**。\n\n- **引入快表后，地址的变换过程：**\n\n    ![image-20220426191704882](https://s2.loli.net/2022/04/26/S8IdibhkaMsR4BW.png)\n\n    ![image-20220426191721463](https://s2.loli.net/2022/04/26/8cIa4M9qDkFpbNm.png)\n\n    ---\n\n    > 当发生进程调度的时候，快表会invalid或者fflush，或者增加一个进程的标志，以防止命中错误\n\n> 由于成本关系，快表大小一般由64—1024个表项组成。\n>\n> 由于局部性原理，一般来说，快表的命中率可以达到80%~90%。\n>\n> ![image-20220426191925850](https://s2.loli.net/2022/04/26/slGYgA7d1MCbyvL.png)\n>\n> > ==有效内存访问时间：==\n> >\n> > <img src=\"https://s2.loli.net/2022/04/26/heXDntpmFlMWKsj.png\" alt=\"image-20220426212647995\" style=\"zoom:67%;\" />\n\n#### （3）基本地址变换机构和具有快表的地址变换机构的对比\n\n![image-20220426192036001](https://s2.loli.net/2022/04/26/jPJtQiqcYAU2IHD.png)\n\n### 5、两级页表\n\n- **单级页表中存在的问题：**\n\n    - 页表必须连续存放，因此当页表很大时，需要占用多个连续的页框\n    - 没有必要让整个页表常驻内存，因为进程在一段时间内可能只需要访问某几个特定的页面\n\n- 解决单级页表必须连续存放的问题：采用多级页表（==页目录表，外层页表，顶层页表）==\n\n- **两级页表的原理和地址结构**\n\n    ![image-20220426192645889](https://s2.loli.net/2022/04/26/2jpR47Q8aVzD1gE.png)\n\n    ![image-20220426192700866](https://s2.loli.net/2022/04/26/W4pJXv9qlIZ3VBw.png)\n\n- **如何实现地址变换**\n\n    ![image-20220426192838963](https://s2.loli.net/2022/04/26/edxUD4VpF2HsA8n.png)\n\n    > 也可以引入快表，以减少访存次数\n\n- **解决单级页表中不需要让整个页表常驻内存的问题：**\n\n    <img src=\"https://s2.loli.net/2022/04/26/p2avYgUiflN5FrV.png\" alt=\"image-20220426193011056\" style=\"zoom:80%;\" />\n\n- ==需要注意的几个细节==\n\n    ![image-20220426193150942](https://s2.loli.net/2022/04/26/4xwt1QhX8ZTLqID.png)\n\n    > 如果没有快表机构，则n级页表需要n+1次访存\n\n\n\n### 6、反向页表（Invert Page Table， IPT）\n\n- **思想**：为内存中的每一个**物理块**建立一个页表项并按照块号排序，每个页表项包含正在访问该页框的进程标识、页号以及特征位\n\n    > 整个系统只有一张表，每个物理内存的页只有一个条目对应\n\n- **作用**：完成主存页框到访问进程的页号即物理地址到逻辑地址的转换\n\n- **地址变换过程：**\n\n    <img src=\"https://s2.loli.net/2022/04/26/WQYzlCV81HUub2y.png\" alt=\"image-20220426205421650\" style=\"zoom:67%;\" />\n\n- **缺点：**\n\n    <img src=\"https://s2.loli.net/2022/04/26/I1FVZMurYnXgqDW.png\" alt=\"image-20220426205905801\" style=\"zoom:67%;\" />\n\n\n\n### 7、分页存储管理的保护与共享\n\n- **分页存储管理采用两种方式保护内存：**\n    - 地址越界保护：页表长度与逻辑地址中的页号比较\n    - 存取控制保护：在页表中增加保护位\n- **分页存储管理的共享方式**\n    - 数据共享：允许不同进程对共享的数据页用不同的页号来访问，即只需要页表指向共享的数据页框即可。\n    - 代码共享：由于共享代码页面内包含地址，不同逻辑空间若页号不同，则导致无法访问，因此必须赋予相同页号。\n\n## 6.5 基本分段存储管理\n\n![image-20220426194710516](https://s2.loli.net/2022/04/26/EUgOtpouZxdRrj7.png)\n\n> 与基本分页存储管理的最大区别：离散分配时所分配地址空间的基本单位不同\n\n### 1、分段的概念\n\n![image-20220426193521781](https://s2.loli.net/2022/04/26/6S8VgteFOHUaKGT.png)\n\n![image-20220426193535550](https://s2.loli.net/2022/04/26/KaqjebsJzuM8HyA.png)\n\n### 2、段表\n\n![image-20220426193632599](https://s2.loli.net/2022/04/26/upbHoCI6h7faYeZ.png)\n\n> 段表一般存放在内存\n\n### 3、地址变换机构\n\n![image-20220426193928129](https://s2.loli.net/2022/04/26/l9q2p3DKLEj6GrM.png)\n\n> 为了提高内存的访问速度，也可以使用快表\n\n### 4、分段、分页管理的对比\n\n![image-20220426194236685](https://s2.loli.net/2022/04/26/bs3XU8gmfHcN1Dt.png)\n\n<img src=\"https://s2.loli.net/2022/04/26/ywH4ZpnUKe9xPtS.png\" alt=\"image-20220426195041398\" style=\"zoom:67%;\" />\n\n![image-20220426194640929](https://s2.loli.net/2022/04/26/YRG4QD5itvZVHAN.png)\n\n![image-20220426194106414](https://s2.loli.net/2022/04/26/klur4s6xOcE871I.png)\n\n### 5、分段保护\n\n- **地址越界保护：**段号与段表长度的比较，段内位移与段长的比较\n- **存取控制保护：**设置存取权限，访问段时判断访问类型与存取权限是否相符\n\n\n\n## 6.6 段页式存储管理\n\n![image-20220426200531616](https://s2.loli.net/2022/04/26/Ja58EfCTXBvVmho.png)\n\n### 1、分页、分段的优缺点分析\n\n![image-20220426195201025](https://s2.loli.net/2022/04/26/AoFm2UpIqyGW54c.png)\n\n### 2、段页式存储管理：先分段后分页\n\n> 分段对用户可见，分页对用户不可见\n\n![image-20220426195338399](https://s2.loli.net/2022/04/26/JrxjkvDLqe67gi9.png)\n\n### 3、段页式管理的逻辑地址结构\n\n![image-20220426195806199](https://s2.loli.net/2022/04/26/nBUGbur8LSdHolX.png)\n\n### 4、段表和页表\n\n![image-20220426200023173](https://s2.loli.net/2022/04/26/YVDGOsEfQBhtPnl.png)\n\n> 一个进程对应一个段表，一个段又对应一个页表，因此一个进程可以对应多个页表\n\n### 5、地址变换机构\n\n![image-20220426200419461](https://s2.loli.net/2022/04/26/yCvbqgiJHwY7N4e.png)\n\n\n\n","slug":"六、主存储器管理","published":1,"updated":"2022-06-27T15:12:30.874Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4ww15sq0003nkskgk265y9q","content":"<h1 id=\"第六章-主存储器管理\"><a href=\"#第六章-主存储器管理\" class=\"headerlink\" title=\"第六章  主存储器管理\"></a>第六章  主存储器管理</h1><p><img data-src=\"https://s2.loli.net/2022/04/26/9zCRymrJVXKgWdp.png\" alt=\"image-20220426184538793\"></p>\n<h2 id=\"6-1-存储器管理的基本概念\"><a href=\"#6-1-存储器管理的基本概念\" class=\"headerlink\" title=\"6.1 存储器管理的基本概念\"></a>6.1 存储器管理的基本概念</h2><p><img data-src=\"https://s2.loli.net/2022/04/22/9uJisnzPHkCyhqf.png\" alt=\"image-20220422195823004\"></p>\n<h3 id=\"1、基本概念\"><a href=\"#1、基本概念\" class=\"headerlink\" title=\"1、基本概念\"></a>1、基本概念</h3><ul>\n<li><p>存储器的层次结构：</p>\n  <img data-src=\"https://s2.loli.net/2022/04/18/kBPG8J9SEaDzYq5.png\" alt=\"image-20220418230644829\" style=\"zoom:67%;\" />\n</li>\n<li><p>&#x3D;&#x3D;内存的概念与作用&#x3D;&#x3D;：内存是用于存放数据的硬件。程序执行时需要先放到内存中才能被CPU处理。</p>\n</li>\n<li><p>&#x3D;&#x3D;存储单元和地址&#x3D;&#x3D;：每个地址对应一个存储单元</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/04/22/RTVxmjzKpG9QhCs.png\" alt=\"image-20220422194032845\"></p>\n<blockquote>\n<p>按字节编址的意思是一个字节对应一个地址，而一个地址又对应一个存储单元，故一个存储单元是一个字节。</p>\n<p>1K &#x3D; 2^10^; 1M &#x3D; 2^20^;1G &#x3D; 2^30^B</p>\n</blockquote>\n</li>\n<li><p>主存储器分为两大部分：</p>\n<ul>\n<li>系统区：存放操作系统内核程序与数据结构，供操作系统使用</li>\n<li>用户区：存放应用程序与数据，往往被划分为一个或多个区域，供用户进程使用。</li>\n</ul>\n</li>\n<li><p>存储器管理的主要目标：为用户提供方便、安全和充分大的存储器，支持大型应用和系统程序及数据的使用。</p>\n</li>\n<li><p>&#x3D;&#x3D;主存储器管理的四个功能&#x3D;&#x3D;</p>\n<ul>\n<li>存储空间的分配和回收</li>\n<li>（存储器的）抽象与（地址）映射</li>\n<li>隔离与共享：进程对存储空间的独占式使用以及共享访问</li>\n<li>存储扩充：在逻辑上为用户提供一个比实际物理内存更大的存储空间</li>\n</ul>\n<p>  <img data-src=\"https://s2.loli.net/2022/04/22/wZlaXGmOqE3Rgnr.png\" alt=\"image-20220422201759192\"></p>\n</li>\n<li><p>&#x3D;&#x3D;逻辑地址：&#x3D;&#x3D;用户编程时所使用的地址。又称相对地址、虚地址。</p>\n<blockquote>\n<p>相对地址是指相对于进程在内存中的起始位置</p>\n</blockquote>\n</li>\n<li><p>地址空间：逻辑地址的集合。</p>\n</li>\n<li><p>&#x3D;&#x3D;物理地址：&#x3D;&#x3D;内存中的地址。又称绝对地址、实地址。</p>\n</li>\n<li><p>主存空间：物理地址的集合。</p>\n</li>\n<li><p>地址变换：将逻辑地址转换为物理地址。又称地址映射、重定位。</p>\n</li>\n</ul>\n<h3 id=\"2、程序的装入（三种方式）\"><a href=\"#2、程序的装入（三种方式）\" class=\"headerlink\" title=\"2、程序的装入（三种方式）\"></a>2、程序的装入（三种方式）</h3><blockquote>\n<p>为将一个用户源程序变为一个在内存中可执行的文件，通常要经历以下步骤：编译、链接、装入。 </p>\n<p><img data-src=\"https://s2.loli.net/2022/04/22/kSb8GL1XeHc4yZA.png\" alt=\"image-20220422194535038\"></p>\n</blockquote>\n<p>&#x3D;&#x3D;装入的三种方式：&#x3D;&#x3D;（用三种不同的方法完成从逻辑地址到物理地址的转换）绝对装入、静态重定位、动态重定位</p>\n<p><img data-src=\"https://s2.loli.net/2022/04/22/21KBG8SnQRJa3qA.png\" alt=\"image-20220422201910868\"></p>\n<hr>\n<p><img data-src=\"https://s2.loli.net/2022/04/22/BJuhFYnTjV1ftZq.png\" alt=\"image-20220422194810619\"></p>\n<p>特点：</p>\n<ul>\n<li>知道程序驻留在内存中的确定位置，编译之后代码中包含了程序的物理地址。</li>\n<li>装入模块之后，程序的逻辑地址与物理地址是完全相同的，不需要对程序和数据进行修改。</li>\n<li>只能将目标代码装入到内存中事先指定的位置，不适应多道程序环境的动态特性。</li>\n<li>通常在程序中采用符号地址，通过编译器，将符号地址转换为绝对地址</li>\n</ul>\n<hr>\n<p><img data-src=\"https://s2.loli.net/2022/04/22/xucXk1thRyiBHmq.png\" alt=\"image-20220422194854316\"></p>\n<p>特点：</p>\n<ul>\n<li>物理地址 &#x3D; 程序起始地址 + 逻辑地址</li>\n<li>地址变换通常是在装入时一次完成的，以后不再改变，故称为静态重定位</li>\n<li>不需硬件支持，且要求分配连续存储空间，但程序运行时不能在内存移动，难以实现数据与代码的共享</li>\n</ul>\n<hr>\n<p><img data-src=\"https://s2.loli.net/2022/04/22/wc1LaQNlAHX7Yev.png\" alt=\"image-20220422194951839\"></p>\n<blockquote>\n<p>多道程序中，重定位寄存器的内容存储在进程PCB中。当进程被调入时，重定位寄存器被重新设置，原有进程的重定位寄存器的内容随进程上下文切换而得到保护</p>\n</blockquote>\n<h3 id=\"3、程序的链接：（三种方式）\"><a href=\"#3、程序的链接：（三种方式）\" class=\"headerlink\" title=\"3、程序的链接：（三种方式）\"></a>3、程序的链接：（三种方式）</h3><p><img data-src=\"https://s2.loli.net/2022/04/22/MYpJXOCoErfDwQU.png\" alt=\"image-20220422195515438\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/04/22/E1V3ZHSMBhIiuUn.png\" alt=\"image-20220422195557231\"></p>\n<blockquote>\n<p>在装入目标模块时，如果发生一个外部模块调用，就会引起装入程序去寻找相应的外部目标模块，并将其装入内存，同时还要修改目标模块中的相对地址</p>\n</blockquote>\n<hr>\n<p><img data-src=\"https://s2.loli.net/2022/04/22/mdWYMIwtRxn7y8r.png\" alt=\"image-20220422195610600\"></p>\n<h3 id=\"4、内存保护\"><a href=\"#4、内存保护\" class=\"headerlink\" title=\"4、内存保护\"></a>4、内存保护</h3><p>概念：防止一个进程破坏操作系统或其他进程</p>\n<p>方法</p>\n<ul>\n<li><p><strong>界限存储器法：</strong>通过对每个进程设置一对界限寄存器来防止越界访问，达到存储保护的目的。两种实现方式：上下界寄存器、基址限长寄存器</p>\n</li>\n<li><p><strong>存储保护键：</strong>通过保护键匹配来判断存储访问方式是否合法。为每个存储块分配一个保护键，相当于一把锁；进入系统的每个作业赋予一个保护键，相当于一把钥匙。当作业运行时，检查钥匙和锁是否匹配，若二者匹配，则允许访问。否则发出保护性中断信号</p>\n</li>\n<li><p><strong>环保护机制</strong>：处理器状态分为多个环，分别具有不同的存储访问特权级，通常环的编号越小，特权级越高。</p>\n  <img data-src=\"https://s2.loli.net/2022/04/22/uzQVWwOtlcnBYG1.png\" alt=\"image-20220422200314969\" style=\"zoom:67%;\" />\n</li>\n<li><p><strong>访问权限</strong>：只读、只能执行…</p>\n</li>\n</ul>\n<h2 id=\"6-2-连续分配管理方式\"><a href=\"#6-2-连续分配管理方式\" class=\"headerlink\" title=\"6.2 连续分配管理方式\"></a>6.2 连续分配管理方式</h2><blockquote>\n<p>连续分配：指为用户进程分配的必须是一个连续的内存空间</p>\n</blockquote>\n<p><img data-src=\"https://s2.loli.net/2022/04/22/8cJ1SPaBdwxyoNH.png\" alt=\"image-20220422212711179\"></p>\n<h3 id=\"1、单一连续分配\"><a href=\"#1、单一连续分配\" class=\"headerlink\" title=\"1、单一连续分配\"></a>1、单一连续分配</h3><p><img data-src=\"https://s2.loli.net/2022/04/22/Uk51jlfVH7PoCwc.png\" alt=\"image-20220422212019478\"></p>\n<h3 id=\"2、固定分区分配\"><a href=\"#2、固定分区分配\" class=\"headerlink\" title=\"2、固定分区分配\"></a>2、固定分区分配</h3><p><img data-src=\"https://s2.loli.net/2022/04/22/q6tSomYnjTP2Mb7.png\" alt=\"image-20220422212047775\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/04/22/IDFb1U9ugJECczh.png\" alt=\"image-20220422212113844\"></p>\n<h3 id=\"3、动态分区分配及内外部碎片\"><a href=\"#3、动态分区分配及内外部碎片\" class=\"headerlink\" title=\"3、动态分区分配及内外部碎片\"></a>3、动态分区分配及内外部碎片</h3><p><img data-src=\"https://s2.loli.net/2022/04/22/w18xeFYEnylipuZ.png\" alt=\"image-20220422212138065\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/04/22/v5Sokj4dAZJFr6I.png\" alt=\"image-20220422212158090\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/04/22/Ybwf3uDgi2MUls4.png\" alt=\"image-20220422212228592\"></p>\n<blockquote>\n<p>动态重定位装入方式，需要修改进程的起始地址，即重定位寄存器</p>\n</blockquote>\n<h3 id=\"4、动态分区分配算法\"><a href=\"#4、动态分区分配算法\" class=\"headerlink\" title=\"4、动态分区分配算法\"></a>4、动态分区分配算法</h3><p><img data-src=\"https://s2.loli.net/2022/04/22/RHy9NQuJXAzM7oP.png\" alt=\"image-20220422215829014\"></p>\n<blockquote>\n<p>首次适应和邻近适应一般都不需要对空闲分区队列重新排序，因为虽然空闲分区的大小变小了，但它在内存中的位置并没有发生变化，即在分区队列中的位置一般不会发生改变。</p>\n<p>首次适应算法的缺点：低地址端有许多小空闲分区时会增加查找开销。</p>\n<p>首次适应和最佳适应在执行时间和利用空间方面都好于最坏适应。</p>\n<p>首次适应和最佳适应在利用空间方面能力相当，但首次适应更快</p>\n</blockquote>\n<p><strong>扩展：可重定位分区分配技术</strong></p>\n<img data-src=\"https://s2.loli.net/2022/04/22/IBYsaClkRcHoE9u.png\" alt=\"image-20220422221246833\" style=\"zoom:67%;\" />\n\n<h3 id=\"5、伙伴系统（Knuth，-1973）\"><a href=\"#5、伙伴系统（Knuth，-1973）\" class=\"headerlink\" title=\"5、伙伴系统（Knuth， 1973）\"></a>5、伙伴系统（Knuth， 1973）</h3><ul>\n<li><p><strong>算法思想：</strong>伙伴系统采用伙伴算法对空闲内存进行管理。该方法通过不断以1&#x2F;2的形式来分割大的空闲存储块，从而获得小的空闲存储块。当内存块释放时，应尽可能合并空闲块</p>\n</li>\n<li><p><strong>如何实现：</strong></p>\n<ul>\n<li><p><strong>内存分配：</strong>设系统初始时可供分配的空间为2^m^个单元。当进程申请大小为n的空间时，设2^i-1^&lt;n≤2^i^，则为进程分配大小为2^i^的空间。如系统不存在大小为2^i^的空闲块，则查找系统中是否存在大于2^i^的空闲块2^i+1^, 2^i+2^…，若找到则对其进行对半划分，直到产生大小为2^i^的空闲块为止。</p>\n</li>\n<li><p><strong>内存回收：</strong>当进程释放存储空间时，应检查释放块的伙伴是否空闲，若空闲则合并。如果这个较大的空闲块也存在空闲伙伴，此时也应合并。重复上述过程，直至没有可以合并的伙伴为止。</p>\n<blockquote>\n<p>伙伴：当一个块被分成两个大小相等的块时，这两个块称为伙伴</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p><strong>伙伴地址公式：</strong></p>\n  <img data-src=\"https://s2.loli.net/2022/04/22/L7U5PkTdwH3OYEI.png\" alt=\"image-20220422222038028\" style=\"zoom:67%;\" />\n</li>\n<li><p><strong>例子：</strong></p>\n  <img data-src=\"https://s2.loli.net/2022/04/22/3slKQh9UVF61GNY.png\" alt=\"image-20220422222207775\" style=\"zoom:67%;\" />\n\n  <img data-src=\"https://s2.loli.net/2022/04/22/6rAveaZuP2FtsGl.png\" alt=\"image-20220422222218692\" style=\"zoom:67%;\" />\n</li>\n<li><p>伙伴系统可以用<strong>二叉树</strong>来表示</p>\n  <img data-src=\"https://s2.loli.net/2022/04/22/5WgtNnbmEVT7U2q.png\" alt=\"image-20220422222353326\" style=\"zoom:50%;\" />\n</li>\n<li><p><strong>伙伴系统的优缺点：</strong></p>\n<ul>\n<li>适合于小数据量的内存管理（大数据量的内存管理采用段页式的分配管理）</li>\n<li>分配和回收时需要对伙伴进行拆分和合并；存储空间有浪费</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"6-3-内存空间的扩充—-覆盖与交换技术\"><a href=\"#6-3-内存空间的扩充—-覆盖与交换技术\" class=\"headerlink\" title=\"6.3 内存空间的扩充—-覆盖与交换技术\"></a>6.3 内存空间的扩充—-覆盖与交换技术</h2><p><img data-src=\"https://s2.loli.net/2022/04/22/Birx7bMAGERwJ9t.png\" alt=\"image-20220422204051322\"></p>\n<h3 id=\"1、覆盖技术：\"><a href=\"#1、覆盖技术：\" class=\"headerlink\" title=\"1、覆盖技术：\"></a>1、覆盖技术：</h3><p><img data-src=\"https://s2.loli.net/2022/04/22/Alw9ZgyxRfj8Kem.png\" alt=\"image-20220422203902006\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/04/22/1fzUj6pA2xSyuPr.png\" alt=\"image-20220422203914236\"></p>\n<blockquote>\n<p>可以理解为A先调用B再调用C。覆盖区的大小由覆盖段中最大的覆盖决定。</p>\n</blockquote>\n<h3 id=\"2、交换技术\"><a href=\"#2、交换技术\" class=\"headerlink\" title=\"2、交换技术\"></a>2、交换技术</h3><p><img data-src=\"https://s2.loli.net/2022/04/22/5zmfZlBMkPJbXIC.png\" alt=\"image-20220422203956311\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/04/22/o6CZmg17Vk9DtqN.png\" alt=\"image-20220422204018912\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/04/22/3mWqcjL49PvEoMu.png\" alt=\"image-20220422204034668\"></p>\n<h3 id=\"3、覆盖技术与交换技术的区别\"><a href=\"#3、覆盖技术与交换技术的区别\" class=\"headerlink\" title=\"3、覆盖技术与交换技术的区别\"></a>3、覆盖技术与交换技术的区别</h3><ul>\n<li>由谁完成：交换技术由操作系统完成；而覆盖技术由程序员给出作业各部分之间的覆盖结构，并清楚系统的存储结构</li>\n<li>交换技术主要在不同作业之间进行，而覆盖技术是在同一个作业之间进行</li>\n<li>覆盖技术主要用于早期操作系统，而交换技术在现代操作系统中仍然在使用</li>\n</ul>\n<hr>\n<h2 id=\"非连续分配管理方式\"><a href=\"#非连续分配管理方式\" class=\"headerlink\" title=\"非连续分配管理方式\"></a>非连续分配管理方式</h2><h2 id=\"6-4-基本分页存储管理\"><a href=\"#6-4-基本分页存储管理\" class=\"headerlink\" title=\"6.4 基本分页存储管理\"></a>6.4 基本分页存储管理</h2><p><img data-src=\"https://s2.loli.net/2022/04/26/shWHLjUf6P3EOMn.png\" alt=\"image-20220426185513138\"></p>\n<ul>\n<li><p><strong>思想：</strong>把内存分成一个个相等的内存块，再按照页面大小把进程拆分成一个个小部分</p>\n<blockquote>\n<p>👉&#x3D;&#x3D;页式管理中地址是一维的&#x3D;&#x3D;，只要给出一个逻辑地址，系统就可以自动地算出页号、页内偏移量两个部分，不需要显式地告诉系统这个逻辑地址中，页内偏移量占多少位</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"1、分页存储管理的基本概念与实现思想\"><a href=\"#1、分页存储管理的基本概念与实现思想\" class=\"headerlink\" title=\"1、分页存储管理的基本概念与实现思想\"></a>1、分页存储管理的基本概念与实现思想</h3><p><img data-src=\"https://s2.loli.net/2022/04/26/6jOa9wRxq5kZpeE.png\" alt=\"image-20220426184900709\"></p>\n<blockquote>\n<p>页框：page frame</p>\n</blockquote>\n<h3 id=\"2、分页的逻辑地址结构\"><a href=\"#2、分页的逻辑地址结构\" class=\"headerlink\" title=\"2、分页的逻辑地址结构\"></a>2、分页的逻辑地址结构</h3><p><img data-src=\"https://s2.loli.net/2022/04/26/fgxcYj4lD6J5t7Z.png\" alt=\"image-20220426185131448\"></p>\n<blockquote>\n<p>为了方便计算页号和页内偏移量，页面大小通常为2的整数幂，一般在512B到64KB之间</p>\n</blockquote>\n<h3 id=\"3、页表机制及其相关技术\"><a href=\"#3、页表机制及其相关技术\" class=\"headerlink\" title=\"3、页表机制及其相关技术\"></a>3、页表机制及其相关技术</h3><h4 id=\"（1）页表\"><a href=\"#（1）页表\" class=\"headerlink\" title=\"（1）页表\"></a>（1）页表</h4><p><img data-src=\"https://s2.loli.net/2022/04/26/1Ue85KMBbnET3ug.png\" alt=\"image-20220426185341689\"></p>\n<blockquote>\n<p>页号是隐含在索引中的。且进程页表通常是装在连续的内存块中的。</p>\n<p>为了方便页表的查询，常常会让一个页表项占更多的字节，使得每个页面恰好可以装得下整数个页表项（如页面大小为4KB，内存块号需要20位，但页表项的大小为4B，这样一个页框就可以存放1K个页表项）。多余的空间可以用来存放别的东西。</p>\n<p>不同的页号可能对应相同的块号，以实现内存共享。</p>\n<p>页表一般存放在内存中，也可以在页表中设置存取控制字段，以实现存储保护。</p>\n</blockquote>\n<hr>\n<h4 id=\"（2）存储分块表\"><a href=\"#（2）存储分块表\" class=\"headerlink\" title=\"（2）存储分块表\"></a>（2）存储分块表</h4><ul>\n<li><p><strong>作用</strong>：记录内存中各物理块的使用情况及未分配物理块总数</p>\n</li>\n<li><p><strong>表示方法：</strong>位示图或者空闲存储块链</p>\n<ul>\n<li><p><strong>位示图：</strong>利用二进制的一位表示一个物理块的状态，1表示已分配，0表示未分配。所有物理块状态位的集合构成位示图。</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/04/26/DmTfiFCbVOxh7Wc.png\" alt=\"image-20220426202759287\"></p>\n<blockquote>\n<p>位示图占用的存储空间为：物理块数&#x2F;8（字节）</p>\n</blockquote>\n</li>\n<li><p><strong>空闲存储块链：</strong>将所有的空闲存储块用链表链接起来，利用空闲物理块中的单元存放指向下一个物理块的指针。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"（3）存储空间的分配和回收：\"><a href=\"#（3）存储空间的分配和回收：\" class=\"headerlink\" title=\"（3）存储空间的分配和回收：\"></a>（3）存储空间的分配和回收：</h4><ul>\n<li><p><strong>页面分配</strong>：计算进程所需页面数，然后在请求表中登记进程号、请求页面数等。如存储分块表中有足够的空闲块可供进程使用，则在系统中取得页表始址，并在页表中登记页号及其对应的物理块号，否则无法分配。</p>\n</li>\n<li><p><strong>页面回收</strong>：将存储分块表中相应的物理块改为未分配，或将回收块加入到空闲存储块链中，并释放页表，修改请求表中的页表始址及状态。</p>\n<p>  ​</p>\n</li>\n</ul>\n<h3 id=\"4、地址变换机构\"><a href=\"#4、地址变换机构\" class=\"headerlink\" title=\"4、地址变换机构\"></a>4、地址变换机构</h3><h4 id=\"（1）基本地址变换机构\"><a href=\"#（1）基本地址变换机构\" class=\"headerlink\" title=\"（1）基本地址变换机构\"></a>（1）基本地址变换机构</h4><p><img data-src=\"https://s2.loli.net/2022/04/26/LI2TRfFBOoytP73.png\" alt=\"image-20220426191039460\"></p>\n<ul>\n<li><p><strong>概念：</strong>用于实现逻辑地址到物理地址转换的一组硬件机构</p>\n</li>\n<li><p><strong>作用：</strong>借助进程的页表将逻辑地址转换为物理地址，也就是将逻辑地址中的页号转换为内存中的物理块号</p>\n</li>\n<li><p>通常会在系统中设置一个&#x3D;&#x3D;页表寄存器PTR&#x3D;&#x3D;，存放页表在内存中的起始地址F和页表长度M。进程未执行时，&#x3D;&#x3D;页表的始址和页表长度&#x3D;&#x3D;（也就是页表有多少项）放在进程控制块PCB中，当进程被调度时，os内核会把它们放到页表寄存器中。</p>\n</li>\n<li><p><strong>地址变换过程：</strong></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/04/26/ceUhD6AbCLjO2xR.png\" alt=\"image-20220426190157556\"></p>\n</li>\n<li><p><img data-src=\"https://s2.loli.net/2022/04/26/gA7iu4MrpZRTPFf.png\" alt=\"image-20220426190052298\"></p>\n<p>  ​    </p>\n</li>\n<li><p><strong>例子：</strong></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/04/26/cbvfMPXd7yW89Qs.png\" alt=\"image-20220426190431148\"></p>\n</li>\n</ul>\n<h4 id=\"（2）具有快表的地址变换机构\"><a href=\"#（2）具有快表的地址变换机构\" class=\"headerlink\" title=\"（2）具有快表的地址变换机构\"></a>（2）具有快表的地址变换机构</h4><ul>\n<li><p><strong>局部性原理：</strong></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/04/26/VUxWraSvYoB4Jhg.png\" alt=\"image-20220426191351742\"></p>\n</li>\n<li><p><strong>快表（TLB， translation look-aside buffer，联想寄存器）</strong>：一种访问速度比内存快很多的高速缓冲存储器，用来存放当前访问的若干页表项，以加速地址变换的过程。与此对应，内存中的页表常称为<strong>慢表</strong>。</p>\n</li>\n<li><p><strong>引入快表后，地址的变换过程：</strong></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/04/26/S8IdibhkaMsR4BW.png\" alt=\"image-20220426191704882\"></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/04/26/8cIa4M9qDkFpbNm.png\" alt=\"image-20220426191721463\"></p>\n<hr>\n<blockquote>\n<p>当发生进程调度的时候，快表会invalid或者fflush，或者增加一个进程的标志，以防止命中错误</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>由于成本关系，快表大小一般由64—1024个表项组成。</p>\n<p>由于局部性原理，一般来说，快表的命中率可以达到80%~90%。</p>\n<p><img data-src=\"https://s2.loli.net/2022/04/26/slGYgA7d1MCbyvL.png\" alt=\"image-20220426191925850\"></p>\n<blockquote>\n<p>&#x3D;&#x3D;有效内存访问时间：&#x3D;&#x3D;</p>\n<img data-src=\"https://s2.loli.net/2022/04/26/heXDntpmFlMWKsj.png\" alt=\"image-20220426212647995\" style=\"zoom:67%;\" />\n</blockquote>\n</blockquote>\n<h4 id=\"（3）基本地址变换机构和具有快表的地址变换机构的对比\"><a href=\"#（3）基本地址变换机构和具有快表的地址变换机构的对比\" class=\"headerlink\" title=\"（3）基本地址变换机构和具有快表的地址变换机构的对比\"></a>（3）基本地址变换机构和具有快表的地址变换机构的对比</h4><p><img data-src=\"https://s2.loli.net/2022/04/26/jPJtQiqcYAU2IHD.png\" alt=\"image-20220426192036001\"></p>\n<h3 id=\"5、两级页表\"><a href=\"#5、两级页表\" class=\"headerlink\" title=\"5、两级页表\"></a>5、两级页表</h3><ul>\n<li><p><strong>单级页表中存在的问题：</strong></p>\n<ul>\n<li>页表必须连续存放，因此当页表很大时，需要占用多个连续的页框</li>\n<li>没有必要让整个页表常驻内存，因为进程在一段时间内可能只需要访问某几个特定的页面</li>\n</ul>\n</li>\n<li><p>解决单级页表必须连续存放的问题：采用多级页表（&#x3D;&#x3D;页目录表，外层页表，顶层页表）&#x3D;&#x3D;</p>\n</li>\n<li><p><strong>两级页表的原理和地址结构</strong></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/04/26/2jpR47Q8aVzD1gE.png\" alt=\"image-20220426192645889\"></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/04/26/W4pJXv9qlIZ3VBw.png\" alt=\"image-20220426192700866\"></p>\n</li>\n<li><p><strong>如何实现地址变换</strong></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/04/26/edxUD4VpF2HsA8n.png\" alt=\"image-20220426192838963\"></p>\n<blockquote>\n<p>也可以引入快表，以减少访存次数</p>\n</blockquote>\n</li>\n<li><p><strong>解决单级页表中不需要让整个页表常驻内存的问题：</strong></p>\n  <img data-src=\"https://s2.loli.net/2022/04/26/p2avYgUiflN5FrV.png\" alt=\"image-20220426193011056\" style=\"zoom:80%;\" />\n</li>\n<li><p>&#x3D;&#x3D;需要注意的几个细节&#x3D;&#x3D;</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/04/26/4xwt1QhX8ZTLqID.png\" alt=\"image-20220426193150942\"></p>\n<blockquote>\n<p>如果没有快表机构，则n级页表需要n+1次访存</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"6、反向页表（Invert-Page-Table，-IPT）\"><a href=\"#6、反向页表（Invert-Page-Table，-IPT）\" class=\"headerlink\" title=\"6、反向页表（Invert Page Table， IPT）\"></a>6、反向页表（Invert Page Table， IPT）</h3><ul>\n<li><p><strong>思想</strong>：为内存中的每一个<strong>物理块</strong>建立一个页表项并按照块号排序，每个页表项包含正在访问该页框的进程标识、页号以及特征位</p>\n<blockquote>\n<p>整个系统只有一张表，每个物理内存的页只有一个条目对应</p>\n</blockquote>\n</li>\n<li><p><strong>作用</strong>：完成主存页框到访问进程的页号即物理地址到逻辑地址的转换</p>\n</li>\n<li><p><strong>地址变换过程：</strong></p>\n  <img data-src=\"https://s2.loli.net/2022/04/26/WQYzlCV81HUub2y.png\" alt=\"image-20220426205421650\" style=\"zoom:67%;\" />\n</li>\n<li><p><strong>缺点：</strong></p>\n  <img data-src=\"https://s2.loli.net/2022/04/26/I1FVZMurYnXgqDW.png\" alt=\"image-20220426205905801\" style=\"zoom:67%;\" /></li>\n</ul>\n<h3 id=\"7、分页存储管理的保护与共享\"><a href=\"#7、分页存储管理的保护与共享\" class=\"headerlink\" title=\"7、分页存储管理的保护与共享\"></a>7、分页存储管理的保护与共享</h3><ul>\n<li><strong>分页存储管理采用两种方式保护内存：</strong><ul>\n<li>地址越界保护：页表长度与逻辑地址中的页号比较</li>\n<li>存取控制保护：在页表中增加保护位</li>\n</ul>\n</li>\n<li><strong>分页存储管理的共享方式</strong><ul>\n<li>数据共享：允许不同进程对共享的数据页用不同的页号来访问，即只需要页表指向共享的数据页框即可。</li>\n<li>代码共享：由于共享代码页面内包含地址，不同逻辑空间若页号不同，则导致无法访问，因此必须赋予相同页号。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"6-5-基本分段存储管理\"><a href=\"#6-5-基本分段存储管理\" class=\"headerlink\" title=\"6.5 基本分段存储管理\"></a>6.5 基本分段存储管理</h2><p><img data-src=\"https://s2.loli.net/2022/04/26/EUgOtpouZxdRrj7.png\" alt=\"image-20220426194710516\"></p>\n<blockquote>\n<p>与基本分页存储管理的最大区别：离散分配时所分配地址空间的基本单位不同</p>\n</blockquote>\n<h3 id=\"1、分段的概念\"><a href=\"#1、分段的概念\" class=\"headerlink\" title=\"1、分段的概念\"></a>1、分段的概念</h3><p><img data-src=\"https://s2.loli.net/2022/04/26/6S8VgteFOHUaKGT.png\" alt=\"image-20220426193521781\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/04/26/KaqjebsJzuM8HyA.png\" alt=\"image-20220426193535550\"></p>\n<h3 id=\"2、段表\"><a href=\"#2、段表\" class=\"headerlink\" title=\"2、段表\"></a>2、段表</h3><p><img data-src=\"https://s2.loli.net/2022/04/26/upbHoCI6h7faYeZ.png\" alt=\"image-20220426193632599\"></p>\n<blockquote>\n<p>段表一般存放在内存</p>\n</blockquote>\n<h3 id=\"3、地址变换机构\"><a href=\"#3、地址变换机构\" class=\"headerlink\" title=\"3、地址变换机构\"></a>3、地址变换机构</h3><p><img data-src=\"https://s2.loli.net/2022/04/26/l9q2p3DKLEj6GrM.png\" alt=\"image-20220426193928129\"></p>\n<blockquote>\n<p>为了提高内存的访问速度，也可以使用快表</p>\n</blockquote>\n<h3 id=\"4、分段、分页管理的对比\"><a href=\"#4、分段、分页管理的对比\" class=\"headerlink\" title=\"4、分段、分页管理的对比\"></a>4、分段、分页管理的对比</h3><p><img data-src=\"https://s2.loli.net/2022/04/26/bs3XU8gmfHcN1Dt.png\" alt=\"image-20220426194236685\"></p>\n<img data-src=\"https://s2.loli.net/2022/04/26/ywH4ZpnUKe9xPtS.png\" alt=\"image-20220426195041398\" style=\"zoom:67%;\" />\n\n<p><img data-src=\"https://s2.loli.net/2022/04/26/YRG4QD5itvZVHAN.png\" alt=\"image-20220426194640929\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/04/26/klur4s6xOcE871I.png\" alt=\"image-20220426194106414\"></p>\n<h3 id=\"5、分段保护\"><a href=\"#5、分段保护\" class=\"headerlink\" title=\"5、分段保护\"></a>5、分段保护</h3><ul>\n<li><strong>地址越界保护：</strong>段号与段表长度的比较，段内位移与段长的比较</li>\n<li><strong>存取控制保护：</strong>设置存取权限，访问段时判断访问类型与存取权限是否相符</li>\n</ul>\n<h2 id=\"6-6-段页式存储管理\"><a href=\"#6-6-段页式存储管理\" class=\"headerlink\" title=\"6.6 段页式存储管理\"></a>6.6 段页式存储管理</h2><p><img data-src=\"https://s2.loli.net/2022/04/26/Ja58EfCTXBvVmho.png\" alt=\"image-20220426200531616\"></p>\n<h3 id=\"1、分页、分段的优缺点分析\"><a href=\"#1、分页、分段的优缺点分析\" class=\"headerlink\" title=\"1、分页、分段的优缺点分析\"></a>1、分页、分段的优缺点分析</h3><p><img data-src=\"https://s2.loli.net/2022/04/26/AoFm2UpIqyGW54c.png\" alt=\"image-20220426195201025\"></p>\n<h3 id=\"2、段页式存储管理：先分段后分页\"><a href=\"#2、段页式存储管理：先分段后分页\" class=\"headerlink\" title=\"2、段页式存储管理：先分段后分页\"></a>2、段页式存储管理：先分段后分页</h3><blockquote>\n<p>分段对用户可见，分页对用户不可见</p>\n</blockquote>\n<p><img data-src=\"https://s2.loli.net/2022/04/26/JrxjkvDLqe67gi9.png\" alt=\"image-20220426195338399\"></p>\n<h3 id=\"3、段页式管理的逻辑地址结构\"><a href=\"#3、段页式管理的逻辑地址结构\" class=\"headerlink\" title=\"3、段页式管理的逻辑地址结构\"></a>3、段页式管理的逻辑地址结构</h3><p><img data-src=\"https://s2.loli.net/2022/04/26/nBUGbur8LSdHolX.png\" alt=\"image-20220426195806199\"></p>\n<h3 id=\"4、段表和页表\"><a href=\"#4、段表和页表\" class=\"headerlink\" title=\"4、段表和页表\"></a>4、段表和页表</h3><p><img data-src=\"https://s2.loli.net/2022/04/26/YVDGOsEfQBhtPnl.png\" alt=\"image-20220426200023173\"></p>\n<blockquote>\n<p>一个进程对应一个段表，一个段又对应一个页表，因此一个进程可以对应多个页表</p>\n</blockquote>\n<h3 id=\"5、地址变换机构\"><a href=\"#5、地址变换机构\" class=\"headerlink\" title=\"5、地址变换机构\"></a>5、地址变换机构</h3><p><img data-src=\"https://s2.loli.net/2022/04/26/yCvbqgiJHwY7N4e.png\" alt=\"image-20220426200419461\"></p>\n","site":{"data":{"post-body-end":"<div>\n    \n</div>\n","styles":"body {\n  background: url(\"/images/background.png\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 100% 100%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.8);\n}\n.popup {\n  opacity: 0.8;\n}\n.post-block {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.comments {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.post {\n  margin-top: 60px;\n  padding: 20px;\n  margin-bottom: 60px;\n  -webkit-box-shadow: 0 0 0px #788072;\n  -moz-box-shadow: 0 0 0px rgba(202,203,204,0.5);\n}\n.post-button .btn {\n  color: #555 !important;\n  background-color: #fff;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  border: none !important;\n  transition-property: unset;\n  padding: 0px 15px;\n}\n.post-button .btn:hover {\n  color: #fff !important;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  background-image: linear-gradient(90deg, #a166ab 0%, #ef4e7b 25%, #f37055 50%, #ef4e7b 75%, #a166ab 100%);\n}\n","variables":""}},"length":4713,"excerpt":"","more":"<h1 id=\"第六章-主存储器管理\"><a href=\"#第六章-主存储器管理\" class=\"headerlink\" title=\"第六章  主存储器管理\"></a>第六章  主存储器管理</h1><p><img data-src=\"https://s2.loli.net/2022/04/26/9zCRymrJVXKgWdp.png\" alt=\"image-20220426184538793\"></p>\n<h2 id=\"6-1-存储器管理的基本概念\"><a href=\"#6-1-存储器管理的基本概念\" class=\"headerlink\" title=\"6.1 存储器管理的基本概念\"></a>6.1 存储器管理的基本概念</h2><p><img data-src=\"https://s2.loli.net/2022/04/22/9uJisnzPHkCyhqf.png\" alt=\"image-20220422195823004\"></p>\n<h3 id=\"1、基本概念\"><a href=\"#1、基本概念\" class=\"headerlink\" title=\"1、基本概念\"></a>1、基本概念</h3><ul>\n<li><p>存储器的层次结构：</p>\n  <img data-src=\"https://s2.loli.net/2022/04/18/kBPG8J9SEaDzYq5.png\" alt=\"image-20220418230644829\" style=\"zoom:67%;\" />\n</li>\n<li><p>&#x3D;&#x3D;内存的概念与作用&#x3D;&#x3D;：内存是用于存放数据的硬件。程序执行时需要先放到内存中才能被CPU处理。</p>\n</li>\n<li><p>&#x3D;&#x3D;存储单元和地址&#x3D;&#x3D;：每个地址对应一个存储单元</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/04/22/RTVxmjzKpG9QhCs.png\" alt=\"image-20220422194032845\"></p>\n<blockquote>\n<p>按字节编址的意思是一个字节对应一个地址，而一个地址又对应一个存储单元，故一个存储单元是一个字节。</p>\n<p>1K &#x3D; 2^10^; 1M &#x3D; 2^20^;1G &#x3D; 2^30^B</p>\n</blockquote>\n</li>\n<li><p>主存储器分为两大部分：</p>\n<ul>\n<li>系统区：存放操作系统内核程序与数据结构，供操作系统使用</li>\n<li>用户区：存放应用程序与数据，往往被划分为一个或多个区域，供用户进程使用。</li>\n</ul>\n</li>\n<li><p>存储器管理的主要目标：为用户提供方便、安全和充分大的存储器，支持大型应用和系统程序及数据的使用。</p>\n</li>\n<li><p>&#x3D;&#x3D;主存储器管理的四个功能&#x3D;&#x3D;</p>\n<ul>\n<li>存储空间的分配和回收</li>\n<li>（存储器的）抽象与（地址）映射</li>\n<li>隔离与共享：进程对存储空间的独占式使用以及共享访问</li>\n<li>存储扩充：在逻辑上为用户提供一个比实际物理内存更大的存储空间</li>\n</ul>\n<p>  <img data-src=\"https://s2.loli.net/2022/04/22/wZlaXGmOqE3Rgnr.png\" alt=\"image-20220422201759192\"></p>\n</li>\n<li><p>&#x3D;&#x3D;逻辑地址：&#x3D;&#x3D;用户编程时所使用的地址。又称相对地址、虚地址。</p>\n<blockquote>\n<p>相对地址是指相对于进程在内存中的起始位置</p>\n</blockquote>\n</li>\n<li><p>地址空间：逻辑地址的集合。</p>\n</li>\n<li><p>&#x3D;&#x3D;物理地址：&#x3D;&#x3D;内存中的地址。又称绝对地址、实地址。</p>\n</li>\n<li><p>主存空间：物理地址的集合。</p>\n</li>\n<li><p>地址变换：将逻辑地址转换为物理地址。又称地址映射、重定位。</p>\n</li>\n</ul>\n<h3 id=\"2、程序的装入（三种方式）\"><a href=\"#2、程序的装入（三种方式）\" class=\"headerlink\" title=\"2、程序的装入（三种方式）\"></a>2、程序的装入（三种方式）</h3><blockquote>\n<p>为将一个用户源程序变为一个在内存中可执行的文件，通常要经历以下步骤：编译、链接、装入。 </p>\n<p><img data-src=\"https://s2.loli.net/2022/04/22/kSb8GL1XeHc4yZA.png\" alt=\"image-20220422194535038\"></p>\n</blockquote>\n<p>&#x3D;&#x3D;装入的三种方式：&#x3D;&#x3D;（用三种不同的方法完成从逻辑地址到物理地址的转换）绝对装入、静态重定位、动态重定位</p>\n<p><img data-src=\"https://s2.loli.net/2022/04/22/21KBG8SnQRJa3qA.png\" alt=\"image-20220422201910868\"></p>\n<hr>\n<p><img data-src=\"https://s2.loli.net/2022/04/22/BJuhFYnTjV1ftZq.png\" alt=\"image-20220422194810619\"></p>\n<p>特点：</p>\n<ul>\n<li>知道程序驻留在内存中的确定位置，编译之后代码中包含了程序的物理地址。</li>\n<li>装入模块之后，程序的逻辑地址与物理地址是完全相同的，不需要对程序和数据进行修改。</li>\n<li>只能将目标代码装入到内存中事先指定的位置，不适应多道程序环境的动态特性。</li>\n<li>通常在程序中采用符号地址，通过编译器，将符号地址转换为绝对地址</li>\n</ul>\n<hr>\n<p><img data-src=\"https://s2.loli.net/2022/04/22/xucXk1thRyiBHmq.png\" alt=\"image-20220422194854316\"></p>\n<p>特点：</p>\n<ul>\n<li>物理地址 &#x3D; 程序起始地址 + 逻辑地址</li>\n<li>地址变换通常是在装入时一次完成的，以后不再改变，故称为静态重定位</li>\n<li>不需硬件支持，且要求分配连续存储空间，但程序运行时不能在内存移动，难以实现数据与代码的共享</li>\n</ul>\n<hr>\n<p><img data-src=\"https://s2.loli.net/2022/04/22/wc1LaQNlAHX7Yev.png\" alt=\"image-20220422194951839\"></p>\n<blockquote>\n<p>多道程序中，重定位寄存器的内容存储在进程PCB中。当进程被调入时，重定位寄存器被重新设置，原有进程的重定位寄存器的内容随进程上下文切换而得到保护</p>\n</blockquote>\n<h3 id=\"3、程序的链接：（三种方式）\"><a href=\"#3、程序的链接：（三种方式）\" class=\"headerlink\" title=\"3、程序的链接：（三种方式）\"></a>3、程序的链接：（三种方式）</h3><p><img data-src=\"https://s2.loli.net/2022/04/22/MYpJXOCoErfDwQU.png\" alt=\"image-20220422195515438\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/04/22/E1V3ZHSMBhIiuUn.png\" alt=\"image-20220422195557231\"></p>\n<blockquote>\n<p>在装入目标模块时，如果发生一个外部模块调用，就会引起装入程序去寻找相应的外部目标模块，并将其装入内存，同时还要修改目标模块中的相对地址</p>\n</blockquote>\n<hr>\n<p><img data-src=\"https://s2.loli.net/2022/04/22/mdWYMIwtRxn7y8r.png\" alt=\"image-20220422195610600\"></p>\n<h3 id=\"4、内存保护\"><a href=\"#4、内存保护\" class=\"headerlink\" title=\"4、内存保护\"></a>4、内存保护</h3><p>概念：防止一个进程破坏操作系统或其他进程</p>\n<p>方法</p>\n<ul>\n<li><p><strong>界限存储器法：</strong>通过对每个进程设置一对界限寄存器来防止越界访问，达到存储保护的目的。两种实现方式：上下界寄存器、基址限长寄存器</p>\n</li>\n<li><p><strong>存储保护键：</strong>通过保护键匹配来判断存储访问方式是否合法。为每个存储块分配一个保护键，相当于一把锁；进入系统的每个作业赋予一个保护键，相当于一把钥匙。当作业运行时，检查钥匙和锁是否匹配，若二者匹配，则允许访问。否则发出保护性中断信号</p>\n</li>\n<li><p><strong>环保护机制</strong>：处理器状态分为多个环，分别具有不同的存储访问特权级，通常环的编号越小，特权级越高。</p>\n  <img data-src=\"https://s2.loli.net/2022/04/22/uzQVWwOtlcnBYG1.png\" alt=\"image-20220422200314969\" style=\"zoom:67%;\" />\n</li>\n<li><p><strong>访问权限</strong>：只读、只能执行…</p>\n</li>\n</ul>\n<h2 id=\"6-2-连续分配管理方式\"><a href=\"#6-2-连续分配管理方式\" class=\"headerlink\" title=\"6.2 连续分配管理方式\"></a>6.2 连续分配管理方式</h2><blockquote>\n<p>连续分配：指为用户进程分配的必须是一个连续的内存空间</p>\n</blockquote>\n<p><img data-src=\"https://s2.loli.net/2022/04/22/8cJ1SPaBdwxyoNH.png\" alt=\"image-20220422212711179\"></p>\n<h3 id=\"1、单一连续分配\"><a href=\"#1、单一连续分配\" class=\"headerlink\" title=\"1、单一连续分配\"></a>1、单一连续分配</h3><p><img data-src=\"https://s2.loli.net/2022/04/22/Uk51jlfVH7PoCwc.png\" alt=\"image-20220422212019478\"></p>\n<h3 id=\"2、固定分区分配\"><a href=\"#2、固定分区分配\" class=\"headerlink\" title=\"2、固定分区分配\"></a>2、固定分区分配</h3><p><img data-src=\"https://s2.loli.net/2022/04/22/q6tSomYnjTP2Mb7.png\" alt=\"image-20220422212047775\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/04/22/IDFb1U9ugJECczh.png\" alt=\"image-20220422212113844\"></p>\n<h3 id=\"3、动态分区分配及内外部碎片\"><a href=\"#3、动态分区分配及内外部碎片\" class=\"headerlink\" title=\"3、动态分区分配及内外部碎片\"></a>3、动态分区分配及内外部碎片</h3><p><img data-src=\"https://s2.loli.net/2022/04/22/w18xeFYEnylipuZ.png\" alt=\"image-20220422212138065\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/04/22/v5Sokj4dAZJFr6I.png\" alt=\"image-20220422212158090\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/04/22/Ybwf3uDgi2MUls4.png\" alt=\"image-20220422212228592\"></p>\n<blockquote>\n<p>动态重定位装入方式，需要修改进程的起始地址，即重定位寄存器</p>\n</blockquote>\n<h3 id=\"4、动态分区分配算法\"><a href=\"#4、动态分区分配算法\" class=\"headerlink\" title=\"4、动态分区分配算法\"></a>4、动态分区分配算法</h3><p><img data-src=\"https://s2.loli.net/2022/04/22/RHy9NQuJXAzM7oP.png\" alt=\"image-20220422215829014\"></p>\n<blockquote>\n<p>首次适应和邻近适应一般都不需要对空闲分区队列重新排序，因为虽然空闲分区的大小变小了，但它在内存中的位置并没有发生变化，即在分区队列中的位置一般不会发生改变。</p>\n<p>首次适应算法的缺点：低地址端有许多小空闲分区时会增加查找开销。</p>\n<p>首次适应和最佳适应在执行时间和利用空间方面都好于最坏适应。</p>\n<p>首次适应和最佳适应在利用空间方面能力相当，但首次适应更快</p>\n</blockquote>\n<p><strong>扩展：可重定位分区分配技术</strong></p>\n<img data-src=\"https://s2.loli.net/2022/04/22/IBYsaClkRcHoE9u.png\" alt=\"image-20220422221246833\" style=\"zoom:67%;\" />\n\n<h3 id=\"5、伙伴系统（Knuth，-1973）\"><a href=\"#5、伙伴系统（Knuth，-1973）\" class=\"headerlink\" title=\"5、伙伴系统（Knuth， 1973）\"></a>5、伙伴系统（Knuth， 1973）</h3><ul>\n<li><p><strong>算法思想：</strong>伙伴系统采用伙伴算法对空闲内存进行管理。该方法通过不断以1&#x2F;2的形式来分割大的空闲存储块，从而获得小的空闲存储块。当内存块释放时，应尽可能合并空闲块</p>\n</li>\n<li><p><strong>如何实现：</strong></p>\n<ul>\n<li><p><strong>内存分配：</strong>设系统初始时可供分配的空间为2^m^个单元。当进程申请大小为n的空间时，设2^i-1^&lt;n≤2^i^，则为进程分配大小为2^i^的空间。如系统不存在大小为2^i^的空闲块，则查找系统中是否存在大于2^i^的空闲块2^i+1^, 2^i+2^…，若找到则对其进行对半划分，直到产生大小为2^i^的空闲块为止。</p>\n</li>\n<li><p><strong>内存回收：</strong>当进程释放存储空间时，应检查释放块的伙伴是否空闲，若空闲则合并。如果这个较大的空闲块也存在空闲伙伴，此时也应合并。重复上述过程，直至没有可以合并的伙伴为止。</p>\n<blockquote>\n<p>伙伴：当一个块被分成两个大小相等的块时，这两个块称为伙伴</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p><strong>伙伴地址公式：</strong></p>\n  <img data-src=\"https://s2.loli.net/2022/04/22/L7U5PkTdwH3OYEI.png\" alt=\"image-20220422222038028\" style=\"zoom:67%;\" />\n</li>\n<li><p><strong>例子：</strong></p>\n  <img data-src=\"https://s2.loli.net/2022/04/22/3slKQh9UVF61GNY.png\" alt=\"image-20220422222207775\" style=\"zoom:67%;\" />\n\n  <img data-src=\"https://s2.loli.net/2022/04/22/6rAveaZuP2FtsGl.png\" alt=\"image-20220422222218692\" style=\"zoom:67%;\" />\n</li>\n<li><p>伙伴系统可以用<strong>二叉树</strong>来表示</p>\n  <img data-src=\"https://s2.loli.net/2022/04/22/5WgtNnbmEVT7U2q.png\" alt=\"image-20220422222353326\" style=\"zoom:50%;\" />\n</li>\n<li><p><strong>伙伴系统的优缺点：</strong></p>\n<ul>\n<li>适合于小数据量的内存管理（大数据量的内存管理采用段页式的分配管理）</li>\n<li>分配和回收时需要对伙伴进行拆分和合并；存储空间有浪费</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"6-3-内存空间的扩充—-覆盖与交换技术\"><a href=\"#6-3-内存空间的扩充—-覆盖与交换技术\" class=\"headerlink\" title=\"6.3 内存空间的扩充—-覆盖与交换技术\"></a>6.3 内存空间的扩充—-覆盖与交换技术</h2><p><img data-src=\"https://s2.loli.net/2022/04/22/Birx7bMAGERwJ9t.png\" alt=\"image-20220422204051322\"></p>\n<h3 id=\"1、覆盖技术：\"><a href=\"#1、覆盖技术：\" class=\"headerlink\" title=\"1、覆盖技术：\"></a>1、覆盖技术：</h3><p><img data-src=\"https://s2.loli.net/2022/04/22/Alw9ZgyxRfj8Kem.png\" alt=\"image-20220422203902006\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/04/22/1fzUj6pA2xSyuPr.png\" alt=\"image-20220422203914236\"></p>\n<blockquote>\n<p>可以理解为A先调用B再调用C。覆盖区的大小由覆盖段中最大的覆盖决定。</p>\n</blockquote>\n<h3 id=\"2、交换技术\"><a href=\"#2、交换技术\" class=\"headerlink\" title=\"2、交换技术\"></a>2、交换技术</h3><p><img data-src=\"https://s2.loli.net/2022/04/22/5zmfZlBMkPJbXIC.png\" alt=\"image-20220422203956311\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/04/22/o6CZmg17Vk9DtqN.png\" alt=\"image-20220422204018912\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/04/22/3mWqcjL49PvEoMu.png\" alt=\"image-20220422204034668\"></p>\n<h3 id=\"3、覆盖技术与交换技术的区别\"><a href=\"#3、覆盖技术与交换技术的区别\" class=\"headerlink\" title=\"3、覆盖技术与交换技术的区别\"></a>3、覆盖技术与交换技术的区别</h3><ul>\n<li>由谁完成：交换技术由操作系统完成；而覆盖技术由程序员给出作业各部分之间的覆盖结构，并清楚系统的存储结构</li>\n<li>交换技术主要在不同作业之间进行，而覆盖技术是在同一个作业之间进行</li>\n<li>覆盖技术主要用于早期操作系统，而交换技术在现代操作系统中仍然在使用</li>\n</ul>\n<hr>\n<h2 id=\"非连续分配管理方式\"><a href=\"#非连续分配管理方式\" class=\"headerlink\" title=\"非连续分配管理方式\"></a>非连续分配管理方式</h2><h2 id=\"6-4-基本分页存储管理\"><a href=\"#6-4-基本分页存储管理\" class=\"headerlink\" title=\"6.4 基本分页存储管理\"></a>6.4 基本分页存储管理</h2><p><img data-src=\"https://s2.loli.net/2022/04/26/shWHLjUf6P3EOMn.png\" alt=\"image-20220426185513138\"></p>\n<ul>\n<li><p><strong>思想：</strong>把内存分成一个个相等的内存块，再按照页面大小把进程拆分成一个个小部分</p>\n<blockquote>\n<p>👉&#x3D;&#x3D;页式管理中地址是一维的&#x3D;&#x3D;，只要给出一个逻辑地址，系统就可以自动地算出页号、页内偏移量两个部分，不需要显式地告诉系统这个逻辑地址中，页内偏移量占多少位</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"1、分页存储管理的基本概念与实现思想\"><a href=\"#1、分页存储管理的基本概念与实现思想\" class=\"headerlink\" title=\"1、分页存储管理的基本概念与实现思想\"></a>1、分页存储管理的基本概念与实现思想</h3><p><img data-src=\"https://s2.loli.net/2022/04/26/6jOa9wRxq5kZpeE.png\" alt=\"image-20220426184900709\"></p>\n<blockquote>\n<p>页框：page frame</p>\n</blockquote>\n<h3 id=\"2、分页的逻辑地址结构\"><a href=\"#2、分页的逻辑地址结构\" class=\"headerlink\" title=\"2、分页的逻辑地址结构\"></a>2、分页的逻辑地址结构</h3><p><img data-src=\"https://s2.loli.net/2022/04/26/fgxcYj4lD6J5t7Z.png\" alt=\"image-20220426185131448\"></p>\n<blockquote>\n<p>为了方便计算页号和页内偏移量，页面大小通常为2的整数幂，一般在512B到64KB之间</p>\n</blockquote>\n<h3 id=\"3、页表机制及其相关技术\"><a href=\"#3、页表机制及其相关技术\" class=\"headerlink\" title=\"3、页表机制及其相关技术\"></a>3、页表机制及其相关技术</h3><h4 id=\"（1）页表\"><a href=\"#（1）页表\" class=\"headerlink\" title=\"（1）页表\"></a>（1）页表</h4><p><img data-src=\"https://s2.loli.net/2022/04/26/1Ue85KMBbnET3ug.png\" alt=\"image-20220426185341689\"></p>\n<blockquote>\n<p>页号是隐含在索引中的。且进程页表通常是装在连续的内存块中的。</p>\n<p>为了方便页表的查询，常常会让一个页表项占更多的字节，使得每个页面恰好可以装得下整数个页表项（如页面大小为4KB，内存块号需要20位，但页表项的大小为4B，这样一个页框就可以存放1K个页表项）。多余的空间可以用来存放别的东西。</p>\n<p>不同的页号可能对应相同的块号，以实现内存共享。</p>\n<p>页表一般存放在内存中，也可以在页表中设置存取控制字段，以实现存储保护。</p>\n</blockquote>\n<hr>\n<h4 id=\"（2）存储分块表\"><a href=\"#（2）存储分块表\" class=\"headerlink\" title=\"（2）存储分块表\"></a>（2）存储分块表</h4><ul>\n<li><p><strong>作用</strong>：记录内存中各物理块的使用情况及未分配物理块总数</p>\n</li>\n<li><p><strong>表示方法：</strong>位示图或者空闲存储块链</p>\n<ul>\n<li><p><strong>位示图：</strong>利用二进制的一位表示一个物理块的状态，1表示已分配，0表示未分配。所有物理块状态位的集合构成位示图。</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/04/26/DmTfiFCbVOxh7Wc.png\" alt=\"image-20220426202759287\"></p>\n<blockquote>\n<p>位示图占用的存储空间为：物理块数&#x2F;8（字节）</p>\n</blockquote>\n</li>\n<li><p><strong>空闲存储块链：</strong>将所有的空闲存储块用链表链接起来，利用空闲物理块中的单元存放指向下一个物理块的指针。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"（3）存储空间的分配和回收：\"><a href=\"#（3）存储空间的分配和回收：\" class=\"headerlink\" title=\"（3）存储空间的分配和回收：\"></a>（3）存储空间的分配和回收：</h4><ul>\n<li><p><strong>页面分配</strong>：计算进程所需页面数，然后在请求表中登记进程号、请求页面数等。如存储分块表中有足够的空闲块可供进程使用，则在系统中取得页表始址，并在页表中登记页号及其对应的物理块号，否则无法分配。</p>\n</li>\n<li><p><strong>页面回收</strong>：将存储分块表中相应的物理块改为未分配，或将回收块加入到空闲存储块链中，并释放页表，修改请求表中的页表始址及状态。</p>\n<p>  ​</p>\n</li>\n</ul>\n<h3 id=\"4、地址变换机构\"><a href=\"#4、地址变换机构\" class=\"headerlink\" title=\"4、地址变换机构\"></a>4、地址变换机构</h3><h4 id=\"（1）基本地址变换机构\"><a href=\"#（1）基本地址变换机构\" class=\"headerlink\" title=\"（1）基本地址变换机构\"></a>（1）基本地址变换机构</h4><p><img data-src=\"https://s2.loli.net/2022/04/26/LI2TRfFBOoytP73.png\" alt=\"image-20220426191039460\"></p>\n<ul>\n<li><p><strong>概念：</strong>用于实现逻辑地址到物理地址转换的一组硬件机构</p>\n</li>\n<li><p><strong>作用：</strong>借助进程的页表将逻辑地址转换为物理地址，也就是将逻辑地址中的页号转换为内存中的物理块号</p>\n</li>\n<li><p>通常会在系统中设置一个&#x3D;&#x3D;页表寄存器PTR&#x3D;&#x3D;，存放页表在内存中的起始地址F和页表长度M。进程未执行时，&#x3D;&#x3D;页表的始址和页表长度&#x3D;&#x3D;（也就是页表有多少项）放在进程控制块PCB中，当进程被调度时，os内核会把它们放到页表寄存器中。</p>\n</li>\n<li><p><strong>地址变换过程：</strong></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/04/26/ceUhD6AbCLjO2xR.png\" alt=\"image-20220426190157556\"></p>\n</li>\n<li><p><img data-src=\"https://s2.loli.net/2022/04/26/gA7iu4MrpZRTPFf.png\" alt=\"image-20220426190052298\"></p>\n<p>  ​    </p>\n</li>\n<li><p><strong>例子：</strong></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/04/26/cbvfMPXd7yW89Qs.png\" alt=\"image-20220426190431148\"></p>\n</li>\n</ul>\n<h4 id=\"（2）具有快表的地址变换机构\"><a href=\"#（2）具有快表的地址变换机构\" class=\"headerlink\" title=\"（2）具有快表的地址变换机构\"></a>（2）具有快表的地址变换机构</h4><ul>\n<li><p><strong>局部性原理：</strong></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/04/26/VUxWraSvYoB4Jhg.png\" alt=\"image-20220426191351742\"></p>\n</li>\n<li><p><strong>快表（TLB， translation look-aside buffer，联想寄存器）</strong>：一种访问速度比内存快很多的高速缓冲存储器，用来存放当前访问的若干页表项，以加速地址变换的过程。与此对应，内存中的页表常称为<strong>慢表</strong>。</p>\n</li>\n<li><p><strong>引入快表后，地址的变换过程：</strong></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/04/26/S8IdibhkaMsR4BW.png\" alt=\"image-20220426191704882\"></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/04/26/8cIa4M9qDkFpbNm.png\" alt=\"image-20220426191721463\"></p>\n<hr>\n<blockquote>\n<p>当发生进程调度的时候，快表会invalid或者fflush，或者增加一个进程的标志，以防止命中错误</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>由于成本关系，快表大小一般由64—1024个表项组成。</p>\n<p>由于局部性原理，一般来说，快表的命中率可以达到80%~90%。</p>\n<p><img data-src=\"https://s2.loli.net/2022/04/26/slGYgA7d1MCbyvL.png\" alt=\"image-20220426191925850\"></p>\n<blockquote>\n<p>&#x3D;&#x3D;有效内存访问时间：&#x3D;&#x3D;</p>\n<img data-src=\"https://s2.loli.net/2022/04/26/heXDntpmFlMWKsj.png\" alt=\"image-20220426212647995\" style=\"zoom:67%;\" />\n</blockquote>\n</blockquote>\n<h4 id=\"（3）基本地址变换机构和具有快表的地址变换机构的对比\"><a href=\"#（3）基本地址变换机构和具有快表的地址变换机构的对比\" class=\"headerlink\" title=\"（3）基本地址变换机构和具有快表的地址变换机构的对比\"></a>（3）基本地址变换机构和具有快表的地址变换机构的对比</h4><p><img data-src=\"https://s2.loli.net/2022/04/26/jPJtQiqcYAU2IHD.png\" alt=\"image-20220426192036001\"></p>\n<h3 id=\"5、两级页表\"><a href=\"#5、两级页表\" class=\"headerlink\" title=\"5、两级页表\"></a>5、两级页表</h3><ul>\n<li><p><strong>单级页表中存在的问题：</strong></p>\n<ul>\n<li>页表必须连续存放，因此当页表很大时，需要占用多个连续的页框</li>\n<li>没有必要让整个页表常驻内存，因为进程在一段时间内可能只需要访问某几个特定的页面</li>\n</ul>\n</li>\n<li><p>解决单级页表必须连续存放的问题：采用多级页表（&#x3D;&#x3D;页目录表，外层页表，顶层页表）&#x3D;&#x3D;</p>\n</li>\n<li><p><strong>两级页表的原理和地址结构</strong></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/04/26/2jpR47Q8aVzD1gE.png\" alt=\"image-20220426192645889\"></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/04/26/W4pJXv9qlIZ3VBw.png\" alt=\"image-20220426192700866\"></p>\n</li>\n<li><p><strong>如何实现地址变换</strong></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/04/26/edxUD4VpF2HsA8n.png\" alt=\"image-20220426192838963\"></p>\n<blockquote>\n<p>也可以引入快表，以减少访存次数</p>\n</blockquote>\n</li>\n<li><p><strong>解决单级页表中不需要让整个页表常驻内存的问题：</strong></p>\n  <img data-src=\"https://s2.loli.net/2022/04/26/p2avYgUiflN5FrV.png\" alt=\"image-20220426193011056\" style=\"zoom:80%;\" />\n</li>\n<li><p>&#x3D;&#x3D;需要注意的几个细节&#x3D;&#x3D;</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/04/26/4xwt1QhX8ZTLqID.png\" alt=\"image-20220426193150942\"></p>\n<blockquote>\n<p>如果没有快表机构，则n级页表需要n+1次访存</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"6、反向页表（Invert-Page-Table，-IPT）\"><a href=\"#6、反向页表（Invert-Page-Table，-IPT）\" class=\"headerlink\" title=\"6、反向页表（Invert Page Table， IPT）\"></a>6、反向页表（Invert Page Table， IPT）</h3><ul>\n<li><p><strong>思想</strong>：为内存中的每一个<strong>物理块</strong>建立一个页表项并按照块号排序，每个页表项包含正在访问该页框的进程标识、页号以及特征位</p>\n<blockquote>\n<p>整个系统只有一张表，每个物理内存的页只有一个条目对应</p>\n</blockquote>\n</li>\n<li><p><strong>作用</strong>：完成主存页框到访问进程的页号即物理地址到逻辑地址的转换</p>\n</li>\n<li><p><strong>地址变换过程：</strong></p>\n  <img data-src=\"https://s2.loli.net/2022/04/26/WQYzlCV81HUub2y.png\" alt=\"image-20220426205421650\" style=\"zoom:67%;\" />\n</li>\n<li><p><strong>缺点：</strong></p>\n  <img data-src=\"https://s2.loli.net/2022/04/26/I1FVZMurYnXgqDW.png\" alt=\"image-20220426205905801\" style=\"zoom:67%;\" /></li>\n</ul>\n<h3 id=\"7、分页存储管理的保护与共享\"><a href=\"#7、分页存储管理的保护与共享\" class=\"headerlink\" title=\"7、分页存储管理的保护与共享\"></a>7、分页存储管理的保护与共享</h3><ul>\n<li><strong>分页存储管理采用两种方式保护内存：</strong><ul>\n<li>地址越界保护：页表长度与逻辑地址中的页号比较</li>\n<li>存取控制保护：在页表中增加保护位</li>\n</ul>\n</li>\n<li><strong>分页存储管理的共享方式</strong><ul>\n<li>数据共享：允许不同进程对共享的数据页用不同的页号来访问，即只需要页表指向共享的数据页框即可。</li>\n<li>代码共享：由于共享代码页面内包含地址，不同逻辑空间若页号不同，则导致无法访问，因此必须赋予相同页号。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"6-5-基本分段存储管理\"><a href=\"#6-5-基本分段存储管理\" class=\"headerlink\" title=\"6.5 基本分段存储管理\"></a>6.5 基本分段存储管理</h2><p><img data-src=\"https://s2.loli.net/2022/04/26/EUgOtpouZxdRrj7.png\" alt=\"image-20220426194710516\"></p>\n<blockquote>\n<p>与基本分页存储管理的最大区别：离散分配时所分配地址空间的基本单位不同</p>\n</blockquote>\n<h3 id=\"1、分段的概念\"><a href=\"#1、分段的概念\" class=\"headerlink\" title=\"1、分段的概念\"></a>1、分段的概念</h3><p><img data-src=\"https://s2.loli.net/2022/04/26/6S8VgteFOHUaKGT.png\" alt=\"image-20220426193521781\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/04/26/KaqjebsJzuM8HyA.png\" alt=\"image-20220426193535550\"></p>\n<h3 id=\"2、段表\"><a href=\"#2、段表\" class=\"headerlink\" title=\"2、段表\"></a>2、段表</h3><p><img data-src=\"https://s2.loli.net/2022/04/26/upbHoCI6h7faYeZ.png\" alt=\"image-20220426193632599\"></p>\n<blockquote>\n<p>段表一般存放在内存</p>\n</blockquote>\n<h3 id=\"3、地址变换机构\"><a href=\"#3、地址变换机构\" class=\"headerlink\" title=\"3、地址变换机构\"></a>3、地址变换机构</h3><p><img data-src=\"https://s2.loli.net/2022/04/26/l9q2p3DKLEj6GrM.png\" alt=\"image-20220426193928129\"></p>\n<blockquote>\n<p>为了提高内存的访问速度，也可以使用快表</p>\n</blockquote>\n<h3 id=\"4、分段、分页管理的对比\"><a href=\"#4、分段、分页管理的对比\" class=\"headerlink\" title=\"4、分段、分页管理的对比\"></a>4、分段、分页管理的对比</h3><p><img data-src=\"https://s2.loli.net/2022/04/26/bs3XU8gmfHcN1Dt.png\" alt=\"image-20220426194236685\"></p>\n<img data-src=\"https://s2.loli.net/2022/04/26/ywH4ZpnUKe9xPtS.png\" alt=\"image-20220426195041398\" style=\"zoom:67%;\" />\n\n<p><img data-src=\"https://s2.loli.net/2022/04/26/YRG4QD5itvZVHAN.png\" alt=\"image-20220426194640929\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/04/26/klur4s6xOcE871I.png\" alt=\"image-20220426194106414\"></p>\n<h3 id=\"5、分段保护\"><a href=\"#5、分段保护\" class=\"headerlink\" title=\"5、分段保护\"></a>5、分段保护</h3><ul>\n<li><strong>地址越界保护：</strong>段号与段表长度的比较，段内位移与段长的比较</li>\n<li><strong>存取控制保护：</strong>设置存取权限，访问段时判断访问类型与存取权限是否相符</li>\n</ul>\n<h2 id=\"6-6-段页式存储管理\"><a href=\"#6-6-段页式存储管理\" class=\"headerlink\" title=\"6.6 段页式存储管理\"></a>6.6 段页式存储管理</h2><p><img data-src=\"https://s2.loli.net/2022/04/26/Ja58EfCTXBvVmho.png\" alt=\"image-20220426200531616\"></p>\n<h3 id=\"1、分页、分段的优缺点分析\"><a href=\"#1、分页、分段的优缺点分析\" class=\"headerlink\" title=\"1、分页、分段的优缺点分析\"></a>1、分页、分段的优缺点分析</h3><p><img data-src=\"https://s2.loli.net/2022/04/26/AoFm2UpIqyGW54c.png\" alt=\"image-20220426195201025\"></p>\n<h3 id=\"2、段页式存储管理：先分段后分页\"><a href=\"#2、段页式存储管理：先分段后分页\" class=\"headerlink\" title=\"2、段页式存储管理：先分段后分页\"></a>2、段页式存储管理：先分段后分页</h3><blockquote>\n<p>分段对用户可见，分页对用户不可见</p>\n</blockquote>\n<p><img data-src=\"https://s2.loli.net/2022/04/26/JrxjkvDLqe67gi9.png\" alt=\"image-20220426195338399\"></p>\n<h3 id=\"3、段页式管理的逻辑地址结构\"><a href=\"#3、段页式管理的逻辑地址结构\" class=\"headerlink\" title=\"3、段页式管理的逻辑地址结构\"></a>3、段页式管理的逻辑地址结构</h3><p><img data-src=\"https://s2.loli.net/2022/04/26/nBUGbur8LSdHolX.png\" alt=\"image-20220426195806199\"></p>\n<h3 id=\"4、段表和页表\"><a href=\"#4、段表和页表\" class=\"headerlink\" title=\"4、段表和页表\"></a>4、段表和页表</h3><p><img data-src=\"https://s2.loli.net/2022/04/26/YVDGOsEfQBhtPnl.png\" alt=\"image-20220426200023173\"></p>\n<blockquote>\n<p>一个进程对应一个段表，一个段又对应一个页表，因此一个进程可以对应多个页表</p>\n</blockquote>\n<h3 id=\"5、地址变换机构\"><a href=\"#5、地址变换机构\" class=\"headerlink\" title=\"5、地址变换机构\"></a>5、地址变换机构</h3><p><img data-src=\"https://s2.loli.net/2022/04/26/yCvbqgiJHwY7N4e.png\" alt=\"image-20220426200419461\"></p>\n"},{"title":"四、进程同步","abbrlink":57284,"date":"2022-06-27T15:06:49.000Z","_content":"","source":"_posts/四、进程同步.md","raw":"---\ntitle: 四、进程同步\ntags:\n  - 操作系统\ncategory:\n  - 操作系统\nabbrlink: 57284\ndate: 2022-06-27 23:06:49\n---\n","slug":"四、进程同步","published":1,"updated":"2022-06-27T15:12:30.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4ww15ss0005nkskcmvmg5vn","content":"","site":{"data":{"post-body-end":"<div>\n    \n</div>\n","styles":"body {\n  background: url(\"/images/background.png\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 100% 100%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.8);\n}\n.popup {\n  opacity: 0.8;\n}\n.post-block {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.comments {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.post {\n  margin-top: 60px;\n  padding: 20px;\n  margin-bottom: 60px;\n  -webkit-box-shadow: 0 0 0px #788072;\n  -moz-box-shadow: 0 0 0px rgba(202,203,204,0.5);\n}\n.post-button .btn {\n  color: #555 !important;\n  background-color: #fff;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  border: none !important;\n  transition-property: unset;\n  padding: 0px 15px;\n}\n.post-button .btn:hover {\n  color: #fff !important;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  background-image: linear-gradient(90deg, #a166ab 0%, #ef4e7b 25%, #f37055 50%, #ef4e7b 75%, #a166ab 100%);\n}\n","variables":""}},"length":0,"excerpt":"","more":""},{"title":"编译原理复习笔记","abbrlink":47407,"date":"2022-06-27T15:10:22.000Z","_content":"\n# 第一章 引论 \n\n## ==1、编译和解释==\n\n- ==编译方式的特点：== \n    - 源程序的执行需要分阶段（目标程序是机器语言：编译、运行，目标程序是汇编语言：编译、汇编、运行）；  \n    - 生成了目标代码，且可多次执行\n    - *编译程序与具体的机器和语言有关* \n- ==解释方式的特点：==\n    - 更灵活、交互方便，节省空间\n    - 效率低\n- ==根本区别：== 在解释方式下，并不生成目标代码，而是直接执行源程序本身。\n- ==相同点：== 都需要进行词法、语法、语义分析\n\n![](https://s2.loli.net/2022/03/04/hSwesXfVIFjC4KA.jpg)\n\n## 2、编译程序的工作过程（词法分析、语法分析等）\n\n- ![](https://s2.loli.net/2022/03/04/xtsWrXz9lhBRA8Y.png)\n\n- ==词法分析== （或扫描）\n\n    - 词法分析器读入组成源程序的字符流，并将它们组织成有意义的词素的序列。对于每个词素，产生**词法单元** 作为输出\n    - *词法单元：<token-name, attribute-value>*，前者为抽象符号，后者为条目。eg.(id, 1)。分隔词素的空格会被词法分析器忽略掉。词法单元的名字常被称为终结符号，属性值是一个指向符号表的指针，符号表中包含了该词法单元的附加信息。\n\n- ==语法分析== （或解析）\n\n    - 语法分析器使用由词法分析器生成的各个词法单元的第一个分量来创建语法树（内部节点：运算，子节点：该运算的分量）\n\n- ==语义分析== \n\n    - 使用语法树和符号表中的信息来检查源程序是否和语言定义的语义一致（**静态语义检查** ，包括类型和运算合法性检查等）\n\n- ==中间代码生成== \n\n    - 中间表示形式应该易生成，易翻译\n\n- ==代码优化==\n\n    - 机器无关的代码优化步骤试图**改进中间代码** ，以便生成更好的目标代码\n\n- ==代码生成==\n\n    - 以源程序的中间表示形式作为输入，并把它映射到目标语言\n    - 目标指令可能是绝对指令代码，或可重新定位的指令代码或汇编指令代码\n\n- ==符号表的管理：== 符号表存放了整个源程序的信息，变量名及其属性。在各个阶段填入、查找\n\n- ==出错处理：== \n\n    - 语法错误：在词法分析或语法分析时检测出来\n    - 语义错误：在语义分析或运行时检测出来（因为语义分析是静态语义检查）\n\n- 在一个特定的实现中，多个步骤可以组合成一趟\n\n- 错误检查程序及表格管理程序贯穿始终\n\n- 词法分析、语法分析、语义分析与中间代码生成及部分代码优化工作为前端部分，==与目标机有关==的代码优化和目标代码生成等为后端部分\n\n- 示例：\n\n    ![](https://s2.loli.net/2022/03/04/CrcNty2m9qxSUEw.png)\n\n## 3、编译程序的结构\n\n![image-20220407152024793](https://s2.loli.net/2022/04/07/Jxk1GIf8CK2mUir.png)\n\n## 4、编译程序的组织方式及编译器的两个部分\n\n- **遍/趟：**一个编译程序在编译时刻把源程序或源程序的等价物（中间程序）从头到尾扫描一遍并转换成另一紧邻的等价物的全过程\n\n- **单遍扫描：**效率高但占用空间大，目标程序质量低\n\n- **多遍扫描：**效率低但占用空间小，目标程序质量高，便于多人合作开发\n\n- **分析部分（编译器的前端）**：主要由**与源语言有关但与目标机器无关** 的那些部分组成，词法分析、语法分析、语义分析、中间代码生成和部分代码优化工作\n\n    ![image-20220311113450229](https://s2.loli.net/2022/03/11/ZEPthWCzVc9xrnw.png)\n\n- **综合部分（编译器的后端）**：主要包括编译中**与目标机器有关** 的那些部分，如与目标机有关的代码优化和目标代码生成等。可以通过改变编译程序的后端来实现编译程序的移植。\n\n\n\n## 5、编译程序的构造\n\n- 构造编译程序可以用机器语言、汇编语言和高级语言\n\n- 高级语言的==自编译性== ：一个语言可以用来编写自己的编译程序\n\n    ![](https://s2.loli.net/2022/03/04/LTgXiu1rkyNEzRY.png)\n\n- **T型图**\n\n    ![image-20220515221623573](https://s2.loli.net/2022/05/15/yE3hexcragFKLtS.png)\n\n- **自展**\n\n    ![](https://s2.loli.net/2022/03/04/9RCBFkyrawcOHZg.png)\n\n- **编译的移植**\n\n    将一个机器（宿主机）上的一个具有自编译性的高级语言编译程序移植到另一个机器（目标机）上\n\n    ![](https://s2.loli.net/2022/03/04/gmYOAdLE9kyGCfD.png)\n\n    ![](https://s2.loli.net/2022/03/04/9MPFq1QcTsGdDtb.png)\n\n\n\n# 第二章 形式语言概论\n\n## 1、字母表与符号串\n\n### 字母表： \n\n符号(symbol)的非空有穷集，记为∑。\n\neg.Σ={a，b，……，y，z}，Σ={0， 1}，Σ={BEGIN， END}\n\n### 符号串： string \n\n字母表中的符号所组成的任何有穷序列，通常用小写的字母表示。==空串记为ε== 。\n\n- 符号串相等要看顺序。eg.ab ≠ ba\n\n- 符号串长度为符号串中符号的个数。 \n\n    |ε|=0，|BEGINEND| = 2\n\n- 符号串的子串（subsequence）:必须是连续的，如abc的子串不能是ac\n\n- ==空串是任何一个符号串的子串、前缀和后缀== 。\n\n- 符号串的连接：拼接，==ε是连接运算的单位元== ，εx = xε = x\n\n- 符号串的方幂(x^n^)：符号串与其自身的连接。x^0^  = ε，x^1^ = x，x^2^ = xx。\n\n- 符号串的逆（x^-1^ ）：符号串的倒置。 ε^-1^ = ε，(x^-1^)^-1^ = x，x = αβ，x^-1^ = β^-1^α^-1^ 。\n\n    eg.x = abcd, x^-1^ = dcba = (cd)^-1^ (ab)^-1^ \n\n- 符号串集合的和与积：\n\n    - A+B（或A∪B） ={w | w∈A，或 w ∈ B}\n\n    - A•B（或 AB）= { xy |x ∈ A, y ∈ B}\n\n        =={ε}是符号串集合乘积运算的零元== ，{ε}A = A{ε} = A\n\n- 符号串集合的方幂：A^0^  = {ε} ，A^1^ = A，A^2^ = AA\n\n    eg. A = {ab,cd}  A^0^ = {ε}，A^1^ = {ab, cd} , A^2^ = {abab, abcd, cdab, cdcd}\n\n- 符号串集合的闭包和正闭包：\n\n    - 闭包 ![](https://s2.loli.net/2022/03/04/V6R7w9UzrQtChun.png)\n    - 正闭包![](https://s2.loli.net/2022/03/04/9S5VGjzHpRnquJt.png)\n    - 闭包比正闭包多了一个ε\n\n### 语法描述： \n\n可以采用自然语言、语法图、BNF范式、EBNF\n\neg.标识符的语法描述：\n\nBNF范式（Backus-Naur Form） ：<标识符> ::= <字母>|<标识符><字母>|<标识符><数字> \n\n扩充的BNF（EBNF：Extended BNF） ：<标识符> ::= <字母> {<字母>|<数字>}\n\n## 2、文法及其分类（主要考2型和3型文法）\n\n### 概念：\n\n文法G是一个四元组，G[S]=（V~N~，V~T~，P，S）\n\nV~N~ ：非终结符号集\n\nV~T~： 终结符号集。V~T~ ∩V~N~ = ∅， V = V~T~ U V~N~\n\nP ：产生式(production)的有穷非空的集合，是文法的核心\n\nS：开始符号\n\n\n\n### **符号表示的约定：**\n\n- 终结符号：排在前面的小写字母abc、运算符号、标点符号、数字0~9、黑体字符串，如**id**\n- 非终结符号：排在前面的大写字母ABC、字母S（常用来表示开始符号）、小写且斜体的名字，如*expr*\n- 在字母表中排在后面的大写字母如XYZ表示终结符号或者非终结符号\n- 在字母表中排在后面的小写字母如uvwxyz表示终结符号串（可能为ε）\n- 小写的希腊字母，表示文法符号串（可能为ε）\n\n\n\n### 文法的分类\n\n- 区别：对产生式规则的形式上施加不同的限制。**从PSG到CSG到CFG到RG，限制逐渐增强，能力逐渐减弱**，生成的语言集逐渐减小，形式越简单，构造的自动机越易实现 。\n\n- ==下半区的左边都是单个的非终结符号== \n\n    ==上半区：不减为1型== \n\n    ![image.png](https://s2.loli.net/2022/03/04/FEHy5VxOUkXIvSa.png)\n\n| **0型文法 L~0~ （短语结构文法(phrase structure grammar, PSG)）** | α→β ，α∈V^+^  ，β∈V^*^             <br />亦即α→β ，α∈V* V~N~ V*<br />（必须要有一个非终结符号） ，β∈V * | 对应递归可枚举语言类，与图灵机（TM）能力相当，能力最强。     |\n| ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| **1型文法 L~1~ (上下文相关文法(context sensitive grammar,CSG)，长度增长文法)** | α→β ，==1≤ \\|α\\|≤\\|β\\|== （ 长度不减），α∈V^+^，β∈V^+^ <br />亦即α∈V* V~N~ V*（必须要有一个非终结符号） ，β∈V^+^ | 对应递归语言类，界限自动机**LBA**。静态语义处理。            |\n| **2型文法L~2~ ( 上下文无关文法(context free grammar,CFG))**  | A→β ，A∈V~N~ （==A是单个非终结符号== ，长度为1），β∈V^+^ 。 扩充的2型文法：A→β ，A∈V~N~，β∈V* | 对应上下文无关语言类，用于定义程序设计语言的**语法规则**。下推自动机**PDA**（==栈==）。 |\n| **3型文法L~3~ ( 正则文法(regular grammar ,RG)、正规文法)**   | A→a 或 A→aB , A,B∈V~N~ ，a∈V~T~ （右线性文法的一种情况）。<br />==左线性文法：== A→a或A→Ba  , A,B∈V~N~ ，a∈V~T~ ^*^ ； <br />==右线性文法：== A→a 或 A→aB , A,B∈V~N~ ，**a∈V~T~ ^*^** 。这3种共同构成3型文法 | 对应正规语言类，用于描述程序设计语言的**词法规则**。对应于**FSA**（有限状态自动机）。==3型没有记忆功能== ，要记也是记它自己，例如A->aA |\n\n> 在写正规文法时，可以从左往右考虑，一个非终结符号表示一个字符，然后把下一个字符交给下一个非终结符号表示\n\n> 如果要有记忆功能，可以用栈作为记忆装置（==下推自动机==）。如识别aaabbb，匹配一个b就弹出一个a，如果最终栈底的终结符号不能和符号串末尾的终结符号匹配的话，则报错。\n\n> 正规文法不能出现$\\varepsilon$\n\n**例子：**\n\n![image-20220310224157836](https://s2.loli.net/2022/03/10/wOAmUG4D3QTrhcZ.png)\n\n![image-20220310224629051](https://s2.loli.net/2022/03/10/1JOq2LHtpFAhao5.png)\n\n-----------\n\n\n\n==文法的记忆功能：== 精简版的括号配对问题。记住左右两边有几个配对的括号。**3型文法没有记忆功能**，因为它的非终结符号只能在一侧，无法记忆左右两边的一对。**2型文法可以记忆两个**，即左右两边的一对，如S→aSb，故2型文法可以用来表示a^n^b^n^ 。但2型文法的左边是单个的非终结符号，故不能记忆超过两个。**1型文法可以记忆三个**，故1型文法可以用来表示a^n^b^n^c^n^。\n\n![image-20220310224733082](https://s2.loli.net/2022/03/10/Jo9TInwgZizP7e1.png)\n\n例子：所有由0和1组成并且每个0之后都至少跟着一个1的串的集合\n\n```\nS -> LS | ε\nL -> 01 | 1\n```\n\n所有由0和1组成的具有相同多个0和1的串的集合\n\n```\nS -> 0S1S | 1S0S | ε\n```\n\n## 3、文法和语言\n\n### 文法经过推导得到语言\n\n**推导：**\n\n![image-20220519160515000](https://s2.loli.net/2022/05/19/X8oUYwJbPTEC9AN.png)\n\n每一棵语法分析树都和唯一的最左推导、唯一的最右推导相关联\n\n\n\n**归约：**\n\n- 最右归约：最左推导的逆过程称为最右归约\n- 最左归约：最右推导（规范推导）的逆过程称为最左归约\n\n\n\n**句型：**设有文法G[S]，如果 ![](https://s2.loli.net/2022/03/04/UxMbG8l9iDrJEXs.png)，则称符号串u为文法G[S]的句型\n\n**句子：**设有文法G[S]，如果 ![](https://s2.loli.net/2022/03/04/UxMbG8l9iDrJEXs.png)，且u∈V~T~ * ，则称符号串u为文法G[S]的句子。\n\n==句子是一个终结符号串。== \n\n**语言：**设有文法G[S]，则文法G[S]描述的语言为![](https://s2.loli.net/2022/03/04/TDboNIEAueO5l4q.png)(==语言是合法句子的集合== )\n\n如果两个文法生成相同语言，则称这两个文法是等价的。\n\n\n\n### 语言经过凑规则得到文法\n\n**步骤：**找出语言的若干典型句子→分析句子特点→根据句子特点凑规则→得到文法→检查文法\n\n检查文法时应满足：①语言的所有句子都能由S推导得到;  ②S推导得到的所有终结符号串都是语言的句子.（不多不少）\n\n**例子：**\n\n![image-20220519161355512](https://s2.loli.net/2022/05/19/vNcVBHm3sKZgDi8.png)\n\n> 给定一个文法，可以从结构上**唯一** 确定其语言；给定一个语言，可以确定相应的文法（**不唯一** ）。\n\n\n\n\n\n### 递归\n\n- 规则递归（直接递归）：文法的产生式为U→xUy形式\n\n- 规则左递归（直接左递归）：文法的产生式为U→Uy形式\n\n- 规则右递归（直接右递归）：文法的产生式为U→xU形式\n\n- 文法递归（间接递归）：文法中有推导![](https://s2.loli.net/2022/03/04/xBEeGqjbaPUFmcW.png)\n\n- 文法左递归（间接左递归）：文法中有推导![文法左递归.png](https://s2.loli.net/2022/03/04/SHPlQYW7qhtwUXa.png)\n\n- 文法右递归（间接右递归）：文法中有推导![image-20220310164820052](https://s2.loli.net/2022/03/10/RYGZlHrem34jb6d.png)\n\n \n\n### 语法分析树\n\n语法分析树展现了从文法的开始符号推导出相应语言中的符号串的过程。一棵语法分析树的叶子结点从左向右构成了一个终结符号串。\n\n- 根结点的标号（文法符号）为文法的开始符号\n- 每个内部结点的标号为一个非终结符号\n- 叶子结点的标号为一个终结符号或者ε\n- 若一个标记为U的结点，它有标记依次为x~1~、x~2~、…、x~n~的直接后继结点，则U→x~1~x~2~…x~n~必定是文法G的一条产生式。\n\n\n\n### 二义性问题\n\n- **句子的二义性**（==必考== ）：一个句子有两棵（或以上）不同的语法树；存在两个（或以上）不同的最左推导；存在两个（或以上）不同的最右推导（每一棵语法分析树都和唯一的最左推导、唯一的最右推导相关联）\n\n- **文法的二义性**：文法G中的某一句子具有二义性\n\n- **语言的二义性**：不存在任何无二义性的文法来描述某语言L。（也称为先天二义性）\n\n\n\n### 运算符的结合性和优先级\n\n**结合性**\n\n- 左结合性：当一个运算分量左右两侧都有同一个运算符时，它属于左边的运算符。如+-*/\n\n- 右结合性：一个运算分量左右两侧都有同一个运算符时，它属于右边的运算符。如=\n\n    > 左结合性的文法，语法分析树是向左下端延伸的；\n    > 右结合性的文法，语法分析树是向右下端延伸的\n\n**优先级**\n\n- n层优先级一般需要n+1个非终结符号，其中，最下面那个产生式左边的非终结符号的产生式体只能是单个运算分量或括号括起来的表达式。然后，对于每个优先级都有一个非终结符，表示能被该优先级或更高的优先级的运算符分开的表达式。\n\n- 例子：算术表达式的文法\n\n    ![image-20220311184147910](https://s2.loli.net/2022/03/11/WrPyD8RK4UvhQ5J.png)\n\n\n\n\n\n## 4、文法的实用限制\n\n### 消除文法的二义性（==重难点==）\n\n**方法一：设定消除二义性规则：**在语义上加些限制\n\n**方法二：重写文法**：重新构造一个等价的无二义性文法。\n\n考虑运算符的优先级和结合性。\n\n- 采用优先级联的方式——最低级的运算最靠近语法树的根结点，从上往下，运算的优先级依次增加\n- 左结合性：左递归，右结合性：右递归\n\n![image-20220311104535673](https://s2.loli.net/2022/03/11/PiaWFlI5uXQVpEG.png)\n\n![image-20220311111404819](https://s2.loli.net/2022/03/11/ElRIWuefnUO83it.png)\n\n\n\n### 文法的压缩（化简）\n\n若文法G[S]的所有产生式都满足下列实用限制条件：\n\n1、没有**多余产生式**（包括无法推导出终结符号串的产生式（不可终止）和从开始符号出发的所有推导都不会用到的产生式（不可达））。\n\n2、没有**有害产生式U→U**（有该产生式的文法一定是二义性的）\n\n则称文法G[S]是**压缩或化简**的。\n\n\n\n例子：\n\n<img src=\"https://s2.loli.net/2022/03/11/QKhBbEqpDTuOmng.png\" alt=\"image-20220311091509810\" style=\"zoom:67%;\" />\n\n\n\n### 删除单规则（单产生式）：A→B\n\n单产生式会使得语法树的深度加深，加大存储开销\n\n<img src=\"https://s2.loli.net/2022/03/11/SG89bKnl6wyrTqX.png\" alt=\"image-20220311091824568\" style=\"zoom: 67%;\" />\n\n### 删除空产生式（ε 规则）： U→ε\n\n**步骤：**\n\n- 找出可能推导出ε的非终结符号，本例中为B、D\n- 将产生式体中可能为ε的非终结符号替换为ε并删除ε\n- 特殊情形：S->ε的时候，不能去掉\n\n<img src=\"https://s2.loli.net/2022/03/11/YdKyhqXgNU7THcv.png\" alt=\"image-20220311091942023\" style=\"zoom:67%;\" />\n\n \n\n### 消除直接左递归U→Uy\n\n**（期末考试一般考直接改写法）**\n\n方法：\n\n- ==采用EBNF表示== \n\n    > [x]— x可以出现零次或一次\n    >\n    > {x}——x可以出现零次到多次\n    >\n    > x(y|z)——等价于xy 或 xz，用于提取公因子\n\n    步骤： ![image-20220311093151304](https://s2.loli.net/2022/03/11/R2xWwSv16Zf8grb.png)\n\n    即![image-20220407163924252](https://s2.loli.net/2022/04/07/cH1sfzCBe7LYE9O.png)\n\n- ==直接改写法：== 引进新的非终结符号，将左递归改写为右递归\n\n    ![image-20220311093533406](https://s2.loli.net/2022/03/11/D75j3twy8Qgl1Kz.png)\n\n- ![](https://s2.loli.net/2022/03/11/CBjznZkLeY4Dru9.png)\n\n\n\n### 消除间接左递归<img src=\"https://s2.loli.net/2022/04/07/WKsIfw9HEaAeC1u.png\" alt=\"image-20220407164315981\" style=\"zoom: 67%;\" />  \n\n- 方法：==转换成直接左递归来消除==\n\n    ![image-20220407205525749](https://s2.loli.net/2022/04/07/vWbnjNEoTaGDdRz.png)\n\n- 例子：\n\n    <img src=\"https://s2.loli.net/2022/04/07/IcoNtZhf1Kx6UbF.png\" alt=\"image-20220407231035529\" style=\"zoom:67%;\" />\n\n    <img src=\"https://s2.loli.net/2022/04/07/QjGiIAygplPCMBD.png\" alt=\"image-20220407231055235\" style=\"zoom:67%;\" />\n\n# 第三章  有穷自动机(==8个算法，确定化、最小化、RG和FA和RE之间的六个转换==)\n\n> 自动机的概念：自动机是一种能进行**运算**并实现**自我控制**(根据外界的信息改变自己的状态)的装置，计算机就是一部自动机。自动机是描述符号串处理的强有力的工具。**功能：识别语言**\n\n## 3.1 有穷自动机的形式定义\n\n### 1、有穷自动机的分类及组成\n\n- ==DFA:==  Deterministic Finite (State) Automation，确定的有穷(状态)自动机。当前状态经一个输入到达**下一个**状态。\n\n- ==NDFA（or NFA）:==  Non Deterministic Finite (State) Automation非确定的有穷自动机。当前状态经一个输入可到达**多个**状态。\n\n    > FA的等价性： L(A~1~) = L(A~2~)，则称有穷自动机A~1~和A~2~是**等价**的（类比文法等价）\n\n    > 关系：**DFA是NDFA的特例**，对每个NDFA N一定存在一个DFA M，使得L(M)=L(N)，但这种DFA M可能不唯一。\n    >\n    > q表示状态，Q表示状态集\n    >\n    > **用有穷自动机表示无穷：状态转换的回路（文法：递归）**\n    >\n    > ![image-20220331234125325](https://s2.loli.net/2022/03/31/WaIvVMDhmdj1gJL.png)\n\n| DFA = (Q，∑，t，==q~0~==，F)                                 | DFA的扩充                                                    | NDFA =  (Q，∑，t，==Q~0~==，F)                               | NDFA 的扩充                                                  |\n| ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| Q：有穷非空的状态集                                          |                                                              |                                                              |                                                              |\n| Σ：有穷的输入字母表                                          |                                                              |                                                              |                                                              |\n| t：**单值映射Q×==Σ==→Q** 。 t(q, x)=q’。可以理解由当前状态和**一个输入字符**得到下一个状态 | t：**单值映射Q×==Σ*==→Q** 。 t(q, ε) = q。t(q, aα) = t ( t(q, a),  α)，其中q∈Q， a ∈Σ,  α∈Σ*。可以理解由当前状态和**一个符号串**得到下一个状态 | t：**多值映射Q×==Σ==→2^Q^**。t(q,x)={q~1~,q~2~,…,q~n~} (状态的幂集) | t：**多值映射Q×==Σ*==→2^Q^** 。 t(q, ε)=q。t(q, aα) = t(q~1~,α)∪t(q~2~,α)∪… ∪t(q~n~,α)，其中 a ∈Σ,  α∈Σ*, t(q, a) = {q~1~, q~2~… q~n~}。 |\n| **q~0~：∈Q，是开始状态**                                     |                                                              | **Q~0~：⊆Q，是开始状态集**。即使只有一个开始状态，也要用{}   |                                                              |\n| F：⊆Q，非空终止状态集合                                      |                                                              |                                                              |                                                              |\n|                                                              | DFA的扩充，使得DFA可以描述对符号串的识别。**如果t(q~0~, α) ∈ F，则α可被DFA接受(或识别)**，即从开始状态经α可到达某一个终止状态。被DFA A识别的符号串集合，记为L(A)，L(A) = {α∈Σ* \\| t(q~0~, α)  ∈ F}，即这台自动机所能识别和接受的语言。α是L(A)的句子 。 |                                                              | NDFA的扩充，使得NDFA可以描述对符号串的识别。**如果q ∈ t(q~0~, α) , q~0~∈ Q~0~ ，q∈ F，则α可被DFA接受(或识别)**，即从某一个开始状态经α可到达某一个终止状态。被NDFA A识别的符号串集合，记为L(A)，L(A) = {α∈Σ* \\| t(q~0~, α)  ∩ F ≠ ∅ ,q~0~∈Q~0~ } |\n\n### 2、有穷自动机的表示：\n\n- 状态转换表\n\n- 状态转换图（**更常用**）\n\n    > 非空终止状态用同心圆表示\n\n- ==DFA:== \n\n    <img src=\"https://s2.loli.net/2022/03/17/dbpaewYO5WZ4yc9.png\" alt=\"image-20220317150650779\" style=\"zoom:67%;\" />\n\n- ==NDFA==\n\n    <img src=\"https://s2.loli.net/2022/03/17/ZgFyLjveGRzAbwU.png\" alt=\"image-20220317154458730\"  />\n\n## 3.2 NDFA到DFA的转换（==必考==）\n\n> DFA是NDFA的特例，对每个NDFA N一定存在一个DFA M，使得L(M)=L(N)，但这种DFA M可能不唯一\n\n```mermaid\ngraph LR;\n\ta[NDFA]-->|确定化|b[DFA];\n\tb[DFA]--> |化简|c[最小化的DFA];\n\tc[最小化的DFA] --> d[词法分析程序];\n```\n\n\n\n### 1、确定化:   NDFA -> DFA（==注意造表法是可以直接用的，不需要消==$\\varepsilon$）\n\n子集法 / 造表法（==考造表法==）\n\n- ==子集法。== \n\n    **步骤：**\n\n    - ==空移环路的寻找和消除==：消除从状态A开始并以A结束的空移动序列(空移环路上的所有状态都是等价的)，把它们合并成一个结点并取公共名。**注意Q~0~和F**。**注意a弧、b弧等等会变成自环**\n\n        > ε自动机：自动机的弧上允许标记ε，称此FA为ε自动机，记为εFA（εNDFA或εDFA）。εNDFA = (Q，∑ ∪{ε}，t，Q~0~，F)\n        >\n        > 消除ε自动机中的空移：对于εFA ，总可以构造等价的FA，使得L (εFA) = L(FA)\n\n    - ==消除余下的空移==： εNDFA -> NDFA。**去ε弧、添等价弧(包括ε弧)、置特殊状态（终态必须置，初态可以不置）**\n\n    ![image-20220317165134820](https://s2.loli.net/2022/03/17/6ADyZeGocNvkCr7.png)\n\n    - ==利用子集法确定化==   NDFA  -> DFA\n\n        思想：把从状态到状态的多值映射转化为状态集到状态集的单值映射\n\n        ![image-20220317170543983](https://s2.loli.net/2022/03/17/mr486kDGcZIheNl.png)\n\n    > 子集法的正确性的证明：α∈L(A)当且仅当α∈L(A')\n    >\n    > DFA:从开始状态（是一个状态类）到某一个终止状态子集，NFA：从某一个开始状态到某一个终止状态，这两个映射是可以转换的\n\n    **局限性：**状态数太多（2^Q^ - 1个状态，存储和查找的开销大）、存在不可达状态（挂起）\n\n    **例子：**\n\n    ![image-20220324214849272](https://s2.loli.net/2022/03/24/dEcwUWZuGxOsYDF.png)\n\n    ---\n\n- ==造表法（考）==(造表法本质还是子集法，子集法和造表法统称为子集法  )\n\n    - **思想**：为避免不可达状态，从初始状态出发，计算t′，依次构造其后继状态，进行确定化。\n\n        > 一些概念：\n        >\n        > - **I~a~**：I~a~ = t’(I, a)，即从I中的状态出发经过一条a弧（可跳过a弧**前后**的任意条ε弧）到达的状态集合\n        > - **状态子集I的ε闭包（ ε-CLOSURE(I) ）**：包含了I中的状态和它们经过任意条ε弧能到达的Q中的状态\n        > - **I~a~子集**：即从I中的状态出发，经过一条a弧（可跳过a弧**前**的任意条ε弧）到达的状态集合，称为**J**。I~a~ = ε-CLOSURE(J) \n\n    - **步骤：**\n\n        ![image-20220317182540359](https://s2.loli.net/2022/03/17/voLRXMOuwQh8KlJ.png)\n\n    - **特点**：简单有效、不存在不可达状态、状态数比子集法大大减少\n\n    - 例子：\n\n        <img src=\"https://s2.loli.net/2022/03/24/NXDbZx2z1VdTJLK.png\" alt=\"image-20220324215954121\" style=\"zoom:67%;\" />\n\n        <img src=\"https://s2.loli.net/2022/03/24/B9zabF2JuGSEV13.png\" alt=\"image-20220324215944493\" style=\"zoom: 50%;\" />\n\n### 2、最小化：DFA -> MFA\n\n- 目标：寻找等价的、状态数更少的DFA M’（M’是唯一的）\n\n- **思想：合并等价状态、删除无关状态**\n\n    > `等价状态：`从两个状态出发可以识别同一个字符串(任意一个)到达终态，则称这两个状态是等价的，否则称它们是可区分的。即$$\\forall\\alpha\\epsilon\\Sigma^*, t(q, \\alpha)\\epsilon F当且仅当t(q', \\alpha)\\epsilon F$$\n\n- 最小化算法（划分法）：把状态集划分成若干个互不相交的等价状态集\n\n    步骤：\n\n    - 构造状态集的划分，==从终止状态集和非终止状态集里再细分==（因此最终至少有两个状态）\n\n    - 取每组中的一个状态作代表，合并等价状态。\n\n        > 例如，A和B是等价状态，则如果选A为代表而删除B，则应**将射入B的弧补到A上**，**不需要补射出B的弧**，因为由等价状态的定义可知，A和B的射出的弧到达的下一个状态是相同的\n\n    - 删去无关状态，包括不可达状态和死状态等\n\n        ![image-20220317220019401](https://s2.loli.net/2022/03/17/owSlZ7rmcPRtM2A.png)\n\n- 例子：\n\n    ![image-20220324221541448](https://s2.loli.net/2022/03/24/9kuErAlD1L76efa.png)\n\n![image-20220324221835671](https://s2.loli.net/2022/03/24/RDnC9dptK1QNkXu.png)\n\n### 3、从化简后的DFA到程序表示 MFA -> scanner\n\n![image-20220324222006003](https://s2.loli.net/2022/03/24/QnbFtWksm9KjPAc.png)\n\n## 3.3 正规文法(RG)与FA\n\n### 1、RG与FA\n\n- RG是语言的生成规则\n- FA识别（接受）语言\n\n### 2、RG -> FA：\n\n由正规文法G[S]可直接构造一个与之等价的FA A，使得L(G)=L(A)。\n\n**步骤：**\n\n- 令G的终结符号集V~T~为A的字母表∑； \n\n- G的非终结符号作为A的状态，G的开始符号为A的开始状态； \n\n- ==增加一个终止状态Z（Z ∉ V~N~）；==\n\n- 形如U→a的规则，引一条从状态U到终止状态Z的标记为a的弧； \n\n- 形如U→aW的规则，引一条从状态U到W的a弧\n\n    对应关系如下：\n\n    | G[S]=（V~N~，V~T~，P，S） | NFA = (Q，∑，t，{q~0~}，F) (初态唯一,因为要和S对应)          |\n    | ------------------------- | ------------------------------------------------------------ |\n    | V~N~                      | Q                                                            |\n    | V~T~                      | ∑                                                            |\n    | P                         | t，形如U→a的规则，引一条从状态U到终止状态Z的标记为a的弧；     形如U→aW的规则，引一条从状态U到W的a弧（特别地，如果有形如U→aU的规则，引一条从状态U到状态U的自环） |\n    | S                         | q~0~                                                         |\n    |                           | **F(新增加的，∉ V~N~)**                                      |\n\n==eg.==\n\n![image-20220331230128319](https://s2.loli.net/2022/03/31/joSRI4KyDEards1.png)\n\n![image-20220331231013992](https://s2.loli.net/2022/03/31/7YVoTF6COnZKIJR.png)\n\n### 3、FA -> RG\n\n由有穷自动机FA A可直接构造一个与之等价的正规文法G，使得L(G)=L(A)\n\n**步骤：**\n\n- 自动机A中的每一个状态均作为G的非终结符号，其中A的开始状态作为G的开始符号，A的输入字母表∑中的所有符号作为G的终结符号；\n\n- 对A中V ∈ t(U,a)的映射，构造G的产生式U∷=aV；若V∈F，则构造G的产生式 U::=a；\n\n- 若A中q~0~∈F，则构造G的产生式S∷=ε\n\n    对应关系如下：\n\n    | DFA = (Q，∑，t，q~0~，F) | G[S]=（V~N~，V~T~，P，S）                                    |\n    | ------------------------ | ------------------------------------------------------------ |\n    | Q                        | V~N~                                                         |\n    | ∑                        | V~T~                                                         |\n    | t                        | P，对A中V ∈ t(U,a)的映射，构造G的产生式U∷=aV；<br />若V∈F，则构造G的产生式 U::=a；<br />若A中q~0~∈F，则构造G的产生式S∷=ε |\n    | q~0~                     | S                                                            |\n    | F                        |                                                              |\n\n==eg.==\n\n![image-20220331231121040](https://s2.loli.net/2022/03/31/bZth9rlPiADF12E.png)\n\n![image-20220331231701572](https://s2.loli.net/2022/03/31/Tqyr9uzPmBH3pFL.png)\n\n## 3.4 正规表达式/正则表达式(RE)与FA\n\n### 1、RE（可以直观地描述出语言的特征）\n\n- ==概念：== \n\n    三种运算：或运算 a|b 、连接运算 ab、闭包运算 a^*^(正闭包a^+^)。**（优先级由低到高）**\n\n    ==注意在RE中，0个或无穷多个不是用{}来表示，而是用*来表示，大括号是集合==\n\n![image-20220331231923652](https://s2.loli.net/2022/03/31/5pFHox1ryEjbhTw.png)\n\n**eg.**\n\n![image-20220331232616611](https://s2.loli.net/2022/03/31/YozVNxEDCfHuWy2.png)\n\n<img src=\"https://s2.loli.net/2022/03/31/1dEyrHmjPx54nhX.png\" alt=\"image-20220331233246560\" style=\"zoom:50%;\" />\n\n- ==RE等价：== 设e~1~，e~2~均为∑上的正规表达式，若 L(e~1~)=L(e~2~)，则称e~1~与e~2~等价，记为：e~1~= e~2~\n\n    ![image-20220331233053138](https://s2.loli.net/2022/03/31/P3IEHFbZvWhRwYr.png)\n\n    ![image-20220331233112495](https://s2.loli.net/2022/03/31/QWnVp9zkxHY2MoZ.png)\n\n- ==RE的性质：== \n\n    ![image-20220331232826488](https://s2.loli.net/2022/03/31/Xjo15J2dBLHhYC3.png)\n\n### 2、RE –> FA\n\n对于字母表Σ上的任意正规表达式e，一定可以构造一个输入字母表Σ上的**NDFA A**，使得L(A)=L(e)\n\n**步骤：**\n\n- 构造广义NFA：**S是惟一开始状态，Z是惟一终止状态**。弧标记e。\n\n- 根据分解规则分解e ，得到与e对应的NFA。\n\n    分解规则如下：\n\n    ![image-20220317230004987](https://s2.loli.net/2022/03/17/uoEaYrUIJ8gFxbj.png)\n\n==eg==\n\n![image-20220331233904038](https://s2.loli.net/2022/03/31/p6tFHduCrOm1oL5.png)<img src=\"https://s2.loli.net/2022/03/31/Q7WpazfkA3UgZwi.png\" alt=\"image-20220331233938288\" style=\"zoom:67%;\" />\n\n### 3、FA -> RE\n\n- 由有穷自动机FA A所识别的语言L(A)，可以用Σ上 的RE e来表示，使得L(A)=L(e)\n\n    **步骤**\n\n- （==当初态和终态不唯一时==）在FA A的状态图中增加两个结点：**S是惟一开始状态**，从S向原开始状态连ε弧；**Z是惟一终止状态**，从原终止状态向Z连ε弧。\n\n- 利用下列替换规则逐步消去状态图中的结点和弧，直至仅剩下S到Z的一条弧为止，则该弧上的标记即为RE e。\n\n    ![image-20220317230404452](https://s2.loli.net/2022/03/17/tVZi5aIBq1HJ6P9.png)\n\n==eg==\n\n<img src=\"https://s2.loli.net/2022/03/31/YdrHoz6ZUMKlbIk.png\" alt=\"image-20220331234216167\" style=\"zoom:67%;\" />\n\n<img src=\"https://s2.loli.net/2022/03/31/rsiz7VASouyqd6H.png\" alt=\"image-20220331234837905\" style=\"zoom:50%;\" />\n\n## 3.5 RE与RG\n\n### 1、RG -> RE\n\n对任何一个正规文法G，都存在一个等价的正规表达式e，使得L(e)=L(G)\n\n> 正规文法的拓广：产生式的形式为 U→αV 或 U→α， α为可空字符串，即**右线性文法，**容易改写成RG。\n\n**由右线性文法到正规表达式的转换规则：**\n\n- 形如U→αV, V→β的产生式转换成正规表达式U = αβ；\n- ==形如U→αU|β的产生式转换成U = α\\*β；==\n- 形如U→α|β的产生式转换成U = α|β。\n- 反复使用上述三条规则，直到文法只剩下一条关于文法开始符号的产生式，且该条产生式的右部不含非终结符号。这个产生式的右部就是正规表达式。\n\n**例子：**\n\n<img src=\"https://s2.loli.net/2022/04/07/mjVd8KzNpU5EICS.png\" alt=\"image-20220407223903410\" style=\"zoom:67%;\" />\n\n<img src=\"https://s2.loli.net/2022/04/07/ef5n4uIJqNZTc6P.png\" alt=\"image-20220407224157566\" style=\"zoom: 50%;\" />\n\n### 2、RE -> RG\n\n直接转换较困难，可通过FA来间接转换\n\n**规则：**\n\n- 令RG为G[S] ，对RE e，形成产生式S→e ；\n\n- 利用下列替换规则，重写产生式，直至符合RG形式要求： \n\n    - A→xy       替换成   A→xB ， B→y (新增B ∈ V~N~) \n\n    - A→x\\*y     替换成   A→xA | y\n\n    - A→x | y   替换成   A→x ， A→y\n\n        即得所求之RG G[S]。\n\n**例子：**\n\n![image-20220407225050765](https://s2.loli.net/2022/04/07/YJ6rljcPZOHA5kz.png)\n\n<img src=\"https://s2.loli.net/2022/04/07/TzrkhKHd2lDIoiV.png\" alt=\"image-20220407225042766\" style=\"zoom:50%;\" />\n\n## 3.6 RG、FA、RE三者关系\n\n<img src=\"https://s2.loli.net/2022/03/31/evJchpxWLl6E8fb.png\" alt=\"image-20220331201340852\" style=\"zoom:50%;\" />\n\n![image-20220331234446610](https://s2.loli.net/2022/03/31/TEmsJP1gAUjzN7n.png) \n\n# \n","source":"_posts/编译原理复习笔记（前三章）.md","raw":"---\ntitle: 编译原理复习笔记\ntags:\n  - 编译原理\ncategory:\n  - 编译原理\nabbrlink: 47407\ndate: 2022-06-27 23:10:22\n---\n\n# 第一章 引论 \n\n## ==1、编译和解释==\n\n- ==编译方式的特点：== \n    - 源程序的执行需要分阶段（目标程序是机器语言：编译、运行，目标程序是汇编语言：编译、汇编、运行）；  \n    - 生成了目标代码，且可多次执行\n    - *编译程序与具体的机器和语言有关* \n- ==解释方式的特点：==\n    - 更灵活、交互方便，节省空间\n    - 效率低\n- ==根本区别：== 在解释方式下，并不生成目标代码，而是直接执行源程序本身。\n- ==相同点：== 都需要进行词法、语法、语义分析\n\n![](https://s2.loli.net/2022/03/04/hSwesXfVIFjC4KA.jpg)\n\n## 2、编译程序的工作过程（词法分析、语法分析等）\n\n- ![](https://s2.loli.net/2022/03/04/xtsWrXz9lhBRA8Y.png)\n\n- ==词法分析== （或扫描）\n\n    - 词法分析器读入组成源程序的字符流，并将它们组织成有意义的词素的序列。对于每个词素，产生**词法单元** 作为输出\n    - *词法单元：<token-name, attribute-value>*，前者为抽象符号，后者为条目。eg.(id, 1)。分隔词素的空格会被词法分析器忽略掉。词法单元的名字常被称为终结符号，属性值是一个指向符号表的指针，符号表中包含了该词法单元的附加信息。\n\n- ==语法分析== （或解析）\n\n    - 语法分析器使用由词法分析器生成的各个词法单元的第一个分量来创建语法树（内部节点：运算，子节点：该运算的分量）\n\n- ==语义分析== \n\n    - 使用语法树和符号表中的信息来检查源程序是否和语言定义的语义一致（**静态语义检查** ，包括类型和运算合法性检查等）\n\n- ==中间代码生成== \n\n    - 中间表示形式应该易生成，易翻译\n\n- ==代码优化==\n\n    - 机器无关的代码优化步骤试图**改进中间代码** ，以便生成更好的目标代码\n\n- ==代码生成==\n\n    - 以源程序的中间表示形式作为输入，并把它映射到目标语言\n    - 目标指令可能是绝对指令代码，或可重新定位的指令代码或汇编指令代码\n\n- ==符号表的管理：== 符号表存放了整个源程序的信息，变量名及其属性。在各个阶段填入、查找\n\n- ==出错处理：== \n\n    - 语法错误：在词法分析或语法分析时检测出来\n    - 语义错误：在语义分析或运行时检测出来（因为语义分析是静态语义检查）\n\n- 在一个特定的实现中，多个步骤可以组合成一趟\n\n- 错误检查程序及表格管理程序贯穿始终\n\n- 词法分析、语法分析、语义分析与中间代码生成及部分代码优化工作为前端部分，==与目标机有关==的代码优化和目标代码生成等为后端部分\n\n- 示例：\n\n    ![](https://s2.loli.net/2022/03/04/CrcNty2m9qxSUEw.png)\n\n## 3、编译程序的结构\n\n![image-20220407152024793](https://s2.loli.net/2022/04/07/Jxk1GIf8CK2mUir.png)\n\n## 4、编译程序的组织方式及编译器的两个部分\n\n- **遍/趟：**一个编译程序在编译时刻把源程序或源程序的等价物（中间程序）从头到尾扫描一遍并转换成另一紧邻的等价物的全过程\n\n- **单遍扫描：**效率高但占用空间大，目标程序质量低\n\n- **多遍扫描：**效率低但占用空间小，目标程序质量高，便于多人合作开发\n\n- **分析部分（编译器的前端）**：主要由**与源语言有关但与目标机器无关** 的那些部分组成，词法分析、语法分析、语义分析、中间代码生成和部分代码优化工作\n\n    ![image-20220311113450229](https://s2.loli.net/2022/03/11/ZEPthWCzVc9xrnw.png)\n\n- **综合部分（编译器的后端）**：主要包括编译中**与目标机器有关** 的那些部分，如与目标机有关的代码优化和目标代码生成等。可以通过改变编译程序的后端来实现编译程序的移植。\n\n\n\n## 5、编译程序的构造\n\n- 构造编译程序可以用机器语言、汇编语言和高级语言\n\n- 高级语言的==自编译性== ：一个语言可以用来编写自己的编译程序\n\n    ![](https://s2.loli.net/2022/03/04/LTgXiu1rkyNEzRY.png)\n\n- **T型图**\n\n    ![image-20220515221623573](https://s2.loli.net/2022/05/15/yE3hexcragFKLtS.png)\n\n- **自展**\n\n    ![](https://s2.loli.net/2022/03/04/9RCBFkyrawcOHZg.png)\n\n- **编译的移植**\n\n    将一个机器（宿主机）上的一个具有自编译性的高级语言编译程序移植到另一个机器（目标机）上\n\n    ![](https://s2.loli.net/2022/03/04/gmYOAdLE9kyGCfD.png)\n\n    ![](https://s2.loli.net/2022/03/04/9MPFq1QcTsGdDtb.png)\n\n\n\n# 第二章 形式语言概论\n\n## 1、字母表与符号串\n\n### 字母表： \n\n符号(symbol)的非空有穷集，记为∑。\n\neg.Σ={a，b，……，y，z}，Σ={0， 1}，Σ={BEGIN， END}\n\n### 符号串： string \n\n字母表中的符号所组成的任何有穷序列，通常用小写的字母表示。==空串记为ε== 。\n\n- 符号串相等要看顺序。eg.ab ≠ ba\n\n- 符号串长度为符号串中符号的个数。 \n\n    |ε|=0，|BEGINEND| = 2\n\n- 符号串的子串（subsequence）:必须是连续的，如abc的子串不能是ac\n\n- ==空串是任何一个符号串的子串、前缀和后缀== 。\n\n- 符号串的连接：拼接，==ε是连接运算的单位元== ，εx = xε = x\n\n- 符号串的方幂(x^n^)：符号串与其自身的连接。x^0^  = ε，x^1^ = x，x^2^ = xx。\n\n- 符号串的逆（x^-1^ ）：符号串的倒置。 ε^-1^ = ε，(x^-1^)^-1^ = x，x = αβ，x^-1^ = β^-1^α^-1^ 。\n\n    eg.x = abcd, x^-1^ = dcba = (cd)^-1^ (ab)^-1^ \n\n- 符号串集合的和与积：\n\n    - A+B（或A∪B） ={w | w∈A，或 w ∈ B}\n\n    - A•B（或 AB）= { xy |x ∈ A, y ∈ B}\n\n        =={ε}是符号串集合乘积运算的零元== ，{ε}A = A{ε} = A\n\n- 符号串集合的方幂：A^0^  = {ε} ，A^1^ = A，A^2^ = AA\n\n    eg. A = {ab,cd}  A^0^ = {ε}，A^1^ = {ab, cd} , A^2^ = {abab, abcd, cdab, cdcd}\n\n- 符号串集合的闭包和正闭包：\n\n    - 闭包 ![](https://s2.loli.net/2022/03/04/V6R7w9UzrQtChun.png)\n    - 正闭包![](https://s2.loli.net/2022/03/04/9S5VGjzHpRnquJt.png)\n    - 闭包比正闭包多了一个ε\n\n### 语法描述： \n\n可以采用自然语言、语法图、BNF范式、EBNF\n\neg.标识符的语法描述：\n\nBNF范式（Backus-Naur Form） ：<标识符> ::= <字母>|<标识符><字母>|<标识符><数字> \n\n扩充的BNF（EBNF：Extended BNF） ：<标识符> ::= <字母> {<字母>|<数字>}\n\n## 2、文法及其分类（主要考2型和3型文法）\n\n### 概念：\n\n文法G是一个四元组，G[S]=（V~N~，V~T~，P，S）\n\nV~N~ ：非终结符号集\n\nV~T~： 终结符号集。V~T~ ∩V~N~ = ∅， V = V~T~ U V~N~\n\nP ：产生式(production)的有穷非空的集合，是文法的核心\n\nS：开始符号\n\n\n\n### **符号表示的约定：**\n\n- 终结符号：排在前面的小写字母abc、运算符号、标点符号、数字0~9、黑体字符串，如**id**\n- 非终结符号：排在前面的大写字母ABC、字母S（常用来表示开始符号）、小写且斜体的名字，如*expr*\n- 在字母表中排在后面的大写字母如XYZ表示终结符号或者非终结符号\n- 在字母表中排在后面的小写字母如uvwxyz表示终结符号串（可能为ε）\n- 小写的希腊字母，表示文法符号串（可能为ε）\n\n\n\n### 文法的分类\n\n- 区别：对产生式规则的形式上施加不同的限制。**从PSG到CSG到CFG到RG，限制逐渐增强，能力逐渐减弱**，生成的语言集逐渐减小，形式越简单，构造的自动机越易实现 。\n\n- ==下半区的左边都是单个的非终结符号== \n\n    ==上半区：不减为1型== \n\n    ![image.png](https://s2.loli.net/2022/03/04/FEHy5VxOUkXIvSa.png)\n\n| **0型文法 L~0~ （短语结构文法(phrase structure grammar, PSG)）** | α→β ，α∈V^+^  ，β∈V^*^             <br />亦即α→β ，α∈V* V~N~ V*<br />（必须要有一个非终结符号） ，β∈V * | 对应递归可枚举语言类，与图灵机（TM）能力相当，能力最强。     |\n| ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| **1型文法 L~1~ (上下文相关文法(context sensitive grammar,CSG)，长度增长文法)** | α→β ，==1≤ \\|α\\|≤\\|β\\|== （ 长度不减），α∈V^+^，β∈V^+^ <br />亦即α∈V* V~N~ V*（必须要有一个非终结符号） ，β∈V^+^ | 对应递归语言类，界限自动机**LBA**。静态语义处理。            |\n| **2型文法L~2~ ( 上下文无关文法(context free grammar,CFG))**  | A→β ，A∈V~N~ （==A是单个非终结符号== ，长度为1），β∈V^+^ 。 扩充的2型文法：A→β ，A∈V~N~，β∈V* | 对应上下文无关语言类，用于定义程序设计语言的**语法规则**。下推自动机**PDA**（==栈==）。 |\n| **3型文法L~3~ ( 正则文法(regular grammar ,RG)、正规文法)**   | A→a 或 A→aB , A,B∈V~N~ ，a∈V~T~ （右线性文法的一种情况）。<br />==左线性文法：== A→a或A→Ba  , A,B∈V~N~ ，a∈V~T~ ^*^ ； <br />==右线性文法：== A→a 或 A→aB , A,B∈V~N~ ，**a∈V~T~ ^*^** 。这3种共同构成3型文法 | 对应正规语言类，用于描述程序设计语言的**词法规则**。对应于**FSA**（有限状态自动机）。==3型没有记忆功能== ，要记也是记它自己，例如A->aA |\n\n> 在写正规文法时，可以从左往右考虑，一个非终结符号表示一个字符，然后把下一个字符交给下一个非终结符号表示\n\n> 如果要有记忆功能，可以用栈作为记忆装置（==下推自动机==）。如识别aaabbb，匹配一个b就弹出一个a，如果最终栈底的终结符号不能和符号串末尾的终结符号匹配的话，则报错。\n\n> 正规文法不能出现$\\varepsilon$\n\n**例子：**\n\n![image-20220310224157836](https://s2.loli.net/2022/03/10/wOAmUG4D3QTrhcZ.png)\n\n![image-20220310224629051](https://s2.loli.net/2022/03/10/1JOq2LHtpFAhao5.png)\n\n-----------\n\n\n\n==文法的记忆功能：== 精简版的括号配对问题。记住左右两边有几个配对的括号。**3型文法没有记忆功能**，因为它的非终结符号只能在一侧，无法记忆左右两边的一对。**2型文法可以记忆两个**，即左右两边的一对，如S→aSb，故2型文法可以用来表示a^n^b^n^ 。但2型文法的左边是单个的非终结符号，故不能记忆超过两个。**1型文法可以记忆三个**，故1型文法可以用来表示a^n^b^n^c^n^。\n\n![image-20220310224733082](https://s2.loli.net/2022/03/10/Jo9TInwgZizP7e1.png)\n\n例子：所有由0和1组成并且每个0之后都至少跟着一个1的串的集合\n\n```\nS -> LS | ε\nL -> 01 | 1\n```\n\n所有由0和1组成的具有相同多个0和1的串的集合\n\n```\nS -> 0S1S | 1S0S | ε\n```\n\n## 3、文法和语言\n\n### 文法经过推导得到语言\n\n**推导：**\n\n![image-20220519160515000](https://s2.loli.net/2022/05/19/X8oUYwJbPTEC9AN.png)\n\n每一棵语法分析树都和唯一的最左推导、唯一的最右推导相关联\n\n\n\n**归约：**\n\n- 最右归约：最左推导的逆过程称为最右归约\n- 最左归约：最右推导（规范推导）的逆过程称为最左归约\n\n\n\n**句型：**设有文法G[S]，如果 ![](https://s2.loli.net/2022/03/04/UxMbG8l9iDrJEXs.png)，则称符号串u为文法G[S]的句型\n\n**句子：**设有文法G[S]，如果 ![](https://s2.loli.net/2022/03/04/UxMbG8l9iDrJEXs.png)，且u∈V~T~ * ，则称符号串u为文法G[S]的句子。\n\n==句子是一个终结符号串。== \n\n**语言：**设有文法G[S]，则文法G[S]描述的语言为![](https://s2.loli.net/2022/03/04/TDboNIEAueO5l4q.png)(==语言是合法句子的集合== )\n\n如果两个文法生成相同语言，则称这两个文法是等价的。\n\n\n\n### 语言经过凑规则得到文法\n\n**步骤：**找出语言的若干典型句子→分析句子特点→根据句子特点凑规则→得到文法→检查文法\n\n检查文法时应满足：①语言的所有句子都能由S推导得到;  ②S推导得到的所有终结符号串都是语言的句子.（不多不少）\n\n**例子：**\n\n![image-20220519161355512](https://s2.loli.net/2022/05/19/vNcVBHm3sKZgDi8.png)\n\n> 给定一个文法，可以从结构上**唯一** 确定其语言；给定一个语言，可以确定相应的文法（**不唯一** ）。\n\n\n\n\n\n### 递归\n\n- 规则递归（直接递归）：文法的产生式为U→xUy形式\n\n- 规则左递归（直接左递归）：文法的产生式为U→Uy形式\n\n- 规则右递归（直接右递归）：文法的产生式为U→xU形式\n\n- 文法递归（间接递归）：文法中有推导![](https://s2.loli.net/2022/03/04/xBEeGqjbaPUFmcW.png)\n\n- 文法左递归（间接左递归）：文法中有推导![文法左递归.png](https://s2.loli.net/2022/03/04/SHPlQYW7qhtwUXa.png)\n\n- 文法右递归（间接右递归）：文法中有推导![image-20220310164820052](https://s2.loli.net/2022/03/10/RYGZlHrem34jb6d.png)\n\n \n\n### 语法分析树\n\n语法分析树展现了从文法的开始符号推导出相应语言中的符号串的过程。一棵语法分析树的叶子结点从左向右构成了一个终结符号串。\n\n- 根结点的标号（文法符号）为文法的开始符号\n- 每个内部结点的标号为一个非终结符号\n- 叶子结点的标号为一个终结符号或者ε\n- 若一个标记为U的结点，它有标记依次为x~1~、x~2~、…、x~n~的直接后继结点，则U→x~1~x~2~…x~n~必定是文法G的一条产生式。\n\n\n\n### 二义性问题\n\n- **句子的二义性**（==必考== ）：一个句子有两棵（或以上）不同的语法树；存在两个（或以上）不同的最左推导；存在两个（或以上）不同的最右推导（每一棵语法分析树都和唯一的最左推导、唯一的最右推导相关联）\n\n- **文法的二义性**：文法G中的某一句子具有二义性\n\n- **语言的二义性**：不存在任何无二义性的文法来描述某语言L。（也称为先天二义性）\n\n\n\n### 运算符的结合性和优先级\n\n**结合性**\n\n- 左结合性：当一个运算分量左右两侧都有同一个运算符时，它属于左边的运算符。如+-*/\n\n- 右结合性：一个运算分量左右两侧都有同一个运算符时，它属于右边的运算符。如=\n\n    > 左结合性的文法，语法分析树是向左下端延伸的；\n    > 右结合性的文法，语法分析树是向右下端延伸的\n\n**优先级**\n\n- n层优先级一般需要n+1个非终结符号，其中，最下面那个产生式左边的非终结符号的产生式体只能是单个运算分量或括号括起来的表达式。然后，对于每个优先级都有一个非终结符，表示能被该优先级或更高的优先级的运算符分开的表达式。\n\n- 例子：算术表达式的文法\n\n    ![image-20220311184147910](https://s2.loli.net/2022/03/11/WrPyD8RK4UvhQ5J.png)\n\n\n\n\n\n## 4、文法的实用限制\n\n### 消除文法的二义性（==重难点==）\n\n**方法一：设定消除二义性规则：**在语义上加些限制\n\n**方法二：重写文法**：重新构造一个等价的无二义性文法。\n\n考虑运算符的优先级和结合性。\n\n- 采用优先级联的方式——最低级的运算最靠近语法树的根结点，从上往下，运算的优先级依次增加\n- 左结合性：左递归，右结合性：右递归\n\n![image-20220311104535673](https://s2.loli.net/2022/03/11/PiaWFlI5uXQVpEG.png)\n\n![image-20220311111404819](https://s2.loli.net/2022/03/11/ElRIWuefnUO83it.png)\n\n\n\n### 文法的压缩（化简）\n\n若文法G[S]的所有产生式都满足下列实用限制条件：\n\n1、没有**多余产生式**（包括无法推导出终结符号串的产生式（不可终止）和从开始符号出发的所有推导都不会用到的产生式（不可达））。\n\n2、没有**有害产生式U→U**（有该产生式的文法一定是二义性的）\n\n则称文法G[S]是**压缩或化简**的。\n\n\n\n例子：\n\n<img src=\"https://s2.loli.net/2022/03/11/QKhBbEqpDTuOmng.png\" alt=\"image-20220311091509810\" style=\"zoom:67%;\" />\n\n\n\n### 删除单规则（单产生式）：A→B\n\n单产生式会使得语法树的深度加深，加大存储开销\n\n<img src=\"https://s2.loli.net/2022/03/11/SG89bKnl6wyrTqX.png\" alt=\"image-20220311091824568\" style=\"zoom: 67%;\" />\n\n### 删除空产生式（ε 规则）： U→ε\n\n**步骤：**\n\n- 找出可能推导出ε的非终结符号，本例中为B、D\n- 将产生式体中可能为ε的非终结符号替换为ε并删除ε\n- 特殊情形：S->ε的时候，不能去掉\n\n<img src=\"https://s2.loli.net/2022/03/11/YdKyhqXgNU7THcv.png\" alt=\"image-20220311091942023\" style=\"zoom:67%;\" />\n\n \n\n### 消除直接左递归U→Uy\n\n**（期末考试一般考直接改写法）**\n\n方法：\n\n- ==采用EBNF表示== \n\n    > [x]— x可以出现零次或一次\n    >\n    > {x}——x可以出现零次到多次\n    >\n    > x(y|z)——等价于xy 或 xz，用于提取公因子\n\n    步骤： ![image-20220311093151304](https://s2.loli.net/2022/03/11/R2xWwSv16Zf8grb.png)\n\n    即![image-20220407163924252](https://s2.loli.net/2022/04/07/cH1sfzCBe7LYE9O.png)\n\n- ==直接改写法：== 引进新的非终结符号，将左递归改写为右递归\n\n    ![image-20220311093533406](https://s2.loli.net/2022/03/11/D75j3twy8Qgl1Kz.png)\n\n- ![](https://s2.loli.net/2022/03/11/CBjznZkLeY4Dru9.png)\n\n\n\n### 消除间接左递归<img src=\"https://s2.loli.net/2022/04/07/WKsIfw9HEaAeC1u.png\" alt=\"image-20220407164315981\" style=\"zoom: 67%;\" />  \n\n- 方法：==转换成直接左递归来消除==\n\n    ![image-20220407205525749](https://s2.loli.net/2022/04/07/vWbnjNEoTaGDdRz.png)\n\n- 例子：\n\n    <img src=\"https://s2.loli.net/2022/04/07/IcoNtZhf1Kx6UbF.png\" alt=\"image-20220407231035529\" style=\"zoom:67%;\" />\n\n    <img src=\"https://s2.loli.net/2022/04/07/QjGiIAygplPCMBD.png\" alt=\"image-20220407231055235\" style=\"zoom:67%;\" />\n\n# 第三章  有穷自动机(==8个算法，确定化、最小化、RG和FA和RE之间的六个转换==)\n\n> 自动机的概念：自动机是一种能进行**运算**并实现**自我控制**(根据外界的信息改变自己的状态)的装置，计算机就是一部自动机。自动机是描述符号串处理的强有力的工具。**功能：识别语言**\n\n## 3.1 有穷自动机的形式定义\n\n### 1、有穷自动机的分类及组成\n\n- ==DFA:==  Deterministic Finite (State) Automation，确定的有穷(状态)自动机。当前状态经一个输入到达**下一个**状态。\n\n- ==NDFA（or NFA）:==  Non Deterministic Finite (State) Automation非确定的有穷自动机。当前状态经一个输入可到达**多个**状态。\n\n    > FA的等价性： L(A~1~) = L(A~2~)，则称有穷自动机A~1~和A~2~是**等价**的（类比文法等价）\n\n    > 关系：**DFA是NDFA的特例**，对每个NDFA N一定存在一个DFA M，使得L(M)=L(N)，但这种DFA M可能不唯一。\n    >\n    > q表示状态，Q表示状态集\n    >\n    > **用有穷自动机表示无穷：状态转换的回路（文法：递归）**\n    >\n    > ![image-20220331234125325](https://s2.loli.net/2022/03/31/WaIvVMDhmdj1gJL.png)\n\n| DFA = (Q，∑，t，==q~0~==，F)                                 | DFA的扩充                                                    | NDFA =  (Q，∑，t，==Q~0~==，F)                               | NDFA 的扩充                                                  |\n| ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| Q：有穷非空的状态集                                          |                                                              |                                                              |                                                              |\n| Σ：有穷的输入字母表                                          |                                                              |                                                              |                                                              |\n| t：**单值映射Q×==Σ==→Q** 。 t(q, x)=q’。可以理解由当前状态和**一个输入字符**得到下一个状态 | t：**单值映射Q×==Σ*==→Q** 。 t(q, ε) = q。t(q, aα) = t ( t(q, a),  α)，其中q∈Q， a ∈Σ,  α∈Σ*。可以理解由当前状态和**一个符号串**得到下一个状态 | t：**多值映射Q×==Σ==→2^Q^**。t(q,x)={q~1~,q~2~,…,q~n~} (状态的幂集) | t：**多值映射Q×==Σ*==→2^Q^** 。 t(q, ε)=q。t(q, aα) = t(q~1~,α)∪t(q~2~,α)∪… ∪t(q~n~,α)，其中 a ∈Σ,  α∈Σ*, t(q, a) = {q~1~, q~2~… q~n~}。 |\n| **q~0~：∈Q，是开始状态**                                     |                                                              | **Q~0~：⊆Q，是开始状态集**。即使只有一个开始状态，也要用{}   |                                                              |\n| F：⊆Q，非空终止状态集合                                      |                                                              |                                                              |                                                              |\n|                                                              | DFA的扩充，使得DFA可以描述对符号串的识别。**如果t(q~0~, α) ∈ F，则α可被DFA接受(或识别)**，即从开始状态经α可到达某一个终止状态。被DFA A识别的符号串集合，记为L(A)，L(A) = {α∈Σ* \\| t(q~0~, α)  ∈ F}，即这台自动机所能识别和接受的语言。α是L(A)的句子 。 |                                                              | NDFA的扩充，使得NDFA可以描述对符号串的识别。**如果q ∈ t(q~0~, α) , q~0~∈ Q~0~ ，q∈ F，则α可被DFA接受(或识别)**，即从某一个开始状态经α可到达某一个终止状态。被NDFA A识别的符号串集合，记为L(A)，L(A) = {α∈Σ* \\| t(q~0~, α)  ∩ F ≠ ∅ ,q~0~∈Q~0~ } |\n\n### 2、有穷自动机的表示：\n\n- 状态转换表\n\n- 状态转换图（**更常用**）\n\n    > 非空终止状态用同心圆表示\n\n- ==DFA:== \n\n    <img src=\"https://s2.loli.net/2022/03/17/dbpaewYO5WZ4yc9.png\" alt=\"image-20220317150650779\" style=\"zoom:67%;\" />\n\n- ==NDFA==\n\n    <img src=\"https://s2.loli.net/2022/03/17/ZgFyLjveGRzAbwU.png\" alt=\"image-20220317154458730\"  />\n\n## 3.2 NDFA到DFA的转换（==必考==）\n\n> DFA是NDFA的特例，对每个NDFA N一定存在一个DFA M，使得L(M)=L(N)，但这种DFA M可能不唯一\n\n```mermaid\ngraph LR;\n\ta[NDFA]-->|确定化|b[DFA];\n\tb[DFA]--> |化简|c[最小化的DFA];\n\tc[最小化的DFA] --> d[词法分析程序];\n```\n\n\n\n### 1、确定化:   NDFA -> DFA（==注意造表法是可以直接用的，不需要消==$\\varepsilon$）\n\n子集法 / 造表法（==考造表法==）\n\n- ==子集法。== \n\n    **步骤：**\n\n    - ==空移环路的寻找和消除==：消除从状态A开始并以A结束的空移动序列(空移环路上的所有状态都是等价的)，把它们合并成一个结点并取公共名。**注意Q~0~和F**。**注意a弧、b弧等等会变成自环**\n\n        > ε自动机：自动机的弧上允许标记ε，称此FA为ε自动机，记为εFA（εNDFA或εDFA）。εNDFA = (Q，∑ ∪{ε}，t，Q~0~，F)\n        >\n        > 消除ε自动机中的空移：对于εFA ，总可以构造等价的FA，使得L (εFA) = L(FA)\n\n    - ==消除余下的空移==： εNDFA -> NDFA。**去ε弧、添等价弧(包括ε弧)、置特殊状态（终态必须置，初态可以不置）**\n\n    ![image-20220317165134820](https://s2.loli.net/2022/03/17/6ADyZeGocNvkCr7.png)\n\n    - ==利用子集法确定化==   NDFA  -> DFA\n\n        思想：把从状态到状态的多值映射转化为状态集到状态集的单值映射\n\n        ![image-20220317170543983](https://s2.loli.net/2022/03/17/mr486kDGcZIheNl.png)\n\n    > 子集法的正确性的证明：α∈L(A)当且仅当α∈L(A')\n    >\n    > DFA:从开始状态（是一个状态类）到某一个终止状态子集，NFA：从某一个开始状态到某一个终止状态，这两个映射是可以转换的\n\n    **局限性：**状态数太多（2^Q^ - 1个状态，存储和查找的开销大）、存在不可达状态（挂起）\n\n    **例子：**\n\n    ![image-20220324214849272](https://s2.loli.net/2022/03/24/dEcwUWZuGxOsYDF.png)\n\n    ---\n\n- ==造表法（考）==(造表法本质还是子集法，子集法和造表法统称为子集法  )\n\n    - **思想**：为避免不可达状态，从初始状态出发，计算t′，依次构造其后继状态，进行确定化。\n\n        > 一些概念：\n        >\n        > - **I~a~**：I~a~ = t’(I, a)，即从I中的状态出发经过一条a弧（可跳过a弧**前后**的任意条ε弧）到达的状态集合\n        > - **状态子集I的ε闭包（ ε-CLOSURE(I) ）**：包含了I中的状态和它们经过任意条ε弧能到达的Q中的状态\n        > - **I~a~子集**：即从I中的状态出发，经过一条a弧（可跳过a弧**前**的任意条ε弧）到达的状态集合，称为**J**。I~a~ = ε-CLOSURE(J) \n\n    - **步骤：**\n\n        ![image-20220317182540359](https://s2.loli.net/2022/03/17/voLRXMOuwQh8KlJ.png)\n\n    - **特点**：简单有效、不存在不可达状态、状态数比子集法大大减少\n\n    - 例子：\n\n        <img src=\"https://s2.loli.net/2022/03/24/NXDbZx2z1VdTJLK.png\" alt=\"image-20220324215954121\" style=\"zoom:67%;\" />\n\n        <img src=\"https://s2.loli.net/2022/03/24/B9zabF2JuGSEV13.png\" alt=\"image-20220324215944493\" style=\"zoom: 50%;\" />\n\n### 2、最小化：DFA -> MFA\n\n- 目标：寻找等价的、状态数更少的DFA M’（M’是唯一的）\n\n- **思想：合并等价状态、删除无关状态**\n\n    > `等价状态：`从两个状态出发可以识别同一个字符串(任意一个)到达终态，则称这两个状态是等价的，否则称它们是可区分的。即$$\\forall\\alpha\\epsilon\\Sigma^*, t(q, \\alpha)\\epsilon F当且仅当t(q', \\alpha)\\epsilon F$$\n\n- 最小化算法（划分法）：把状态集划分成若干个互不相交的等价状态集\n\n    步骤：\n\n    - 构造状态集的划分，==从终止状态集和非终止状态集里再细分==（因此最终至少有两个状态）\n\n    - 取每组中的一个状态作代表，合并等价状态。\n\n        > 例如，A和B是等价状态，则如果选A为代表而删除B，则应**将射入B的弧补到A上**，**不需要补射出B的弧**，因为由等价状态的定义可知，A和B的射出的弧到达的下一个状态是相同的\n\n    - 删去无关状态，包括不可达状态和死状态等\n\n        ![image-20220317220019401](https://s2.loli.net/2022/03/17/owSlZ7rmcPRtM2A.png)\n\n- 例子：\n\n    ![image-20220324221541448](https://s2.loli.net/2022/03/24/9kuErAlD1L76efa.png)\n\n![image-20220324221835671](https://s2.loli.net/2022/03/24/RDnC9dptK1QNkXu.png)\n\n### 3、从化简后的DFA到程序表示 MFA -> scanner\n\n![image-20220324222006003](https://s2.loli.net/2022/03/24/QnbFtWksm9KjPAc.png)\n\n## 3.3 正规文法(RG)与FA\n\n### 1、RG与FA\n\n- RG是语言的生成规则\n- FA识别（接受）语言\n\n### 2、RG -> FA：\n\n由正规文法G[S]可直接构造一个与之等价的FA A，使得L(G)=L(A)。\n\n**步骤：**\n\n- 令G的终结符号集V~T~为A的字母表∑； \n\n- G的非终结符号作为A的状态，G的开始符号为A的开始状态； \n\n- ==增加一个终止状态Z（Z ∉ V~N~）；==\n\n- 形如U→a的规则，引一条从状态U到终止状态Z的标记为a的弧； \n\n- 形如U→aW的规则，引一条从状态U到W的a弧\n\n    对应关系如下：\n\n    | G[S]=（V~N~，V~T~，P，S） | NFA = (Q，∑，t，{q~0~}，F) (初态唯一,因为要和S对应)          |\n    | ------------------------- | ------------------------------------------------------------ |\n    | V~N~                      | Q                                                            |\n    | V~T~                      | ∑                                                            |\n    | P                         | t，形如U→a的规则，引一条从状态U到终止状态Z的标记为a的弧；     形如U→aW的规则，引一条从状态U到W的a弧（特别地，如果有形如U→aU的规则，引一条从状态U到状态U的自环） |\n    | S                         | q~0~                                                         |\n    |                           | **F(新增加的，∉ V~N~)**                                      |\n\n==eg.==\n\n![image-20220331230128319](https://s2.loli.net/2022/03/31/joSRI4KyDEards1.png)\n\n![image-20220331231013992](https://s2.loli.net/2022/03/31/7YVoTF6COnZKIJR.png)\n\n### 3、FA -> RG\n\n由有穷自动机FA A可直接构造一个与之等价的正规文法G，使得L(G)=L(A)\n\n**步骤：**\n\n- 自动机A中的每一个状态均作为G的非终结符号，其中A的开始状态作为G的开始符号，A的输入字母表∑中的所有符号作为G的终结符号；\n\n- 对A中V ∈ t(U,a)的映射，构造G的产生式U∷=aV；若V∈F，则构造G的产生式 U::=a；\n\n- 若A中q~0~∈F，则构造G的产生式S∷=ε\n\n    对应关系如下：\n\n    | DFA = (Q，∑，t，q~0~，F) | G[S]=（V~N~，V~T~，P，S）                                    |\n    | ------------------------ | ------------------------------------------------------------ |\n    | Q                        | V~N~                                                         |\n    | ∑                        | V~T~                                                         |\n    | t                        | P，对A中V ∈ t(U,a)的映射，构造G的产生式U∷=aV；<br />若V∈F，则构造G的产生式 U::=a；<br />若A中q~0~∈F，则构造G的产生式S∷=ε |\n    | q~0~                     | S                                                            |\n    | F                        |                                                              |\n\n==eg.==\n\n![image-20220331231121040](https://s2.loli.net/2022/03/31/bZth9rlPiADF12E.png)\n\n![image-20220331231701572](https://s2.loli.net/2022/03/31/Tqyr9uzPmBH3pFL.png)\n\n## 3.4 正规表达式/正则表达式(RE)与FA\n\n### 1、RE（可以直观地描述出语言的特征）\n\n- ==概念：== \n\n    三种运算：或运算 a|b 、连接运算 ab、闭包运算 a^*^(正闭包a^+^)。**（优先级由低到高）**\n\n    ==注意在RE中，0个或无穷多个不是用{}来表示，而是用*来表示，大括号是集合==\n\n![image-20220331231923652](https://s2.loli.net/2022/03/31/5pFHox1ryEjbhTw.png)\n\n**eg.**\n\n![image-20220331232616611](https://s2.loli.net/2022/03/31/YozVNxEDCfHuWy2.png)\n\n<img src=\"https://s2.loli.net/2022/03/31/1dEyrHmjPx54nhX.png\" alt=\"image-20220331233246560\" style=\"zoom:50%;\" />\n\n- ==RE等价：== 设e~1~，e~2~均为∑上的正规表达式，若 L(e~1~)=L(e~2~)，则称e~1~与e~2~等价，记为：e~1~= e~2~\n\n    ![image-20220331233053138](https://s2.loli.net/2022/03/31/P3IEHFbZvWhRwYr.png)\n\n    ![image-20220331233112495](https://s2.loli.net/2022/03/31/QWnVp9zkxHY2MoZ.png)\n\n- ==RE的性质：== \n\n    ![image-20220331232826488](https://s2.loli.net/2022/03/31/Xjo15J2dBLHhYC3.png)\n\n### 2、RE –> FA\n\n对于字母表Σ上的任意正规表达式e，一定可以构造一个输入字母表Σ上的**NDFA A**，使得L(A)=L(e)\n\n**步骤：**\n\n- 构造广义NFA：**S是惟一开始状态，Z是惟一终止状态**。弧标记e。\n\n- 根据分解规则分解e ，得到与e对应的NFA。\n\n    分解规则如下：\n\n    ![image-20220317230004987](https://s2.loli.net/2022/03/17/uoEaYrUIJ8gFxbj.png)\n\n==eg==\n\n![image-20220331233904038](https://s2.loli.net/2022/03/31/p6tFHduCrOm1oL5.png)<img src=\"https://s2.loli.net/2022/03/31/Q7WpazfkA3UgZwi.png\" alt=\"image-20220331233938288\" style=\"zoom:67%;\" />\n\n### 3、FA -> RE\n\n- 由有穷自动机FA A所识别的语言L(A)，可以用Σ上 的RE e来表示，使得L(A)=L(e)\n\n    **步骤**\n\n- （==当初态和终态不唯一时==）在FA A的状态图中增加两个结点：**S是惟一开始状态**，从S向原开始状态连ε弧；**Z是惟一终止状态**，从原终止状态向Z连ε弧。\n\n- 利用下列替换规则逐步消去状态图中的结点和弧，直至仅剩下S到Z的一条弧为止，则该弧上的标记即为RE e。\n\n    ![image-20220317230404452](https://s2.loli.net/2022/03/17/tVZi5aIBq1HJ6P9.png)\n\n==eg==\n\n<img src=\"https://s2.loli.net/2022/03/31/YdrHoz6ZUMKlbIk.png\" alt=\"image-20220331234216167\" style=\"zoom:67%;\" />\n\n<img src=\"https://s2.loli.net/2022/03/31/rsiz7VASouyqd6H.png\" alt=\"image-20220331234837905\" style=\"zoom:50%;\" />\n\n## 3.5 RE与RG\n\n### 1、RG -> RE\n\n对任何一个正规文法G，都存在一个等价的正规表达式e，使得L(e)=L(G)\n\n> 正规文法的拓广：产生式的形式为 U→αV 或 U→α， α为可空字符串，即**右线性文法，**容易改写成RG。\n\n**由右线性文法到正规表达式的转换规则：**\n\n- 形如U→αV, V→β的产生式转换成正规表达式U = αβ；\n- ==形如U→αU|β的产生式转换成U = α\\*β；==\n- 形如U→α|β的产生式转换成U = α|β。\n- 反复使用上述三条规则，直到文法只剩下一条关于文法开始符号的产生式，且该条产生式的右部不含非终结符号。这个产生式的右部就是正规表达式。\n\n**例子：**\n\n<img src=\"https://s2.loli.net/2022/04/07/mjVd8KzNpU5EICS.png\" alt=\"image-20220407223903410\" style=\"zoom:67%;\" />\n\n<img src=\"https://s2.loli.net/2022/04/07/ef5n4uIJqNZTc6P.png\" alt=\"image-20220407224157566\" style=\"zoom: 50%;\" />\n\n### 2、RE -> RG\n\n直接转换较困难，可通过FA来间接转换\n\n**规则：**\n\n- 令RG为G[S] ，对RE e，形成产生式S→e ；\n\n- 利用下列替换规则，重写产生式，直至符合RG形式要求： \n\n    - A→xy       替换成   A→xB ， B→y (新增B ∈ V~N~) \n\n    - A→x\\*y     替换成   A→xA | y\n\n    - A→x | y   替换成   A→x ， A→y\n\n        即得所求之RG G[S]。\n\n**例子：**\n\n![image-20220407225050765](https://s2.loli.net/2022/04/07/YJ6rljcPZOHA5kz.png)\n\n<img src=\"https://s2.loli.net/2022/04/07/TzrkhKHd2lDIoiV.png\" alt=\"image-20220407225042766\" style=\"zoom:50%;\" />\n\n## 3.6 RG、FA、RE三者关系\n\n<img src=\"https://s2.loli.net/2022/03/31/evJchpxWLl6E8fb.png\" alt=\"image-20220331201340852\" style=\"zoom:50%;\" />\n\n![image-20220331234446610](https://s2.loli.net/2022/03/31/TEmsJP1gAUjzN7n.png) \n\n# \n","slug":"编译原理复习笔记（前三章）","published":1,"updated":"2022-06-27T15:12:30.883Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4ww3f0w0000xsskaql93ubu","content":"<h1 id=\"第一章-引论\"><a href=\"#第一章-引论\" class=\"headerlink\" title=\"第一章 引论\"></a>第一章 引论</h1><h2 id=\"x3D-x3D-1、编译和解释-x3D-x3D\"><a href=\"#x3D-x3D-1、编译和解释-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;1、编译和解释&#x3D;&#x3D;\"></a>&#x3D;&#x3D;1、编译和解释&#x3D;&#x3D;</h2><ul>\n<li>&#x3D;&#x3D;编译方式的特点：&#x3D;&#x3D; <ul>\n<li>源程序的执行需要分阶段（目标程序是机器语言：编译、运行，目标程序是汇编语言：编译、汇编、运行）；  </li>\n<li>生成了目标代码，且可多次执行</li>\n<li><em>编译程序与具体的机器和语言有关</em></li>\n</ul>\n</li>\n<li>&#x3D;&#x3D;解释方式的特点：&#x3D;&#x3D;<ul>\n<li>更灵活、交互方便，节省空间</li>\n<li>效率低</li>\n</ul>\n</li>\n<li>&#x3D;&#x3D;根本区别：&#x3D;&#x3D; 在解释方式下，并不生成目标代码，而是直接执行源程序本身。</li>\n<li>&#x3D;&#x3D;相同点：&#x3D;&#x3D; 都需要进行词法、语法、语义分析</li>\n</ul>\n<p><img data-src=\"https://s2.loli.net/2022/03/04/hSwesXfVIFjC4KA.jpg\"></p>\n<h2 id=\"2、编译程序的工作过程（词法分析、语法分析等）\"><a href=\"#2、编译程序的工作过程（词法分析、语法分析等）\" class=\"headerlink\" title=\"2、编译程序的工作过程（词法分析、语法分析等）\"></a>2、编译程序的工作过程（词法分析、语法分析等）</h2><ul>\n<li><p><img data-src=\"https://s2.loli.net/2022/03/04/xtsWrXz9lhBRA8Y.png\"></p>\n</li>\n<li><p>&#x3D;&#x3D;词法分析&#x3D;&#x3D; （或扫描）</p>\n<ul>\n<li>词法分析器读入组成源程序的字符流，并将它们组织成有意义的词素的序列。对于每个词素，产生<strong>词法单元</strong> 作为输出</li>\n<li>*词法单元：&lt;token-name, attribute-value&gt;*，前者为抽象符号，后者为条目。eg.(id, 1)。分隔词素的空格会被词法分析器忽略掉。词法单元的名字常被称为终结符号，属性值是一个指向符号表的指针，符号表中包含了该词法单元的附加信息。</li>\n</ul>\n</li>\n<li><p>&#x3D;&#x3D;语法分析&#x3D;&#x3D; （或解析）</p>\n<ul>\n<li>语法分析器使用由词法分析器生成的各个词法单元的第一个分量来创建语法树（内部节点：运算，子节点：该运算的分量）</li>\n</ul>\n</li>\n<li><p>&#x3D;&#x3D;语义分析&#x3D;&#x3D; </p>\n<ul>\n<li>使用语法树和符号表中的信息来检查源程序是否和语言定义的语义一致（<strong>静态语义检查</strong> ，包括类型和运算合法性检查等）</li>\n</ul>\n</li>\n<li><p>&#x3D;&#x3D;中间代码生成&#x3D;&#x3D; </p>\n<ul>\n<li>中间表示形式应该易生成，易翻译</li>\n</ul>\n</li>\n<li><p>&#x3D;&#x3D;代码优化&#x3D;&#x3D;</p>\n<ul>\n<li>机器无关的代码优化步骤试图<strong>改进中间代码</strong> ，以便生成更好的目标代码</li>\n</ul>\n</li>\n<li><p>&#x3D;&#x3D;代码生成&#x3D;&#x3D;</p>\n<ul>\n<li>以源程序的中间表示形式作为输入，并把它映射到目标语言</li>\n<li>目标指令可能是绝对指令代码，或可重新定位的指令代码或汇编指令代码</li>\n</ul>\n</li>\n<li><p>&#x3D;&#x3D;符号表的管理：&#x3D;&#x3D; 符号表存放了整个源程序的信息，变量名及其属性。在各个阶段填入、查找</p>\n</li>\n<li><p>&#x3D;&#x3D;出错处理：&#x3D;&#x3D; </p>\n<ul>\n<li>语法错误：在词法分析或语法分析时检测出来</li>\n<li>语义错误：在语义分析或运行时检测出来（因为语义分析是静态语义检查）</li>\n</ul>\n</li>\n<li><p>在一个特定的实现中，多个步骤可以组合成一趟</p>\n</li>\n<li><p>错误检查程序及表格管理程序贯穿始终</p>\n</li>\n<li><p>词法分析、语法分析、语义分析与中间代码生成及部分代码优化工作为前端部分，&#x3D;&#x3D;与目标机有关&#x3D;&#x3D;的代码优化和目标代码生成等为后端部分</p>\n</li>\n<li><p>示例：</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/04/CrcNty2m9qxSUEw.png\"></p>\n</li>\n</ul>\n<h2 id=\"3、编译程序的结构\"><a href=\"#3、编译程序的结构\" class=\"headerlink\" title=\"3、编译程序的结构\"></a>3、编译程序的结构</h2><p><img data-src=\"https://s2.loli.net/2022/04/07/Jxk1GIf8CK2mUir.png\" alt=\"image-20220407152024793\"></p>\n<h2 id=\"4、编译程序的组织方式及编译器的两个部分\"><a href=\"#4、编译程序的组织方式及编译器的两个部分\" class=\"headerlink\" title=\"4、编译程序的组织方式及编译器的两个部分\"></a>4、编译程序的组织方式及编译器的两个部分</h2><ul>\n<li><p><strong>遍&#x2F;趟：</strong>一个编译程序在编译时刻把源程序或源程序的等价物（中间程序）从头到尾扫描一遍并转换成另一紧邻的等价物的全过程</p>\n</li>\n<li><p><strong>单遍扫描：</strong>效率高但占用空间大，目标程序质量低</p>\n</li>\n<li><p><strong>多遍扫描：</strong>效率低但占用空间小，目标程序质量高，便于多人合作开发</p>\n</li>\n<li><p><strong>分析部分（编译器的前端）</strong>：主要由<strong>与源语言有关但与目标机器无关</strong> 的那些部分组成，词法分析、语法分析、语义分析、中间代码生成和部分代码优化工作</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/11/ZEPthWCzVc9xrnw.png\" alt=\"image-20220311113450229\"></p>\n</li>\n<li><p><strong>综合部分（编译器的后端）</strong>：主要包括编译中<strong>与目标机器有关</strong> 的那些部分，如与目标机有关的代码优化和目标代码生成等。可以通过改变编译程序的后端来实现编译程序的移植。</p>\n</li>\n</ul>\n<h2 id=\"5、编译程序的构造\"><a href=\"#5、编译程序的构造\" class=\"headerlink\" title=\"5、编译程序的构造\"></a>5、编译程序的构造</h2><ul>\n<li><p>构造编译程序可以用机器语言、汇编语言和高级语言</p>\n</li>\n<li><p>高级语言的&#x3D;&#x3D;自编译性&#x3D;&#x3D; ：一个语言可以用来编写自己的编译程序</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/04/LTgXiu1rkyNEzRY.png\"></p>\n</li>\n<li><p><strong>T型图</strong></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/05/15/yE3hexcragFKLtS.png\" alt=\"image-20220515221623573\"></p>\n</li>\n<li><p><strong>自展</strong></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/04/9RCBFkyrawcOHZg.png\"></p>\n</li>\n<li><p><strong>编译的移植</strong></p>\n<p>  将一个机器（宿主机）上的一个具有自编译性的高级语言编译程序移植到另一个机器（目标机）上</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/04/gmYOAdLE9kyGCfD.png\"></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/04/9MPFq1QcTsGdDtb.png\"></p>\n</li>\n</ul>\n<h1 id=\"第二章-形式语言概论\"><a href=\"#第二章-形式语言概论\" class=\"headerlink\" title=\"第二章 形式语言概论\"></a>第二章 形式语言概论</h1><h2 id=\"1、字母表与符号串\"><a href=\"#1、字母表与符号串\" class=\"headerlink\" title=\"1、字母表与符号串\"></a>1、字母表与符号串</h2><h3 id=\"字母表：\"><a href=\"#字母表：\" class=\"headerlink\" title=\"字母表：\"></a>字母表：</h3><p>符号(symbol)的非空有穷集，记为∑。</p>\n<p>eg.Σ&#x3D;{a，b，……，y，z}，Σ&#x3D;{0， 1}，Σ&#x3D;{BEGIN， END}</p>\n<h3 id=\"符号串：-string\"><a href=\"#符号串：-string\" class=\"headerlink\" title=\"符号串： string\"></a>符号串： string</h3><p>字母表中的符号所组成的任何有穷序列，通常用小写的字母表示。&#x3D;&#x3D;空串记为ε&#x3D;&#x3D; 。</p>\n<ul>\n<li><p>符号串相等要看顺序。eg.ab ≠ ba</p>\n</li>\n<li><p>符号串长度为符号串中符号的个数。 </p>\n<p>  |ε|&#x3D;0，|BEGINEND| &#x3D; 2</p>\n</li>\n<li><p>符号串的子串（subsequence）:必须是连续的，如abc的子串不能是ac</p>\n</li>\n<li><p>&#x3D;&#x3D;空串是任何一个符号串的子串、前缀和后缀&#x3D;&#x3D; 。</p>\n</li>\n<li><p>符号串的连接：拼接，&#x3D;&#x3D;ε是连接运算的单位元&#x3D;&#x3D; ，εx &#x3D; xε &#x3D; x</p>\n</li>\n<li><p>符号串的方幂(x^n^)：符号串与其自身的连接。x^0^  &#x3D; ε，x^1^ &#x3D; x，x^2^ &#x3D; xx。</p>\n</li>\n<li><p>符号串的逆（x^-1^ ）：符号串的倒置。 ε^-1^ &#x3D; ε，(x^-1^)^-1^ &#x3D; x，x &#x3D; αβ，x^-1^ &#x3D; β^-1^α^-1^ 。</p>\n<p>  eg.x &#x3D; abcd, x^-1^ &#x3D; dcba &#x3D; (cd)^-1^ (ab)^-1^ </p>\n</li>\n<li><p>符号串集合的和与积：</p>\n<ul>\n<li><p>A+B（或A∪B） &#x3D;{w | w∈A，或 w ∈ B}</p>\n</li>\n<li><p>A•B（或 AB）&#x3D; { xy |x ∈ A, y ∈ B}</p>\n<p>  &#x3D;&#x3D;{ε}是符号串集合乘积运算的零元&#x3D;&#x3D; ，{ε}A &#x3D; A{ε} &#x3D; A</p>\n</li>\n</ul>\n</li>\n<li><p>符号串集合的方幂：A^0^  &#x3D; {ε} ，A^1^ &#x3D; A，A^2^ &#x3D; AA</p>\n<p>  eg. A &#x3D; {ab,cd}  A^0^ &#x3D; {ε}，A^1^ &#x3D; {ab, cd} , A^2^ &#x3D; {abab, abcd, cdab, cdcd}</p>\n</li>\n<li><p>符号串集合的闭包和正闭包：</p>\n<ul>\n<li>闭包 <img data-src=\"https://s2.loli.net/2022/03/04/V6R7w9UzrQtChun.png\"></li>\n<li>正闭包<img data-src=\"https://s2.loli.net/2022/03/04/9S5VGjzHpRnquJt.png\"></li>\n<li>闭包比正闭包多了一个ε</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"语法描述：\"><a href=\"#语法描述：\" class=\"headerlink\" title=\"语法描述：\"></a>语法描述：</h3><p>可以采用自然语言、语法图、BNF范式、EBNF</p>\n<p>eg.标识符的语法描述：</p>\n<p>BNF范式（Backus-Naur Form） ：&lt;标识符&gt; ::&#x3D; &lt;字母&gt;|&lt;标识符&gt;&lt;字母&gt;|&lt;标识符&gt;&lt;数字&gt; </p>\n<p>扩充的BNF（EBNF：Extended BNF） ：&lt;标识符&gt; ::&#x3D; &lt;字母&gt; {&lt;字母&gt;|&lt;数字&gt;}</p>\n<h2 id=\"2、文法及其分类（主要考2型和3型文法）\"><a href=\"#2、文法及其分类（主要考2型和3型文法）\" class=\"headerlink\" title=\"2、文法及其分类（主要考2型和3型文法）\"></a>2、文法及其分类（主要考2型和3型文法）</h2><h3 id=\"概念：\"><a href=\"#概念：\" class=\"headerlink\" title=\"概念：\"></a>概念：</h3><p>文法G是一个四元组，G[S]&#x3D;（V<del>N</del>，V<del>T</del>，P，S）</p>\n<p>V<del>N</del> ：非终结符号集</p>\n<p>V<del>T</del>： 终结符号集。V<del>T</del> ∩V<del>N</del> &#x3D; ∅， V &#x3D; V<del>T</del> U V<del>N</del></p>\n<p>P ：产生式(production)的有穷非空的集合，是文法的核心</p>\n<p>S：开始符号</p>\n<h3 id=\"符号表示的约定：\"><a href=\"#符号表示的约定：\" class=\"headerlink\" title=\"符号表示的约定：\"></a><strong>符号表示的约定：</strong></h3><ul>\n<li>终结符号：排在前面的小写字母abc、运算符号、标点符号、数字0~9、黑体字符串，如<strong>id</strong></li>\n<li>非终结符号：排在前面的大写字母ABC、字母S（常用来表示开始符号）、小写且斜体的名字，如<em>expr</em></li>\n<li>在字母表中排在后面的大写字母如XYZ表示终结符号或者非终结符号</li>\n<li>在字母表中排在后面的小写字母如uvwxyz表示终结符号串（可能为ε）</li>\n<li>小写的希腊字母，表示文法符号串（可能为ε）</li>\n</ul>\n<h3 id=\"文法的分类\"><a href=\"#文法的分类\" class=\"headerlink\" title=\"文法的分类\"></a>文法的分类</h3><ul>\n<li><p>区别：对产生式规则的形式上施加不同的限制。<strong>从PSG到CSG到CFG到RG，限制逐渐增强，能力逐渐减弱</strong>，生成的语言集逐渐减小，形式越简单，构造的自动机越易实现 。</p>\n</li>\n<li><p>&#x3D;&#x3D;下半区的左边都是单个的非终结符号&#x3D;&#x3D; </p>\n<p>  &#x3D;&#x3D;上半区：不减为1型&#x3D;&#x3D; </p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/04/FEHy5VxOUkXIvSa.png\" alt=\"image.png\"></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>0型文法 L<del>0</del> （短语结构文法(phrase structure grammar, PSG)）</strong></th>\n<th>α→β ，α∈V^+^  ，β∈V^<em>^             <br />亦即α→β ，α∈V</em> V<del>N</del> V*<br />（必须要有一个非终结符号） ，β∈V *</th>\n<th>对应递归可枚举语言类，与图灵机（TM）能力相当，能力最强。</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>1型文法 L<del>1</del> (上下文相关文法(context sensitive grammar,CSG)，长度增长文法)</strong></td>\n<td>α→β ，&#x3D;&#x3D;1≤ |α|≤|β|&#x3D;&#x3D; （ 长度不减），α∈V^+^，β∈V^+^ <br />亦即α∈V* V<del>N</del> V*（必须要有一个非终结符号） ，β∈V^+^</td>\n<td>对应递归语言类，界限自动机<strong>LBA</strong>。静态语义处理。</td>\n</tr>\n<tr>\n<td><strong>2型文法L<del>2</del> ( 上下文无关文法(context free grammar,CFG))</strong></td>\n<td>A→β ，A∈V<del>N</del> （&#x3D;&#x3D;A是单个非终结符号&#x3D;&#x3D; ，长度为1），β∈V^+^ 。 扩充的2型文法：A→β ，A∈V<del>N</del>，β∈V*</td>\n<td>对应上下文无关语言类，用于定义程序设计语言的<strong>语法规则</strong>。下推自动机<strong>PDA</strong>（&#x3D;&#x3D;栈&#x3D;&#x3D;）。</td>\n</tr>\n<tr>\n<td><strong>3型文法L<del>3</del> ( 正则文法(regular grammar ,RG)、正规文法)</strong></td>\n<td>A→a 或 A→aB , A,B∈V<del>N</del> ，a∈V<del>T</del> （右线性文法的一种情况）。<br />&#x3D;&#x3D;左线性文法：&#x3D;&#x3D; A→a或A→Ba  , A,B∈V<del>N</del> ，a∈V<del>T</del> ^<em>^ ； <br />&#x3D;&#x3D;右线性文法：&#x3D;&#x3D; A→a 或 A→aB , A,B∈V<del>N</del> ，**a∈V<del>T</del> ^</em>^** 。这3种共同构成3型文法</td>\n<td>对应正规语言类，用于描述程序设计语言的<strong>词法规则</strong>。对应于<strong>FSA</strong>（有限状态自动机）。&#x3D;&#x3D;3型没有记忆功能&#x3D;&#x3D; ，要记也是记它自己，例如A-&gt;aA</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>在写正规文法时，可以从左往右考虑，一个非终结符号表示一个字符，然后把下一个字符交给下一个非终结符号表示</p>\n</blockquote>\n<blockquote>\n<p>如果要有记忆功能，可以用栈作为记忆装置（&#x3D;&#x3D;下推自动机&#x3D;&#x3D;）。如识别aaabbb，匹配一个b就弹出一个a，如果最终栈底的终结符号不能和符号串末尾的终结符号匹配的话，则报错。</p>\n</blockquote>\n<blockquote>\n<p>正规文法不能出现$\\varepsilon$</p>\n</blockquote>\n<p><strong>例子：</strong></p>\n<p><img data-src=\"https://s2.loli.net/2022/03/10/wOAmUG4D3QTrhcZ.png\" alt=\"image-20220310224157836\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/03/10/1JOq2LHtpFAhao5.png\" alt=\"image-20220310224629051\"></p>\n<hr>\n<p>&#x3D;&#x3D;文法的记忆功能：&#x3D;&#x3D; 精简版的括号配对问题。记住左右两边有几个配对的括号。<strong>3型文法没有记忆功能</strong>，因为它的非终结符号只能在一侧，无法记忆左右两边的一对。<strong>2型文法可以记忆两个</strong>，即左右两边的一对，如S→aSb，故2型文法可以用来表示a^n^b^n^ 。但2型文法的左边是单个的非终结符号，故不能记忆超过两个。<strong>1型文法可以记忆三个</strong>，故1型文法可以用来表示a^n^b^n^c^n^。</p>\n<p><img data-src=\"https://s2.loli.net/2022/03/10/Jo9TInwgZizP7e1.png\" alt=\"image-20220310224733082\"></p>\n<p>例子：所有由0和1组成并且每个0之后都至少跟着一个1的串的集合</p>\n<figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S -&gt; LS | <span class=\"type\">ε</span></span><br><span class=\"line\"><span class=\"type\">L</span> -&gt; <span class=\"number\">01</span> | <span class=\"type\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>所有由0和1组成的具有相同多个0和1的串的集合</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">S</span> -&gt; <span class=\"number\">0</span>S1S | <span class=\"number\">1</span>S0S | ε</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、文法和语言\"><a href=\"#3、文法和语言\" class=\"headerlink\" title=\"3、文法和语言\"></a>3、文法和语言</h2><h3 id=\"文法经过推导得到语言\"><a href=\"#文法经过推导得到语言\" class=\"headerlink\" title=\"文法经过推导得到语言\"></a>文法经过推导得到语言</h3><p><strong>推导：</strong></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/19/X8oUYwJbPTEC9AN.png\" alt=\"image-20220519160515000\"></p>\n<p>每一棵语法分析树都和唯一的最左推导、唯一的最右推导相关联</p>\n<p><strong>归约：</strong></p>\n<ul>\n<li>最右归约：最左推导的逆过程称为最右归约</li>\n<li>最左归约：最右推导（规范推导）的逆过程称为最左归约</li>\n</ul>\n<p><strong>句型：</strong>设有文法G[S]，如果 <img data-src=\"https://s2.loli.net/2022/03/04/UxMbG8l9iDrJEXs.png\">，则称符号串u为文法G[S]的句型</p>\n<p><strong>句子：</strong>设有文法G[S]，如果 <img data-src=\"https://s2.loli.net/2022/03/04/UxMbG8l9iDrJEXs.png\">，且u∈V<del>T</del> * ，则称符号串u为文法G[S]的句子。</p>\n<p>&#x3D;&#x3D;句子是一个终结符号串。&#x3D;&#x3D; </p>\n<p><strong>语言：</strong>设有文法G[S]，则文法G[S]描述的语言为<img data-src=\"https://s2.loli.net/2022/03/04/TDboNIEAueO5l4q.png\">(&#x3D;&#x3D;语言是合法句子的集合&#x3D;&#x3D; )</p>\n<p>如果两个文法生成相同语言，则称这两个文法是等价的。</p>\n<h3 id=\"语言经过凑规则得到文法\"><a href=\"#语言经过凑规则得到文法\" class=\"headerlink\" title=\"语言经过凑规则得到文法\"></a>语言经过凑规则得到文法</h3><p><strong>步骤：</strong>找出语言的若干典型句子→分析句子特点→根据句子特点凑规则→得到文法→检查文法</p>\n<p>检查文法时应满足：①语言的所有句子都能由S推导得到;  ②S推导得到的所有终结符号串都是语言的句子.（不多不少）</p>\n<p><strong>例子：</strong></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/19/vNcVBHm3sKZgDi8.png\" alt=\"image-20220519161355512\"></p>\n<blockquote>\n<p>给定一个文法，可以从结构上<strong>唯一</strong> 确定其语言；给定一个语言，可以确定相应的文法（<strong>不唯一</strong> ）。</p>\n</blockquote>\n<h3 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h3><ul>\n<li><p>规则递归（直接递归）：文法的产生式为U→xUy形式</p>\n</li>\n<li><p>规则左递归（直接左递归）：文法的产生式为U→Uy形式</p>\n</li>\n<li><p>规则右递归（直接右递归）：文法的产生式为U→xU形式</p>\n</li>\n<li><p>文法递归（间接递归）：文法中有推导<img data-src=\"https://s2.loli.net/2022/03/04/xBEeGqjbaPUFmcW.png\"></p>\n</li>\n<li><p>文法左递归（间接左递归）：文法中有推导<img data-src=\"https://s2.loli.net/2022/03/04/SHPlQYW7qhtwUXa.png\" alt=\"文法左递归.png\"></p>\n</li>\n<li><p>文法右递归（间接右递归）：文法中有推导<img data-src=\"https://s2.loli.net/2022/03/10/RYGZlHrem34jb6d.png\" alt=\"image-20220310164820052\"></p>\n</li>\n</ul>\n<h3 id=\"语法分析树\"><a href=\"#语法分析树\" class=\"headerlink\" title=\"语法分析树\"></a>语法分析树</h3><p>语法分析树展现了从文法的开始符号推导出相应语言中的符号串的过程。一棵语法分析树的叶子结点从左向右构成了一个终结符号串。</p>\n<ul>\n<li>根结点的标号（文法符号）为文法的开始符号</li>\n<li>每个内部结点的标号为一个非终结符号</li>\n<li>叶子结点的标号为一个终结符号或者ε</li>\n<li>若一个标记为U的结点，它有标记依次为x<del>1</del>、x<del>2</del>、…、x<del>n</del>的直接后继结点，则U→x<del>1</del>x<del>2</del>…x<del>n</del>必定是文法G的一条产生式。</li>\n</ul>\n<h3 id=\"二义性问题\"><a href=\"#二义性问题\" class=\"headerlink\" title=\"二义性问题\"></a>二义性问题</h3><ul>\n<li><p><strong>句子的二义性</strong>（&#x3D;&#x3D;必考&#x3D;&#x3D; ）：一个句子有两棵（或以上）不同的语法树；存在两个（或以上）不同的最左推导；存在两个（或以上）不同的最右推导（每一棵语法分析树都和唯一的最左推导、唯一的最右推导相关联）</p>\n</li>\n<li><p><strong>文法的二义性</strong>：文法G中的某一句子具有二义性</p>\n</li>\n<li><p><strong>语言的二义性</strong>：不存在任何无二义性的文法来描述某语言L。（也称为先天二义性）</p>\n</li>\n</ul>\n<h3 id=\"运算符的结合性和优先级\"><a href=\"#运算符的结合性和优先级\" class=\"headerlink\" title=\"运算符的结合性和优先级\"></a>运算符的结合性和优先级</h3><p><strong>结合性</strong></p>\n<ul>\n<li><p>左结合性：当一个运算分量左右两侧都有同一个运算符时，它属于左边的运算符。如+-*&#x2F;</p>\n</li>\n<li><p>右结合性：一个运算分量左右两侧都有同一个运算符时，它属于右边的运算符。如&#x3D;</p>\n<blockquote>\n<p>左结合性的文法，语法分析树是向左下端延伸的；<br>右结合性的文法，语法分析树是向右下端延伸的</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>优先级</strong></p>\n<ul>\n<li><p>n层优先级一般需要n+1个非终结符号，其中，最下面那个产生式左边的非终结符号的产生式体只能是单个运算分量或括号括起来的表达式。然后，对于每个优先级都有一个非终结符，表示能被该优先级或更高的优先级的运算符分开的表达式。</p>\n</li>\n<li><p>例子：算术表达式的文法</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/11/WrPyD8RK4UvhQ5J.png\" alt=\"image-20220311184147910\"></p>\n</li>\n</ul>\n<h2 id=\"4、文法的实用限制\"><a href=\"#4、文法的实用限制\" class=\"headerlink\" title=\"4、文法的实用限制\"></a>4、文法的实用限制</h2><h3 id=\"消除文法的二义性（-x3D-x3D-重难点-x3D-x3D-）\"><a href=\"#消除文法的二义性（-x3D-x3D-重难点-x3D-x3D-）\" class=\"headerlink\" title=\"消除文法的二义性（&#x3D;&#x3D;重难点&#x3D;&#x3D;）\"></a>消除文法的二义性（&#x3D;&#x3D;重难点&#x3D;&#x3D;）</h3><p><strong>方法一：设定消除二义性规则：</strong>在语义上加些限制</p>\n<p><strong>方法二：重写文法</strong>：重新构造一个等价的无二义性文法。</p>\n<p>考虑运算符的优先级和结合性。</p>\n<ul>\n<li>采用优先级联的方式——最低级的运算最靠近语法树的根结点，从上往下，运算的优先级依次增加</li>\n<li>左结合性：左递归，右结合性：右递归</li>\n</ul>\n<p><img data-src=\"https://s2.loli.net/2022/03/11/PiaWFlI5uXQVpEG.png\" alt=\"image-20220311104535673\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/03/11/ElRIWuefnUO83it.png\" alt=\"image-20220311111404819\"></p>\n<h3 id=\"文法的压缩（化简）\"><a href=\"#文法的压缩（化简）\" class=\"headerlink\" title=\"文法的压缩（化简）\"></a>文法的压缩（化简）</h3><p>若文法G[S]的所有产生式都满足下列实用限制条件：</p>\n<p>1、没有<strong>多余产生式</strong>（包括无法推导出终结符号串的产生式（不可终止）和从开始符号出发的所有推导都不会用到的产生式（不可达））。</p>\n<p>2、没有<strong>有害产生式U→U</strong>（有该产生式的文法一定是二义性的）</p>\n<p>则称文法G[S]是<strong>压缩或化简</strong>的。</p>\n<p>例子：</p>\n<img data-src=\"https://s2.loli.net/2022/03/11/QKhBbEqpDTuOmng.png\" alt=\"image-20220311091509810\" style=\"zoom:67%;\" />\n\n\n\n<h3 id=\"删除单规则（单产生式）：A→B\"><a href=\"#删除单规则（单产生式）：A→B\" class=\"headerlink\" title=\"删除单规则（单产生式）：A→B\"></a>删除单规则（单产生式）：A→B</h3><p>单产生式会使得语法树的深度加深，加大存储开销</p>\n<img data-src=\"https://s2.loli.net/2022/03/11/SG89bKnl6wyrTqX.png\" alt=\"image-20220311091824568\" style=\"zoom: 67%;\" />\n\n<h3 id=\"删除空产生式（ε-规则）：-U→ε\"><a href=\"#删除空产生式（ε-规则）：-U→ε\" class=\"headerlink\" title=\"删除空产生式（ε 规则）： U→ε\"></a>删除空产生式（ε 规则）： U→ε</h3><p><strong>步骤：</strong></p>\n<ul>\n<li>找出可能推导出ε的非终结符号，本例中为B、D</li>\n<li>将产生式体中可能为ε的非终结符号替换为ε并删除ε</li>\n<li>特殊情形：S-&gt;ε的时候，不能去掉</li>\n</ul>\n<img data-src=\"https://s2.loli.net/2022/03/11/YdKyhqXgNU7THcv.png\" alt=\"image-20220311091942023\" style=\"zoom:67%;\" />\n\n \n\n<h3 id=\"消除直接左递归U→Uy\"><a href=\"#消除直接左递归U→Uy\" class=\"headerlink\" title=\"消除直接左递归U→Uy\"></a>消除直接左递归U→Uy</h3><p><strong>（期末考试一般考直接改写法）</strong></p>\n<p>方法：</p>\n<ul>\n<li><p>&#x3D;&#x3D;采用EBNF表示&#x3D;&#x3D; </p>\n<blockquote>\n<p>[x]— x可以出现零次或一次</p>\n<p>{x}——x可以出现零次到多次</p>\n<p>x(y|z)——等价于xy 或 xz，用于提取公因子</p>\n</blockquote>\n<p>  步骤： <img data-src=\"https://s2.loli.net/2022/03/11/R2xWwSv16Zf8grb.png\" alt=\"image-20220311093151304\"></p>\n<p>  即<img data-src=\"https://s2.loli.net/2022/04/07/cH1sfzCBe7LYE9O.png\" alt=\"image-20220407163924252\"></p>\n</li>\n<li><p>&#x3D;&#x3D;直接改写法：&#x3D;&#x3D; 引进新的非终结符号，将左递归改写为右递归</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/11/D75j3twy8Qgl1Kz.png\" alt=\"image-20220311093533406\"></p>\n</li>\n<li><p><img data-src=\"https://s2.loli.net/2022/03/11/CBjznZkLeY4Dru9.png\"></p>\n</li>\n</ul>\n<h3 id=\"消除间接左递归\"><a href=\"#消除间接左递归\" class=\"headerlink\" title=\"消除间接左递归\"></a>消除间接左递归<img data-src=\"https://s2.loli.net/2022/04/07/WKsIfw9HEaAeC1u.png\" alt=\"image-20220407164315981\" style=\"zoom: 67%;\" /></h3><ul>\n<li><p>方法：&#x3D;&#x3D;转换成直接左递归来消除&#x3D;&#x3D;</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/04/07/vWbnjNEoTaGDdRz.png\" alt=\"image-20220407205525749\"></p>\n</li>\n<li><p>例子：</p>\n  <img data-src=\"https://s2.loli.net/2022/04/07/IcoNtZhf1Kx6UbF.png\" alt=\"image-20220407231035529\" style=\"zoom:67%;\" />\n\n  <img data-src=\"https://s2.loli.net/2022/04/07/QjGiIAygplPCMBD.png\" alt=\"image-20220407231055235\" style=\"zoom:67%;\" /></li>\n</ul>\n<h1 id=\"第三章-有穷自动机-x3D-x3D-8个算法，确定化、最小化、RG和FA和RE之间的六个转换-x3D-x3D\"><a href=\"#第三章-有穷自动机-x3D-x3D-8个算法，确定化、最小化、RG和FA和RE之间的六个转换-x3D-x3D\" class=\"headerlink\" title=\"第三章  有穷自动机(&#x3D;&#x3D;8个算法，确定化、最小化、RG和FA和RE之间的六个转换&#x3D;&#x3D;)\"></a>第三章  有穷自动机(&#x3D;&#x3D;8个算法，确定化、最小化、RG和FA和RE之间的六个转换&#x3D;&#x3D;)</h1><blockquote>\n<p>自动机的概念：自动机是一种能进行<strong>运算</strong>并实现<strong>自我控制</strong>(根据外界的信息改变自己的状态)的装置，计算机就是一部自动机。自动机是描述符号串处理的强有力的工具。<strong>功能：识别语言</strong></p>\n</blockquote>\n<h2 id=\"3-1-有穷自动机的形式定义\"><a href=\"#3-1-有穷自动机的形式定义\" class=\"headerlink\" title=\"3.1 有穷自动机的形式定义\"></a>3.1 有穷自动机的形式定义</h2><h3 id=\"1、有穷自动机的分类及组成\"><a href=\"#1、有穷自动机的分类及组成\" class=\"headerlink\" title=\"1、有穷自动机的分类及组成\"></a>1、有穷自动机的分类及组成</h3><ul>\n<li><p>&#x3D;&#x3D;DFA:&#x3D;&#x3D;  Deterministic Finite (State) Automation，确定的有穷(状态)自动机。当前状态经一个输入到达<strong>下一个</strong>状态。</p>\n</li>\n<li><p>&#x3D;&#x3D;NDFA（or NFA）:&#x3D;&#x3D;  Non Deterministic Finite (State) Automation非确定的有穷自动机。当前状态经一个输入可到达<strong>多个</strong>状态。</p>\n<blockquote>\n<p>FA的等价性： L(A<del>1</del>) &#x3D; L(A<del>2</del>)，则称有穷自动机A<del>1</del>和A<del>2</del>是<strong>等价</strong>的（类比文法等价）</p>\n</blockquote>\n<blockquote>\n<p>关系：<strong>DFA是NDFA的特例</strong>，对每个NDFA N一定存在一个DFA M，使得L(M)&#x3D;L(N)，但这种DFA M可能不唯一。</p>\n<p>q表示状态，Q表示状态集</p>\n<p><strong>用有穷自动机表示无穷：状态转换的回路（文法：递归）</strong></p>\n<p><img data-src=\"https://s2.loli.net/2022/03/31/WaIvVMDhmdj1gJL.png\" alt=\"image-20220331234125325\"></p>\n</blockquote>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>DFA &#x3D; (Q，∑，t，&#x3D;&#x3D;q<del>0</del>&#x3D;&#x3D;，F)</th>\n<th>DFA的扩充</th>\n<th>NDFA &#x3D;  (Q，∑，t，&#x3D;&#x3D;Q<del>0</del>&#x3D;&#x3D;，F)</th>\n<th>NDFA 的扩充</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Q：有穷非空的状态集</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Σ：有穷的输入字母表</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>t：<strong>单值映射Q×&#x3D;&#x3D;Σ&#x3D;&#x3D;→Q</strong> 。 t(q, x)&#x3D;q’。可以理解由当前状态和<strong>一个输入字符</strong>得到下一个状态</td>\n<td>t：<em><em>单值映射Q×&#x3D;&#x3D;Σ</em>&#x3D;&#x3D;→Q</em>* 。 t(q, ε) &#x3D; q。t(q, aα) &#x3D; t ( t(q, a),  α)，其中q∈Q， a ∈Σ,  α∈Σ*。可以理解由当前状态和<strong>一个符号串</strong>得到下一个状态</td>\n<td>t：<strong>多值映射Q×&#x3D;&#x3D;Σ&#x3D;&#x3D;→2^Q^</strong>。t(q,x)&#x3D;{q<del>1</del>,q<del>2</del>,…,q<del>n</del>} (状态的幂集)</td>\n<td>t：<em><em>多值映射Q×&#x3D;&#x3D;Σ</em>&#x3D;&#x3D;→2^Q^</em>* 。 t(q, ε)&#x3D;q。t(q, aα) &#x3D; t(q<del>1</del>,α)∪t(q<del>2</del>,α)∪… ∪t(q<del>n</del>,α)，其中 a ∈Σ,  α∈Σ*, t(q, a) &#x3D; {q<del>1</del>, q<del>2</del>… q<del>n</del>}。</td>\n</tr>\n<tr>\n<td><strong>q<del>0</del>：∈Q，是开始状态</strong></td>\n<td></td>\n<td><strong>Q<del>0</del>：⊆Q，是开始状态集</strong>。即使只有一个开始状态，也要用{}</td>\n<td></td>\n</tr>\n<tr>\n<td>F：⊆Q，非空终止状态集合</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>DFA的扩充，使得DFA可以描述对符号串的识别。**如果t(q<del>0</del>, α) ∈ F，则α可被DFA接受(或识别)*<em>，即从开始状态经α可到达某一个终止状态。被DFA A识别的符号串集合，记为L(A)，L(A) &#x3D; {α∈Σ</em> | t(q<del>0</del>, α)  ∈ F}，即这台自动机所能识别和接受的语言。α是L(A)的句子 。</td>\n<td></td>\n<td>NDFA的扩充，使得NDFA可以描述对符号串的识别。**如果q ∈ t(q<del>0</del>, α) , q<del>0</del>∈ Q<del>0</del> ，q∈ F，则α可被DFA接受(或识别)*<em>，即从某一个开始状态经α可到达某一个终止状态。被NDFA A识别的符号串集合，记为L(A)，L(A) &#x3D; {α∈Σ</em> | t(q<del>0</del>, α)  ∩ F ≠ ∅ ,q<del>0</del>∈Q<del>0</del> }</td>\n</tr>\n</tbody></table>\n<h3 id=\"2、有穷自动机的表示：\"><a href=\"#2、有穷自动机的表示：\" class=\"headerlink\" title=\"2、有穷自动机的表示：\"></a>2、有穷自动机的表示：</h3><ul>\n<li><p>状态转换表</p>\n</li>\n<li><p>状态转换图（<strong>更常用</strong>）</p>\n<blockquote>\n<p>非空终止状态用同心圆表示</p>\n</blockquote>\n</li>\n<li><p>&#x3D;&#x3D;DFA:&#x3D;&#x3D; </p>\n  <img data-src=\"https://s2.loli.net/2022/03/17/dbpaewYO5WZ4yc9.png\" alt=\"image-20220317150650779\" style=\"zoom:67%;\" />\n</li>\n<li><p>&#x3D;&#x3D;NDFA&#x3D;&#x3D;</p>\n  <img data-src=\"https://s2.loli.net/2022/03/17/ZgFyLjveGRzAbwU.png\" alt=\"image-20220317154458730\"  /></li>\n</ul>\n<h2 id=\"3-2-NDFA到DFA的转换（-x3D-x3D-必考-x3D-x3D-）\"><a href=\"#3-2-NDFA到DFA的转换（-x3D-x3D-必考-x3D-x3D-）\" class=\"headerlink\" title=\"3.2 NDFA到DFA的转换（&#x3D;&#x3D;必考&#x3D;&#x3D;）\"></a>3.2 NDFA到DFA的转换（&#x3D;&#x3D;必考&#x3D;&#x3D;）</h2><blockquote>\n<p>DFA是NDFA的特例，对每个NDFA N一定存在一个DFA M，使得L(M)&#x3D;L(N)，但这种DFA M可能不唯一</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph LR;</span><br><span class=\"line\">\ta[NDFA]--&gt;|确定化|b[DFA];</span><br><span class=\"line\">\tb[DFA]--&gt; |化简|c[最小化的DFA];</span><br><span class=\"line\">\tc[最小化的DFA] --&gt; d[词法分析程序];</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1、确定化-NDFA-gt-DFA（-x3D-x3D-注意造表法是可以直接用的，不需要消-x3D-x3D-varepsilon-）\"><a href=\"#1、确定化-NDFA-gt-DFA（-x3D-x3D-注意造表法是可以直接用的，不需要消-x3D-x3D-varepsilon-）\" class=\"headerlink\" title=\"1、确定化:   NDFA -&gt; DFA（&#x3D;&#x3D;注意造表法是可以直接用的，不需要消&#x3D;&#x3D;$\\varepsilon$）\"></a>1、确定化:   NDFA -&gt; DFA（&#x3D;&#x3D;注意造表法是可以直接用的，不需要消&#x3D;&#x3D;$\\varepsilon$）</h3><p>子集法 &#x2F; 造表法（&#x3D;&#x3D;考造表法&#x3D;&#x3D;）</p>\n<ul>\n<li><p>&#x3D;&#x3D;子集法。&#x3D;&#x3D; </p>\n<p>  <strong>步骤：</strong></p>\n<ul>\n<li><p>&#x3D;&#x3D;空移环路的寻找和消除&#x3D;&#x3D;：消除从状态A开始并以A结束的空移动序列(空移环路上的所有状态都是等价的)，把它们合并成一个结点并取公共名。<strong>注意Q<del>0</del>和F</strong>。<strong>注意a弧、b弧等等会变成自环</strong></p>\n<blockquote>\n<p>ε自动机：自动机的弧上允许标记ε，称此FA为ε自动机，记为εFA（εNDFA或εDFA）。εNDFA &#x3D; (Q，∑ ∪{ε}，t，Q<del>0</del>，F)</p>\n<p>消除ε自动机中的空移：对于εFA ，总可以构造等价的FA，使得L (εFA) &#x3D; L(FA)</p>\n</blockquote>\n</li>\n<li><p>&#x3D;&#x3D;消除余下的空移&#x3D;&#x3D;： εNDFA -&gt; NDFA。<strong>去ε弧、添等价弧(包括ε弧)、置特殊状态（终态必须置，初态可以不置）</strong></p>\n</li>\n</ul>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/17/6ADyZeGocNvkCr7.png\" alt=\"image-20220317165134820\"></p>\n<ul>\n<li><p>&#x3D;&#x3D;利用子集法确定化&#x3D;&#x3D;   NDFA  -&gt; DFA</p>\n<p>  思想：把从状态到状态的多值映射转化为状态集到状态集的单值映射</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/17/mr486kDGcZIheNl.png\" alt=\"image-20220317170543983\"></p>\n</li>\n</ul>\n<blockquote>\n<p>子集法的正确性的证明：α∈L(A)当且仅当α∈L(A’)</p>\n<p>DFA:从开始状态（是一个状态类）到某一个终止状态子集，NFA：从某一个开始状态到某一个终止状态，这两个映射是可以转换的</p>\n</blockquote>\n<p>  <strong>局限性：</strong>状态数太多（2^Q^ - 1个状态，存储和查找的开销大）、存在不可达状态（挂起）</p>\n<p>  <strong>例子：</strong></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/24/dEcwUWZuGxOsYDF.png\" alt=\"image-20220324214849272\"></p>\n<hr>\n</li>\n<li><p>&#x3D;&#x3D;造表法（考）&#x3D;&#x3D;(造表法本质还是子集法，子集法和造表法统称为子集法  )</p>\n<ul>\n<li><p><strong>思想</strong>：为避免不可达状态，从初始状态出发，计算t′，依次构造其后继状态，进行确定化。</p>\n<blockquote>\n<p>一些概念：</p>\n<ul>\n<li><strong>I<del>a</del><strong>：I<del>a</del> &#x3D; t’(I, a)，即从I中的状态出发经过一条a弧（可跳过a弧</strong>前后</strong>的任意条ε弧）到达的状态集合</li>\n<li><strong>状态子集I的ε闭包（ ε-CLOSURE(I) ）</strong>：包含了I中的状态和它们经过任意条ε弧能到达的Q中的状态</li>\n<li><strong>I<del>a</del>子集</strong>：即从I中的状态出发，经过一条a弧（可跳过a弧<strong>前</strong>的任意条ε弧）到达的状态集合，称为<strong>J</strong>。I<del>a</del> &#x3D; ε-CLOSURE(J)</li>\n</ul>\n</blockquote>\n</li>\n<li><p><strong>步骤：</strong></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/17/voLRXMOuwQh8KlJ.png\" alt=\"image-20220317182540359\"></p>\n</li>\n<li><p><strong>特点</strong>：简单有效、不存在不可达状态、状态数比子集法大大减少</p>\n</li>\n<li><p>例子：</p>\n  <img data-src=\"https://s2.loli.net/2022/03/24/NXDbZx2z1VdTJLK.png\" alt=\"image-20220324215954121\" style=\"zoom:67%;\" />\n\n  <img data-src=\"https://s2.loli.net/2022/03/24/B9zabF2JuGSEV13.png\" alt=\"image-20220324215944493\" style=\"zoom: 50%;\" /></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2、最小化：DFA-gt-MFA\"><a href=\"#2、最小化：DFA-gt-MFA\" class=\"headerlink\" title=\"2、最小化：DFA -&gt; MFA\"></a>2、最小化：DFA -&gt; MFA</h3><ul>\n<li><p>目标：寻找等价的、状态数更少的DFA M’（M’是唯一的）</p>\n</li>\n<li><p><strong>思想：合并等价状态、删除无关状态</strong></p>\n<blockquote>\n<p><code>等价状态：</code>从两个状态出发可以识别同一个字符串(任意一个)到达终态，则称这两个状态是等价的，否则称它们是可区分的。即$$\\forall\\alpha\\epsilon\\Sigma^*, t(q, \\alpha)\\epsilon F当且仅当t(q’, \\alpha)\\epsilon F$$</p>\n</blockquote>\n</li>\n<li><p>最小化算法（划分法）：把状态集划分成若干个互不相交的等价状态集</p>\n<p>  步骤：</p>\n<ul>\n<li><p>构造状态集的划分，&#x3D;&#x3D;从终止状态集和非终止状态集里再细分&#x3D;&#x3D;（因此最终至少有两个状态）</p>\n</li>\n<li><p>取每组中的一个状态作代表，合并等价状态。</p>\n<blockquote>\n<p>例如，A和B是等价状态，则如果选A为代表而删除B，则应<strong>将射入B的弧补到A上</strong>，<strong>不需要补射出B的弧</strong>，因为由等价状态的定义可知，A和B的射出的弧到达的下一个状态是相同的</p>\n</blockquote>\n</li>\n<li><p>删去无关状态，包括不可达状态和死状态等</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/17/owSlZ7rmcPRtM2A.png\" alt=\"image-20220317220019401\"></p>\n</li>\n</ul>\n</li>\n<li><p>例子：</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/24/9kuErAlD1L76efa.png\" alt=\"image-20220324221541448\"></p>\n</li>\n</ul>\n<p><img data-src=\"https://s2.loli.net/2022/03/24/RDnC9dptK1QNkXu.png\" alt=\"image-20220324221835671\"></p>\n<h3 id=\"3、从化简后的DFA到程序表示-MFA-gt-scanner\"><a href=\"#3、从化简后的DFA到程序表示-MFA-gt-scanner\" class=\"headerlink\" title=\"3、从化简后的DFA到程序表示 MFA -&gt; scanner\"></a>3、从化简后的DFA到程序表示 MFA -&gt; scanner</h3><p><img data-src=\"https://s2.loli.net/2022/03/24/QnbFtWksm9KjPAc.png\" alt=\"image-20220324222006003\"></p>\n<h2 id=\"3-3-正规文法-RG-与FA\"><a href=\"#3-3-正规文法-RG-与FA\" class=\"headerlink\" title=\"3.3 正规文法(RG)与FA\"></a>3.3 正规文法(RG)与FA</h2><h3 id=\"1、RG与FA\"><a href=\"#1、RG与FA\" class=\"headerlink\" title=\"1、RG与FA\"></a>1、RG与FA</h3><ul>\n<li>RG是语言的生成规则</li>\n<li>FA识别（接受）语言</li>\n</ul>\n<h3 id=\"2、RG-gt-FA：\"><a href=\"#2、RG-gt-FA：\" class=\"headerlink\" title=\"2、RG -&gt; FA：\"></a>2、RG -&gt; FA：</h3><p>由正规文法G[S]可直接构造一个与之等价的FA A，使得L(G)&#x3D;L(A)。</p>\n<p><strong>步骤：</strong></p>\n<ul>\n<li><p>令G的终结符号集V<del>T</del>为A的字母表∑； </p>\n</li>\n<li><p>G的非终结符号作为A的状态，G的开始符号为A的开始状态； </p>\n</li>\n<li><p>&#x3D;&#x3D;增加一个终止状态Z（Z ∉ V<del>N</del>）；&#x3D;&#x3D;</p>\n</li>\n<li><p>形如U→a的规则，引一条从状态U到终止状态Z的标记为a的弧； </p>\n</li>\n<li><p>形如U→aW的规则，引一条从状态U到W的a弧</p>\n<p>  对应关系如下：</p>\n<table>\n<thead>\n<tr>\n<th>G[S]&#x3D;（V<del>N</del>，V<del>T</del>，P，S）</th>\n<th>NFA &#x3D; (Q，∑，t，{q<del>0</del>}，F) (初态唯一,因为要和S对应)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>V<del>N</del></td>\n<td>Q</td>\n</tr>\n<tr>\n<td>V<del>T</del></td>\n<td>∑</td>\n</tr>\n<tr>\n<td>P</td>\n<td>t，形如U→a的规则，引一条从状态U到终止状态Z的标记为a的弧；     形如U→aW的规则，引一条从状态U到W的a弧（特别地，如果有形如U→aU的规则，引一条从状态U到状态U的自环）</td>\n</tr>\n<tr>\n<td>S</td>\n<td>q<del>0</del></td>\n</tr>\n<tr>\n<td></td>\n<td><strong>F(新增加的，∉ V<del>N</del>)</strong></td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<p>&#x3D;&#x3D;eg.&#x3D;&#x3D;</p>\n<p><img data-src=\"https://s2.loli.net/2022/03/31/joSRI4KyDEards1.png\" alt=\"image-20220331230128319\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/03/31/7YVoTF6COnZKIJR.png\" alt=\"image-20220331231013992\"></p>\n<h3 id=\"3、FA-gt-RG\"><a href=\"#3、FA-gt-RG\" class=\"headerlink\" title=\"3、FA -&gt; RG\"></a>3、FA -&gt; RG</h3><p>由有穷自动机FA A可直接构造一个与之等价的正规文法G，使得L(G)&#x3D;L(A)</p>\n<p><strong>步骤：</strong></p>\n<ul>\n<li><p>自动机A中的每一个状态均作为G的非终结符号，其中A的开始状态作为G的开始符号，A的输入字母表∑中的所有符号作为G的终结符号；</p>\n</li>\n<li><p>对A中V ∈ t(U,a)的映射，构造G的产生式U∷&#x3D;aV；若V∈F，则构造G的产生式 U::&#x3D;a；</p>\n</li>\n<li><p>若A中q<del>0</del>∈F，则构造G的产生式S∷&#x3D;ε</p>\n<p>  对应关系如下：</p>\n<table>\n<thead>\n<tr>\n<th>DFA &#x3D; (Q，∑，t，q<del>0</del>，F)</th>\n<th>G[S]&#x3D;（V<del>N</del>，V<del>T</del>，P，S）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Q</td>\n<td>V<del>N</del></td>\n</tr>\n<tr>\n<td>∑</td>\n<td>V<del>T</del></td>\n</tr>\n<tr>\n<td>t</td>\n<td>P，对A中V ∈ t(U,a)的映射，构造G的产生式U∷&#x3D;aV；<br />若V∈F，则构造G的产生式 U::&#x3D;a；<br />若A中q<del>0</del>∈F，则构造G的产生式S∷&#x3D;ε</td>\n</tr>\n<tr>\n<td>q<del>0</del></td>\n<td>S</td>\n</tr>\n<tr>\n<td>F</td>\n<td></td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<p>&#x3D;&#x3D;eg.&#x3D;&#x3D;</p>\n<p><img data-src=\"https://s2.loli.net/2022/03/31/bZth9rlPiADF12E.png\" alt=\"image-20220331231121040\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/03/31/Tqyr9uzPmBH3pFL.png\" alt=\"image-20220331231701572\"></p>\n<h2 id=\"3-4-正规表达式-x2F-正则表达式-RE-与FA\"><a href=\"#3-4-正规表达式-x2F-正则表达式-RE-与FA\" class=\"headerlink\" title=\"3.4 正规表达式&#x2F;正则表达式(RE)与FA\"></a>3.4 正规表达式&#x2F;正则表达式(RE)与FA</h2><h3 id=\"1、RE（可以直观地描述出语言的特征）\"><a href=\"#1、RE（可以直观地描述出语言的特征）\" class=\"headerlink\" title=\"1、RE（可以直观地描述出语言的特征）\"></a>1、RE（可以直观地描述出语言的特征）</h3><ul>\n<li><p>&#x3D;&#x3D;概念：&#x3D;&#x3D; </p>\n<p>  三种运算：或运算 a|b 、连接运算 ab、闭包运算 a^<em>^(正闭包a^+^)。*<em>（优先级由低到高）</em></em></p>\n<p>  &#x3D;&#x3D;注意在RE中，0个或无穷多个不是用{}来表示，而是用*来表示，大括号是集合&#x3D;&#x3D;</p>\n</li>\n</ul>\n<p><img data-src=\"https://s2.loli.net/2022/03/31/5pFHox1ryEjbhTw.png\" alt=\"image-20220331231923652\"></p>\n<p><strong>eg.</strong></p>\n<p><img data-src=\"https://s2.loli.net/2022/03/31/YozVNxEDCfHuWy2.png\" alt=\"image-20220331232616611\"></p>\n<img data-src=\"https://s2.loli.net/2022/03/31/1dEyrHmjPx54nhX.png\" alt=\"image-20220331233246560\" style=\"zoom:50%;\" />\n\n<ul>\n<li><p>&#x3D;&#x3D;RE等价：&#x3D;&#x3D; 设e<del>1</del>，e<del>2</del>均为∑上的正规表达式，若 L(e<del>1</del>)&#x3D;L(e<del>2</del>)，则称e<del>1</del>与e<del>2</del>等价，记为：e<del>1</del>&#x3D; e<del>2</del></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/31/P3IEHFbZvWhRwYr.png\" alt=\"image-20220331233053138\"></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/31/QWnVp9zkxHY2MoZ.png\" alt=\"image-20220331233112495\"></p>\n</li>\n<li><p>&#x3D;&#x3D;RE的性质：&#x3D;&#x3D; </p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/31/Xjo15J2dBLHhYC3.png\" alt=\"image-20220331232826488\"></p>\n</li>\n</ul>\n<h3 id=\"2、RE-–-gt-FA\"><a href=\"#2、RE-–-gt-FA\" class=\"headerlink\" title=\"2、RE –&gt; FA\"></a>2、RE –&gt; FA</h3><p>对于字母表Σ上的任意正规表达式e，一定可以构造一个输入字母表Σ上的<strong>NDFA A</strong>，使得L(A)&#x3D;L(e)</p>\n<p><strong>步骤：</strong></p>\n<ul>\n<li><p>构造广义NFA：<strong>S是惟一开始状态，Z是惟一终止状态</strong>。弧标记e。</p>\n</li>\n<li><p>根据分解规则分解e ，得到与e对应的NFA。</p>\n<p>  分解规则如下：</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/17/uoEaYrUIJ8gFxbj.png\" alt=\"image-20220317230004987\"></p>\n</li>\n</ul>\n<p>&#x3D;&#x3D;eg&#x3D;&#x3D;</p>\n<p><img data-src=\"https://s2.loli.net/2022/03/31/p6tFHduCrOm1oL5.png\" alt=\"image-20220331233904038\"><img data-src=\"https://s2.loli.net/2022/03/31/Q7WpazfkA3UgZwi.png\" alt=\"image-20220331233938288\" style=\"zoom:67%;\" /></p>\n<h3 id=\"3、FA-gt-RE\"><a href=\"#3、FA-gt-RE\" class=\"headerlink\" title=\"3、FA -&gt; RE\"></a>3、FA -&gt; RE</h3><ul>\n<li><p>由有穷自动机FA A所识别的语言L(A)，可以用Σ上 的RE e来表示，使得L(A)&#x3D;L(e)</p>\n<p>  <strong>步骤</strong></p>\n</li>\n<li><p>（&#x3D;&#x3D;当初态和终态不唯一时&#x3D;&#x3D;）在FA A的状态图中增加两个结点：<strong>S是惟一开始状态</strong>，从S向原开始状态连ε弧；<strong>Z是惟一终止状态</strong>，从原终止状态向Z连ε弧。</p>\n</li>\n<li><p>利用下列替换规则逐步消去状态图中的结点和弧，直至仅剩下S到Z的一条弧为止，则该弧上的标记即为RE e。</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/17/tVZi5aIBq1HJ6P9.png\" alt=\"image-20220317230404452\"></p>\n</li>\n</ul>\n<p>&#x3D;&#x3D;eg&#x3D;&#x3D;</p>\n<img data-src=\"https://s2.loli.net/2022/03/31/YdrHoz6ZUMKlbIk.png\" alt=\"image-20220331234216167\" style=\"zoom:67%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/03/31/rsiz7VASouyqd6H.png\" alt=\"image-20220331234837905\" style=\"zoom:50%;\" />\n\n<h2 id=\"3-5-RE与RG\"><a href=\"#3-5-RE与RG\" class=\"headerlink\" title=\"3.5 RE与RG\"></a>3.5 RE与RG</h2><h3 id=\"1、RG-gt-RE\"><a href=\"#1、RG-gt-RE\" class=\"headerlink\" title=\"1、RG -&gt; RE\"></a>1、RG -&gt; RE</h3><p>对任何一个正规文法G，都存在一个等价的正规表达式e，使得L(e)&#x3D;L(G)</p>\n<blockquote>\n<p>正规文法的拓广：产生式的形式为 U→αV 或 U→α， α为可空字符串，即<strong>右线性文法，</strong>容易改写成RG。</p>\n</blockquote>\n<p><strong>由右线性文法到正规表达式的转换规则：</strong></p>\n<ul>\n<li>形如U→αV, V→β的产生式转换成正规表达式U &#x3D; αβ；</li>\n<li>&#x3D;&#x3D;形如U→αU|β的产生式转换成U &#x3D; α*β；&#x3D;&#x3D;</li>\n<li>形如U→α|β的产生式转换成U &#x3D; α|β。</li>\n<li>反复使用上述三条规则，直到文法只剩下一条关于文法开始符号的产生式，且该条产生式的右部不含非终结符号。这个产生式的右部就是正规表达式。</li>\n</ul>\n<p><strong>例子：</strong></p>\n<img data-src=\"https://s2.loli.net/2022/04/07/mjVd8KzNpU5EICS.png\" alt=\"image-20220407223903410\" style=\"zoom:67%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/04/07/ef5n4uIJqNZTc6P.png\" alt=\"image-20220407224157566\" style=\"zoom: 50%;\" />\n\n<h3 id=\"2、RE-gt-RG\"><a href=\"#2、RE-gt-RG\" class=\"headerlink\" title=\"2、RE -&gt; RG\"></a>2、RE -&gt; RG</h3><p>直接转换较困难，可通过FA来间接转换</p>\n<p><strong>规则：</strong></p>\n<ul>\n<li><p>令RG为G[S] ，对RE e，形成产生式S→e ；</p>\n</li>\n<li><p>利用下列替换规则，重写产生式，直至符合RG形式要求： </p>\n<ul>\n<li><p>A→xy       替换成   A→xB ， B→y (新增B ∈ V<del>N</del>) </p>\n</li>\n<li><p>A→x*y     替换成   A→xA | y</p>\n</li>\n<li><p>A→x | y   替换成   A→x ， A→y</p>\n<p>  即得所求之RG G[S]。</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>例子：</strong></p>\n<p><img data-src=\"https://s2.loli.net/2022/04/07/YJ6rljcPZOHA5kz.png\" alt=\"image-20220407225050765\"></p>\n<img data-src=\"https://s2.loli.net/2022/04/07/TzrkhKHd2lDIoiV.png\" alt=\"image-20220407225042766\" style=\"zoom:50%;\" />\n\n<h2 id=\"3-6-RG、FA、RE三者关系\"><a href=\"#3-6-RG、FA、RE三者关系\" class=\"headerlink\" title=\"3.6 RG、FA、RE三者关系\"></a>3.6 RG、FA、RE三者关系</h2><img data-src=\"https://s2.loli.net/2022/03/31/evJchpxWLl6E8fb.png\" alt=\"image-20220331201340852\" style=\"zoom:50%;\" />\n\n<p><img data-src=\"https://s2.loli.net/2022/03/31/TEmsJP1gAUjzN7n.png\" alt=\"image-20220331234446610\"> </p>\n<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","site":{"data":{"post-body-end":"<div>\n    \n</div>\n","styles":"body {\n  background: url(\"/images/background.png\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 100% 100%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.8);\n}\n.popup {\n  opacity: 0.8;\n}\n.post-block {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.comments {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.post {\n  margin-top: 60px;\n  padding: 20px;\n  margin-bottom: 60px;\n  -webkit-box-shadow: 0 0 0px #788072;\n  -moz-box-shadow: 0 0 0px rgba(202,203,204,0.5);\n}\n.post-button .btn {\n  color: #555 !important;\n  background-color: #fff;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  border: none !important;\n  transition-property: unset;\n  padding: 0px 15px;\n}\n.post-button .btn:hover {\n  color: #fff !important;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  background-image: linear-gradient(90deg, #a166ab 0%, #ef4e7b 25%, #f37055 50%, #ef4e7b 75%, #a166ab 100%);\n}\n","variables":""}},"length":11830,"excerpt":"","more":"<h1 id=\"第一章-引论\"><a href=\"#第一章-引论\" class=\"headerlink\" title=\"第一章 引论\"></a>第一章 引论</h1><h2 id=\"x3D-x3D-1、编译和解释-x3D-x3D\"><a href=\"#x3D-x3D-1、编译和解释-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;1、编译和解释&#x3D;&#x3D;\"></a>&#x3D;&#x3D;1、编译和解释&#x3D;&#x3D;</h2><ul>\n<li>&#x3D;&#x3D;编译方式的特点：&#x3D;&#x3D; <ul>\n<li>源程序的执行需要分阶段（目标程序是机器语言：编译、运行，目标程序是汇编语言：编译、汇编、运行）；  </li>\n<li>生成了目标代码，且可多次执行</li>\n<li><em>编译程序与具体的机器和语言有关</em></li>\n</ul>\n</li>\n<li>&#x3D;&#x3D;解释方式的特点：&#x3D;&#x3D;<ul>\n<li>更灵活、交互方便，节省空间</li>\n<li>效率低</li>\n</ul>\n</li>\n<li>&#x3D;&#x3D;根本区别：&#x3D;&#x3D; 在解释方式下，并不生成目标代码，而是直接执行源程序本身。</li>\n<li>&#x3D;&#x3D;相同点：&#x3D;&#x3D; 都需要进行词法、语法、语义分析</li>\n</ul>\n<p><img data-src=\"https://s2.loli.net/2022/03/04/hSwesXfVIFjC4KA.jpg\"></p>\n<h2 id=\"2、编译程序的工作过程（词法分析、语法分析等）\"><a href=\"#2、编译程序的工作过程（词法分析、语法分析等）\" class=\"headerlink\" title=\"2、编译程序的工作过程（词法分析、语法分析等）\"></a>2、编译程序的工作过程（词法分析、语法分析等）</h2><ul>\n<li><p><img data-src=\"https://s2.loli.net/2022/03/04/xtsWrXz9lhBRA8Y.png\"></p>\n</li>\n<li><p>&#x3D;&#x3D;词法分析&#x3D;&#x3D; （或扫描）</p>\n<ul>\n<li>词法分析器读入组成源程序的字符流，并将它们组织成有意义的词素的序列。对于每个词素，产生<strong>词法单元</strong> 作为输出</li>\n<li>*词法单元：&lt;token-name, attribute-value&gt;*，前者为抽象符号，后者为条目。eg.(id, 1)。分隔词素的空格会被词法分析器忽略掉。词法单元的名字常被称为终结符号，属性值是一个指向符号表的指针，符号表中包含了该词法单元的附加信息。</li>\n</ul>\n</li>\n<li><p>&#x3D;&#x3D;语法分析&#x3D;&#x3D; （或解析）</p>\n<ul>\n<li>语法分析器使用由词法分析器生成的各个词法单元的第一个分量来创建语法树（内部节点：运算，子节点：该运算的分量）</li>\n</ul>\n</li>\n<li><p>&#x3D;&#x3D;语义分析&#x3D;&#x3D; </p>\n<ul>\n<li>使用语法树和符号表中的信息来检查源程序是否和语言定义的语义一致（<strong>静态语义检查</strong> ，包括类型和运算合法性检查等）</li>\n</ul>\n</li>\n<li><p>&#x3D;&#x3D;中间代码生成&#x3D;&#x3D; </p>\n<ul>\n<li>中间表示形式应该易生成，易翻译</li>\n</ul>\n</li>\n<li><p>&#x3D;&#x3D;代码优化&#x3D;&#x3D;</p>\n<ul>\n<li>机器无关的代码优化步骤试图<strong>改进中间代码</strong> ，以便生成更好的目标代码</li>\n</ul>\n</li>\n<li><p>&#x3D;&#x3D;代码生成&#x3D;&#x3D;</p>\n<ul>\n<li>以源程序的中间表示形式作为输入，并把它映射到目标语言</li>\n<li>目标指令可能是绝对指令代码，或可重新定位的指令代码或汇编指令代码</li>\n</ul>\n</li>\n<li><p>&#x3D;&#x3D;符号表的管理：&#x3D;&#x3D; 符号表存放了整个源程序的信息，变量名及其属性。在各个阶段填入、查找</p>\n</li>\n<li><p>&#x3D;&#x3D;出错处理：&#x3D;&#x3D; </p>\n<ul>\n<li>语法错误：在词法分析或语法分析时检测出来</li>\n<li>语义错误：在语义分析或运行时检测出来（因为语义分析是静态语义检查）</li>\n</ul>\n</li>\n<li><p>在一个特定的实现中，多个步骤可以组合成一趟</p>\n</li>\n<li><p>错误检查程序及表格管理程序贯穿始终</p>\n</li>\n<li><p>词法分析、语法分析、语义分析与中间代码生成及部分代码优化工作为前端部分，&#x3D;&#x3D;与目标机有关&#x3D;&#x3D;的代码优化和目标代码生成等为后端部分</p>\n</li>\n<li><p>示例：</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/04/CrcNty2m9qxSUEw.png\"></p>\n</li>\n</ul>\n<h2 id=\"3、编译程序的结构\"><a href=\"#3、编译程序的结构\" class=\"headerlink\" title=\"3、编译程序的结构\"></a>3、编译程序的结构</h2><p><img data-src=\"https://s2.loli.net/2022/04/07/Jxk1GIf8CK2mUir.png\" alt=\"image-20220407152024793\"></p>\n<h2 id=\"4、编译程序的组织方式及编译器的两个部分\"><a href=\"#4、编译程序的组织方式及编译器的两个部分\" class=\"headerlink\" title=\"4、编译程序的组织方式及编译器的两个部分\"></a>4、编译程序的组织方式及编译器的两个部分</h2><ul>\n<li><p><strong>遍&#x2F;趟：</strong>一个编译程序在编译时刻把源程序或源程序的等价物（中间程序）从头到尾扫描一遍并转换成另一紧邻的等价物的全过程</p>\n</li>\n<li><p><strong>单遍扫描：</strong>效率高但占用空间大，目标程序质量低</p>\n</li>\n<li><p><strong>多遍扫描：</strong>效率低但占用空间小，目标程序质量高，便于多人合作开发</p>\n</li>\n<li><p><strong>分析部分（编译器的前端）</strong>：主要由<strong>与源语言有关但与目标机器无关</strong> 的那些部分组成，词法分析、语法分析、语义分析、中间代码生成和部分代码优化工作</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/11/ZEPthWCzVc9xrnw.png\" alt=\"image-20220311113450229\"></p>\n</li>\n<li><p><strong>综合部分（编译器的后端）</strong>：主要包括编译中<strong>与目标机器有关</strong> 的那些部分，如与目标机有关的代码优化和目标代码生成等。可以通过改变编译程序的后端来实现编译程序的移植。</p>\n</li>\n</ul>\n<h2 id=\"5、编译程序的构造\"><a href=\"#5、编译程序的构造\" class=\"headerlink\" title=\"5、编译程序的构造\"></a>5、编译程序的构造</h2><ul>\n<li><p>构造编译程序可以用机器语言、汇编语言和高级语言</p>\n</li>\n<li><p>高级语言的&#x3D;&#x3D;自编译性&#x3D;&#x3D; ：一个语言可以用来编写自己的编译程序</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/04/LTgXiu1rkyNEzRY.png\"></p>\n</li>\n<li><p><strong>T型图</strong></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/05/15/yE3hexcragFKLtS.png\" alt=\"image-20220515221623573\"></p>\n</li>\n<li><p><strong>自展</strong></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/04/9RCBFkyrawcOHZg.png\"></p>\n</li>\n<li><p><strong>编译的移植</strong></p>\n<p>  将一个机器（宿主机）上的一个具有自编译性的高级语言编译程序移植到另一个机器（目标机）上</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/04/gmYOAdLE9kyGCfD.png\"></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/04/9MPFq1QcTsGdDtb.png\"></p>\n</li>\n</ul>\n<h1 id=\"第二章-形式语言概论\"><a href=\"#第二章-形式语言概论\" class=\"headerlink\" title=\"第二章 形式语言概论\"></a>第二章 形式语言概论</h1><h2 id=\"1、字母表与符号串\"><a href=\"#1、字母表与符号串\" class=\"headerlink\" title=\"1、字母表与符号串\"></a>1、字母表与符号串</h2><h3 id=\"字母表：\"><a href=\"#字母表：\" class=\"headerlink\" title=\"字母表：\"></a>字母表：</h3><p>符号(symbol)的非空有穷集，记为∑。</p>\n<p>eg.Σ&#x3D;{a，b，……，y，z}，Σ&#x3D;{0， 1}，Σ&#x3D;{BEGIN， END}</p>\n<h3 id=\"符号串：-string\"><a href=\"#符号串：-string\" class=\"headerlink\" title=\"符号串： string\"></a>符号串： string</h3><p>字母表中的符号所组成的任何有穷序列，通常用小写的字母表示。&#x3D;&#x3D;空串记为ε&#x3D;&#x3D; 。</p>\n<ul>\n<li><p>符号串相等要看顺序。eg.ab ≠ ba</p>\n</li>\n<li><p>符号串长度为符号串中符号的个数。 </p>\n<p>  |ε|&#x3D;0，|BEGINEND| &#x3D; 2</p>\n</li>\n<li><p>符号串的子串（subsequence）:必须是连续的，如abc的子串不能是ac</p>\n</li>\n<li><p>&#x3D;&#x3D;空串是任何一个符号串的子串、前缀和后缀&#x3D;&#x3D; 。</p>\n</li>\n<li><p>符号串的连接：拼接，&#x3D;&#x3D;ε是连接运算的单位元&#x3D;&#x3D; ，εx &#x3D; xε &#x3D; x</p>\n</li>\n<li><p>符号串的方幂(x^n^)：符号串与其自身的连接。x^0^  &#x3D; ε，x^1^ &#x3D; x，x^2^ &#x3D; xx。</p>\n</li>\n<li><p>符号串的逆（x^-1^ ）：符号串的倒置。 ε^-1^ &#x3D; ε，(x^-1^)^-1^ &#x3D; x，x &#x3D; αβ，x^-1^ &#x3D; β^-1^α^-1^ 。</p>\n<p>  eg.x &#x3D; abcd, x^-1^ &#x3D; dcba &#x3D; (cd)^-1^ (ab)^-1^ </p>\n</li>\n<li><p>符号串集合的和与积：</p>\n<ul>\n<li><p>A+B（或A∪B） &#x3D;{w | w∈A，或 w ∈ B}</p>\n</li>\n<li><p>A•B（或 AB）&#x3D; { xy |x ∈ A, y ∈ B}</p>\n<p>  &#x3D;&#x3D;{ε}是符号串集合乘积运算的零元&#x3D;&#x3D; ，{ε}A &#x3D; A{ε} &#x3D; A</p>\n</li>\n</ul>\n</li>\n<li><p>符号串集合的方幂：A^0^  &#x3D; {ε} ，A^1^ &#x3D; A，A^2^ &#x3D; AA</p>\n<p>  eg. A &#x3D; {ab,cd}  A^0^ &#x3D; {ε}，A^1^ &#x3D; {ab, cd} , A^2^ &#x3D; {abab, abcd, cdab, cdcd}</p>\n</li>\n<li><p>符号串集合的闭包和正闭包：</p>\n<ul>\n<li>闭包 <img data-src=\"https://s2.loli.net/2022/03/04/V6R7w9UzrQtChun.png\"></li>\n<li>正闭包<img data-src=\"https://s2.loli.net/2022/03/04/9S5VGjzHpRnquJt.png\"></li>\n<li>闭包比正闭包多了一个ε</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"语法描述：\"><a href=\"#语法描述：\" class=\"headerlink\" title=\"语法描述：\"></a>语法描述：</h3><p>可以采用自然语言、语法图、BNF范式、EBNF</p>\n<p>eg.标识符的语法描述：</p>\n<p>BNF范式（Backus-Naur Form） ：&lt;标识符&gt; ::&#x3D; &lt;字母&gt;|&lt;标识符&gt;&lt;字母&gt;|&lt;标识符&gt;&lt;数字&gt; </p>\n<p>扩充的BNF（EBNF：Extended BNF） ：&lt;标识符&gt; ::&#x3D; &lt;字母&gt; {&lt;字母&gt;|&lt;数字&gt;}</p>\n<h2 id=\"2、文法及其分类（主要考2型和3型文法）\"><a href=\"#2、文法及其分类（主要考2型和3型文法）\" class=\"headerlink\" title=\"2、文法及其分类（主要考2型和3型文法）\"></a>2、文法及其分类（主要考2型和3型文法）</h2><h3 id=\"概念：\"><a href=\"#概念：\" class=\"headerlink\" title=\"概念：\"></a>概念：</h3><p>文法G是一个四元组，G[S]&#x3D;（V<del>N</del>，V<del>T</del>，P，S）</p>\n<p>V<del>N</del> ：非终结符号集</p>\n<p>V<del>T</del>： 终结符号集。V<del>T</del> ∩V<del>N</del> &#x3D; ∅， V &#x3D; V<del>T</del> U V<del>N</del></p>\n<p>P ：产生式(production)的有穷非空的集合，是文法的核心</p>\n<p>S：开始符号</p>\n<h3 id=\"符号表示的约定：\"><a href=\"#符号表示的约定：\" class=\"headerlink\" title=\"符号表示的约定：\"></a><strong>符号表示的约定：</strong></h3><ul>\n<li>终结符号：排在前面的小写字母abc、运算符号、标点符号、数字0~9、黑体字符串，如<strong>id</strong></li>\n<li>非终结符号：排在前面的大写字母ABC、字母S（常用来表示开始符号）、小写且斜体的名字，如<em>expr</em></li>\n<li>在字母表中排在后面的大写字母如XYZ表示终结符号或者非终结符号</li>\n<li>在字母表中排在后面的小写字母如uvwxyz表示终结符号串（可能为ε）</li>\n<li>小写的希腊字母，表示文法符号串（可能为ε）</li>\n</ul>\n<h3 id=\"文法的分类\"><a href=\"#文法的分类\" class=\"headerlink\" title=\"文法的分类\"></a>文法的分类</h3><ul>\n<li><p>区别：对产生式规则的形式上施加不同的限制。<strong>从PSG到CSG到CFG到RG，限制逐渐增强，能力逐渐减弱</strong>，生成的语言集逐渐减小，形式越简单，构造的自动机越易实现 。</p>\n</li>\n<li><p>&#x3D;&#x3D;下半区的左边都是单个的非终结符号&#x3D;&#x3D; </p>\n<p>  &#x3D;&#x3D;上半区：不减为1型&#x3D;&#x3D; </p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/04/FEHy5VxOUkXIvSa.png\" alt=\"image.png\"></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>0型文法 L<del>0</del> （短语结构文法(phrase structure grammar, PSG)）</strong></th>\n<th>α→β ，α∈V^+^  ，β∈V^<em>^             <br />亦即α→β ，α∈V</em> V<del>N</del> V*<br />（必须要有一个非终结符号） ，β∈V *</th>\n<th>对应递归可枚举语言类，与图灵机（TM）能力相当，能力最强。</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>1型文法 L<del>1</del> (上下文相关文法(context sensitive grammar,CSG)，长度增长文法)</strong></td>\n<td>α→β ，&#x3D;&#x3D;1≤ |α|≤|β|&#x3D;&#x3D; （ 长度不减），α∈V^+^，β∈V^+^ <br />亦即α∈V* V<del>N</del> V*（必须要有一个非终结符号） ，β∈V^+^</td>\n<td>对应递归语言类，界限自动机<strong>LBA</strong>。静态语义处理。</td>\n</tr>\n<tr>\n<td><strong>2型文法L<del>2</del> ( 上下文无关文法(context free grammar,CFG))</strong></td>\n<td>A→β ，A∈V<del>N</del> （&#x3D;&#x3D;A是单个非终结符号&#x3D;&#x3D; ，长度为1），β∈V^+^ 。 扩充的2型文法：A→β ，A∈V<del>N</del>，β∈V*</td>\n<td>对应上下文无关语言类，用于定义程序设计语言的<strong>语法规则</strong>。下推自动机<strong>PDA</strong>（&#x3D;&#x3D;栈&#x3D;&#x3D;）。</td>\n</tr>\n<tr>\n<td><strong>3型文法L<del>3</del> ( 正则文法(regular grammar ,RG)、正规文法)</strong></td>\n<td>A→a 或 A→aB , A,B∈V<del>N</del> ，a∈V<del>T</del> （右线性文法的一种情况）。<br />&#x3D;&#x3D;左线性文法：&#x3D;&#x3D; A→a或A→Ba  , A,B∈V<del>N</del> ，a∈V<del>T</del> ^<em>^ ； <br />&#x3D;&#x3D;右线性文法：&#x3D;&#x3D; A→a 或 A→aB , A,B∈V<del>N</del> ，**a∈V<del>T</del> ^</em>^** 。这3种共同构成3型文法</td>\n<td>对应正规语言类，用于描述程序设计语言的<strong>词法规则</strong>。对应于<strong>FSA</strong>（有限状态自动机）。&#x3D;&#x3D;3型没有记忆功能&#x3D;&#x3D; ，要记也是记它自己，例如A-&gt;aA</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>在写正规文法时，可以从左往右考虑，一个非终结符号表示一个字符，然后把下一个字符交给下一个非终结符号表示</p>\n</blockquote>\n<blockquote>\n<p>如果要有记忆功能，可以用栈作为记忆装置（&#x3D;&#x3D;下推自动机&#x3D;&#x3D;）。如识别aaabbb，匹配一个b就弹出一个a，如果最终栈底的终结符号不能和符号串末尾的终结符号匹配的话，则报错。</p>\n</blockquote>\n<blockquote>\n<p>正规文法不能出现$\\varepsilon$</p>\n</blockquote>\n<p><strong>例子：</strong></p>\n<p><img data-src=\"https://s2.loli.net/2022/03/10/wOAmUG4D3QTrhcZ.png\" alt=\"image-20220310224157836\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/03/10/1JOq2LHtpFAhao5.png\" alt=\"image-20220310224629051\"></p>\n<hr>\n<p>&#x3D;&#x3D;文法的记忆功能：&#x3D;&#x3D; 精简版的括号配对问题。记住左右两边有几个配对的括号。<strong>3型文法没有记忆功能</strong>，因为它的非终结符号只能在一侧，无法记忆左右两边的一对。<strong>2型文法可以记忆两个</strong>，即左右两边的一对，如S→aSb，故2型文法可以用来表示a^n^b^n^ 。但2型文法的左边是单个的非终结符号，故不能记忆超过两个。<strong>1型文法可以记忆三个</strong>，故1型文法可以用来表示a^n^b^n^c^n^。</p>\n<p><img data-src=\"https://s2.loli.net/2022/03/10/Jo9TInwgZizP7e1.png\" alt=\"image-20220310224733082\"></p>\n<p>例子：所有由0和1组成并且每个0之后都至少跟着一个1的串的集合</p>\n<figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S -&gt; LS | <span class=\"type\">ε</span></span><br><span class=\"line\"><span class=\"type\">L</span> -&gt; <span class=\"number\">01</span> | <span class=\"type\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>所有由0和1组成的具有相同多个0和1的串的集合</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">S</span> -&gt; <span class=\"number\">0</span>S1S | <span class=\"number\">1</span>S0S | ε</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、文法和语言\"><a href=\"#3、文法和语言\" class=\"headerlink\" title=\"3、文法和语言\"></a>3、文法和语言</h2><h3 id=\"文法经过推导得到语言\"><a href=\"#文法经过推导得到语言\" class=\"headerlink\" title=\"文法经过推导得到语言\"></a>文法经过推导得到语言</h3><p><strong>推导：</strong></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/19/X8oUYwJbPTEC9AN.png\" alt=\"image-20220519160515000\"></p>\n<p>每一棵语法分析树都和唯一的最左推导、唯一的最右推导相关联</p>\n<p><strong>归约：</strong></p>\n<ul>\n<li>最右归约：最左推导的逆过程称为最右归约</li>\n<li>最左归约：最右推导（规范推导）的逆过程称为最左归约</li>\n</ul>\n<p><strong>句型：</strong>设有文法G[S]，如果 <img data-src=\"https://s2.loli.net/2022/03/04/UxMbG8l9iDrJEXs.png\">，则称符号串u为文法G[S]的句型</p>\n<p><strong>句子：</strong>设有文法G[S]，如果 <img data-src=\"https://s2.loli.net/2022/03/04/UxMbG8l9iDrJEXs.png\">，且u∈V<del>T</del> * ，则称符号串u为文法G[S]的句子。</p>\n<p>&#x3D;&#x3D;句子是一个终结符号串。&#x3D;&#x3D; </p>\n<p><strong>语言：</strong>设有文法G[S]，则文法G[S]描述的语言为<img data-src=\"https://s2.loli.net/2022/03/04/TDboNIEAueO5l4q.png\">(&#x3D;&#x3D;语言是合法句子的集合&#x3D;&#x3D; )</p>\n<p>如果两个文法生成相同语言，则称这两个文法是等价的。</p>\n<h3 id=\"语言经过凑规则得到文法\"><a href=\"#语言经过凑规则得到文法\" class=\"headerlink\" title=\"语言经过凑规则得到文法\"></a>语言经过凑规则得到文法</h3><p><strong>步骤：</strong>找出语言的若干典型句子→分析句子特点→根据句子特点凑规则→得到文法→检查文法</p>\n<p>检查文法时应满足：①语言的所有句子都能由S推导得到;  ②S推导得到的所有终结符号串都是语言的句子.（不多不少）</p>\n<p><strong>例子：</strong></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/19/vNcVBHm3sKZgDi8.png\" alt=\"image-20220519161355512\"></p>\n<blockquote>\n<p>给定一个文法，可以从结构上<strong>唯一</strong> 确定其语言；给定一个语言，可以确定相应的文法（<strong>不唯一</strong> ）。</p>\n</blockquote>\n<h3 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h3><ul>\n<li><p>规则递归（直接递归）：文法的产生式为U→xUy形式</p>\n</li>\n<li><p>规则左递归（直接左递归）：文法的产生式为U→Uy形式</p>\n</li>\n<li><p>规则右递归（直接右递归）：文法的产生式为U→xU形式</p>\n</li>\n<li><p>文法递归（间接递归）：文法中有推导<img data-src=\"https://s2.loli.net/2022/03/04/xBEeGqjbaPUFmcW.png\"></p>\n</li>\n<li><p>文法左递归（间接左递归）：文法中有推导<img data-src=\"https://s2.loli.net/2022/03/04/SHPlQYW7qhtwUXa.png\" alt=\"文法左递归.png\"></p>\n</li>\n<li><p>文法右递归（间接右递归）：文法中有推导<img data-src=\"https://s2.loli.net/2022/03/10/RYGZlHrem34jb6d.png\" alt=\"image-20220310164820052\"></p>\n</li>\n</ul>\n<h3 id=\"语法分析树\"><a href=\"#语法分析树\" class=\"headerlink\" title=\"语法分析树\"></a>语法分析树</h3><p>语法分析树展现了从文法的开始符号推导出相应语言中的符号串的过程。一棵语法分析树的叶子结点从左向右构成了一个终结符号串。</p>\n<ul>\n<li>根结点的标号（文法符号）为文法的开始符号</li>\n<li>每个内部结点的标号为一个非终结符号</li>\n<li>叶子结点的标号为一个终结符号或者ε</li>\n<li>若一个标记为U的结点，它有标记依次为x<del>1</del>、x<del>2</del>、…、x<del>n</del>的直接后继结点，则U→x<del>1</del>x<del>2</del>…x<del>n</del>必定是文法G的一条产生式。</li>\n</ul>\n<h3 id=\"二义性问题\"><a href=\"#二义性问题\" class=\"headerlink\" title=\"二义性问题\"></a>二义性问题</h3><ul>\n<li><p><strong>句子的二义性</strong>（&#x3D;&#x3D;必考&#x3D;&#x3D; ）：一个句子有两棵（或以上）不同的语法树；存在两个（或以上）不同的最左推导；存在两个（或以上）不同的最右推导（每一棵语法分析树都和唯一的最左推导、唯一的最右推导相关联）</p>\n</li>\n<li><p><strong>文法的二义性</strong>：文法G中的某一句子具有二义性</p>\n</li>\n<li><p><strong>语言的二义性</strong>：不存在任何无二义性的文法来描述某语言L。（也称为先天二义性）</p>\n</li>\n</ul>\n<h3 id=\"运算符的结合性和优先级\"><a href=\"#运算符的结合性和优先级\" class=\"headerlink\" title=\"运算符的结合性和优先级\"></a>运算符的结合性和优先级</h3><p><strong>结合性</strong></p>\n<ul>\n<li><p>左结合性：当一个运算分量左右两侧都有同一个运算符时，它属于左边的运算符。如+-*&#x2F;</p>\n</li>\n<li><p>右结合性：一个运算分量左右两侧都有同一个运算符时，它属于右边的运算符。如&#x3D;</p>\n<blockquote>\n<p>左结合性的文法，语法分析树是向左下端延伸的；<br>右结合性的文法，语法分析树是向右下端延伸的</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>优先级</strong></p>\n<ul>\n<li><p>n层优先级一般需要n+1个非终结符号，其中，最下面那个产生式左边的非终结符号的产生式体只能是单个运算分量或括号括起来的表达式。然后，对于每个优先级都有一个非终结符，表示能被该优先级或更高的优先级的运算符分开的表达式。</p>\n</li>\n<li><p>例子：算术表达式的文法</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/11/WrPyD8RK4UvhQ5J.png\" alt=\"image-20220311184147910\"></p>\n</li>\n</ul>\n<h2 id=\"4、文法的实用限制\"><a href=\"#4、文法的实用限制\" class=\"headerlink\" title=\"4、文法的实用限制\"></a>4、文法的实用限制</h2><h3 id=\"消除文法的二义性（-x3D-x3D-重难点-x3D-x3D-）\"><a href=\"#消除文法的二义性（-x3D-x3D-重难点-x3D-x3D-）\" class=\"headerlink\" title=\"消除文法的二义性（&#x3D;&#x3D;重难点&#x3D;&#x3D;）\"></a>消除文法的二义性（&#x3D;&#x3D;重难点&#x3D;&#x3D;）</h3><p><strong>方法一：设定消除二义性规则：</strong>在语义上加些限制</p>\n<p><strong>方法二：重写文法</strong>：重新构造一个等价的无二义性文法。</p>\n<p>考虑运算符的优先级和结合性。</p>\n<ul>\n<li>采用优先级联的方式——最低级的运算最靠近语法树的根结点，从上往下，运算的优先级依次增加</li>\n<li>左结合性：左递归，右结合性：右递归</li>\n</ul>\n<p><img data-src=\"https://s2.loli.net/2022/03/11/PiaWFlI5uXQVpEG.png\" alt=\"image-20220311104535673\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/03/11/ElRIWuefnUO83it.png\" alt=\"image-20220311111404819\"></p>\n<h3 id=\"文法的压缩（化简）\"><a href=\"#文法的压缩（化简）\" class=\"headerlink\" title=\"文法的压缩（化简）\"></a>文法的压缩（化简）</h3><p>若文法G[S]的所有产生式都满足下列实用限制条件：</p>\n<p>1、没有<strong>多余产生式</strong>（包括无法推导出终结符号串的产生式（不可终止）和从开始符号出发的所有推导都不会用到的产生式（不可达））。</p>\n<p>2、没有<strong>有害产生式U→U</strong>（有该产生式的文法一定是二义性的）</p>\n<p>则称文法G[S]是<strong>压缩或化简</strong>的。</p>\n<p>例子：</p>\n<img data-src=\"https://s2.loli.net/2022/03/11/QKhBbEqpDTuOmng.png\" alt=\"image-20220311091509810\" style=\"zoom:67%;\" />\n\n\n\n<h3 id=\"删除单规则（单产生式）：A→B\"><a href=\"#删除单规则（单产生式）：A→B\" class=\"headerlink\" title=\"删除单规则（单产生式）：A→B\"></a>删除单规则（单产生式）：A→B</h3><p>单产生式会使得语法树的深度加深，加大存储开销</p>\n<img data-src=\"https://s2.loli.net/2022/03/11/SG89bKnl6wyrTqX.png\" alt=\"image-20220311091824568\" style=\"zoom: 67%;\" />\n\n<h3 id=\"删除空产生式（ε-规则）：-U→ε\"><a href=\"#删除空产生式（ε-规则）：-U→ε\" class=\"headerlink\" title=\"删除空产生式（ε 规则）： U→ε\"></a>删除空产生式（ε 规则）： U→ε</h3><p><strong>步骤：</strong></p>\n<ul>\n<li>找出可能推导出ε的非终结符号，本例中为B、D</li>\n<li>将产生式体中可能为ε的非终结符号替换为ε并删除ε</li>\n<li>特殊情形：S-&gt;ε的时候，不能去掉</li>\n</ul>\n<img data-src=\"https://s2.loli.net/2022/03/11/YdKyhqXgNU7THcv.png\" alt=\"image-20220311091942023\" style=\"zoom:67%;\" />\n\n \n\n<h3 id=\"消除直接左递归U→Uy\"><a href=\"#消除直接左递归U→Uy\" class=\"headerlink\" title=\"消除直接左递归U→Uy\"></a>消除直接左递归U→Uy</h3><p><strong>（期末考试一般考直接改写法）</strong></p>\n<p>方法：</p>\n<ul>\n<li><p>&#x3D;&#x3D;采用EBNF表示&#x3D;&#x3D; </p>\n<blockquote>\n<p>[x]— x可以出现零次或一次</p>\n<p>{x}——x可以出现零次到多次</p>\n<p>x(y|z)——等价于xy 或 xz，用于提取公因子</p>\n</blockquote>\n<p>  步骤： <img data-src=\"https://s2.loli.net/2022/03/11/R2xWwSv16Zf8grb.png\" alt=\"image-20220311093151304\"></p>\n<p>  即<img data-src=\"https://s2.loli.net/2022/04/07/cH1sfzCBe7LYE9O.png\" alt=\"image-20220407163924252\"></p>\n</li>\n<li><p>&#x3D;&#x3D;直接改写法：&#x3D;&#x3D; 引进新的非终结符号，将左递归改写为右递归</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/11/D75j3twy8Qgl1Kz.png\" alt=\"image-20220311093533406\"></p>\n</li>\n<li><p><img data-src=\"https://s2.loli.net/2022/03/11/CBjznZkLeY4Dru9.png\"></p>\n</li>\n</ul>\n<h3 id=\"消除间接左递归\"><a href=\"#消除间接左递归\" class=\"headerlink\" title=\"消除间接左递归\"></a>消除间接左递归<img data-src=\"https://s2.loli.net/2022/04/07/WKsIfw9HEaAeC1u.png\" alt=\"image-20220407164315981\" style=\"zoom: 67%;\" /></h3><ul>\n<li><p>方法：&#x3D;&#x3D;转换成直接左递归来消除&#x3D;&#x3D;</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/04/07/vWbnjNEoTaGDdRz.png\" alt=\"image-20220407205525749\"></p>\n</li>\n<li><p>例子：</p>\n  <img data-src=\"https://s2.loli.net/2022/04/07/IcoNtZhf1Kx6UbF.png\" alt=\"image-20220407231035529\" style=\"zoom:67%;\" />\n\n  <img data-src=\"https://s2.loli.net/2022/04/07/QjGiIAygplPCMBD.png\" alt=\"image-20220407231055235\" style=\"zoom:67%;\" /></li>\n</ul>\n<h1 id=\"第三章-有穷自动机-x3D-x3D-8个算法，确定化、最小化、RG和FA和RE之间的六个转换-x3D-x3D\"><a href=\"#第三章-有穷自动机-x3D-x3D-8个算法，确定化、最小化、RG和FA和RE之间的六个转换-x3D-x3D\" class=\"headerlink\" title=\"第三章  有穷自动机(&#x3D;&#x3D;8个算法，确定化、最小化、RG和FA和RE之间的六个转换&#x3D;&#x3D;)\"></a>第三章  有穷自动机(&#x3D;&#x3D;8个算法，确定化、最小化、RG和FA和RE之间的六个转换&#x3D;&#x3D;)</h1><blockquote>\n<p>自动机的概念：自动机是一种能进行<strong>运算</strong>并实现<strong>自我控制</strong>(根据外界的信息改变自己的状态)的装置，计算机就是一部自动机。自动机是描述符号串处理的强有力的工具。<strong>功能：识别语言</strong></p>\n</blockquote>\n<h2 id=\"3-1-有穷自动机的形式定义\"><a href=\"#3-1-有穷自动机的形式定义\" class=\"headerlink\" title=\"3.1 有穷自动机的形式定义\"></a>3.1 有穷自动机的形式定义</h2><h3 id=\"1、有穷自动机的分类及组成\"><a href=\"#1、有穷自动机的分类及组成\" class=\"headerlink\" title=\"1、有穷自动机的分类及组成\"></a>1、有穷自动机的分类及组成</h3><ul>\n<li><p>&#x3D;&#x3D;DFA:&#x3D;&#x3D;  Deterministic Finite (State) Automation，确定的有穷(状态)自动机。当前状态经一个输入到达<strong>下一个</strong>状态。</p>\n</li>\n<li><p>&#x3D;&#x3D;NDFA（or NFA）:&#x3D;&#x3D;  Non Deterministic Finite (State) Automation非确定的有穷自动机。当前状态经一个输入可到达<strong>多个</strong>状态。</p>\n<blockquote>\n<p>FA的等价性： L(A<del>1</del>) &#x3D; L(A<del>2</del>)，则称有穷自动机A<del>1</del>和A<del>2</del>是<strong>等价</strong>的（类比文法等价）</p>\n</blockquote>\n<blockquote>\n<p>关系：<strong>DFA是NDFA的特例</strong>，对每个NDFA N一定存在一个DFA M，使得L(M)&#x3D;L(N)，但这种DFA M可能不唯一。</p>\n<p>q表示状态，Q表示状态集</p>\n<p><strong>用有穷自动机表示无穷：状态转换的回路（文法：递归）</strong></p>\n<p><img data-src=\"https://s2.loli.net/2022/03/31/WaIvVMDhmdj1gJL.png\" alt=\"image-20220331234125325\"></p>\n</blockquote>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>DFA &#x3D; (Q，∑，t，&#x3D;&#x3D;q<del>0</del>&#x3D;&#x3D;，F)</th>\n<th>DFA的扩充</th>\n<th>NDFA &#x3D;  (Q，∑，t，&#x3D;&#x3D;Q<del>0</del>&#x3D;&#x3D;，F)</th>\n<th>NDFA 的扩充</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Q：有穷非空的状态集</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Σ：有穷的输入字母表</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>t：<strong>单值映射Q×&#x3D;&#x3D;Σ&#x3D;&#x3D;→Q</strong> 。 t(q, x)&#x3D;q’。可以理解由当前状态和<strong>一个输入字符</strong>得到下一个状态</td>\n<td>t：<em><em>单值映射Q×&#x3D;&#x3D;Σ</em>&#x3D;&#x3D;→Q</em>* 。 t(q, ε) &#x3D; q。t(q, aα) &#x3D; t ( t(q, a),  α)，其中q∈Q， a ∈Σ,  α∈Σ*。可以理解由当前状态和<strong>一个符号串</strong>得到下一个状态</td>\n<td>t：<strong>多值映射Q×&#x3D;&#x3D;Σ&#x3D;&#x3D;→2^Q^</strong>。t(q,x)&#x3D;{q<del>1</del>,q<del>2</del>,…,q<del>n</del>} (状态的幂集)</td>\n<td>t：<em><em>多值映射Q×&#x3D;&#x3D;Σ</em>&#x3D;&#x3D;→2^Q^</em>* 。 t(q, ε)&#x3D;q。t(q, aα) &#x3D; t(q<del>1</del>,α)∪t(q<del>2</del>,α)∪… ∪t(q<del>n</del>,α)，其中 a ∈Σ,  α∈Σ*, t(q, a) &#x3D; {q<del>1</del>, q<del>2</del>… q<del>n</del>}。</td>\n</tr>\n<tr>\n<td><strong>q<del>0</del>：∈Q，是开始状态</strong></td>\n<td></td>\n<td><strong>Q<del>0</del>：⊆Q，是开始状态集</strong>。即使只有一个开始状态，也要用{}</td>\n<td></td>\n</tr>\n<tr>\n<td>F：⊆Q，非空终止状态集合</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>DFA的扩充，使得DFA可以描述对符号串的识别。**如果t(q<del>0</del>, α) ∈ F，则α可被DFA接受(或识别)*<em>，即从开始状态经α可到达某一个终止状态。被DFA A识别的符号串集合，记为L(A)，L(A) &#x3D; {α∈Σ</em> | t(q<del>0</del>, α)  ∈ F}，即这台自动机所能识别和接受的语言。α是L(A)的句子 。</td>\n<td></td>\n<td>NDFA的扩充，使得NDFA可以描述对符号串的识别。**如果q ∈ t(q<del>0</del>, α) , q<del>0</del>∈ Q<del>0</del> ，q∈ F，则α可被DFA接受(或识别)*<em>，即从某一个开始状态经α可到达某一个终止状态。被NDFA A识别的符号串集合，记为L(A)，L(A) &#x3D; {α∈Σ</em> | t(q<del>0</del>, α)  ∩ F ≠ ∅ ,q<del>0</del>∈Q<del>0</del> }</td>\n</tr>\n</tbody></table>\n<h3 id=\"2、有穷自动机的表示：\"><a href=\"#2、有穷自动机的表示：\" class=\"headerlink\" title=\"2、有穷自动机的表示：\"></a>2、有穷自动机的表示：</h3><ul>\n<li><p>状态转换表</p>\n</li>\n<li><p>状态转换图（<strong>更常用</strong>）</p>\n<blockquote>\n<p>非空终止状态用同心圆表示</p>\n</blockquote>\n</li>\n<li><p>&#x3D;&#x3D;DFA:&#x3D;&#x3D; </p>\n  <img data-src=\"https://s2.loli.net/2022/03/17/dbpaewYO5WZ4yc9.png\" alt=\"image-20220317150650779\" style=\"zoom:67%;\" />\n</li>\n<li><p>&#x3D;&#x3D;NDFA&#x3D;&#x3D;</p>\n  <img data-src=\"https://s2.loli.net/2022/03/17/ZgFyLjveGRzAbwU.png\" alt=\"image-20220317154458730\"  /></li>\n</ul>\n<h2 id=\"3-2-NDFA到DFA的转换（-x3D-x3D-必考-x3D-x3D-）\"><a href=\"#3-2-NDFA到DFA的转换（-x3D-x3D-必考-x3D-x3D-）\" class=\"headerlink\" title=\"3.2 NDFA到DFA的转换（&#x3D;&#x3D;必考&#x3D;&#x3D;）\"></a>3.2 NDFA到DFA的转换（&#x3D;&#x3D;必考&#x3D;&#x3D;）</h2><blockquote>\n<p>DFA是NDFA的特例，对每个NDFA N一定存在一个DFA M，使得L(M)&#x3D;L(N)，但这种DFA M可能不唯一</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph LR;</span><br><span class=\"line\">\ta[NDFA]--&gt;|确定化|b[DFA];</span><br><span class=\"line\">\tb[DFA]--&gt; |化简|c[最小化的DFA];</span><br><span class=\"line\">\tc[最小化的DFA] --&gt; d[词法分析程序];</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1、确定化-NDFA-gt-DFA（-x3D-x3D-注意造表法是可以直接用的，不需要消-x3D-x3D-varepsilon-）\"><a href=\"#1、确定化-NDFA-gt-DFA（-x3D-x3D-注意造表法是可以直接用的，不需要消-x3D-x3D-varepsilon-）\" class=\"headerlink\" title=\"1、确定化:   NDFA -&gt; DFA（&#x3D;&#x3D;注意造表法是可以直接用的，不需要消&#x3D;&#x3D;$\\varepsilon$）\"></a>1、确定化:   NDFA -&gt; DFA（&#x3D;&#x3D;注意造表法是可以直接用的，不需要消&#x3D;&#x3D;$\\varepsilon$）</h3><p>子集法 &#x2F; 造表法（&#x3D;&#x3D;考造表法&#x3D;&#x3D;）</p>\n<ul>\n<li><p>&#x3D;&#x3D;子集法。&#x3D;&#x3D; </p>\n<p>  <strong>步骤：</strong></p>\n<ul>\n<li><p>&#x3D;&#x3D;空移环路的寻找和消除&#x3D;&#x3D;：消除从状态A开始并以A结束的空移动序列(空移环路上的所有状态都是等价的)，把它们合并成一个结点并取公共名。<strong>注意Q<del>0</del>和F</strong>。<strong>注意a弧、b弧等等会变成自环</strong></p>\n<blockquote>\n<p>ε自动机：自动机的弧上允许标记ε，称此FA为ε自动机，记为εFA（εNDFA或εDFA）。εNDFA &#x3D; (Q，∑ ∪{ε}，t，Q<del>0</del>，F)</p>\n<p>消除ε自动机中的空移：对于εFA ，总可以构造等价的FA，使得L (εFA) &#x3D; L(FA)</p>\n</blockquote>\n</li>\n<li><p>&#x3D;&#x3D;消除余下的空移&#x3D;&#x3D;： εNDFA -&gt; NDFA。<strong>去ε弧、添等价弧(包括ε弧)、置特殊状态（终态必须置，初态可以不置）</strong></p>\n</li>\n</ul>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/17/6ADyZeGocNvkCr7.png\" alt=\"image-20220317165134820\"></p>\n<ul>\n<li><p>&#x3D;&#x3D;利用子集法确定化&#x3D;&#x3D;   NDFA  -&gt; DFA</p>\n<p>  思想：把从状态到状态的多值映射转化为状态集到状态集的单值映射</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/17/mr486kDGcZIheNl.png\" alt=\"image-20220317170543983\"></p>\n</li>\n</ul>\n<blockquote>\n<p>子集法的正确性的证明：α∈L(A)当且仅当α∈L(A’)</p>\n<p>DFA:从开始状态（是一个状态类）到某一个终止状态子集，NFA：从某一个开始状态到某一个终止状态，这两个映射是可以转换的</p>\n</blockquote>\n<p>  <strong>局限性：</strong>状态数太多（2^Q^ - 1个状态，存储和查找的开销大）、存在不可达状态（挂起）</p>\n<p>  <strong>例子：</strong></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/24/dEcwUWZuGxOsYDF.png\" alt=\"image-20220324214849272\"></p>\n<hr>\n</li>\n<li><p>&#x3D;&#x3D;造表法（考）&#x3D;&#x3D;(造表法本质还是子集法，子集法和造表法统称为子集法  )</p>\n<ul>\n<li><p><strong>思想</strong>：为避免不可达状态，从初始状态出发，计算t′，依次构造其后继状态，进行确定化。</p>\n<blockquote>\n<p>一些概念：</p>\n<ul>\n<li><strong>I<del>a</del><strong>：I<del>a</del> &#x3D; t’(I, a)，即从I中的状态出发经过一条a弧（可跳过a弧</strong>前后</strong>的任意条ε弧）到达的状态集合</li>\n<li><strong>状态子集I的ε闭包（ ε-CLOSURE(I) ）</strong>：包含了I中的状态和它们经过任意条ε弧能到达的Q中的状态</li>\n<li><strong>I<del>a</del>子集</strong>：即从I中的状态出发，经过一条a弧（可跳过a弧<strong>前</strong>的任意条ε弧）到达的状态集合，称为<strong>J</strong>。I<del>a</del> &#x3D; ε-CLOSURE(J)</li>\n</ul>\n</blockquote>\n</li>\n<li><p><strong>步骤：</strong></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/17/voLRXMOuwQh8KlJ.png\" alt=\"image-20220317182540359\"></p>\n</li>\n<li><p><strong>特点</strong>：简单有效、不存在不可达状态、状态数比子集法大大减少</p>\n</li>\n<li><p>例子：</p>\n  <img data-src=\"https://s2.loli.net/2022/03/24/NXDbZx2z1VdTJLK.png\" alt=\"image-20220324215954121\" style=\"zoom:67%;\" />\n\n  <img data-src=\"https://s2.loli.net/2022/03/24/B9zabF2JuGSEV13.png\" alt=\"image-20220324215944493\" style=\"zoom: 50%;\" /></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2、最小化：DFA-gt-MFA\"><a href=\"#2、最小化：DFA-gt-MFA\" class=\"headerlink\" title=\"2、最小化：DFA -&gt; MFA\"></a>2、最小化：DFA -&gt; MFA</h3><ul>\n<li><p>目标：寻找等价的、状态数更少的DFA M’（M’是唯一的）</p>\n</li>\n<li><p><strong>思想：合并等价状态、删除无关状态</strong></p>\n<blockquote>\n<p><code>等价状态：</code>从两个状态出发可以识别同一个字符串(任意一个)到达终态，则称这两个状态是等价的，否则称它们是可区分的。即$$\\forall\\alpha\\epsilon\\Sigma^*, t(q, \\alpha)\\epsilon F当且仅当t(q’, \\alpha)\\epsilon F$$</p>\n</blockquote>\n</li>\n<li><p>最小化算法（划分法）：把状态集划分成若干个互不相交的等价状态集</p>\n<p>  步骤：</p>\n<ul>\n<li><p>构造状态集的划分，&#x3D;&#x3D;从终止状态集和非终止状态集里再细分&#x3D;&#x3D;（因此最终至少有两个状态）</p>\n</li>\n<li><p>取每组中的一个状态作代表，合并等价状态。</p>\n<blockquote>\n<p>例如，A和B是等价状态，则如果选A为代表而删除B，则应<strong>将射入B的弧补到A上</strong>，<strong>不需要补射出B的弧</strong>，因为由等价状态的定义可知，A和B的射出的弧到达的下一个状态是相同的</p>\n</blockquote>\n</li>\n<li><p>删去无关状态，包括不可达状态和死状态等</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/17/owSlZ7rmcPRtM2A.png\" alt=\"image-20220317220019401\"></p>\n</li>\n</ul>\n</li>\n<li><p>例子：</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/24/9kuErAlD1L76efa.png\" alt=\"image-20220324221541448\"></p>\n</li>\n</ul>\n<p><img data-src=\"https://s2.loli.net/2022/03/24/RDnC9dptK1QNkXu.png\" alt=\"image-20220324221835671\"></p>\n<h3 id=\"3、从化简后的DFA到程序表示-MFA-gt-scanner\"><a href=\"#3、从化简后的DFA到程序表示-MFA-gt-scanner\" class=\"headerlink\" title=\"3、从化简后的DFA到程序表示 MFA -&gt; scanner\"></a>3、从化简后的DFA到程序表示 MFA -&gt; scanner</h3><p><img data-src=\"https://s2.loli.net/2022/03/24/QnbFtWksm9KjPAc.png\" alt=\"image-20220324222006003\"></p>\n<h2 id=\"3-3-正规文法-RG-与FA\"><a href=\"#3-3-正规文法-RG-与FA\" class=\"headerlink\" title=\"3.3 正规文法(RG)与FA\"></a>3.3 正规文法(RG)与FA</h2><h3 id=\"1、RG与FA\"><a href=\"#1、RG与FA\" class=\"headerlink\" title=\"1、RG与FA\"></a>1、RG与FA</h3><ul>\n<li>RG是语言的生成规则</li>\n<li>FA识别（接受）语言</li>\n</ul>\n<h3 id=\"2、RG-gt-FA：\"><a href=\"#2、RG-gt-FA：\" class=\"headerlink\" title=\"2、RG -&gt; FA：\"></a>2、RG -&gt; FA：</h3><p>由正规文法G[S]可直接构造一个与之等价的FA A，使得L(G)&#x3D;L(A)。</p>\n<p><strong>步骤：</strong></p>\n<ul>\n<li><p>令G的终结符号集V<del>T</del>为A的字母表∑； </p>\n</li>\n<li><p>G的非终结符号作为A的状态，G的开始符号为A的开始状态； </p>\n</li>\n<li><p>&#x3D;&#x3D;增加一个终止状态Z（Z ∉ V<del>N</del>）；&#x3D;&#x3D;</p>\n</li>\n<li><p>形如U→a的规则，引一条从状态U到终止状态Z的标记为a的弧； </p>\n</li>\n<li><p>形如U→aW的规则，引一条从状态U到W的a弧</p>\n<p>  对应关系如下：</p>\n<table>\n<thead>\n<tr>\n<th>G[S]&#x3D;（V<del>N</del>，V<del>T</del>，P，S）</th>\n<th>NFA &#x3D; (Q，∑，t，{q<del>0</del>}，F) (初态唯一,因为要和S对应)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>V<del>N</del></td>\n<td>Q</td>\n</tr>\n<tr>\n<td>V<del>T</del></td>\n<td>∑</td>\n</tr>\n<tr>\n<td>P</td>\n<td>t，形如U→a的规则，引一条从状态U到终止状态Z的标记为a的弧；     形如U→aW的规则，引一条从状态U到W的a弧（特别地，如果有形如U→aU的规则，引一条从状态U到状态U的自环）</td>\n</tr>\n<tr>\n<td>S</td>\n<td>q<del>0</del></td>\n</tr>\n<tr>\n<td></td>\n<td><strong>F(新增加的，∉ V<del>N</del>)</strong></td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<p>&#x3D;&#x3D;eg.&#x3D;&#x3D;</p>\n<p><img data-src=\"https://s2.loli.net/2022/03/31/joSRI4KyDEards1.png\" alt=\"image-20220331230128319\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/03/31/7YVoTF6COnZKIJR.png\" alt=\"image-20220331231013992\"></p>\n<h3 id=\"3、FA-gt-RG\"><a href=\"#3、FA-gt-RG\" class=\"headerlink\" title=\"3、FA -&gt; RG\"></a>3、FA -&gt; RG</h3><p>由有穷自动机FA A可直接构造一个与之等价的正规文法G，使得L(G)&#x3D;L(A)</p>\n<p><strong>步骤：</strong></p>\n<ul>\n<li><p>自动机A中的每一个状态均作为G的非终结符号，其中A的开始状态作为G的开始符号，A的输入字母表∑中的所有符号作为G的终结符号；</p>\n</li>\n<li><p>对A中V ∈ t(U,a)的映射，构造G的产生式U∷&#x3D;aV；若V∈F，则构造G的产生式 U::&#x3D;a；</p>\n</li>\n<li><p>若A中q<del>0</del>∈F，则构造G的产生式S∷&#x3D;ε</p>\n<p>  对应关系如下：</p>\n<table>\n<thead>\n<tr>\n<th>DFA &#x3D; (Q，∑，t，q<del>0</del>，F)</th>\n<th>G[S]&#x3D;（V<del>N</del>，V<del>T</del>，P，S）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Q</td>\n<td>V<del>N</del></td>\n</tr>\n<tr>\n<td>∑</td>\n<td>V<del>T</del></td>\n</tr>\n<tr>\n<td>t</td>\n<td>P，对A中V ∈ t(U,a)的映射，构造G的产生式U∷&#x3D;aV；<br />若V∈F，则构造G的产生式 U::&#x3D;a；<br />若A中q<del>0</del>∈F，则构造G的产生式S∷&#x3D;ε</td>\n</tr>\n<tr>\n<td>q<del>0</del></td>\n<td>S</td>\n</tr>\n<tr>\n<td>F</td>\n<td></td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<p>&#x3D;&#x3D;eg.&#x3D;&#x3D;</p>\n<p><img data-src=\"https://s2.loli.net/2022/03/31/bZth9rlPiADF12E.png\" alt=\"image-20220331231121040\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/03/31/Tqyr9uzPmBH3pFL.png\" alt=\"image-20220331231701572\"></p>\n<h2 id=\"3-4-正规表达式-x2F-正则表达式-RE-与FA\"><a href=\"#3-4-正规表达式-x2F-正则表达式-RE-与FA\" class=\"headerlink\" title=\"3.4 正规表达式&#x2F;正则表达式(RE)与FA\"></a>3.4 正规表达式&#x2F;正则表达式(RE)与FA</h2><h3 id=\"1、RE（可以直观地描述出语言的特征）\"><a href=\"#1、RE（可以直观地描述出语言的特征）\" class=\"headerlink\" title=\"1、RE（可以直观地描述出语言的特征）\"></a>1、RE（可以直观地描述出语言的特征）</h3><ul>\n<li><p>&#x3D;&#x3D;概念：&#x3D;&#x3D; </p>\n<p>  三种运算：或运算 a|b 、连接运算 ab、闭包运算 a^<em>^(正闭包a^+^)。*<em>（优先级由低到高）</em></em></p>\n<p>  &#x3D;&#x3D;注意在RE中，0个或无穷多个不是用{}来表示，而是用*来表示，大括号是集合&#x3D;&#x3D;</p>\n</li>\n</ul>\n<p><img data-src=\"https://s2.loli.net/2022/03/31/5pFHox1ryEjbhTw.png\" alt=\"image-20220331231923652\"></p>\n<p><strong>eg.</strong></p>\n<p><img data-src=\"https://s2.loli.net/2022/03/31/YozVNxEDCfHuWy2.png\" alt=\"image-20220331232616611\"></p>\n<img data-src=\"https://s2.loli.net/2022/03/31/1dEyrHmjPx54nhX.png\" alt=\"image-20220331233246560\" style=\"zoom:50%;\" />\n\n<ul>\n<li><p>&#x3D;&#x3D;RE等价：&#x3D;&#x3D; 设e<del>1</del>，e<del>2</del>均为∑上的正规表达式，若 L(e<del>1</del>)&#x3D;L(e<del>2</del>)，则称e<del>1</del>与e<del>2</del>等价，记为：e<del>1</del>&#x3D; e<del>2</del></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/31/P3IEHFbZvWhRwYr.png\" alt=\"image-20220331233053138\"></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/31/QWnVp9zkxHY2MoZ.png\" alt=\"image-20220331233112495\"></p>\n</li>\n<li><p>&#x3D;&#x3D;RE的性质：&#x3D;&#x3D; </p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/31/Xjo15J2dBLHhYC3.png\" alt=\"image-20220331232826488\"></p>\n</li>\n</ul>\n<h3 id=\"2、RE-–-gt-FA\"><a href=\"#2、RE-–-gt-FA\" class=\"headerlink\" title=\"2、RE –&gt; FA\"></a>2、RE –&gt; FA</h3><p>对于字母表Σ上的任意正规表达式e，一定可以构造一个输入字母表Σ上的<strong>NDFA A</strong>，使得L(A)&#x3D;L(e)</p>\n<p><strong>步骤：</strong></p>\n<ul>\n<li><p>构造广义NFA：<strong>S是惟一开始状态，Z是惟一终止状态</strong>。弧标记e。</p>\n</li>\n<li><p>根据分解规则分解e ，得到与e对应的NFA。</p>\n<p>  分解规则如下：</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/17/uoEaYrUIJ8gFxbj.png\" alt=\"image-20220317230004987\"></p>\n</li>\n</ul>\n<p>&#x3D;&#x3D;eg&#x3D;&#x3D;</p>\n<p><img data-src=\"https://s2.loli.net/2022/03/31/p6tFHduCrOm1oL5.png\" alt=\"image-20220331233904038\"><img data-src=\"https://s2.loli.net/2022/03/31/Q7WpazfkA3UgZwi.png\" alt=\"image-20220331233938288\" style=\"zoom:67%;\" /></p>\n<h3 id=\"3、FA-gt-RE\"><a href=\"#3、FA-gt-RE\" class=\"headerlink\" title=\"3、FA -&gt; RE\"></a>3、FA -&gt; RE</h3><ul>\n<li><p>由有穷自动机FA A所识别的语言L(A)，可以用Σ上 的RE e来表示，使得L(A)&#x3D;L(e)</p>\n<p>  <strong>步骤</strong></p>\n</li>\n<li><p>（&#x3D;&#x3D;当初态和终态不唯一时&#x3D;&#x3D;）在FA A的状态图中增加两个结点：<strong>S是惟一开始状态</strong>，从S向原开始状态连ε弧；<strong>Z是惟一终止状态</strong>，从原终止状态向Z连ε弧。</p>\n</li>\n<li><p>利用下列替换规则逐步消去状态图中的结点和弧，直至仅剩下S到Z的一条弧为止，则该弧上的标记即为RE e。</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/17/tVZi5aIBq1HJ6P9.png\" alt=\"image-20220317230404452\"></p>\n</li>\n</ul>\n<p>&#x3D;&#x3D;eg&#x3D;&#x3D;</p>\n<img data-src=\"https://s2.loli.net/2022/03/31/YdrHoz6ZUMKlbIk.png\" alt=\"image-20220331234216167\" style=\"zoom:67%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/03/31/rsiz7VASouyqd6H.png\" alt=\"image-20220331234837905\" style=\"zoom:50%;\" />\n\n<h2 id=\"3-5-RE与RG\"><a href=\"#3-5-RE与RG\" class=\"headerlink\" title=\"3.5 RE与RG\"></a>3.5 RE与RG</h2><h3 id=\"1、RG-gt-RE\"><a href=\"#1、RG-gt-RE\" class=\"headerlink\" title=\"1、RG -&gt; RE\"></a>1、RG -&gt; RE</h3><p>对任何一个正规文法G，都存在一个等价的正规表达式e，使得L(e)&#x3D;L(G)</p>\n<blockquote>\n<p>正规文法的拓广：产生式的形式为 U→αV 或 U→α， α为可空字符串，即<strong>右线性文法，</strong>容易改写成RG。</p>\n</blockquote>\n<p><strong>由右线性文法到正规表达式的转换规则：</strong></p>\n<ul>\n<li>形如U→αV, V→β的产生式转换成正规表达式U &#x3D; αβ；</li>\n<li>&#x3D;&#x3D;形如U→αU|β的产生式转换成U &#x3D; α*β；&#x3D;&#x3D;</li>\n<li>形如U→α|β的产生式转换成U &#x3D; α|β。</li>\n<li>反复使用上述三条规则，直到文法只剩下一条关于文法开始符号的产生式，且该条产生式的右部不含非终结符号。这个产生式的右部就是正规表达式。</li>\n</ul>\n<p><strong>例子：</strong></p>\n<img data-src=\"https://s2.loli.net/2022/04/07/mjVd8KzNpU5EICS.png\" alt=\"image-20220407223903410\" style=\"zoom:67%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/04/07/ef5n4uIJqNZTc6P.png\" alt=\"image-20220407224157566\" style=\"zoom: 50%;\" />\n\n<h3 id=\"2、RE-gt-RG\"><a href=\"#2、RE-gt-RG\" class=\"headerlink\" title=\"2、RE -&gt; RG\"></a>2、RE -&gt; RG</h3><p>直接转换较困难，可通过FA来间接转换</p>\n<p><strong>规则：</strong></p>\n<ul>\n<li><p>令RG为G[S] ，对RE e，形成产生式S→e ；</p>\n</li>\n<li><p>利用下列替换规则，重写产生式，直至符合RG形式要求： </p>\n<ul>\n<li><p>A→xy       替换成   A→xB ， B→y (新增B ∈ V<del>N</del>) </p>\n</li>\n<li><p>A→x*y     替换成   A→xA | y</p>\n</li>\n<li><p>A→x | y   替换成   A→x ， A→y</p>\n<p>  即得所求之RG G[S]。</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>例子：</strong></p>\n<p><img data-src=\"https://s2.loli.net/2022/04/07/YJ6rljcPZOHA5kz.png\" alt=\"image-20220407225050765\"></p>\n<img data-src=\"https://s2.loli.net/2022/04/07/TzrkhKHd2lDIoiV.png\" alt=\"image-20220407225042766\" style=\"zoom:50%;\" />\n\n<h2 id=\"3-6-RG、FA、RE三者关系\"><a href=\"#3-6-RG、FA、RE三者关系\" class=\"headerlink\" title=\"3.6 RG、FA、RE三者关系\"></a>3.6 RG、FA、RE三者关系</h2><img data-src=\"https://s2.loli.net/2022/03/31/evJchpxWLl6E8fb.png\" alt=\"image-20220331201340852\" style=\"zoom:50%;\" />\n\n<p><img data-src=\"https://s2.loli.net/2022/03/31/TEmsJP1gAUjzN7n.png\" alt=\"image-20220331234446610\"> </p>\n<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>"}],"PostAsset":[],"PostCategory":[{"post_id":"cl4wvpgrc0003ugskci9d7me1","category_id":"cl4wvpgrh0006ugskawzueebs","_id":"cl4wvpgs3000mugsk28gq4kkk"},{"post_id":"cl4wvpgrf0005ugsk58ll5qk8","category_id":"cl4wvpgrq000bugskfqhebez1","_id":"cl4wvpgsb000vugsk0h3l5yda"},{"post_id":"cl4wvpgsd0010ugsk0ckifra1","category_id":"cl4wvpgrq000bugskfqhebez1","_id":"cl4wvpgsq001jugskbig57ctz"},{"post_id":"cl4wvpgsh0016ugsk86yag3jf","category_id":"cl4wvpgrq000bugskfqhebez1","_id":"cl4wvpgss001pugskbajr97qi"},{"post_id":"cl4ww07z10000iksk6k81e665","category_id":"cl4wvpgrq000bugskfqhebez1","_id":"cl4ww07zf0006ikskak0y2u5b"},{"post_id":"cl4ww07z70001ikskc1iuaxft","category_id":"cl4wvpgrq000bugskfqhebez1","_id":"cl4ww07zg0008iksk9h224umv"},{"post_id":"cl4ww07zc0003ikskepld4915","category_id":"cl4wvpgrq000bugskfqhebez1","_id":"cl4ww07zh000aiksk0s9b646s"},{"post_id":"cl4ww07ze0005iksk91eu4n8r","category_id":"cl4wvpgrq000bugskfqhebez1","_id":"cl4ww07zh000biksk7w1jeiq1"},{"post_id":"cl4ww0pzd00005oskf40i4qkj","category_id":"cl4wvpgrh0006ugskawzueebs","_id":"cl4ww0pzn00055osk24ws8dsn"},{"post_id":"cl4ww0pzi00015osk3eb51lsf","category_id":"cl4wvpgrh0006ugskawzueebs","_id":"cl4ww0pzo00075oskg8uu8x1x"},{"post_id":"cl4ww0pzl00035oskfatj3r8v","category_id":"cl4wvpgrh0006ugskawzueebs","_id":"cl4ww0pzo00085oskb58qcei9"},{"post_id":"cl4ww15sh0000nksk1u542alz","category_id":"cl4wvpgrh0006ugskawzueebs","_id":"cl4ww15ss0006nkskeaethnsx"},{"post_id":"cl4ww15sn0001nksk61rv9btg","category_id":"cl4wvpgrh0006ugskawzueebs","_id":"cl4ww15st0008nksk7fgw6gxe"},{"post_id":"cl4ww15sq0003nkskgk265y9q","category_id":"cl4wvpgrh0006ugskawzueebs","_id":"cl4ww15su000ankskavizfk4t"},{"post_id":"cl4ww15ss0005nkskcmvmg5vn","category_id":"cl4wvpgrh0006ugskawzueebs","_id":"cl4ww15su000bnksk2dmxgks5"},{"post_id":"cl4ww3f0w0000xsskaql93ubu","category_id":"cl4wvpgsn001eugsk0krmd83s","_id":"cl4ww3f130002xsskaj3q9yav"}],"PostTag":[{"post_id":"cl4wvpgrc0003ugskci9d7me1","tag_id":"cl4wvpgrj0007ugsk5tj950ck","_id":"cl4wvpgru000fugsk97c93ixr"},{"post_id":"cl4wvpgrf0005ugsk58ll5qk8","tag_id":"cl4wvpgrr000cugsk4rnf080b","_id":"cl4wvpgs8000qugsk5wlq6vsu"},{"post_id":"cl4wvpgsd0010ugsk0ckifra1","tag_id":"cl4wvpgrr000cugsk4rnf080b","_id":"cl4wvpgso001gugsk4nyi4a4b"},{"post_id":"cl4wvpgsh0016ugsk86yag3jf","tag_id":"cl4wvpgrr000cugsk4rnf080b","_id":"cl4wvpgsq001kugskcrdl29d7"},{"post_id":"cl4ww07z10000iksk6k81e665","tag_id":"cl4wvpgrr000cugsk4rnf080b","_id":"cl4ww07zc0002ikskg441aup9"},{"post_id":"cl4ww07z70001ikskc1iuaxft","tag_id":"cl4wvpgrr000cugsk4rnf080b","_id":"cl4ww07zd0004ikskd10f2dqf"},{"post_id":"cl4ww07zc0003ikskepld4915","tag_id":"cl4wvpgrr000cugsk4rnf080b","_id":"cl4ww07zf0007ikskeqvm1cgn"},{"post_id":"cl4ww07ze0005iksk91eu4n8r","tag_id":"cl4wvpgrr000cugsk4rnf080b","_id":"cl4ww07zh0009iksk5ow1fxhf"},{"post_id":"cl4ww0pzd00005oskf40i4qkj","tag_id":"cl4wvpgrj0007ugsk5tj950ck","_id":"cl4ww0pzl00025oskfdhp217p"},{"post_id":"cl4ww0pzi00015osk3eb51lsf","tag_id":"cl4wvpgrj0007ugsk5tj950ck","_id":"cl4ww0pzn00045oskbqlp6yzs"},{"post_id":"cl4ww0pzl00035oskfatj3r8v","tag_id":"cl4wvpgrj0007ugsk5tj950ck","_id":"cl4ww0pzn00065oskaulxfuay"},{"post_id":"cl4ww15sh0000nksk1u542alz","tag_id":"cl4wvpgrj0007ugsk5tj950ck","_id":"cl4ww15sq0002nksk9sn0berd"},{"post_id":"cl4ww15sn0001nksk61rv9btg","tag_id":"cl4wvpgrj0007ugsk5tj950ck","_id":"cl4ww15sr0004nkskczdx8hgp"},{"post_id":"cl4ww15sq0003nkskgk265y9q","tag_id":"cl4wvpgrj0007ugsk5tj950ck","_id":"cl4ww15st0007nksk2nxm9weg"},{"post_id":"cl4ww15ss0005nkskcmvmg5vn","tag_id":"cl4wvpgrj0007ugsk5tj950ck","_id":"cl4ww15su0009nkskhd47f0vy"},{"post_id":"cl4ww3f0w0000xsskaql93ubu","tag_id":"cl4wvpgso001fugsk7qgj091q","_id":"cl4ww3f120001xsskgwyo2vg9"}],"Tag":[{"name":"操作系统","_id":"cl4wvpgrj0007ugsk5tj950ck"},{"name":"数据库","_id":"cl4wvpgrr000cugsk4rnf080b"},{"name":"编译原理","_id":"cl4wvpgso001fugsk7qgj091q"}]}}