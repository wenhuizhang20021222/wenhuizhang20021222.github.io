{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/css/noscript.styl","path":"css/noscript.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/background.png","path":"images/background.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/bitbug_favicon-16x16.ico","path":"images/bitbug_favicon-16x16.ico","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/bitbug_favicon-32x32.ico","path":"images/bitbug_favicon-32x32.ico","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/zrn.png","path":"images/zrn.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/comments.js","path":"js/comments.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/config.js","path":"js/config.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/fairyDustCursor.js","path":"js/fairyDustCursor.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/fireworks.js","path":"js/fireworks.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/pjax.js","path":"js/pjax.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/live2d-widget/LICENSE","path":"live2d-widget/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/live2d-widget/README.md","path":"live2d-widget/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/live2d-widget/autoload.js","path":"live2d-widget/autoload.js","modified":1,"renderable":1},{"_id":"themes/next/source/live2d-widget/live2d.min.js","path":"live2d-widget/live2d.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/live2d-widget/waifu-tips.json","path":"live2d-widget/waifu-tips.json","modified":1,"renderable":1},{"_id":"themes/next/source/live2d-widget/waifu-tips.js","path":"live2d-widget/waifu-tips.js","modified":1,"renderable":1},{"_id":"themes/next/source/live2d-widget/waifu.css","path":"live2d-widget/waifu.css","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/rating.js","path":"js/third-party/rating.js","modified":1,"renderable":1},{"_id":"themes/next/source/live2d-widget/assets/screenshot-1.png","path":"live2d-widget/assets/screenshot-1.png","modified":1,"renderable":1},{"_id":"themes/next/source/live2d-widget/assets/screenshot-2.png","path":"live2d-widget/assets/screenshot-2.png","modified":1,"renderable":1},{"_id":"themes/next/source/live2d-widget/assets/screenshot-3.png","path":"live2d-widget/assets/screenshot-3.png","modified":1,"renderable":1},{"_id":"themes/next/source/live2d-widget/demo/demo.html","path":"live2d-widget/demo/demo.html","modified":1,"renderable":1},{"_id":"themes/next/source/live2d-widget/demo/login.html","path":"live2d-widget/demo/login.html","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"fbe513ad52ed690aca60eea5575b2aa8c16b5baf","modified":1655953242288},{"_id":"source/_data/post-body-end.njk","hash":"a8896ddc256b4757764aa5adc523e8897cfd6193","modified":1656313018325},{"_id":"source/_data/variables.styl","hash":"adfbd2ee51aee4e64a6f7973b04ee15ed5f9fc40","modified":1655974630962},{"_id":"source/_data/styles.styl","hash":"fbf2647d77a462046b6b7eb5cd291f36466d247a","modified":1656293816147},{"_id":"source/_posts/hello-world.md","hash":"7cf9ac36a535d8eb64c06597cb47bddede028636","modified":1656031746582},{"_id":"source/_posts/sql概述与sql定义语言.md","hash":"978fb6fe1c3312cc7d83c819ef65747af167c01c","modified":1656031487199},{"_id":"source/_posts/os绪论.md","hash":"5d209d50e316e0373d446be759e58a050ad73045","modified":1656289792985},{"_id":"source/_posts/关系数据库.md","hash":"969eca4ea2d3ef057c54a4a5f1a83795d7fedec2","modified":1656084305872},{"_id":"source/_posts/绪论.md","hash":"e03cca413757a9da46d8a1bfb4adba1291d83726","modified":1656031495900},{"_id":"source/about/index.md","hash":"8cf8c4698c13686a5bf6ff4883328d81aec7bcb1","modified":1655968619724},{"_id":"source/categories/index.md","hash":"e4759a1350a33eb7c3dcf513e7c344456f5d5c6a","modified":1656078637991},{"_id":"source/tags/index.md","hash":"0d3acc0c2ddbea3e1d0c5db31754e471c48e0769","modified":1656078654971},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1655947982729},{"_id":"themes/next/.eslintrc.json","hash":"611e15c3fcb41dc68fa8532ee595a1262a1b5a8a","modified":1655947982729},{"_id":"themes/next/.gitattributes","hash":"aeeca2f1e987d83232d7870d1435a4e3ed66b648","modified":1655947982729},{"_id":"themes/next/.gitignore","hash":"087b7677078303acb2acb47432165950e4d29b43","modified":1655947982736},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1655947982736},{"_id":"themes/next/LICENSE.md","hash":"8cfb03967dd4cbaf3b825271ffce0039aa3fc22a","modified":1655947982736},{"_id":"themes/next/README.md","hash":"9b0af190c8265911c379ba9c7b453c8a7f1501c8","modified":1655947982740},{"_id":"themes/next/_config.yml","hash":"4c361c1d61da04be1eb1bf81ad7f1644a8666a50","modified":1656331264014},{"_id":"themes/next/_vendors.yml","hash":"82f1e8e8fbbf20aab6bbec9d736ecd6c1bda33dd","modified":1655947982740},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1655947982741},{"_id":"themes/next/package.json","hash":"59799b4933d021b37b1120a4dc3e8fb86599b017","modified":1655947982773},{"_id":"themes/next/renovate.json","hash":"767b077c7b615e20af3cf865813cd64674a9bea6","modified":1655947982773},{"_id":"themes/next/.githooks/install.js","hash":"305c2a269818466eed9e381b866c6cd1ad7f8afd","modified":1655947982729},{"_id":"themes/next/.githooks/pre-commit","hash":"b69b9d0b51e27d5d4c87c3242f5067c2cda26e44","modified":1655947982729},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"2fdca1040427cabfe27cae6754ec5e027ec7092e","modified":1655947982729},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"593ae64e72d43c020a697eac65b1f9c3483ff097","modified":1655947982729},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"a103e2d875f7434191859e5b42075cfa9a4cbcb3","modified":1655947982729},{"_id":"themes/next/.github/label-commenter-config.yml","hash":"a1aa85a2fc66ff0c52c65bd97b0fa282e297a73f","modified":1655947982736},{"_id":"themes/next/.github/config.yml","hash":"0956bf71b6f36632b63b14d26580458041a5abd2","modified":1655947982729},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1655947982729},{"_id":"themes/next/.github/labeler.yml","hash":"ff76a903609932a867082b8ccced906e9910533a","modified":1655947982736},{"_id":"themes/next/.github/release-drafter.yml","hash":"de38f816e3023e0a5c1fd1f3c2b626f78bc35246","modified":1655947982736},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1655947982741},{"_id":"themes/next/docs/LICENSE.txt","hash":"d1cd5a8e83d3bbdb50f902d2b487813da95ddfd3","modified":1655947982742},{"_id":"themes/next/docs/AUTHORS.md","hash":"579014d47f45b27fd1618b9709f0efe9585c7449","modified":1655947982742},{"_id":"themes/next/languages/README.md","hash":"b1c96465b3bc139bf5ba6200974b66581d8ff85a","modified":1655947982744},{"_id":"themes/next/languages/ar.yml","hash":"cc7e3e2855348563d746f15c4752b9c63fcdd91a","modified":1655947982744},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1655947982744},{"_id":"themes/next/languages/en.yml","hash":"66445143decfbb5eb7031eb370698e31d5222a7a","modified":1655947982744},{"_id":"themes/next/languages/de.yml","hash":"83023c4246b93a2f89f342afe29a7b9e1185f74f","modified":1655947982744},{"_id":"themes/next/languages/bn.yml","hash":"842adcbab6a56762521a02f8b1d8c49c10e02a80","modified":1655947982744},{"_id":"themes/next/languages/es.yml","hash":"21676d658d309eb90342a924e106645611c937bc","modified":1655947982744},{"_id":"themes/next/languages/fa.yml","hash":"e09fad889ab3ae87874093e1acd51edc9297d869","modified":1655947982744},{"_id":"themes/next/languages/it.yml","hash":"c038ff0cadbe405750d980bcacfd3900acf96905","modified":1655947982744},{"_id":"themes/next/languages/fr.yml","hash":"328c255c82e9b561e20a9f51a4d84abc63d1b90a","modified":1655947982744},{"_id":"themes/next/languages/id.yml","hash":"d7c337ca72efb0bd02ade8b5560c559384ad84dd","modified":1655947982744},{"_id":"themes/next/languages/ja.yml","hash":"57a35b21aca04ce8bca64fb5933f35626c462ea3","modified":1655947982744},{"_id":"themes/next/languages/ko.yml","hash":"a4b607d38fb77f083235a0ecb2384cfdd3542bde","modified":1655947982744},{"_id":"themes/next/languages/pt.yml","hash":"ff93459250c33d3c7ba06c30164cc4208edf9b33","modified":1655947982744},{"_id":"themes/next/languages/ru.yml","hash":"837bb39651769244b19ce458053757d429869764","modified":1655947982744},{"_id":"themes/next/languages/pt-BR.yml","hash":"305025e932832328b7e2a8a584638a23c462e68f","modified":1655947982744},{"_id":"themes/next/languages/nl.yml","hash":"e47858bd1e0d0622c15366ae6c0513d996f589e3","modified":1655947982744},{"_id":"themes/next/languages/si.yml","hash":"c15ed758dbad890e856f4fc281208d7b78cc1a59","modified":1655947982744},{"_id":"themes/next/languages/tk.yml","hash":"bf61562ac892231bd28f23a2a5597ee98fb05aa6","modified":1655947982744},{"_id":"themes/next/languages/uk.yml","hash":"f32871f67c63d26bc4e3e15df9b01f5a41236a50","modified":1655947982744},{"_id":"themes/next/languages/tr.yml","hash":"d3262d2221b0583a52e5d20a3cd1380f5dc49378","modified":1655947982744},{"_id":"themes/next/languages/vi.yml","hash":"e452ea8c48993262a3e8fce9d92072cafabfc734","modified":1655947982744},{"_id":"themes/next/languages/zh-CN.yml","hash":"f8379d15038e22ef7039d91272cb4f36842dbbe1","modified":1655947982744},{"_id":"themes/next/languages/zh-HK.yml","hash":"c1ee97ceb56da76ecdc7b69fa975f28c8574441b","modified":1655947982744},{"_id":"themes/next/languages/zh-TW.yml","hash":"70c45076ad722b777956048fcc430eac37844c11","modified":1655947982744},{"_id":"themes/next/layout/_layout.njk","hash":"51b9beb54b640bbfd832892d0cd4b0a046e8149f","modified":1656300944115},{"_id":"themes/next/layout/archive.njk","hash":"aa491dba8f746e626c273a920effedf7d0b32170","modified":1655947982771},{"_id":"themes/next/layout/category.njk","hash":"82f541452cae76a94ee15cb8d8a888f44260a0fd","modified":1655947982771},{"_id":"themes/next/layout/post.njk","hash":"707a50e50b90df5fbeaf8407d12895d04163a290","modified":1655947982771},{"_id":"themes/next/layout/index.njk","hash":"fa52c3049871e879980cb6abccdea3792ca4ce70","modified":1655947982771},{"_id":"themes/next/layout/page.njk","hash":"0bc9379473b6c968f43dde9b783bbbf0a71a5c3e","modified":1656292079490},{"_id":"themes/next/layout/tag-color.njk","hash":"b0c7af8665173c8ecdf9f5278c55419effcd4c76","modified":1655972485936},{"_id":"themes/next/layout/tag.njk","hash":"b6c017d30d08ddd30d66e9c6f3a71aa65d214eac","modified":1655947982771},{"_id":"themes/next/test/index.js","hash":"983a505399796b9d9e174ba46d89abbdde38f8ee","modified":1655947982817},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"032194e7975564176f2109aa8b7c020fa6d5e6b1","modified":1655947982729},{"_id":"themes/next/.github/ISSUE_TEMPLATE/config.yml","hash":"daeedc5da2ee74ac31cf71846b766ca6499e9fc6","modified":1655947982729},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"4a7885fe2c8b25be02ab57c345cd862aeeeeacaf","modified":1655947982729},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"618d07b49f4774cd79613d4001984a19d954a6ad","modified":1655947982729},{"_id":"themes/next/.github/workflows/label-commenter.yml","hash":"b87ffaf40820461159c891d0d41c87e00e312ff3","modified":1655947982736},{"_id":"themes/next/.github/workflows/labeler.yml","hash":"bfea9b04e3ea7da31a2095277c4c23ae6bd14baa","modified":1655947982736},{"_id":"themes/next/.github/workflows/linter.yml","hash":"40b9068c85bff6a11ae0f7623fa3b5e9fdbd273e","modified":1655947982736},{"_id":"themes/next/.github/workflows/lock.yml","hash":"58eca481fd71088a8ae1dbc04645bcfc03460b87","modified":1655947982736},{"_id":"themes/next/.github/workflows/release-drafter.yml","hash":"359b74890a47d784e35a5cc3c7885d5cdf302e82","modified":1655947982736},{"_id":"themes/next/.github/workflows/tester.yml","hash":"dda18899fe62652c633f60c300a93df18f58862f","modified":1655947982736},{"_id":"themes/next/docs/ru/README.md","hash":"ce247fb6ba20c607be42957ff38f2dd6d71c12a4","modified":1655947982742},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7befb4325b107dd668d9eae3d7e86a34910ce3f2","modified":1655947982742},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"a09ceb82b45dd8b7da76c227f3d0bb7eebe7d5d1","modified":1655947982742},{"_id":"themes/next/docs/zh-CN/README.md","hash":"fc077960de61db02072573dd330ba2ca3ae9d4de","modified":1655947982742},{"_id":"themes/next/layout/_third-party/fancybox.njk","hash":"53ad3c31762b74e5d29787b37d5e494cc4fded9b","modified":1655947982766},{"_id":"themes/next/layout/_third-party/index.njk","hash":"33a4a3275474bd3bb2e8d1b0ea01b42dda9ea608","modified":1655947982766},{"_id":"themes/next/layout/_third-party/pace.njk","hash":"13b2a77b4858a127f458ea092b6f713b052befac","modified":1655947982766},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"73bc15a9c3c5c239ab90efa19a1e721f41f3cb93","modified":1655947982766},{"_id":"themes/next/layout/_third-party/rating.njk","hash":"d0444179fec512760ab1d4f76928d795b971c884","modified":1655947982766},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"d9d8e6d7a6a8c80009dd5334cc17fd3e4977a008","modified":1655947982744},{"_id":"themes/next/layout/_macro/post.njk","hash":"d5b467a116088cbf8d7eb870f8269e183713f61f","modified":1656298877266},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"690721621eb591b548affc1403a7bafb13f9f7d0","modified":1656331264005},{"_id":"themes/next/layout/_partials/comments.njk","hash":"007e4a3dc1df926fbea467b5aef20c06015b1ba0","modified":1656068342105},{"_id":"themes/next/layout/_partials/footer.njk","hash":"65f0d69084e0e26a0153d3b8db610a15c4102691","modified":1655947982744},{"_id":"themes/next/layout/_partials/languages.njk","hash":"537026fc120adeef9148c98ebf074207e3810538","modified":1655947982755},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1655947982755},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"967594ee64805e27b7ff9d957e23ab3f5c948600","modified":1655947982755},{"_id":"themes/next/layout/_scripts/index.njk","hash":"4eb65641b47ea9b23ed2ddfd69b18f21d7d8f214","modified":1655947982755},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"0a1470440f11362df2b1cd6b6228e273d9f999d6","modified":1655947982755},{"_id":"themes/next/scripts/events/index.js","hash":"e1c366efdab730a7791099115698c97b31b5ff78","modified":1655947982774},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"0c9a1fe9906672724dbf274154a37bac1915ca2c","modified":1655947982774},{"_id":"themes/next/scripts/filters/locals.js","hash":"87f3bff03fa9fd96cf0787a6442464a7ff57f76b","modified":1655947982774},{"_id":"themes/next/scripts/filters/minify.js","hash":"81edb9cfda491b860ebeb5645c1f5349ccacfbec","modified":1655947982774},{"_id":"themes/next/scripts/filters/post.js","hash":"1ca7885ce5024bfda13e28e605a33ba335b8aea0","modified":1655947982774},{"_id":"themes/next/scripts/helpers/engine.js","hash":"43568a872a93259fc1c497724a53914474ef83ae","modified":1655947982774},{"_id":"themes/next/scripts/helpers/font.js","hash":"0a6fa582a0890ecaf5f03f758a730936e48aeca1","modified":1655947982774},{"_id":"themes/next/scripts/helpers/navigation.js","hash":"82f6e81bacf23d10cac71b09cff8708e47891ef3","modified":1655947982774},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"ad764d48715c5da87d33f048ad5f1ae8b4e2eb52","modified":1655947982774},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"98fc68cf3fcd6253bbb94068ab1d86578a4ef9ea","modified":1655947982774},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"52acbc74c1ead8a77cd3bbcba4e033053683f7d0","modified":1655947982774},{"_id":"themes/next/scripts/tags/button.js","hash":"86c71c73a63744efbbbb367612871fede0d69529","modified":1655947982774},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"8e912c715702addaf0cefe63e580e45b97ae8c3f","modified":1655947982774},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"b4d12e6fe29089be0f43bafc9eea736602cd16bf","modified":1655947982774},{"_id":"themes/next/scripts/tags/index.js","hash":"255dd1090e8319b557eeca43571f0e4f8aab013b","modified":1655947982774},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"1c609312a71d47f838226346aad5c2e1c35f15dd","modified":1655947982774},{"_id":"themes/next/scripts/tags/label.js","hash":"c18b0e619a779ed40be7f014db92af18f45fbd5c","modified":1655947982774},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"3f358bb78c5c6fdf45de287f3ead553e3a6a93c2","modified":1655947982774},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"b3844e168b51a99d495ca05562ffac47677f5728","modified":1655947982774},{"_id":"themes/next/scripts/tags/note.js","hash":"a12fd53e421400836a3722ae69130969558d6ac0","modified":1655947982774},{"_id":"themes/next/scripts/tags/tabs.js","hash":"e0ed5fe1bc9d2957952a1aacdf3252d6ef3f9743","modified":1655947982784},{"_id":"themes/next/scripts/tags/pdf.js","hash":"317ba4611020cc840854386dde098dbbe452777e","modified":1655947982784},{"_id":"themes/next/scripts/tags/video.js","hash":"f6ad3f52779f0636251238d3cbdc5b6f91cc5aba","modified":1655947982784},{"_id":"themes/next/source/css/_colors.styl","hash":"a88430865c99f47ce1d8240f8895819b8b7b0c06","modified":1655947982785},{"_id":"themes/next/source/css/_mixins.styl","hash":"74cf298800fa560e1521d1875f60b5097a5c3b4d","modified":1655947982804},{"_id":"themes/next/source/css/main.styl","hash":"38b8a12681a3a04bed02aa1659054912ed6def11","modified":1655947982805},{"_id":"themes/next/source/css/noscript.styl","hash":"6a9e80ca4abb294bc0fb22442fc7a0201dd8fc25","modified":1655947982805},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1655947982805},{"_id":"themes/next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1655947982805},{"_id":"themes/next/source/images/bitbug_favicon-16x16.ico","hash":"998c8c7c1b89f6f323d2485a001983ad271fb103","modified":1655971330225},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1655947982805},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1655947982805},{"_id":"themes/next/source/images/bitbug_favicon-32x32.ico","hash":"9f23b3240a6709e32d1b734a519128fb038e20d4","modified":1655971212751},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1655947982805},{"_id":"themes/next/source/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1655947982805},{"_id":"themes/next/source/js/bookmark.js","hash":"1457291a7244b7786ec35b949d97183e4fbd181d","modified":1655947982805},{"_id":"themes/next/source/js/comments-buttons.js","hash":"81ea6cbcdf0357094753d7523919c1eafa38e79f","modified":1655947982805},{"_id":"themes/next/source/js/comments.js","hash":"0b4daf0ce610760bd52e95d423f61f3e1c72442a","modified":1655947982805},{"_id":"themes/next/source/js/config.js","hash":"211a9ab35205ccfa6b7c74394bade84da0d00af7","modified":1655947982805},{"_id":"themes/next/source/js/fairyDustCursor.js","hash":"3a73ffb1dfb17a7adaa4e95d7e077e5e11764409","modified":1656299305721},{"_id":"themes/next/source/js/fireworks.js","hash":"53981959bc6def4a85bbbb41b07e4b1474a2124d","modified":1656300047024},{"_id":"themes/next/source/js/motion.js","hash":"cce4f3cc59e76f899f3c1d9a7c53a33cf693d507","modified":1655947982805},{"_id":"themes/next/source/js/next-boot.js","hash":"da11083557070d947da48d29d2d60988c8d628e9","modified":1655947982805},{"_id":"themes/next/source/js/pjax.js","hash":"85293c253e0f43540572c4e4615c712325a732e2","modified":1655947982805},{"_id":"themes/next/source/js/schedule.js","hash":"4858233224756e3cadfabd8135f7c4b1e3673b44","modified":1655947982805},{"_id":"themes/next/source/js/utils.js","hash":"8abd170f5d3c2399b8012fb08b22dbf4cef2e89f","modified":1655947982817},{"_id":"themes/next/source/live2d-widget/LICENSE","hash":"1eba7caf09a39110ad2f542e3ed8700d1a69c6d3","modified":1656075311721},{"_id":"themes/next/source/live2d-widget/README.md","hash":"fe001678f15e98294f2d5722567f089483b549be","modified":1656075311721},{"_id":"themes/next/source/live2d-widget/autoload.js","hash":"61211be19fa20adfbcc13924fa76c85c2b566675","modified":1656075701762},{"_id":"themes/next/source/live2d-widget/waifu-tips.json","hash":"cc68124da17a8547f26ebca0c0596d20dea37238","modified":1656075311731},{"_id":"themes/next/source/live2d-widget/waifu-tips.js","hash":"c0ce86d39f1d3e2f79129d81d2f7fe46e1d88f0b","modified":1656075311731},{"_id":"themes/next/source/live2d-widget/waifu.css","hash":"86ecc0a7c379080a0cf09d0e314b5a5b5137cbea","modified":1656077512671},{"_id":"themes/next/test/helpers/font.js","hash":"6f5076bd3f2724e47b46ca69028393a9b6275cd1","modified":1655947982817},{"_id":"themes/next/test/helpers/index.js","hash":"2fb58dca3df2fe53116ee2b1232fa26ebe7b2ce5","modified":1655947982817},{"_id":"themes/next/test/helpers/next-url.js","hash":"08e84781f1cd54e5634b86877ad9cefae4a78e95","modified":1655947982817},{"_id":"themes/next/test/tags/button.js","hash":"a50ca44eaec3d91c2958e3157d624cd3e68828c7","modified":1655947982817},{"_id":"themes/next/test/tags/caniuse.js","hash":"2852be850d9103c25114253a45e6c62e32517de4","modified":1655947982817},{"_id":"themes/next/test/tags/index.js","hash":"5cad001936a694bf32d59751cc2b68a66199f976","modified":1655947982817},{"_id":"themes/next/test/tags/center-quote.js","hash":"2ac4b5a358681691a17e736de06fce0b640a7023","modified":1655947982817},{"_id":"themes/next/test/tags/group-pictures.js","hash":"8f66d3c6f03fb11d85aa2ab05c9b3c9aa2b4e994","modified":1655947982817},{"_id":"themes/next/test/tags/label.js","hash":"6cad7d84c42511459a89cda3971e8ea5cdee0125","modified":1655947982817},{"_id":"themes/next/test/tags/link-grid.js","hash":"41730266306c02362258384cd73659223928361f","modified":1655947982817},{"_id":"themes/next/test/tags/mermaid.js","hash":"f718a3d0e303d842e2ca5a3b162539a49e45a520","modified":1655947982817},{"_id":"themes/next/test/tags/note.js","hash":"161a81ce749e239d2403681372d48ecc1b51d7b9","modified":1655947982817},{"_id":"themes/next/test/tags/pdf.js","hash":"2d114596a8a180b2f3cd2a9c6528a328961f12d4","modified":1655947982827},{"_id":"themes/next/test/tags/tabs.js","hash":"b19d2592347eae5d6a7a97ca7e8cec03e8f25b51","modified":1655947982827},{"_id":"themes/next/test/tags/video.js","hash":"88db9a3a26cd35525c43c0339fcd1c5965ec9518","modified":1655947982827},{"_id":"themes/next/test/validate/index.js","hash":"560862194991c5963da5a411629d8e6c71d20ee2","modified":1655947982827},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"09d2c9487d75894d45a823e3237ae9f90fd6ee01","modified":1655947982755},{"_id":"themes/next/layout/_third-party/chat/gitter.njk","hash":"375a86f0b19e130cfa7707007e3a53d9ae7c9b64","modified":1655947982755},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"3fbc72427c1211e5dcfd269af1a74852a7ba5c1a","modified":1655947982755},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"3e80332f88b101141be69f2a07f54ed8c053eabb","modified":1655947982755},{"_id":"themes/next/layout/_third-party/analytics/cloudflare.njk","hash":"17173c45f0b740669ef45aaae1fe96eeb0a0ff52","modified":1655947982755},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"52ad137450f7b3d6a330e16b3ed1c6174290f0eb","modified":1655947982755},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"9ff9ec05c2037beea229a6bb698f9e3546973220","modified":1655947982755},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"eef710e9be20e7fed7573d0824feaa4eb1cf2737","modified":1655947982755},{"_id":"themes/next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"24719266662fcff63e88a21ee9b5b284abb8b37c","modified":1655947982755},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"5f7967bd946060f4102263a552ddfbae9975e7ea","modified":1655947982755},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"b0828dd1b1fd66ecd612d9e886a08e7579e9a4f7","modified":1655947982765},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"c5086b4c35f730f82c99c4a8317f2f153ebde869","modified":1655947982765},{"_id":"themes/next/layout/_third-party/comments/isso.njk","hash":"38badcc7624a13961381c2465478056b9602aee5","modified":1655947982766},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"6fd4df5c21cfe530dbb0c012bc0b202f2c362b9c","modified":1655947982766},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"b8e0d5de584cece5e05b03db5b86145aa1e422b4","modified":1655947982766},{"_id":"themes/next/layout/_third-party/comments/utterances.njk","hash":"a7921be7328e1509d33b435175f5333a9aada66f","modified":1655947982766},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"1856c4b035c5b8e64300a11af0461b519dfc4cf4","modified":1655947982766},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"a84db8bc8804335f95609a221ac1746433dcdc89","modified":1655947982766},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"a62aa1ed4e35b8d0451d83f341bf0a97538bc9a4","modified":1655947982766},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"67f67a77f27103177b9940446f43610229536d82","modified":1655947982766},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"210c32b654adae3d8076c4417d370b42af258cea","modified":1655947982766},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"d97790e4b442a1e3ded7d7b4f84b8ee6cdb6e8ea","modified":1655947982766},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"866ffa15a3250678eb8a90aa6f609fa965db90fd","modified":1655947982770},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"af5336e8bbdc4638435971da115bb7443d374ade","modified":1655947982766},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"8703d1855bb8d251c9b7c2940b7e3be525e53000","modified":1655947982770},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"dd8f963acd5a3685be46fd5319c06df0308d99b2","modified":1655947982770},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"0386c708975cc5faea4f782611c5d2c6b8ac2850","modified":1655947982770},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"fd75652957c1c3668874fdfd16f4f56027be0d8b","modified":1655947982744},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"6ae4c8976223dbf69bf2684307f80990f51675c2","modified":1656301272957},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"8e08c19e1bd92f3179907b0ff3743d6e2371d7ae","modified":1655947982754},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"1b2ae17f3c394ce310fe2d9ed5f4d07d8cc74ae7","modified":1655947982754},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"62513f08e9e7f4abeaeedca91fd0af0861a2540f","modified":1655947982755},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"828700af2a2f273d3e3e0554ffc60706d889d539","modified":1655947982755},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"20cb9c39bcdcfa3f710df7bc5838d6e62d4dd674","modified":1655947982755},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"1fe44a1e156cd30e3e9fd8313e1011ad30970f83","modified":1655947982755},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"b352346dd2cb42f7eeaec5e39d9a2a353b029775","modified":1655947982755},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"92553feb26f30f7fc9147bc4ef122908a9da06be","modified":1655947982755},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"6ec9c97e91c793cc2eb5ac0f7c3c36fdaaf637d1","modified":1655947982755},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"752df7d12360a077c51a25609916a3ecc1763bb3","modified":1655947982755},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"0ebc0142abebbeef4278e32abb543c7d7fa75d88","modified":1655947982755},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"ebf83083856f8bd81ad47ffb985d44e338b4e6bb","modified":1655947982755},{"_id":"themes/next/layout/_partials/post/post-footer.njk","hash":"e3502059bcc443ce932946a9891fcbe8b2bb362d","modified":1655947982755},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"9a9c4fb7e7c4fe4b7d474bdfdb4ed2b0a5423df2","modified":1655947982755},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"17e03b61e20a5cb4195f0e0d75261ce61a1cddc4","modified":1655947982755},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"58b3f657a47bae406e5fcf19cd5e42680785ac71","modified":1655947982755},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"9766852e72c1809d8c1eea71ac6116b4cc0886d2","modified":1655947982755},{"_id":"themes/next/layout/_partials/search/algolia-search.njk","hash":"93fbb449fbd599cb4315d7eb0daeb239811b233f","modified":1655947982755},{"_id":"themes/next/layout/_partials/search/localsearch.njk","hash":"f73d25a8ccfdd5d4ca2953dc434ff8ce36034c57","modified":1655947982755},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"c5c38b4fb137cc799a6ec31f391d1efc12234c8c","modified":1655947982755},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"00cec6980cafd417def885f496371856cd524a25","modified":1655947982774},{"_id":"themes/next/scripts/events/lib/config.js","hash":"f78cd74b25cc0ef65c060fec1d7e056967e26b4b","modified":1655947982774},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"1f1ea7b579a49f17574c31d78d663c54896133eb","modified":1655947982774},{"_id":"themes/next/scripts/events/lib/navigation.js","hash":"0a2df7d40d64c61ce7e730bb8269b848b03526d1","modified":1655947982774},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"65825c37e473c942095df05183424003d7263df5","modified":1655947982774},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"a96050b0a9bcb49f1f6897660efc77991024790a","modified":1655947982774},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"17fbc99521440a5d6c32ac991ba2038a12f86b31","modified":1655947982774},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"550cc7f57bc3ab3d093e34741e7860222851d4d4","modified":1655947982774},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"1cb58aa6b88f7461c3c3f9605273686adcc30979","modified":1655947982774},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3283bdd6e5ac7d10376df8ddd5faaec5dc1bd667","modified":1655947982774},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"70eb507ef7f1a4fc3ca71a3814cc57afe7f3f60c","modified":1655947982774},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"96e58efba0dc76af409cc7d2db225f0fe4526ea8","modified":1655947982774},{"_id":"themes/next/scripts/filters/comment/isso.js","hash":"c22cbccd7d514947e084eeac6a3af1aa41ec857a","modified":1655947982774},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"bb8ebb541c40362c0cbbd8e83d3b777302bb6c40","modified":1655947982774},{"_id":"themes/next/scripts/filters/comment/utterances.js","hash":"a50718c081685fd35ff8ea9ca13682c284399ed8","modified":1655947982774},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"c4537fa2de33d98baff2c87a73801770414e0b69","modified":1655947982805},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"ee5024be8e39605f0c6d71db038e15e0693d0f41","modified":1655947982805},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"d3a8f6e71c86926d0c2a247a31d7446d829736d5","modified":1655947982805},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"58014a2d087c4126058a99b5b1cb7d8a2eb6224d","modified":1655947982805},{"_id":"themes/next/source/css/_variables/base.styl","hash":"0876b50a58f114bc0b7982b85c5e5011730253b8","modified":1655947982805},{"_id":"themes/next/source/js/schemes/muse.js","hash":"714acb6317cc0d4c5aca26d974c536e37bb9ce1b","modified":1655947982816},{"_id":"themes/next/source/js/third-party/fancybox.js","hash":"8a847a7bbdbc0086dd1de12b82107a854b43f5e5","modified":1655947982817},{"_id":"themes/next/source/js/third-party/quicklink.js","hash":"5b0197e061f57e00875be3636ba372a67693abe0","modified":1655947982817},{"_id":"themes/next/source/js/third-party/pace.js","hash":"0ebee77b2307bf4b260afb06c060171ef42b7141","modified":1655947982817},{"_id":"themes/next/source/js/third-party/rating.js","hash":"a1f44247c18ac00ee3e0026560398429e4c77dd7","modified":1655947982817},{"_id":"themes/next/source/live2d-widget/.git/config","hash":"3616011373820efa4a3c94f1d900ea7d9ff7f3e3","modified":1656075311717},{"_id":"themes/next/source/live2d-widget/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1656075311712},{"_id":"themes/next/source/live2d-widget/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1656075306183},{"_id":"themes/next/source/live2d-widget/.git/index","hash":"bb11e56914a9c5d27613330b17bae6e437a3e6ce","modified":1656075335734},{"_id":"themes/next/source/live2d-widget/.git/packed-refs","hash":"390ab6e7a02cb8bd1fdd02d48a3d80024f6a1789","modified":1656075311706},{"_id":"themes/next/source/live2d-widget/assets/screenshot-1.png","hash":"4bd4d97a1fcaa5deb3cea1c0a102a895a15af32f","modified":1656075311722},{"_id":"themes/next/source/live2d-widget/demo/demo.html","hash":"5428dfdcae21ac210a2487a25aa9d5a5728b2a36","modified":1656075311728},{"_id":"themes/next/source/live2d-widget/demo/login.html","hash":"7cfcc0a4103083bced0db5a6878a6ab60071dd5b","modified":1656075311729},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"2bbf9046ef2a8f99ef3668bbb8be4e52e9d97bb7","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/index.styl","hash":"991c1f80995cec418dc00d3d6b13e2d911ac9894","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"f3defd56be33dba4866a695396d96c767ce63182","modified":1655947982785},{"_id":"themes/next/source/css/_common/outline/index.styl","hash":"7782dfae7a0f8cd61b936fa8ac980440a7bbd3bb","modified":1655947982795},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"2db4462e9cb87b8aef3f50f850fed407de16da3e","modified":1655947982796},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"1239f1b432a6932b2bb9ebcfbaabf724b8f4e59a","modified":1655947982799},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"f768ecb2fe3e9384777c1c115cd7409e9155edd7","modified":1655947982799},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"cf8446f4378dcab27b55ede1635c608ae6b8a5c8","modified":1655947982799},{"_id":"themes/next/source/css/_common/scaffolding/index.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1655947982800},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1655947982801},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"34416a5792d0235caa8c0c7e59725f2df0fa614c","modified":1655947982801},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"b9388016f8d9274703e77e306a1feaad1b7b9d6c","modified":1655947982801},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"90f7d3baab061e860172b536c9edc38c7fd2ef5c","modified":1655947982804},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"f51b6a4f06359ed56b2d10caa6f15362d3b3751d","modified":1655947982804},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b1054313ca9419e76fea0451417c881616f50a38","modified":1655947982805},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"00366a6bd1a66f99f845c5ebfc9e8cf56651b815","modified":1655947982805},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"82311a531e26ca5a6ad17cf14959da75d4ac6106","modified":1655947982805},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"4a454bcadd9de7d73172abd3276943e8626657be","modified":1655947982805},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"89bf3f6b82cb0fafbbd483431df8f450857c5a0b","modified":1655947982805},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"fd89988442f380cba907752fe3f608e3498f8c93","modified":1655947982805},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"018b6a761e197086174c9f06b4d5ea21cc230951","modified":1655947982805},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"ec5d4e8ffe74722a092a69ace2f8dec7776466a8","modified":1655947982805},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"134272cb8096156c9e32fbbe085394633c7509cd","modified":1655947982805},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1655947982805},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1655947982805},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"9b2cba0c9aa5a64957294f7548c199db1f63f0f4","modified":1655947982805},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"1d29eca70fa686d895f8e98a283e4a159e40905a","modified":1655947982805},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"9f60d501808f67d151af437221d0dfacc27c180c","modified":1655947982805},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b5c3dd08c520a16ee49f85fa12b4935e725ef261","modified":1655947982805},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"42bf453def88da82c842dca84e8f47087091f08e","modified":1655947982805},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"7905f428b46d100ac5928875cb1e2b99fa86fc0b","modified":1655947982805},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","hash":"f9579a02599de063ccff336177ba964a2931a6e9","modified":1655947982816},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","hash":"d77d4934d959e7125128754b568f1d041c3fbfff","modified":1655947982816},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","hash":"f755e8537ccbbb0bd84c26923f320d4e206e7428","modified":1655947982817},{"_id":"themes/next/source/js/third-party/chat/chatra.js","hash":"72e0766752b78a723fb30e92d533a8b353104e2d","modified":1655947982817},{"_id":"themes/next/source/js/third-party/chat/gitter.js","hash":"14b024c920a8b359777d79dd8e1a849387f8f3ad","modified":1655947982817},{"_id":"themes/next/source/js/third-party/chat/tidio.js","hash":"77c231bcd64f1c09bd9989909e9fee703b65f47f","modified":1655947982817},{"_id":"themes/next/source/js/third-party/comments/changyan.js","hash":"b4cb06fdf531292e2361398a98d75a4ca2b8473a","modified":1655947982817},{"_id":"themes/next/source/js/third-party/comments/disqus.js","hash":"5460de247c038d6cfbe774d7f8747f0a958d9017","modified":1655947982817},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","hash":"1c282d6c2151346d1f0aa95055d17abe77054ec9","modified":1655947982817},{"_id":"themes/next/source/js/third-party/comments/isso.js","hash":"b9b9fd2f0e098a123b34a4932da912a9485ffe6c","modified":1655947982817},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","hash":"1e8509356fb027d948d118ab220d9631f4d482fa","modified":1655947982817},{"_id":"themes/next/source/js/third-party/comments/livere.js","hash":"68892d74ef5fc308c6e7e6b4f190826d79f3055d","modified":1655947982817},{"_id":"themes/next/source/js/third-party/comments/utterances.js","hash":"ec44d7f1c8b51b0aa3cccba099a78f3575ac828c","modified":1655947982817},{"_id":"themes/next/source/js/third-party/math/katex.js","hash":"5c63ec71458b4fe0cd98fd4a04e11c3746764f11","modified":1655947982817},{"_id":"themes/next/source/js/third-party/math/mathjax.js","hash":"d93556184b2c0aa1dbc4a6fb892d2f77b80d7d9f","modified":1655947982817},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","hash":"e927000b375e79e2d173bdc6b8b45e67364fad4a","modified":1655947982817},{"_id":"themes/next/source/js/third-party/search/local-search.js","hash":"e6361ed3d5fa959e11e90f7dab8fdaff398b4425","modified":1655947982817},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","hash":"3272f3373fa7c3910852124bc5e43e90e3470ff8","modified":1655947982817},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","hash":"6abdc209f4503d4efd676e18bc30ddea813b6ff9","modified":1655947982817},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","hash":"e9fffe2a14751e86aed5e84a5e96514413eac2dc","modified":1655947982817},{"_id":"themes/next/source/js/third-party/tags/pdf.js","hash":"e109c2d6828f527f0289d5fa3bb02fce63ee6d93","modified":1655947982817},{"_id":"themes/next/source/live2d-widget/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1656075306184},{"_id":"themes/next/source/live2d-widget/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1656075306184},{"_id":"themes/next/source/live2d-widget/.git/hooks/fsmonitor-watchman.sample","hash":"118ff5509f187039734d04456bf01e44c933ac19","modified":1656075306186},{"_id":"themes/next/source/live2d-widget/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1656075306186},{"_id":"themes/next/source/live2d-widget/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1656075306186},{"_id":"themes/next/source/live2d-widget/.git/hooks/pre-commit.sample","hash":"a79d057388ee2c2fe6561d7697f1f5efcff96f23","modified":1656075306187},{"_id":"themes/next/source/live2d-widget/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1656075306187},{"_id":"themes/next/source/live2d-widget/.git/hooks/pre-push.sample","hash":"a599b773b930ca83dbc3a5c7c13059ac4a6eaedc","modified":1656075306187},{"_id":"themes/next/source/live2d-widget/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1656075306188},{"_id":"themes/next/source/live2d-widget/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1656075306188},{"_id":"themes/next/source/live2d-widget/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1656075306188},{"_id":"themes/next/source/live2d-widget/.git/hooks/update.sample","hash":"730e6bd5225478bab6147b7a62a6e2ae21d40507","modified":1656075306189},{"_id":"themes/next/source/live2d-widget/.git/hooks/push-to-checkout.sample","hash":"508240328c8b55f8157c93c43bf5e291e5d2fbcb","modified":1656075306189},{"_id":"themes/next/source/live2d-widget/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1656075306190},{"_id":"themes/next/source/live2d-widget/.git/logs/HEAD","hash":"87b8aa03f4b1c5a919c2b093944352e2fbed12fb","modified":1656075311714},{"_id":"themes/next/source/css/_common/components/post/index.styl","hash":"df2fbd0ada00f37439b0de965c6f1c29d3c97429","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"c931b03777623a569e21a60e891efe9e0e39ecd8","modified":1656061796603},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"791bc9befb0d4d06e3e517eccfe0bc3551a02a60","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"eebe3013a9a976011570dce2d04dfeae4c31d790","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"e53a5eb1d1771e284044bdb0bc0ed2de27923669","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"c34936a17c3d8af6c0988ac6746d7509dc0b50eb","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"4d29b6ae7ed3dc44b10df851a4128b6441efa8be","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"69dff7cf231d01f85671758455726dd666664a73","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"9043d9bc2db35ca000c79258ef89fdb161dc43fb","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"0a779f955a0e25df0852e0731517dadb234aa181","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fde10ce94e9ae21a03b60d41d532835b54abdcb1","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"80595d274f593b321c0b644a06f3165fe07b16f5","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"091b8c763e43447d087c122a86538f290f83136a","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/third-party/disqusjs.styl","hash":"c1e9edbfd1c3696b35d5452ae2e6d766f3fe91aa","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"56d719bcdcba3d725141c55bbd4b168f3942f912","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/pages/index.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"fb165c1a0d990c5cf98b87773e0dc50410229b96","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/third-party/gitter.styl","hash":"7b36f776c41fbb744572c5de2c8d49b35656ec21","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"0527153aa821bdbdb84c7b47f60e3cefd95a742f","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"1e5776ad4c5c8bcf7596ac74dcabc30704b3f5a0","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/third-party/index.styl","hash":"0c4c5e39f8ac12febaa0f4ff7265151e139edad8","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"49c26184580fde8a732899a4de5aae8662e289b8","modified":1655947982785},{"_id":"themes/next/source/css/_common/components/third-party/utterances.styl","hash":"d28856f365a9373c4ae6fe1e5673d63df2dfd65f","modified":1655947982785},{"_id":"themes/next/source/css/_common/outline/footer/index.styl","hash":"02b6d1a53f7a02c6b0929b11f3ab904b5b873a0e","modified":1655947982785},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"c8648c8ea3105556be0068d9fb2735261d0d94bc","modified":1655947982785},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"05af22f3edc2383a3d97ec4c05e9ac43b014bead","modified":1655947982785},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"2db695204d39e4c7daa7b91585a0ea4b06b49f11","modified":1655947982785},{"_id":"themes/next/source/css/_common/outline/header/index.styl","hash":"f465cc1bfe98e3f2b33f5b696d4870c8dc56da6b","modified":1655947982785},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"86b0925e968f35bbc76b473a861e8f9797f7580e","modified":1655947982785},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2c2bfbc34b6f19d262ae7c041474985e12f4f4ad","modified":1655947982796},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"d9bc2b520636b9df7f946295cd430593df4118ff","modified":1655947982795},{"_id":"themes/next/source/css/_common/outline/sidebar/index.styl","hash":"9964a96f9a647cfb16b97679eced79d07e084e6d","modified":1655947982796},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"d8a028f532d562e6a86bb3b9c7b992e4b6dbbb51","modified":1655947982797},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"1c324d56ae83e96db2c4c6d63edd7ee51c936fc1","modified":1655947982797},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"63d8f5f169c2b1c969928fc79244c5fe89ee484e","modified":1655947982797},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"57ed6770535ecb2e6485a0c87d4de6d6476368b9","modified":1655947982797},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"db4f3263b2b6551dd56bfdf33cceaf81661a3611","modified":1655947982798},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"6681ffe283f8a7e3c86310ef4f6ca1e499c1a19f","modified":1655947982798},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"081345490271840855d1238b969dbf2e0a2bba8f","modified":1655947982798},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2de038def2cb91da143b14696366c14a66e0e569","modified":1655947982798},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"047bf8176ea24e277b1a4f6e6ad599033f1d1a44","modified":1655947982799},{"_id":"themes/next/source/css/_common/scaffolding/highlight/index.styl","hash":"ee05c1d00bc38397bd320128bbe15d05d9100039","modified":1655947982800},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"6b3680e0dbea8e14c1cec24ef63b7fae5e37f7ef","modified":1655947982801},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"531daf2612c6217950677a2d03924459ce57c291","modified":1655947982802},{"_id":"themes/next/source/css/_common/scaffolding/tags/index.styl","hash":"e22fde6f1657d311d46f64d868c4491d535c8caa","modified":1655947982802},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"8d9218980e185210ce034e9769ab639b9630fd88","modified":1655947982802},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7075dd32dd70da1e161e4bd14b46f1e8be62fa3c","modified":1655947982802},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"c7754dc6c866928b538f0863a05b96ec44b5e986","modified":1655947982803},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"77122986509a6b4968bae2729417b7016137534c","modified":1655947982803},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f71b2022094c5bc8c74b4ed049639f7262e0b182","modified":1655947982803},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"2e9dc3b3546e19e9de18050ad04b1741841116bc","modified":1655947982803},{"_id":"themes/next/source/live2d-widget/.git/objects/pack/pack-4dde768677bc3ba1f8b03e44470f25576e4fb058.idx","hash":"41b6caeb9374e4dbe40f0374285c84d018f8b216","modified":1656075311325},{"_id":"themes/next/source/live2d-widget/.git/refs/heads/master","hash":"76eead8361376617053acb43190de816f4030c2d","modified":1656075311714},{"_id":"themes/next/source/live2d-widget/.git/logs/refs/heads/master","hash":"87b8aa03f4b1c5a919c2b093944352e2fbed12fb","modified":1656075311715},{"_id":"themes/next/source/live2d-widget/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1656075311710},{"_id":"themes/next/source/live2d-widget/.git/logs/refs/remotes/origin/HEAD","hash":"87b8aa03f4b1c5a919c2b093944352e2fbed12fb","modified":1656075311710},{"_id":"themes/next/source/live2d-widget/live2d.min.js","hash":"61a09b54a472b4d0541b7c50afb3dfdd172e062f","modified":1656075311731},{"_id":"themes/next/source/live2d-widget/assets/screenshot-3.png","hash":"f89c6fdf44008e7d3c7a1aafe65dc39b212edb6c","modified":1656075311727},{"_id":"themes/next/source/live2d-widget/assets/screenshot-2.png","hash":"76b844653136184c573b3632e12296e008a7ff5c","modified":1656075311724},{"_id":"themes/next/source/images/background.png","hash":"0b8c53b27ef059ac9dde8b75851bc4e8a7ab1c83","modified":1655973516416},{"_id":"themes/next/source/images/zrn.png","hash":"3ebd139cd267300c6bd37ee76fdc0eb156f7bc0c","modified":1655971127634},{"_id":"themes/next/source/live2d-widget/.git/objects/pack/pack-4dde768677bc3ba1f8b03e44470f25576e4fb058.pack","hash":"16bcf8a409cea43577f1718d4dd113bcd2afaea1","modified":1656075335725},{"_id":"public/search.xml","hash":"0392bf9ff5b6f0a0f0608cde880f7993fd7e24fe","modified":1656335977431},{"_id":"public/sitemap.xml","hash":"67fe59a928a78215adaa0a074de2dd0f305c90a6","modified":1656335977431},{"_id":"public/tags/index.html","hash":"50a9eec7eacdb1a8388833caab2ab22dd5ca817f","modified":1656335977431},{"_id":"public/categories/index.html","hash":"f68b51fccfd3a5835b427a94362eb00848b3603c","modified":1656335977431},{"_id":"public/2022/06/23/os绪论/index.html","hash":"b741a79dbe04231dd41496c5c6d70de6ddb22aa6","modified":1656335977431},{"_id":"public/about/index.html","hash":"7c46a71b46c5ab28481a7a7983f0195165e1ae83","modified":1656335977431},{"_id":"public/2022/06/23/sql概述与sql定义语言/index.html","hash":"7344ba2528e57a40e528843da1ea6f4e73016034","modified":1656335977431},{"_id":"public/2022/06/23/绪论/index.html","hash":"00ddf793036c67accce15d22adfe94b00e9aafca","modified":1656335977431},{"_id":"public/2022/06/23/关系数据库/index.html","hash":"e8ea84147e6022a2d71b1a3f8314588356872a8b","modified":1656335977431},{"_id":"public/archives/index.html","hash":"4fe1c4c358e40672011177104a1074bf81225ca1","modified":1656335977431},{"_id":"public/2022/06/22/hello-world/index.html","hash":"86fb0fd7e8426d768d170e2bc86f8bd388a88a32","modified":1656335977431},{"_id":"public/archives/2022/index.html","hash":"e81fa567949b2d46662ceb18c6d6c0bb5e9eb15e","modified":1656335977431},{"_id":"public/archives/2022/06/index.html","hash":"b5816fc8b4577fc20c6ab44c14de52f4c37ea4d3","modified":1656335977431},{"_id":"public/categories/数据库/index.html","hash":"9f145793d1866e5bd94ec16f420d76b8bb398ad1","modified":1656335977431},{"_id":"public/index.html","hash":"514bcbfdcdd1054e9bdddd9ae7d69bd66471b515","modified":1656335977431},{"_id":"public/categories/操作系统/index.html","hash":"8b7d71c75ee64b74215f141c65254895fb054364","modified":1656335977431},{"_id":"public/tags/数据库/index.html","hash":"a42412d3de6d66491e77f92c0f11812d5d891dbe","modified":1656335977431},{"_id":"public/tags/操作系统/index.html","hash":"f390dc6324bbf7e876b0d7e9af6c04a65ece31a6","modified":1656335977431},{"_id":"public/CNAME","hash":"fbe513ad52ed690aca60eea5575b2aa8c16b5baf","modified":1656335977431},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1656335977431},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1656335977431},{"_id":"public/images/bitbug_favicon-16x16.ico","hash":"998c8c7c1b89f6f323d2485a001983ad271fb103","modified":1656335977431},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1656335977431},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1656335977431},{"_id":"public/images/bitbug_favicon-32x32.ico","hash":"9f23b3240a6709e32d1b734a519128fb038e20d4","modified":1656335977431},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1656335977431},{"_id":"public/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1656335977431},{"_id":"public/live2d-widget/LICENSE","hash":"1eba7caf09a39110ad2f542e3ed8700d1a69c6d3","modified":1656335977431},{"_id":"public/live2d-widget/assets/screenshot-1.png","hash":"4bd4d97a1fcaa5deb3cea1c0a102a895a15af32f","modified":1656335977431},{"_id":"public/css/hbe.style.css","hash":"b0a0077cb588c0941823905fcc383aa7509ade73","modified":1656335977431},{"_id":"public/lib/hbe.js","hash":"136dba00826bdd086153bf0acb5473aea7183ad1","modified":1656335977431},{"_id":"public/css/noscript.css","hash":"ec89b3425fbce20863d554c6fd495ea29c3c303d","modified":1656335977431},{"_id":"public/css/main.css","hash":"c6b4b84e4d3f32eee778aea6b12e40c33bd0d357","modified":1656335977431},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1656335977431},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1656335977431},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1656335977431},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1656335977431},{"_id":"public/js/fireworks.js","hash":"53981959bc6def4a85bbbb41b07e4b1474a2124d","modified":1656335977431},{"_id":"public/js/next-boot.js","hash":"da0f07f9eaaa83de70128b0feaea3fdadb90457a","modified":1656335977431},{"_id":"public/js/fairyDustCursor.js","hash":"3a73ffb1dfb17a7adaa4e95d7e077e5e11764409","modified":1656335977431},{"_id":"public/js/motion.js","hash":"f7c825cbff11885fa0dffa64824fd00e505d6a8d","modified":1656335977431},{"_id":"public/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":1656335977431},{"_id":"public/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1656335977431},{"_id":"public/js/utils.js","hash":"200088bfd042f5304b2a04befab0829148845e0e","modified":1656335977431},{"_id":"public/live2d-widget/README.html","hash":"282925aa5a1a41f306ec2e9201b84245cbc4120b","modified":1656335977431},{"_id":"public/live2d-widget/autoload.js","hash":"61211be19fa20adfbcc13924fa76c85c2b566675","modified":1656335977431},{"_id":"public/live2d-widget/waifu-tips.json","hash":"a3f9d4d832cd0948cd21385e7e8c62db377ba7d4","modified":1656335977431},{"_id":"public/live2d-widget/waifu-tips.js","hash":"61efcb42681f7b777a89b6d3d1b563472c7226a3","modified":1656335977431},{"_id":"public/live2d-widget/waifu.css","hash":"86ecc0a7c379080a0cf09d0e314b5a5b5137cbea","modified":1656335977431},{"_id":"public/js/schemes/muse.js","hash":"9794bd4fc6a458322949d6a0ade89cd1026bc69f","modified":1656335977431},{"_id":"public/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1656335977431},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1656335977431},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1656335977431},{"_id":"public/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1656335977431},{"_id":"public/live2d-widget/demo/login.html","hash":"5df56deaeea62f81ea7f41343d91232229b87f21","modified":1656335977431},{"_id":"public/live2d-widget/demo/demo.html","hash":"48492e824495bc2870b7160d0fa7d92b28863f11","modified":1656335977431},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1656335977431},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1656335977431},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1656335977431},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1656335977431},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1656335977431},{"_id":"public/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1656335977431},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1656335977431},{"_id":"public/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1656335977431},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1656335977431},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1656335977431},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1656335977431},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1656335977431},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1656335977431},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1656335977431},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1656335977431},{"_id":"public/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1656335977431},{"_id":"public/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1656335977431},{"_id":"public/js/third-party/statistics/firestore.js","hash":"411a72df581f5b21317dc28633c7993207eb9e1c","modified":1656335977431},{"_id":"public/js/third-party/tags/mermaid.js","hash":"f27d817b0c2138dd3215b1f46af0753f60a008f3","modified":1656335977431},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1656335977431},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1656335977431},{"_id":"public/live2d-widget/live2d.min.js","hash":"94383fb61de815c3f806ae3f11026bbcfe384082","modified":1656335977431},{"_id":"public/live2d-widget/assets/screenshot-3.png","hash":"f89c6fdf44008e7d3c7a1aafe65dc39b212edb6c","modified":1656335977431},{"_id":"public/live2d-widget/assets/screenshot-2.png","hash":"76b844653136184c573b3632e12296e008a7ff5c","modified":1656335977431},{"_id":"public/images/background.png","hash":"0b8c53b27ef059ac9dde8b75851bc4e8a7ab1c83","modified":1656335977431},{"_id":"public/images/zrn.png","hash":"3ebd139cd267300c6bd37ee76fdc0eb156f7bc0c","modified":1656335977431}],"Category":[{"name":"数据库","_id":"cl4wroc470006mwskeoatddm1"},{"name":"操作系统","_id":"cl4wroc4c000fmwsk7ayy8b8d"}],"Data":[{"_id":"post-body-end","data":"<div>\n    \n</div>\n"},{"_id":"styles","data":"body {\n  background: url(\"/images/background.png\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 100% 100%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.8);\n}\n.popup {\n  opacity: 0.8;\n}\n.post-block {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.comments {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.post {\n  margin-top: 60px;\n  padding: 20px;\n  margin-bottom: 60px;\n  -webkit-box-shadow: 0 0 0px #788072;\n  -moz-box-shadow: 0 0 0px rgba(202,203,204,0.5);\n}\n.post-button .btn {\n  color: #555 !important;\n  background-color: #fff;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  border: none !important;\n  transition-property: unset;\n  padding: 0px 15px;\n}\n.post-button .btn:hover {\n  color: #fff !important;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  background-image: linear-gradient(90deg, #a166ab 0%, #ef4e7b 25%, #f37055 50%, #ef4e7b 75%, #a166ab 100%);\n}\n"},{"_id":"variables","data":""}],"Page":[{"title":"categories","date":"2022-06-24T13:48:25.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-06-24 21:48:25\ntype: \"categories\"\ncomments: false\n---\n","updated":"2022-06-24T13:50:37.991Z","path":"categories/index.html","layout":"page","_id":"cl4wroc3y0000mwskg5zf8awe","content":"","site":{"data":{"post-body-end":"<div>\n    \n</div>\n","styles":"body {\n  background: url(\"/images/background.png\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 100% 100%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.8);\n}\n.popup {\n  opacity: 0.8;\n}\n.post-block {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.comments {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.post {\n  margin-top: 60px;\n  padding: 20px;\n  margin-bottom: 60px;\n  -webkit-box-shadow: 0 0 0px #788072;\n  -moz-box-shadow: 0 0 0px rgba(202,203,204,0.5);\n}\n.post-button .btn {\n  color: #555 !important;\n  background-color: #fff;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  border: none !important;\n  transition-property: unset;\n  padding: 0px 15px;\n}\n.post-button .btn:hover {\n  color: #fff !important;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  background-image: linear-gradient(90deg, #a166ab 0%, #ef4e7b 25%, #f37055 50%, #ef4e7b 75%, #a166ab 100%);\n}\n","variables":""}},"length":0,"excerpt":"","more":""},{"title":"about","date":"2022-06-23T07:14:37.000Z","_content":"\n从前慢\n\n​          木心\n\n记得早先少年时\n\t\t大家诚诚恳恳\n\t\t说一句 是一句\n\t\t清早上火车站\n\t\t长街黑暗无行人\n\t\t卖豆浆的小店冒着热气\n\t\t从前的日色变得慢\n\t\t车，马，邮件都慢\n\t\t一生只够爱一个人\n\t\t钥匙精美有样子\n\t\t你锁了 人家就懂了\t\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2022-06-23 15:14:37\n---\n\n从前慢\n\n​          木心\n\n记得早先少年时\n\t\t大家诚诚恳恳\n\t\t说一句 是一句\n\t\t清早上火车站\n\t\t长街黑暗无行人\n\t\t卖豆浆的小店冒着热气\n\t\t从前的日色变得慢\n\t\t车，马，邮件都慢\n\t\t一生只够爱一个人\n\t\t钥匙精美有样子\n\t\t你锁了 人家就懂了\t\n","updated":"2022-06-23T07:16:59.724Z","path":"about/index.html","comments":1,"layout":"page","_id":"cl4wroc430002mwskg8wr6z98","content":"<p>从前慢</p>\n<p>​          木心</p>\n<p>记得早先少年时<br>        大家诚诚恳恳<br>        说一句 是一句<br>        清早上火车站<br>        长街黑暗无行人<br>        卖豆浆的小店冒着热气<br>        从前的日色变得慢<br>        车，马，邮件都慢<br>        一生只够爱一个人<br>        钥匙精美有样子<br>        你锁了 人家就懂了\t</p>\n","site":{"data":{"post-body-end":"<div>\n    \n</div>\n","styles":"body {\n  background: url(\"/images/background.png\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 100% 100%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.8);\n}\n.popup {\n  opacity: 0.8;\n}\n.post-block {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.comments {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.post {\n  margin-top: 60px;\n  padding: 20px;\n  margin-bottom: 60px;\n  -webkit-box-shadow: 0 0 0px #788072;\n  -moz-box-shadow: 0 0 0px rgba(202,203,204,0.5);\n}\n.post-button .btn {\n  color: #555 !important;\n  background-color: #fff;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  border: none !important;\n  transition-property: unset;\n  padding: 0px 15px;\n}\n.post-button .btn:hover {\n  color: #fff !important;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  background-image: linear-gradient(90deg, #a166ab 0%, #ef4e7b 25%, #f37055 50%, #ef4e7b 75%, #a166ab 100%);\n}\n","variables":""}},"length":180,"excerpt":"","more":"<p>从前慢</p>\n<p>​          木心</p>\n<p>记得早先少年时<br>        大家诚诚恳恳<br>        说一句 是一句<br>        清早上火车站<br>        长街黑暗无行人<br>        卖豆浆的小店冒着热气<br>        从前的日色变得慢<br>        车，马，邮件都慢<br>        一生只够爱一个人<br>        钥匙精美有样子<br>        你锁了 人家就懂了\t</p>\n"},{"title":"tags","date":"2022-06-24T13:49:23.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-06-24 21:49:23\ntype: \"tags\"\ncomments: false\n---\n","updated":"2022-06-24T13:50:54.971Z","path":"tags/index.html","layout":"page","_id":"cl4wroc450004mwskayb4d7gc","content":"","site":{"data":{"post-body-end":"<div>\n    \n</div>\n","styles":"body {\n  background: url(\"/images/background.png\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 100% 100%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.8);\n}\n.popup {\n  opacity: 0.8;\n}\n.post-block {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.comments {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.post {\n  margin-top: 60px;\n  padding: 20px;\n  margin-bottom: 60px;\n  -webkit-box-shadow: 0 0 0px #788072;\n  -moz-box-shadow: 0 0 0px rgba(202,203,204,0.5);\n}\n.post-button .btn {\n  color: #555 !important;\n  background-color: #fff;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  border: none !important;\n  transition-property: unset;\n  padding: 0px 15px;\n}\n.post-button .btn:hover {\n  color: #fff !important;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  background-image: linear-gradient(90deg, #a166ab 0%, #ef4e7b 25%, #f37055 50%, #ef4e7b 75%, #a166ab 100%);\n}\n","variables":""}},"length":0,"excerpt":"","more":""}],"Post":[{"title":"Hello World","abbrlink":16107,"top":true,"_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n<!-- more -->\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\nabbrlink: 16107\ntop: true\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n<!-- more -->\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2022-06-22T00:41:03.664Z","updated":"2022-06-24T00:49:06.582Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4wroc410001mwskg1cn56rz","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<span id=\"more\"></span>\n\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{"post-body-end":"<div>\n    \n</div>\n","styles":"body {\n  background: url(\"/images/background.png\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 100% 100%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.8);\n}\n.popup {\n  opacity: 0.8;\n}\n.post-block {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.comments {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.post {\n  margin-top: 60px;\n  padding: 20px;\n  margin-bottom: 60px;\n  -webkit-box-shadow: 0 0 0px #788072;\n  -moz-box-shadow: 0 0 0px rgba(202,203,204,0.5);\n}\n.post-button .btn {\n  color: #555 !important;\n  background-color: #fff;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  border: none !important;\n  transition-property: unset;\n  padding: 0px 15px;\n}\n.post-button .btn:hover {\n  color: #fff !important;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  background-image: linear-gradient(90deg, #a166ab 0%, #ef4e7b 25%, #f37055 50%, #ef4e7b 75%, #a166ab 100%);\n}\n","variables":""}},"length":431,"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>","more":"<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>"},{"title":"sql概述与sql定义语言","abbrlink":55700,"date":"2022-06-23T03:21:25.000Z","_content":"\n# 三、 sql概述与sql定义语言\n\n## 1、基本概念\n\n**sql的特点：**\n\n- 综合统一：集数据定义、数据操纵、数据控制语言的功能为一体\n- 高度非过程化\n- 面向集合的操作方式\n- 两种使用方式，统一的语法结构\n- 简洁易学、通用、功能强\n\n<!-- more -->\n\n**sql语言的分类**：数据定义语言DDL、数据操作语言DML、数据查询语言DQL、数据控制语言DCL\n\n**sql数据库的三级结构：**\n\n![image-20220517103508209](https://s2.loli.net/2022/05/17/3IjuTbYwHFQzdAp.png)\n\n子模式对应于视图和部分查询表，模式对应于基本表，内模式对应于存储文件\n\n**sql语句的分类**：模式定义语句、数据操纵语句（增删改查）、事务与控制语句、会话及诊断语句\n\n**sql的数据类型：**\n\n![image-20220517104732266](https://s2.loli.net/2022/05/17/fhJG9wazTZ1ydL5.png)\n\n> 在实验中发现，如果要显示001这种类型的数字，可以设置为*sno int(3) zerofill*\n\n## 2、sql的数据定义\n\n![image-20220517110612939](https://s2.loli.net/2022/05/17/5Qv3qyIM9TeJrXG.png)\n\n> 👉总结：\n>\n> 创建：create  对象类型 对象名\n>\n> 删除：drop 对象类型 对象名   [RESTRICT | CASCADE]\n>\n> RESTRICT：如果有其它对象依赖于该对象，则拒绝进行DROP操作\n>\n> CASCADE：级联删除该对象及所有依赖于该对象的对象\n\n### 模式\n\n- 模式的定义：\n\n    ```sql\n    CREATE SCHEMA <模式名> AUTHORIZATION <用户名>  #若不指定<模式名>，则隐含为<用户名>\n    \n    #eg\n    CREATE SCHEMA library_db AUTHORIZATION Guoqing;\n    ```\n\n- 模式的删除\n\n    ```sql\n    DROP SCHEMA <模式名> [RESTRICT | CASCADE];\n    #RESTRICT – 如果模式内没有对象，则删除该模式\n    #CASCADE – 删除模式中所有对象的内容和定义\n    \n    #eg.\n    DROP SCHEMA library RESTRICT;\n    ```\n\n### 域\n\n- 定义域：\n\n    ```sql\n    CREATE DOMAIN <域名> [AS] <数据类型> [DEFAULT <默认值>] [<域约束>] \n    \n    #eg\n    CREATE DOMAIN SexType AS CHAR(2) DEFAULT ‘M’ CHECK (VALUE IN (‘M’, ‘F’));\n    sex SexType NOT NULL;  #使用域\n    ```\n\n- 删除域：\n\n    ```sql\n    DROP DOMAIN <域名> [RESTRICT | CASCADE];\n    #如果指定RESTRICT，且域用于现有的表中，则删除失败\n    #如果指定CASCADE，基于域的任一表中的列都会自动地改变为基本域类型，该域的CHECK约束或默认值都会被列的约束或默认值代替\n    \n    #eg\n    DROP DOMAIN SexType；\n    ```\n\n### 表\n\n- 表的建立\n\n    ```sql\n    CREATE TABLE [模式名.] <表名> \n    (   \n        <列名><数据类型>[NOT NULL│NULL][UNIQUE]\n        [, <列名><数据类型>[NOT NULL│NULL][UNIQUE]]…\n        [, PRIMARY KEY （<列名>[，<列名>] …）]    #主键,主键属性列用括号括起来\n        [, FOREIGN KEY （<列名>[，<列名>] …）REFERENCES  <被参照表名>]#外键\n    );\n    \n    #eg\n    CREATE TABLE PropertyForRent \n    (\n        propertyNo PNumber NOT NULL,      #数据类型为用户定义的域\n        rooms PRooms NOT NULL DEFAULT 4, \n        rent PRent NOT NULL DEFAULT 600, \n        ownerNo OwnerNumber NOT NULL, \n        staffNo StaffNumber Constraint StaffNotHandlingTooMuch ….\n        branchNo BranchNumber NOT NULL,\n        PRIMARY KEY (propertyNo),   #主键属性和外键属性要用括号括起来\n        FOREIGN KEY (staffNo) REFERENCES Staff \n        ON DELETE SET NULL ON UPDATE CASCADE …. #可采取的行为\n    );\n    ```\n\n- 表的删除\n\n    ```sql\n    DROP TABLE <表名> [CASCADE | RESTRICT]\n    #既删除DD中表的结构定义，也删除DB中的数据文件\n    #RESTRICT：如果有其它对象依赖于该表，则拒绝进行DROP操作\n    #CASCADE：级联删除表及所有依赖于该表的对象\n    \n    #eg\n    DROP TABLE PropertyForRent;\n    ```\n\n- ==修改表==\n\n    ```sql\n    ALETR TABLE <表名>\n    [ADD <新列名> <数据类型> {NULL}]     #加新列，新增加的列默认为空值\n    [ADD <完整性约束条件>]\n    [DROP <完整性约束条件>]   #删除列的完整性约束条件，没有提供删除列的子句\n    [MODIFY <列名> <数据类型>]   #修改列，可能破坏已有数据\n    \n    #eg 增加学生姓名必须取唯一值的约束\n    ALTER TABLE student\n    ADD CONSTRAINT c1_name UNIQUE (SN)  #c1_name是约束的名字\n    \n    #eg 删除学生姓名必须取唯一值的约束\n    ALTER TABLE S \n    DROP UNIQUE（SN）;  \n    #或者 DROP CONSTRAINT c1_name\n    ```\n\n### 索引\n\n- 建立索引\n\n    一条语句建立一个索引\n\n    ```sql\n    #UNIQUE表示每个索引值只能对应唯一的数据记录，CLUSTER表示聚簇索引，即索引项的顺序与表中记录的物理顺序一致的有序索引，一个基本表最多只能建立一个聚簇索引\n    CREATE [UNIQUE] [CLUSTER] INDEX <索引名>  \n    ON <表名> (<列名1>[ASC|DESC], <列名2>[ASC|DESC], ...);\n    #ASC表示升序，DESC表示降序。默认为升序。\n    \n    #eg:在SC中按sno升序cno降序建唯一索引\n    CREATE UNIQUE INDEX SC_index ON SC( sno ASC，cno DESC);\n    ```\n\n- 删除索引\n\n    ```sql\n    DROP INDEX [ON <表名>]<索引名>\n    \n    #eg\n    DROP INDEX SC_index;\n    ```\n\n## ==3、⚠⚠⚠sql数据查询==\n\n### 一般格式\n\n```sql\nSELECT [ALL|DISTINCT] <目标列表达式>[,<目标列表达式>]...      #ALL为默认设置，即不取消重复值，DISTINCT表示取消重复值\nFROM <表名或视图名>[,表名或视图名]...     #SELECT子句与FROM子句是必选子句\n[WHERE <条件表达式>]\n[GROUP BY <列名1>[HAVING<条件表达式>]]\n[ORDER BY <列名2>[ASC|DESC]];     #其中，列名2也可以用SELECT子句中相应列的序号\n```\n\n**含义：**\n\n![image-20220517114258444](https://s2.loli.net/2022/05/17/GUvQItYzXHpeOmW.png)\n\n**概念性的执行步骤：**\n\n- 计算出现在FROM后面的表之间的笛卡儿积\n- 实施由WHERE后面的条件规定的选择操作\n- 根据GROUP BY后面的属性的值进行分组\n- 对于分组出来的每一个小组，实施由HAVING后面的条件规定的选择操作，保留满足条件的小组\n- 将出现在SELECT后面的属性投影成结果表\n- 将结果表中的元组根据ORDER BY后面的属性及指定的顺序（升序或降序）输出\n\n### SELECT子句：\n\n*SELECT [ALL|DISTINCT] <目标列表达式>[,<目标列表达式>]...*\n\n- *代表指定表的所有列，一般用在exists和not exists里面\n\n- ALL为默认设置 ，即不取消重复值，DISTINCT表示取消重复值\n\n- ==聚集函数（只能用于SELECT子句和HAVING子句中 ）==\n\n    ![image-20220305102158697](https://s2.loli.net/2022/03/05/YGrdqMfam4Qhb8P.png)\n\n    ![image-20220307231705848](https://s2.loli.net/2022/03/07/xj6qmHkOhKrcvag.png)\n\n    > 当这些函数遇到空值时，除COUNT(*)外，都跳过空值而只处理非空值。\n\n    例子：\n\n    <img src=\"https://s2.loli.net/2022/05/17/5Yvk4aWe1JPLMOw.png\" alt=\"image-20220517115836637\" style=\"zoom: 67%;\" />\n\n- ==算术表达式：==  \n\n    +、-、*、/、%、INTEGER（取整）、SQRT（求平方根）、三角函数（SIN、COS）、字符串函数SUBSTRING（取子串）、UPPER（大写字符）、MONTHS_BETWEEN（月份差）\n\n    ---\n\n- 用AS子句为列命名 \n\n    ```sql\n    SELECT staffNo, fName, lName, salary/12 AS monthlySalary FROM Staff;\n    ```\n\n### FROM子句：\n\n可以给表指定别名：多个表放在FROM子句中，代表多表进行笛卡尔积\n\n![image-20220517120134854](https://s2.loli.net/2022/05/17/4bpXBmUsKrI3CdH.png)\n\n### WHERE子句：\n\nWHERE子句的查询条件可以用多种形式表示： \n\n<img src=\"https://s2.loli.net/2022/05/18/X4nGHxUtsuZCcio.png\" style=\"zoom:67%;\" />\n\n- 比较运算作为查找条件 (>,  <,  >=,  <=,  =,  <>(不等于))\n\n    ```sql\n    WHERE salary > 10000\n    ```\n\n- 复合比较运算作为查找条件 (AND, OR, NOT ) \n\n    ```sql\n    WHERE city = ‘London’ OR city = ‘Glasgow’\n    ```\n\n- 范围作为查找条件（BETWEEN / NOT BETWEEN）。==BETWEEN包含端点==\n\n    ```sql\n    WHERE grade BETWEEN 85 AND 95\n    ```\n\n- 集合成员测试作为查找条件（IN / NOT IN）\n\n    ```sql\n    WHERE place IN('湖南','湖北')\n    ```\n\n- 模式匹配作为查找条件（LIKE / NOT LIKE）\n\n    SQL中的两种特殊的模式匹配符号：\n\n    - %: 百分号表示零或多个字符序列（通配符）\n\n    - _: 下划线表示任意单个字符\n\n        <img src=\"https://s2.loli.net/2022/03/07/Z52TOHjLlb6tivJ.png\" alt=\"image-20220307230435181\" style=\"zoom:67%;\" />\n\n    ```sql\n    WHERE sname LIKE '刘%' OR SNAME LIKE '__晓%'   #一个汉字占两个字符位\n    ```\n\n- 空查找条件（IS NULL  /  IS NOT NULL）\n\n    ```sql\n    WHERE propertyNo = ‘PG4’ AND comment IS NULL\n    ```\n\n### GROUP BY子句 ：\n\n将查询结果按指定列名的取值分组，并选取满足HAVING中的内部函数表达式所指定条件的组。目的：细化聚集函数的作用对象。 ==HAVING子句是包含在GROUP BY子句中的== \n\n> WHERE子句是在表中选择满足条件的元组，而HAVING子句是在各组中选择满足条件的小组\n\n> ISO标准规定，应用GROUP BY时，两个空值被认为是相等的\n\n> ==当使用GROUP BY时， SELECT列表中的项必须每组都有单一值(因为最终一个组会变成一个元组)== \n\n> 当使用GROUP BY时， SELECT子句中除集合函数外，其它所有列必须在GROUP BY子句中出现；反之，GROUP BY子句出现的列不一定出现在SELECT列表中；\n>\n> HAVING子句使用的列名必须出现在GROUP BY 子句列表中，或者包括在集合函数中。实践中，HAVING子句的条件表达式至少包括一个集合函数\n\n### ORDER BY子句\n\norder by子句必须放最后用于对最终的查询结果进行排序，<u>不能用在子查询中</u>\n\n该子句后可以跟多个排序的变量名，第一个变量为主序，下面依次类推。==ASC（升序）为默认设置== 。它也可以用SELECT子句中相应列的序号。\n\n<img src=\"https://s2.loli.net/2022/05/17/5Yvk4aWe1JPLMOw.png\" alt=\"image-20220517115836637\" style=\"zoom: 67%;\" />\n\n<img src=\"https://s2.loli.net/2022/05/17/GeHg8L1yBXIUpJt.png\" alt=\"image-20220517120939452\" style=\"zoom: 80%;\" />\n\n### 简单查询\n\n单表查询\n\n- 查询指定的列：通过在SELECT子句的<目标列表达式>中指定要查询的列来实现。可以使用*、聚集函数、算术表达式等\n- 查询表中行：通过WHERE子句的查询条件来实现\n\n### 复杂查询\n\n#### 连接查询：\n\n```sql\nSELECT student.sno, sname, cno, grade FROM student, s_c WHERE student.sno = s_c.sno;\n```\n\n==注意在多表查询中，当两个列名相同时，需采用表名.列名以示区别==\n\n#### 嵌套查询（子查询）：\n\n子查询可以被使用在外部SELECT语句的WHERE子句、HAVING子句甚至SELECT子句中\n\n==子查询应遵循如下规则：== \n\n- ORDER BY子句不能用于子查询（因为ORDER BY子句是对最终显示的结果进行排序）\n\n- 子查询总是**括在圆括号** 中，作为表达式的一部分出现在条件比较运算符的右边，并且可以有选择的跟在IN，SOME（ANY），ALL和EXIST等谓词后面。\n\n- 子查询select列表必须由**单个列名或表达式** （如集合函数）组成，除非子查询使用了关键字EXISTS（多列多行时使用）\n\n- 默认情况下，子查询中列名取自子查询的FROM子句中给定的表，也可以通过限定列名的办法指定取自外查询的FROM子句中的表（不相关子查询和相关子查询）\n\n- 带有比较运算符的子查询（==此时子查询返回单个值==，可以使用集合函数 ）\n\n    ```sql\n    #列出个人工资高于平均工资的所有职员，并求出多于平均数的值。\n    SELECT staffNo, fName, lName, position, salary–(SELECT AVG(salary) FROM Staff) AS SalDiff\n    FROM Staff\n    WHERE salary > (SELECT AVG(salary) FROM Staff);\n    ```\n\n- 带有IN谓词的子查询（子查询返回单个值或单个列多个行）\n\n    ```sql\n    #查询选修了课程“C2”的学生的学号和姓名\n    SELECT sno, sname FROM S WHERE sno IN ( SELECT sno FROM SC WHERE cno = ‘C2’ );\n    ```\n\n- 多层嵌套：子查询中又嵌套子查询\n\n- ==不相关子查询和相关子查询== \n\n    - 不相关子查询：内层的子查询完全独立于外层的SELECT语句。==m + n== （只执行了一次子查询，在检查外层的元组时，无需再执行子查询）\n\n        > 执行过程：1）执行子查询，其结果不被显示，而是传递给外部查询，作为外部查询的条件使用。2）执行外部查询，并显示整个结果。\n\n    - 相关子查询：子查询的判断条件涉及外层父查询的属性。要用到存在谓词EXISTS和NOT EXISTS，或者ALL、SOME等。==m * n== （每检查一个元组，都要执行一次子查询）\n\n        > 执行过程：1）从外层查询中取出一个元组，将元组相关列（被内层子查询引用）的值传给内层查询。2）执行内层查询，得到子查询操作的值。3）外查询根据子查询返回的结果或结果集得到满足条件的行。4）然后外层查询取出下一个元组重复做步骤1-3，直到外层的元组全部处理完毕。\n\n        ```sql\n        #找出每个学生超过他自己已选修课程平均成绩的课程号\n        SELECT sno, cno FROM SC x WHERE G>= (SELECT AVG(G) FROM SC y WHERE x.sno = y.sno);\n        ```\n\n- 量化比较谓词\n\n    - 作用：产生单个列的子查询\n\n    - 通用形式：`expr Θ { SOME | ANY | ALL } (Subquery)其中Θ∈{<,<=,=,<>,>,>=} `。expr为表达式。该形式中的SOME与ANY含义相同，但用SOME而不用ANY。SOME某些，ALL全部。\n\n        ```sql\n        #查询其它系中比信息系某一学生年龄小的学生姓名和年龄\n        SELECT SN, SA FROM S WHERE SA < SOME (SELECT SA FROM S WHERE SD =‘IS’) AND SD <>‘IS’;\n        ```\n\n    > expr Θ （子查询）  子查询返回单个值\n    >\n    > expr IN （子查询）\n    >\n    > expr Θ { SOME | ANY | ALL } (子查询)，>= ALL可以用于求最大值\n\n- ==EXISTS谓词== \n\n    - 通用形式：[NOT] EXISTS （Subquery）\n\n    - 作用：测试被子查询检索到的行集(子查询可以返回多行多列)**是否为空** 。谓词 EXISTS （Subquery）为真当且仅当子查询返回一个非空的集合。NOT_EXISTS则相反\n\n    - NOT EXISTS谓词可以实现**关系代数的差运算**\n\n        ```sql\n        #查询没有选修‘C1’号课程的学生的姓名。\n        SELECT sname FROM S WHERE NOT EXISTS (SELECT * FROM SC WHERE sno = S.sno AND cno = ‘C1’);\n        ```\n\n    - 所有带IN谓词、比较运算符、SOME和ALL谓词的子查询都可以用带EXISTS谓词的子查询等价替换，反过来就不一定\n\n    - 可以采用双嵌套NOT_EXISTS来实现**带全称量词的查询**。<img src=\"https://s2.loli.net/2022/03/15/Km17HNji9vZAeGV.png\" alt=\"image-20220315110415416\" style=\"zoom:50%;\" />\n\n        ```sql\n        #查询选修了全部课程的学生姓名\n        #转化为查询这样的学生x，没有一门课程y 是x不选修的\n        SELECT SN\n        FROM S     #查询学生x\n        WHERE NOT EXISTS  #不存在课程y\n            （SELECT ﹡\n            FROM C\n            WHERE NOT EXISTS  #x不选修课程y\n                （SELECT ﹡\n                FROM SC\n                WHERE S# = S.S#\n                AND C# = C.C#））\n        ```\n\n    - 可以采用NOT EXISTS谓词实现**关系代数的除运算**\n\n        ```sql\n        #查询至少选修了学生‘95002’选修的全部课程的学生号码\n        #转换为查询学号为x的学生，不存在这样的课程y，学生95002选修了y，而学生x没有选\n        SELECT S#\n        FROM S          #查询学生x\n        WHERE NOT EXISTS\n            （SELECT ﹡\n            FROM C       #不存在课程y\n            WHERE EXISTS   #95002选修了课程y\n                (SELECT ﹡\n                FROM SC SCX\n                WHERE SCX.C# = C.C# AND SCX.S#=‘95002’）\n            AND NOT EXISTS   #x没有选修y\n                (SELECT *\n                FROM SC SCY\n                WHERE SCY.C# = C.C# AND SCY.S#=S.S#)\n            );\n            \n        SELECT DISTINCT S#    #因为是从SC里选的学号，故需要DISTINCT\n        FROM SC SCX         #查询学生x\n        WHERE NOT EXISTS\n            （SELECT ﹡\n            FROM SC SCY    #不存在课程y\n            WHERE SCY.S# = ‘95002’  #95002选修了课程y\n            AND NOT EXISTS    #x没有选修y\n                （SELECT ﹡  \n                FROM SC SCZ\n                WHERE SCZ.S# = SCX.S#\n                AND SCZ.C# = SCY.C#））；\n        ```\n\n![image-20220314232322210](https://s2.loli.net/2022/03/14/2srATEC8QOWUzM4.png)\n\n## 4、数据更新\n\n### 插入数据：INSERT （元组级）\n\n==插入数据时，表定义中说明了NOT NULL的列不能取空值== \n\n- 用**子句**向表中插入数据：将新元组插入表中\n\n    ```sql\n    INSERT \n    INTO <表名> [(<列名1>[, <列名2>]...)] \n    VALUES(<常量1>[, <常量2>]...)  \n     #未指定任何列名时，新插入的属性必须在每个属性列上均有值，仅指定部分列名时，新元组的其他列为空值\n     \n    #eg 插入一条选课记录（‘95020’，‘C1’）\n    INSERT INTO SC（S#, C#）VALUES （‘95020’, ‘C1’）; \n    ```\n\n- 用**子查询**向表中插入数据\n\n    ```sql\n    INSERT \n    INTO <表名> [(<列名1>[, <列名2>]...)] \n    SELECT语句;  #SELECT语句的返回列要和INFO里的对应\n    \n    #eg  对每个系，求学生的平均年龄，并把结果存入数据库\n    INSERT INTO Deptage (SD, Avgage) SELECT SD, AVG(SA) FROM S GROUP BY SD;\n    ```\n\n### 修改数据：UPDATE\n\n一条UPDATE语句在某一时刻只能更新**一张表**，但可以更新一张表中的**多列**，也可以更新**多行**数据。\n\n- 用**子句**修改表中数据\n\n    修改表中满足WHERE条件的元组：\n\n    ```sql\n    UPDATE <表名>\n    SET <列名> = <表达式>[, <列名> = <表达式>] #用表达式的值取代相应的属性列值\n    [WHERE <条件表达式>]\t\t\t\t#省略WHERE语句则修改全部元组\n    \n    #eg 将学生95001的年龄改为22岁\n    UPDATE S SET SA = 22 WHERE S# = ‘95001’;\n    \n    #eg 将所有学生的年龄增加1岁\n    UPDATE S SET SA = SA + 1；\n    ```\n\n- 用**子查询**修改表中数据：子查询可以嵌套在WHERE语句的条件表达式中，用于构造修改的条件。相关子查询\n\n    ```sql\n    #将计算机科学系全体学生的成绩置零\n    #相关子查询，每次拿出SC中的一个元组，得到它的系，如果为CS则将成绩置0\n    UPDATE SC SET G = 0 WHERE ‘CS’ = ( SELECT SD FROM S WHERE S.S# = SC.S#);\n    ```\n\n### 删除数据：DELETE （元组级）\n\nDELETE用于**从指定表中删除满足条件的元组**，但不能用来从特定的列中删除数据。一条DELETE语句可以从表中删除一个或多个元组。\n\n- 用**子句**删除表中数据\n\n    删除表中满足WHERE条件的元组：\n\n    ```sql\n    DELETE \n    FROM <表名>\n    [WHERE <条件表达式>]  \n    \n    #eg 删除学号为95001的学生记录\n    DELETE FROM S WHERE S# = ‘95001’;\n    ```\n\n    > 省略WHERE语句则删除全部元组，但**只删除了表中的数据**，而不是表的定义，表的定义仍在DD中。**删除表应当用DROP**\n\n- **子查询**可以嵌套在WHERE语句的条件表达式中。相关子查询\n\n    ```sql\n    #删除计算机科学系全体学生的选课记录\n    #相关子查询\n    DELETE FROM SC WHERE ‘CS’ = ( SELECT SD FROM S WHERE S.S# = SC.S#);\n    ```\n\n\n## 5、视图\n\n- **概念：**\n    - 视图是==动态结果==：对一个或多个基本关系进行关系操作得到的动态结果，是从一个或几个基本表（或视图）导出的表。而且对基本表的操作将在视图可见的范围内映射到视图上。==视图对应的内容是实时的、最新的内容== \n    - 视图是==虚关系==：它不包含真正存储的数据，其内容不占用存储空间。\n    - **视图的内容被定义成基于一个或多个基本关系的查询**\n    - 视图是在==外模式==这一层，为用户所用\n- **操作：**视图可以和基本表一样被查询、被删除。也可以在一个视图之上再定义新的视图，但==对视图的更新（增、删、改）操作则有一定的限制==。==对视图的一切操作最终也要转换为对基本表的操作。==\n\n### 视图的创建及种类\n\n- 视图可以从一张表、几张表或其他视图中创建。 \n\n    ```sql\n    CREATE VIEW <视图名> [(<列名1>[,<列名2>]...)]\n    AS \n    SELECT 语句\n    [WITH CHECK OPTION]  \n    ```\n\n    > **几点说明：**\n    >\n    > - ==创建视图只是将视图的定义存入DD（数据字典），并不会真的执行SELECT语句，当对视图查询时，才根据视图的定义从基本表中将数据查出。==\n    >\n    > - **省略视图名后的列名表时**，默认该视图由子查询中SELECT子句目标列中的诸属性列组成\n    > - 若使用==WITH CHECK OPTION==，则对视图进行UPDATE和INSERT操作时，保证更新行满足视图定义中的WHERE子句指定的条件，否则将被DBMS拒绝\n    > - 当目标列不是单一的属性列(如集合函数)、存在同名列以及需启用更合适的名字时，需要指定组成视图的所有列名\n    > - 可以在视图中增加虚拟列（派生列），即基本表中并不存在的列，如avg(grade)\n\n- **视图的种类**\n\n    - 水平视图：从单个基本表导出，并且只是**去掉了**基本表的**某些行**\n\n        ```sql\n        #创建一个视图，让分支机构B003的经理只看到他所在分支机构的职员的信息\n        CREATE VIEW Manager3Staff\n        AS SELECT *\n        FROM Staff\n        WHERE branchNo = ‘B003’;\n        ```\n\n    - 垂直视图：从单个基本表导出，并且只是**去掉了**基本表的**某些列** \n\n        ```sql\n        #建立关于分支机构B003职员信息但不包括工资信息的视图\n        CREATE VIEW Staff3\n        AS SELECT staffNo, fName, lName, position, sex\n        FROM Manager3Staff;\t\t#视图可以从其他视图中创建\n        ```\n\n    - 分组视图：用**GROUP BY 子句**定义的视图\n\n    - 连接视图：用**连接运算**得到的视图\n\n        ![image-20220322094759185](https://s2.loli.net/2022/03/22/CA4TkBawSpnsgIi.png)\n\n### 删除视图\n\n- ```sql\n    DROP VIEW <视图名>{CASCADE|RESTRICT} \n    ```\n\n- 视图是虚表，**删除的是DD中的视图的定义**，**对产生视图数据的基本表中的数据没有影响**\n\n- 默认RESTRICT ，如果存在依赖被删除视图的其他对象，则不允许删除\n\n    如果指定CASCADE**，**删除视图可能产生级联删除\n\n### 查询视图\n\n- **步骤**\n\n```mermaid\ngraph LR\n    a[有效性检查]-->|有效|b[从DD中取出视图定义]\n    b[从DD中取出视图定义]-->|视图消解|c[对基本表的查询]\n    c[对基本表的查询]-->d[执行查询]\n```\n\n- ==视图消解==：将对视图的查询**转换为对基本表的查询**。执行对视图的查询时，从数据字典中取出视图的定义，将定义中的子查询和用户的查询结合起来，转换成等价的对基本表的查询的过程\n\n    > 简单转换的过程：\n    >\n    > - 将SELECT列表中给出的列名转换为视图定义中对应的列名\n    >\n    > - FROM子句的视图名可以视图定义中的FROM列表代替\n    >\n    > - 用AND将WHERE子句和视图定义中的WHERE子句合并\n    >\n    > - 从视图定义中复制GROUP BY和HAVING子句\n    >\n    > - 将 ORDER BY列名转换为视图定义中对应的列名\n    >\n    >     例子：\n    >\n    >     <img src=\"https://s2.loli.net/2022/03/22/jVlQaEdt8FD5HcW.png\" alt=\"image-20220322221341006\" style=\"zoom:67%;\" />\n    >\n    >     <img src=\"https://s2.loli.net/2022/03/22/I5TvHtQE4RCPSlk.png\" alt=\"image-20220322221538427\" style=\"zoom: 67%;\" />\n    >\n    >     <img src=\"https://s2.loli.net/2022/03/22/HOEKyJ3X26nhGs9.png\" alt=\"image-20220322221558073\" style=\"zoom:67%;\" />\n\n> 复杂转换：涉及集合函数，考虑HAVING子句等等\n>\n> <img src=\"https://s2.loli.net/2022/03/22/7WcqENUudBsYIMg.png\" alt=\"image-20220322222248720\" style=\"zoom:67%;\" />\n\n- **查询视图的约束：**\n\n    - 如果视图中某个列是基于集合函数的，那么，该列只能出现在访问视图的SELECT和ORDER BY子句中，特别是，该列不能出现在WHERE子句中，并且不能作为集合函数的参数\n\n        ```sql\n        SELECT * FROM StaffPropCnt WHERE cnt > 2; //错误\n        SELECT COUNT (cnt) FROM StaffPropCnt;  //错误\n        ```\n\n    - 分组视图不能与基本表或视图进行连接操作\n\n### 更新视图\n\n- 👉**对视图的更新最终要转换为对表的更新**，但有些更新不能有意义地转换成对基本表S的更新，如修改一个集合函数得到的列，因此==对视图的更新操作有一定的限制==\n- 在视图定义时加上WITH CHECK OPTION子句可以使得对视图进行更新操作时需满足视图定义中子查询的条件\n- ==视图可更新的充要条件==\n    - 没有指定DISTINCT,即重复元组未从查询结果中消除；\n    - 定义查询的SELECT列表中的每个元素均为列名（而不是常量，表达式或聚合函数），且列名不能出现多于一次；\n    - FROM子句只能指定一个表，即视图必须有一个源表且用户有请求该表的权限。如果源表本身就是一个视图，那么视图必须满足这些条件。因此，排除了基于连接、并（UNION）、交（INTERSECT）或差（EXCEPT）操作的所有视图；\n    - WHERE子句不能包括任何引用了FROM子句中的表的嵌套SELECT操作，即不能出现相关子查询\n    - 定义查询不能有GROUP BY或HAVING子句。\n    - 添加到视图中的每一行都不能违反基本表的完整性约束\n- 分类\n    - 可更新视图：满足上面的六个条件，即对视图的更新能唯一的有意义的转换为对基本表的更新\n    - （理论上）不可更新的视图\n    - 不允许更新的视图`(*>﹏<*)′\n\n### 视图的优缺点\n\n- **优点：**①提高逻辑独立性、②实时性、③提高安全性、④简化结构及复杂操作、⑤多角度地、更灵活地共享、⑥数据完整性\n\n- **缺点：**①更新的局限性、②结构的局限性、③性能开销（查询时需要转化）\n\n    > **视图维护：**更新基本表引起视图更新的过程称为视图维护\n    >\n    > **视图物化：**把第一次访问视图的结果存储为数据库的临时表；这样，基于物化视图的查询比每次重新计算视图要快的多。但会带来视图维护的代价\n\n## ==6、sql的完整性约束==\n\n### **基本概念：**\n\n- **完整性：**指数据库中数据的正确性、有效性和相容性（表示同一对象的两个或多个数据必须一致）\n- **完整性约束**：数据库中数据应满足的条件\n\n### 非过程性完整性约束\n\n- **数据取值要求：**非空约束（NOT NULL）、唯一性约束（UNIQUE）、CHECK约束（CHECK(searchcondition)）\n\n    > CHECK子句只对定义它的关系起约束作用，对其他关系没有任何作用\n\n    ```sql\n    sex CHAR NOT NULL CHECK (sex IN (‘M’, ‘F’))\n    ```\n\n    ```sql\n    #eg 增加学生姓名必须取唯一值的约束\n    ALTER TABLE student\n    ADD CONSTRAINT c1_name UNIQUE (SN)  #c1_name是约束的名字\n    \n    #eg 删除学生姓名必须取唯一值的约束\n    ALTER TABLE S \n    DROP UNIQUE（SN）;  \n    #或者 DROP CONSTRAINT c1_name\n    ```\n\n- **域约束：**通过自定义域来实现\n\n    ```sql\n    CREATE DOMAIN DomainName [AS] dataType\n    [DEFAULT defaultOption]\n    [CHECK (searchCondition)]  #searchCondition 可以用SELECT语句表达\n    \n    #eg\n    CREATE DOMAIN SexType AS CHAR(2)\n    DEFAULT ‘M’\n    CHECK (VALUE IN (‘M’, ‘F’));\n    \n    #使用域来定义列\n    sex SexType NOT NULL;\n    ```\n\n- **实体完整性：**主键属性不空。DBMS自动支持实体完整性（拒绝破坏实体完整性的操作（不合法的插入和更新））\n\n    ```sql\n    PRIMARY KEY(<列名表>)  #主键定义   \n    UNIQUE(<列名表>)   #候选键定义\n    ```\n\n- **参照完整性**：DBMS自动支持参照完整性（拒绝破坏参照完整性的操作，如不合法的对子表（参照表）的插入和更新操作，不合法的对父表（被参照表）的删除和更新操作）。注意SQL语句的顺序。\n\n    ```sql\n    FOREIGN KEY （<列名>[，<列名>] …）REFERENCES <被参照表名> \n    [ON DELETE [CASCADE | SET DEFAULT | SET NULL | NO ACTION] ]\n    [ON UPDATE [CASCADE | SET DEFAULT | SET NULL |NO ACTION] ]\n    ```\n\n    > 参照完整性被破坏时可选择的策略：\n    >\n    > <img src=\"https://s2.loli.net/2022/03/22/N9xBsZtjn5iSdO4.png\" alt=\"image-20220322230658737\" style=\"zoom: 80%;\" />\n\n- **一般约束（企业约束）**\n\n    在创建和修改表时使用CHECK/UNIQUE，还可以==CREATE ASSERTION（设置断言）==\n\n    当完整性约束涉及多个关系或者与聚合操作有关，则可以采用SQL的断言机制来完成\n\n    ```sql\n    CREATE ASSERTION AssertionName\n    CHECK (searchCondition)\n    \n    #限制staff不能管理太多的房产\n    CREATE ASSERTION StaffNotHandlingTooMuch\n    CHECK (NOT EXISTS \n               (SELECT *\n                FROM PropertyForRent\n                GROUP BY staffNo\n                HAVING COUNT(*) > 100));\n    ```\n\n<img src=\"https://s2.loli.net/2022/03/22/Ihst97CnifNJAq1.png\" alt=\"image-20220322231603163\" style=\"zoom: 67%;\" />\n\n\n\n### 过程性完整性约束：触发器\n\n- 概念：一类靠事件驱动的特殊过程，一旦由某个用户定义，任何触发该触发器的事件发生时，均由**服务器**自动激活相应的触发器。\n\n- 三要素：触发事件（包括Insert、delete、update等）、触发条件、触发动作\n\n- 作用：示警（给出提示信息）；满足特定条件时自动执行某项任务以消除负面影响\n\n- 定义(Full SQL-99的Create Trigger语法)\n\n    ```sql\n    CREATE TRIGGER trigger_name \n    {BEFORE | AFTER} {INSERT | DELETE | UPDATE [OF columnname{,columnname…}]} ON tablename #触发事件[REFERENCING corr_name_def {, corr_name_def…}]  #旧值或新值名表\n    [FOR EACH ROW | FOR EACH STATEMENT]  \n    [WHEN (search_condition)]   #触发条件\n    {\t\n    \tstatement |          #触发动作，为单个或一系列SQL语句\n    \tBEGIN ATOMIC statement; \n    \t{statement; …} \n    \tEND\n    } ;\n    \n    #eg 设计一个用于s_c的触发器，该触发器规定，如果需要修改成绩，则需要保证修改之后的成绩不得低于之前的成绩，否则拒绝修改\n    CREATE TRIGGER trig_grade\n    AFTER UPDATE OF grade ON s_c\n    REFERENCING OLD AS oldg, NEW AS newg\n    FOR EACH ROW\n    WHEN (oldg.grade > newg.grade)\n    \tUPDATE s_c\n    \tSET GRADE = oldg.grade\n    \tWHERE cno = oldg.cno AND sno = oldg.sno;  #根据主键找到该元组\n    ```\n\n    > 几点说明：\n    >\n    > - 触发器名是一个标识符，在其所属的模式里是唯一的\n    >\n    > - ON<表名>子句里的表必须和触发器位于同一个模式中\n    >\n    > - 定义行的相关名字的corr_name_def 如下:\n    >\n    >     {OLD [ROW] [AS] old_row_corr_name\n    >\n    >     | NEW [ROW] [AS] new_row_corr_name\n    >\n    >     | OLD TABLE [AS] old_table_corr_name\n    >\n    >     | NEW TABLE [AS] new_table_corr_name}\n    >\n    > - 如果在触发器定义中省略WHEN子句，即省略触发条件，则触发动作在触发器被激活后立即发生\n    >\n    > - 触发动作可以是单个或一系列SQL语句，若为一系列，需要使用BEGIN ATOMIC...END子句，语句之间用分号隔开\n    >\n    > - 注意触发器级联问题，防止一个触发动作引发一系列连锁反应（一个触发器的动作引发另一个触发器的动作）以致失控\n\n### 两种完整性约束的对比\n\n- 非过程性完整性约束：种类和能力有限但易于理解；直接为系统所知；难以给出约束不满足时的相应动作\n\n- 过程性完整性约束：给出了约束不满足时的相应动作；保证事物的一致性\n","source":"_posts/sql概述与sql定义语言.md","raw":"---\ntitle: sql概述与sql定义语言\ntags: \n- 数据库\ncategory: \n- 数据库\nabbrlink: 55700\ndate: 2022-06-23 11:21:25\n---\n\n# 三、 sql概述与sql定义语言\n\n## 1、基本概念\n\n**sql的特点：**\n\n- 综合统一：集数据定义、数据操纵、数据控制语言的功能为一体\n- 高度非过程化\n- 面向集合的操作方式\n- 两种使用方式，统一的语法结构\n- 简洁易学、通用、功能强\n\n<!-- more -->\n\n**sql语言的分类**：数据定义语言DDL、数据操作语言DML、数据查询语言DQL、数据控制语言DCL\n\n**sql数据库的三级结构：**\n\n![image-20220517103508209](https://s2.loli.net/2022/05/17/3IjuTbYwHFQzdAp.png)\n\n子模式对应于视图和部分查询表，模式对应于基本表，内模式对应于存储文件\n\n**sql语句的分类**：模式定义语句、数据操纵语句（增删改查）、事务与控制语句、会话及诊断语句\n\n**sql的数据类型：**\n\n![image-20220517104732266](https://s2.loli.net/2022/05/17/fhJG9wazTZ1ydL5.png)\n\n> 在实验中发现，如果要显示001这种类型的数字，可以设置为*sno int(3) zerofill*\n\n## 2、sql的数据定义\n\n![image-20220517110612939](https://s2.loli.net/2022/05/17/5Qv3qyIM9TeJrXG.png)\n\n> 👉总结：\n>\n> 创建：create  对象类型 对象名\n>\n> 删除：drop 对象类型 对象名   [RESTRICT | CASCADE]\n>\n> RESTRICT：如果有其它对象依赖于该对象，则拒绝进行DROP操作\n>\n> CASCADE：级联删除该对象及所有依赖于该对象的对象\n\n### 模式\n\n- 模式的定义：\n\n    ```sql\n    CREATE SCHEMA <模式名> AUTHORIZATION <用户名>  #若不指定<模式名>，则隐含为<用户名>\n    \n    #eg\n    CREATE SCHEMA library_db AUTHORIZATION Guoqing;\n    ```\n\n- 模式的删除\n\n    ```sql\n    DROP SCHEMA <模式名> [RESTRICT | CASCADE];\n    #RESTRICT – 如果模式内没有对象，则删除该模式\n    #CASCADE – 删除模式中所有对象的内容和定义\n    \n    #eg.\n    DROP SCHEMA library RESTRICT;\n    ```\n\n### 域\n\n- 定义域：\n\n    ```sql\n    CREATE DOMAIN <域名> [AS] <数据类型> [DEFAULT <默认值>] [<域约束>] \n    \n    #eg\n    CREATE DOMAIN SexType AS CHAR(2) DEFAULT ‘M’ CHECK (VALUE IN (‘M’, ‘F’));\n    sex SexType NOT NULL;  #使用域\n    ```\n\n- 删除域：\n\n    ```sql\n    DROP DOMAIN <域名> [RESTRICT | CASCADE];\n    #如果指定RESTRICT，且域用于现有的表中，则删除失败\n    #如果指定CASCADE，基于域的任一表中的列都会自动地改变为基本域类型，该域的CHECK约束或默认值都会被列的约束或默认值代替\n    \n    #eg\n    DROP DOMAIN SexType；\n    ```\n\n### 表\n\n- 表的建立\n\n    ```sql\n    CREATE TABLE [模式名.] <表名> \n    (   \n        <列名><数据类型>[NOT NULL│NULL][UNIQUE]\n        [, <列名><数据类型>[NOT NULL│NULL][UNIQUE]]…\n        [, PRIMARY KEY （<列名>[，<列名>] …）]    #主键,主键属性列用括号括起来\n        [, FOREIGN KEY （<列名>[，<列名>] …）REFERENCES  <被参照表名>]#外键\n    );\n    \n    #eg\n    CREATE TABLE PropertyForRent \n    (\n        propertyNo PNumber NOT NULL,      #数据类型为用户定义的域\n        rooms PRooms NOT NULL DEFAULT 4, \n        rent PRent NOT NULL DEFAULT 600, \n        ownerNo OwnerNumber NOT NULL, \n        staffNo StaffNumber Constraint StaffNotHandlingTooMuch ….\n        branchNo BranchNumber NOT NULL,\n        PRIMARY KEY (propertyNo),   #主键属性和外键属性要用括号括起来\n        FOREIGN KEY (staffNo) REFERENCES Staff \n        ON DELETE SET NULL ON UPDATE CASCADE …. #可采取的行为\n    );\n    ```\n\n- 表的删除\n\n    ```sql\n    DROP TABLE <表名> [CASCADE | RESTRICT]\n    #既删除DD中表的结构定义，也删除DB中的数据文件\n    #RESTRICT：如果有其它对象依赖于该表，则拒绝进行DROP操作\n    #CASCADE：级联删除表及所有依赖于该表的对象\n    \n    #eg\n    DROP TABLE PropertyForRent;\n    ```\n\n- ==修改表==\n\n    ```sql\n    ALETR TABLE <表名>\n    [ADD <新列名> <数据类型> {NULL}]     #加新列，新增加的列默认为空值\n    [ADD <完整性约束条件>]\n    [DROP <完整性约束条件>]   #删除列的完整性约束条件，没有提供删除列的子句\n    [MODIFY <列名> <数据类型>]   #修改列，可能破坏已有数据\n    \n    #eg 增加学生姓名必须取唯一值的约束\n    ALTER TABLE student\n    ADD CONSTRAINT c1_name UNIQUE (SN)  #c1_name是约束的名字\n    \n    #eg 删除学生姓名必须取唯一值的约束\n    ALTER TABLE S \n    DROP UNIQUE（SN）;  \n    #或者 DROP CONSTRAINT c1_name\n    ```\n\n### 索引\n\n- 建立索引\n\n    一条语句建立一个索引\n\n    ```sql\n    #UNIQUE表示每个索引值只能对应唯一的数据记录，CLUSTER表示聚簇索引，即索引项的顺序与表中记录的物理顺序一致的有序索引，一个基本表最多只能建立一个聚簇索引\n    CREATE [UNIQUE] [CLUSTER] INDEX <索引名>  \n    ON <表名> (<列名1>[ASC|DESC], <列名2>[ASC|DESC], ...);\n    #ASC表示升序，DESC表示降序。默认为升序。\n    \n    #eg:在SC中按sno升序cno降序建唯一索引\n    CREATE UNIQUE INDEX SC_index ON SC( sno ASC，cno DESC);\n    ```\n\n- 删除索引\n\n    ```sql\n    DROP INDEX [ON <表名>]<索引名>\n    \n    #eg\n    DROP INDEX SC_index;\n    ```\n\n## ==3、⚠⚠⚠sql数据查询==\n\n### 一般格式\n\n```sql\nSELECT [ALL|DISTINCT] <目标列表达式>[,<目标列表达式>]...      #ALL为默认设置，即不取消重复值，DISTINCT表示取消重复值\nFROM <表名或视图名>[,表名或视图名]...     #SELECT子句与FROM子句是必选子句\n[WHERE <条件表达式>]\n[GROUP BY <列名1>[HAVING<条件表达式>]]\n[ORDER BY <列名2>[ASC|DESC]];     #其中，列名2也可以用SELECT子句中相应列的序号\n```\n\n**含义：**\n\n![image-20220517114258444](https://s2.loli.net/2022/05/17/GUvQItYzXHpeOmW.png)\n\n**概念性的执行步骤：**\n\n- 计算出现在FROM后面的表之间的笛卡儿积\n- 实施由WHERE后面的条件规定的选择操作\n- 根据GROUP BY后面的属性的值进行分组\n- 对于分组出来的每一个小组，实施由HAVING后面的条件规定的选择操作，保留满足条件的小组\n- 将出现在SELECT后面的属性投影成结果表\n- 将结果表中的元组根据ORDER BY后面的属性及指定的顺序（升序或降序）输出\n\n### SELECT子句：\n\n*SELECT [ALL|DISTINCT] <目标列表达式>[,<目标列表达式>]...*\n\n- *代表指定表的所有列，一般用在exists和not exists里面\n\n- ALL为默认设置 ，即不取消重复值，DISTINCT表示取消重复值\n\n- ==聚集函数（只能用于SELECT子句和HAVING子句中 ）==\n\n    ![image-20220305102158697](https://s2.loli.net/2022/03/05/YGrdqMfam4Qhb8P.png)\n\n    ![image-20220307231705848](https://s2.loli.net/2022/03/07/xj6qmHkOhKrcvag.png)\n\n    > 当这些函数遇到空值时，除COUNT(*)外，都跳过空值而只处理非空值。\n\n    例子：\n\n    <img src=\"https://s2.loli.net/2022/05/17/5Yvk4aWe1JPLMOw.png\" alt=\"image-20220517115836637\" style=\"zoom: 67%;\" />\n\n- ==算术表达式：==  \n\n    +、-、*、/、%、INTEGER（取整）、SQRT（求平方根）、三角函数（SIN、COS）、字符串函数SUBSTRING（取子串）、UPPER（大写字符）、MONTHS_BETWEEN（月份差）\n\n    ---\n\n- 用AS子句为列命名 \n\n    ```sql\n    SELECT staffNo, fName, lName, salary/12 AS monthlySalary FROM Staff;\n    ```\n\n### FROM子句：\n\n可以给表指定别名：多个表放在FROM子句中，代表多表进行笛卡尔积\n\n![image-20220517120134854](https://s2.loli.net/2022/05/17/4bpXBmUsKrI3CdH.png)\n\n### WHERE子句：\n\nWHERE子句的查询条件可以用多种形式表示： \n\n<img src=\"https://s2.loli.net/2022/05/18/X4nGHxUtsuZCcio.png\" style=\"zoom:67%;\" />\n\n- 比较运算作为查找条件 (>,  <,  >=,  <=,  =,  <>(不等于))\n\n    ```sql\n    WHERE salary > 10000\n    ```\n\n- 复合比较运算作为查找条件 (AND, OR, NOT ) \n\n    ```sql\n    WHERE city = ‘London’ OR city = ‘Glasgow’\n    ```\n\n- 范围作为查找条件（BETWEEN / NOT BETWEEN）。==BETWEEN包含端点==\n\n    ```sql\n    WHERE grade BETWEEN 85 AND 95\n    ```\n\n- 集合成员测试作为查找条件（IN / NOT IN）\n\n    ```sql\n    WHERE place IN('湖南','湖北')\n    ```\n\n- 模式匹配作为查找条件（LIKE / NOT LIKE）\n\n    SQL中的两种特殊的模式匹配符号：\n\n    - %: 百分号表示零或多个字符序列（通配符）\n\n    - _: 下划线表示任意单个字符\n\n        <img src=\"https://s2.loli.net/2022/03/07/Z52TOHjLlb6tivJ.png\" alt=\"image-20220307230435181\" style=\"zoom:67%;\" />\n\n    ```sql\n    WHERE sname LIKE '刘%' OR SNAME LIKE '__晓%'   #一个汉字占两个字符位\n    ```\n\n- 空查找条件（IS NULL  /  IS NOT NULL）\n\n    ```sql\n    WHERE propertyNo = ‘PG4’ AND comment IS NULL\n    ```\n\n### GROUP BY子句 ：\n\n将查询结果按指定列名的取值分组，并选取满足HAVING中的内部函数表达式所指定条件的组。目的：细化聚集函数的作用对象。 ==HAVING子句是包含在GROUP BY子句中的== \n\n> WHERE子句是在表中选择满足条件的元组，而HAVING子句是在各组中选择满足条件的小组\n\n> ISO标准规定，应用GROUP BY时，两个空值被认为是相等的\n\n> ==当使用GROUP BY时， SELECT列表中的项必须每组都有单一值(因为最终一个组会变成一个元组)== \n\n> 当使用GROUP BY时， SELECT子句中除集合函数外，其它所有列必须在GROUP BY子句中出现；反之，GROUP BY子句出现的列不一定出现在SELECT列表中；\n>\n> HAVING子句使用的列名必须出现在GROUP BY 子句列表中，或者包括在集合函数中。实践中，HAVING子句的条件表达式至少包括一个集合函数\n\n### ORDER BY子句\n\norder by子句必须放最后用于对最终的查询结果进行排序，<u>不能用在子查询中</u>\n\n该子句后可以跟多个排序的变量名，第一个变量为主序，下面依次类推。==ASC（升序）为默认设置== 。它也可以用SELECT子句中相应列的序号。\n\n<img src=\"https://s2.loli.net/2022/05/17/5Yvk4aWe1JPLMOw.png\" alt=\"image-20220517115836637\" style=\"zoom: 67%;\" />\n\n<img src=\"https://s2.loli.net/2022/05/17/GeHg8L1yBXIUpJt.png\" alt=\"image-20220517120939452\" style=\"zoom: 80%;\" />\n\n### 简单查询\n\n单表查询\n\n- 查询指定的列：通过在SELECT子句的<目标列表达式>中指定要查询的列来实现。可以使用*、聚集函数、算术表达式等\n- 查询表中行：通过WHERE子句的查询条件来实现\n\n### 复杂查询\n\n#### 连接查询：\n\n```sql\nSELECT student.sno, sname, cno, grade FROM student, s_c WHERE student.sno = s_c.sno;\n```\n\n==注意在多表查询中，当两个列名相同时，需采用表名.列名以示区别==\n\n#### 嵌套查询（子查询）：\n\n子查询可以被使用在外部SELECT语句的WHERE子句、HAVING子句甚至SELECT子句中\n\n==子查询应遵循如下规则：== \n\n- ORDER BY子句不能用于子查询（因为ORDER BY子句是对最终显示的结果进行排序）\n\n- 子查询总是**括在圆括号** 中，作为表达式的一部分出现在条件比较运算符的右边，并且可以有选择的跟在IN，SOME（ANY），ALL和EXIST等谓词后面。\n\n- 子查询select列表必须由**单个列名或表达式** （如集合函数）组成，除非子查询使用了关键字EXISTS（多列多行时使用）\n\n- 默认情况下，子查询中列名取自子查询的FROM子句中给定的表，也可以通过限定列名的办法指定取自外查询的FROM子句中的表（不相关子查询和相关子查询）\n\n- 带有比较运算符的子查询（==此时子查询返回单个值==，可以使用集合函数 ）\n\n    ```sql\n    #列出个人工资高于平均工资的所有职员，并求出多于平均数的值。\n    SELECT staffNo, fName, lName, position, salary–(SELECT AVG(salary) FROM Staff) AS SalDiff\n    FROM Staff\n    WHERE salary > (SELECT AVG(salary) FROM Staff);\n    ```\n\n- 带有IN谓词的子查询（子查询返回单个值或单个列多个行）\n\n    ```sql\n    #查询选修了课程“C2”的学生的学号和姓名\n    SELECT sno, sname FROM S WHERE sno IN ( SELECT sno FROM SC WHERE cno = ‘C2’ );\n    ```\n\n- 多层嵌套：子查询中又嵌套子查询\n\n- ==不相关子查询和相关子查询== \n\n    - 不相关子查询：内层的子查询完全独立于外层的SELECT语句。==m + n== （只执行了一次子查询，在检查外层的元组时，无需再执行子查询）\n\n        > 执行过程：1）执行子查询，其结果不被显示，而是传递给外部查询，作为外部查询的条件使用。2）执行外部查询，并显示整个结果。\n\n    - 相关子查询：子查询的判断条件涉及外层父查询的属性。要用到存在谓词EXISTS和NOT EXISTS，或者ALL、SOME等。==m * n== （每检查一个元组，都要执行一次子查询）\n\n        > 执行过程：1）从外层查询中取出一个元组，将元组相关列（被内层子查询引用）的值传给内层查询。2）执行内层查询，得到子查询操作的值。3）外查询根据子查询返回的结果或结果集得到满足条件的行。4）然后外层查询取出下一个元组重复做步骤1-3，直到外层的元组全部处理完毕。\n\n        ```sql\n        #找出每个学生超过他自己已选修课程平均成绩的课程号\n        SELECT sno, cno FROM SC x WHERE G>= (SELECT AVG(G) FROM SC y WHERE x.sno = y.sno);\n        ```\n\n- 量化比较谓词\n\n    - 作用：产生单个列的子查询\n\n    - 通用形式：`expr Θ { SOME | ANY | ALL } (Subquery)其中Θ∈{<,<=,=,<>,>,>=} `。expr为表达式。该形式中的SOME与ANY含义相同，但用SOME而不用ANY。SOME某些，ALL全部。\n\n        ```sql\n        #查询其它系中比信息系某一学生年龄小的学生姓名和年龄\n        SELECT SN, SA FROM S WHERE SA < SOME (SELECT SA FROM S WHERE SD =‘IS’) AND SD <>‘IS’;\n        ```\n\n    > expr Θ （子查询）  子查询返回单个值\n    >\n    > expr IN （子查询）\n    >\n    > expr Θ { SOME | ANY | ALL } (子查询)，>= ALL可以用于求最大值\n\n- ==EXISTS谓词== \n\n    - 通用形式：[NOT] EXISTS （Subquery）\n\n    - 作用：测试被子查询检索到的行集(子查询可以返回多行多列)**是否为空** 。谓词 EXISTS （Subquery）为真当且仅当子查询返回一个非空的集合。NOT_EXISTS则相反\n\n    - NOT EXISTS谓词可以实现**关系代数的差运算**\n\n        ```sql\n        #查询没有选修‘C1’号课程的学生的姓名。\n        SELECT sname FROM S WHERE NOT EXISTS (SELECT * FROM SC WHERE sno = S.sno AND cno = ‘C1’);\n        ```\n\n    - 所有带IN谓词、比较运算符、SOME和ALL谓词的子查询都可以用带EXISTS谓词的子查询等价替换，反过来就不一定\n\n    - 可以采用双嵌套NOT_EXISTS来实现**带全称量词的查询**。<img src=\"https://s2.loli.net/2022/03/15/Km17HNji9vZAeGV.png\" alt=\"image-20220315110415416\" style=\"zoom:50%;\" />\n\n        ```sql\n        #查询选修了全部课程的学生姓名\n        #转化为查询这样的学生x，没有一门课程y 是x不选修的\n        SELECT SN\n        FROM S     #查询学生x\n        WHERE NOT EXISTS  #不存在课程y\n            （SELECT ﹡\n            FROM C\n            WHERE NOT EXISTS  #x不选修课程y\n                （SELECT ﹡\n                FROM SC\n                WHERE S# = S.S#\n                AND C# = C.C#））\n        ```\n\n    - 可以采用NOT EXISTS谓词实现**关系代数的除运算**\n\n        ```sql\n        #查询至少选修了学生‘95002’选修的全部课程的学生号码\n        #转换为查询学号为x的学生，不存在这样的课程y，学生95002选修了y，而学生x没有选\n        SELECT S#\n        FROM S          #查询学生x\n        WHERE NOT EXISTS\n            （SELECT ﹡\n            FROM C       #不存在课程y\n            WHERE EXISTS   #95002选修了课程y\n                (SELECT ﹡\n                FROM SC SCX\n                WHERE SCX.C# = C.C# AND SCX.S#=‘95002’）\n            AND NOT EXISTS   #x没有选修y\n                (SELECT *\n                FROM SC SCY\n                WHERE SCY.C# = C.C# AND SCY.S#=S.S#)\n            );\n            \n        SELECT DISTINCT S#    #因为是从SC里选的学号，故需要DISTINCT\n        FROM SC SCX         #查询学生x\n        WHERE NOT EXISTS\n            （SELECT ﹡\n            FROM SC SCY    #不存在课程y\n            WHERE SCY.S# = ‘95002’  #95002选修了课程y\n            AND NOT EXISTS    #x没有选修y\n                （SELECT ﹡  \n                FROM SC SCZ\n                WHERE SCZ.S# = SCX.S#\n                AND SCZ.C# = SCY.C#））；\n        ```\n\n![image-20220314232322210](https://s2.loli.net/2022/03/14/2srATEC8QOWUzM4.png)\n\n## 4、数据更新\n\n### 插入数据：INSERT （元组级）\n\n==插入数据时，表定义中说明了NOT NULL的列不能取空值== \n\n- 用**子句**向表中插入数据：将新元组插入表中\n\n    ```sql\n    INSERT \n    INTO <表名> [(<列名1>[, <列名2>]...)] \n    VALUES(<常量1>[, <常量2>]...)  \n     #未指定任何列名时，新插入的属性必须在每个属性列上均有值，仅指定部分列名时，新元组的其他列为空值\n     \n    #eg 插入一条选课记录（‘95020’，‘C1’）\n    INSERT INTO SC（S#, C#）VALUES （‘95020’, ‘C1’）; \n    ```\n\n- 用**子查询**向表中插入数据\n\n    ```sql\n    INSERT \n    INTO <表名> [(<列名1>[, <列名2>]...)] \n    SELECT语句;  #SELECT语句的返回列要和INFO里的对应\n    \n    #eg  对每个系，求学生的平均年龄，并把结果存入数据库\n    INSERT INTO Deptage (SD, Avgage) SELECT SD, AVG(SA) FROM S GROUP BY SD;\n    ```\n\n### 修改数据：UPDATE\n\n一条UPDATE语句在某一时刻只能更新**一张表**，但可以更新一张表中的**多列**，也可以更新**多行**数据。\n\n- 用**子句**修改表中数据\n\n    修改表中满足WHERE条件的元组：\n\n    ```sql\n    UPDATE <表名>\n    SET <列名> = <表达式>[, <列名> = <表达式>] #用表达式的值取代相应的属性列值\n    [WHERE <条件表达式>]\t\t\t\t#省略WHERE语句则修改全部元组\n    \n    #eg 将学生95001的年龄改为22岁\n    UPDATE S SET SA = 22 WHERE S# = ‘95001’;\n    \n    #eg 将所有学生的年龄增加1岁\n    UPDATE S SET SA = SA + 1；\n    ```\n\n- 用**子查询**修改表中数据：子查询可以嵌套在WHERE语句的条件表达式中，用于构造修改的条件。相关子查询\n\n    ```sql\n    #将计算机科学系全体学生的成绩置零\n    #相关子查询，每次拿出SC中的一个元组，得到它的系，如果为CS则将成绩置0\n    UPDATE SC SET G = 0 WHERE ‘CS’ = ( SELECT SD FROM S WHERE S.S# = SC.S#);\n    ```\n\n### 删除数据：DELETE （元组级）\n\nDELETE用于**从指定表中删除满足条件的元组**，但不能用来从特定的列中删除数据。一条DELETE语句可以从表中删除一个或多个元组。\n\n- 用**子句**删除表中数据\n\n    删除表中满足WHERE条件的元组：\n\n    ```sql\n    DELETE \n    FROM <表名>\n    [WHERE <条件表达式>]  \n    \n    #eg 删除学号为95001的学生记录\n    DELETE FROM S WHERE S# = ‘95001’;\n    ```\n\n    > 省略WHERE语句则删除全部元组，但**只删除了表中的数据**，而不是表的定义，表的定义仍在DD中。**删除表应当用DROP**\n\n- **子查询**可以嵌套在WHERE语句的条件表达式中。相关子查询\n\n    ```sql\n    #删除计算机科学系全体学生的选课记录\n    #相关子查询\n    DELETE FROM SC WHERE ‘CS’ = ( SELECT SD FROM S WHERE S.S# = SC.S#);\n    ```\n\n\n## 5、视图\n\n- **概念：**\n    - 视图是==动态结果==：对一个或多个基本关系进行关系操作得到的动态结果，是从一个或几个基本表（或视图）导出的表。而且对基本表的操作将在视图可见的范围内映射到视图上。==视图对应的内容是实时的、最新的内容== \n    - 视图是==虚关系==：它不包含真正存储的数据，其内容不占用存储空间。\n    - **视图的内容被定义成基于一个或多个基本关系的查询**\n    - 视图是在==外模式==这一层，为用户所用\n- **操作：**视图可以和基本表一样被查询、被删除。也可以在一个视图之上再定义新的视图，但==对视图的更新（增、删、改）操作则有一定的限制==。==对视图的一切操作最终也要转换为对基本表的操作。==\n\n### 视图的创建及种类\n\n- 视图可以从一张表、几张表或其他视图中创建。 \n\n    ```sql\n    CREATE VIEW <视图名> [(<列名1>[,<列名2>]...)]\n    AS \n    SELECT 语句\n    [WITH CHECK OPTION]  \n    ```\n\n    > **几点说明：**\n    >\n    > - ==创建视图只是将视图的定义存入DD（数据字典），并不会真的执行SELECT语句，当对视图查询时，才根据视图的定义从基本表中将数据查出。==\n    >\n    > - **省略视图名后的列名表时**，默认该视图由子查询中SELECT子句目标列中的诸属性列组成\n    > - 若使用==WITH CHECK OPTION==，则对视图进行UPDATE和INSERT操作时，保证更新行满足视图定义中的WHERE子句指定的条件，否则将被DBMS拒绝\n    > - 当目标列不是单一的属性列(如集合函数)、存在同名列以及需启用更合适的名字时，需要指定组成视图的所有列名\n    > - 可以在视图中增加虚拟列（派生列），即基本表中并不存在的列，如avg(grade)\n\n- **视图的种类**\n\n    - 水平视图：从单个基本表导出，并且只是**去掉了**基本表的**某些行**\n\n        ```sql\n        #创建一个视图，让分支机构B003的经理只看到他所在分支机构的职员的信息\n        CREATE VIEW Manager3Staff\n        AS SELECT *\n        FROM Staff\n        WHERE branchNo = ‘B003’;\n        ```\n\n    - 垂直视图：从单个基本表导出，并且只是**去掉了**基本表的**某些列** \n\n        ```sql\n        #建立关于分支机构B003职员信息但不包括工资信息的视图\n        CREATE VIEW Staff3\n        AS SELECT staffNo, fName, lName, position, sex\n        FROM Manager3Staff;\t\t#视图可以从其他视图中创建\n        ```\n\n    - 分组视图：用**GROUP BY 子句**定义的视图\n\n    - 连接视图：用**连接运算**得到的视图\n\n        ![image-20220322094759185](https://s2.loli.net/2022/03/22/CA4TkBawSpnsgIi.png)\n\n### 删除视图\n\n- ```sql\n    DROP VIEW <视图名>{CASCADE|RESTRICT} \n    ```\n\n- 视图是虚表，**删除的是DD中的视图的定义**，**对产生视图数据的基本表中的数据没有影响**\n\n- 默认RESTRICT ，如果存在依赖被删除视图的其他对象，则不允许删除\n\n    如果指定CASCADE**，**删除视图可能产生级联删除\n\n### 查询视图\n\n- **步骤**\n\n```mermaid\ngraph LR\n    a[有效性检查]-->|有效|b[从DD中取出视图定义]\n    b[从DD中取出视图定义]-->|视图消解|c[对基本表的查询]\n    c[对基本表的查询]-->d[执行查询]\n```\n\n- ==视图消解==：将对视图的查询**转换为对基本表的查询**。执行对视图的查询时，从数据字典中取出视图的定义，将定义中的子查询和用户的查询结合起来，转换成等价的对基本表的查询的过程\n\n    > 简单转换的过程：\n    >\n    > - 将SELECT列表中给出的列名转换为视图定义中对应的列名\n    >\n    > - FROM子句的视图名可以视图定义中的FROM列表代替\n    >\n    > - 用AND将WHERE子句和视图定义中的WHERE子句合并\n    >\n    > - 从视图定义中复制GROUP BY和HAVING子句\n    >\n    > - 将 ORDER BY列名转换为视图定义中对应的列名\n    >\n    >     例子：\n    >\n    >     <img src=\"https://s2.loli.net/2022/03/22/jVlQaEdt8FD5HcW.png\" alt=\"image-20220322221341006\" style=\"zoom:67%;\" />\n    >\n    >     <img src=\"https://s2.loli.net/2022/03/22/I5TvHtQE4RCPSlk.png\" alt=\"image-20220322221538427\" style=\"zoom: 67%;\" />\n    >\n    >     <img src=\"https://s2.loli.net/2022/03/22/HOEKyJ3X26nhGs9.png\" alt=\"image-20220322221558073\" style=\"zoom:67%;\" />\n\n> 复杂转换：涉及集合函数，考虑HAVING子句等等\n>\n> <img src=\"https://s2.loli.net/2022/03/22/7WcqENUudBsYIMg.png\" alt=\"image-20220322222248720\" style=\"zoom:67%;\" />\n\n- **查询视图的约束：**\n\n    - 如果视图中某个列是基于集合函数的，那么，该列只能出现在访问视图的SELECT和ORDER BY子句中，特别是，该列不能出现在WHERE子句中，并且不能作为集合函数的参数\n\n        ```sql\n        SELECT * FROM StaffPropCnt WHERE cnt > 2; //错误\n        SELECT COUNT (cnt) FROM StaffPropCnt;  //错误\n        ```\n\n    - 分组视图不能与基本表或视图进行连接操作\n\n### 更新视图\n\n- 👉**对视图的更新最终要转换为对表的更新**，但有些更新不能有意义地转换成对基本表S的更新，如修改一个集合函数得到的列，因此==对视图的更新操作有一定的限制==\n- 在视图定义时加上WITH CHECK OPTION子句可以使得对视图进行更新操作时需满足视图定义中子查询的条件\n- ==视图可更新的充要条件==\n    - 没有指定DISTINCT,即重复元组未从查询结果中消除；\n    - 定义查询的SELECT列表中的每个元素均为列名（而不是常量，表达式或聚合函数），且列名不能出现多于一次；\n    - FROM子句只能指定一个表，即视图必须有一个源表且用户有请求该表的权限。如果源表本身就是一个视图，那么视图必须满足这些条件。因此，排除了基于连接、并（UNION）、交（INTERSECT）或差（EXCEPT）操作的所有视图；\n    - WHERE子句不能包括任何引用了FROM子句中的表的嵌套SELECT操作，即不能出现相关子查询\n    - 定义查询不能有GROUP BY或HAVING子句。\n    - 添加到视图中的每一行都不能违反基本表的完整性约束\n- 分类\n    - 可更新视图：满足上面的六个条件，即对视图的更新能唯一的有意义的转换为对基本表的更新\n    - （理论上）不可更新的视图\n    - 不允许更新的视图`(*>﹏<*)′\n\n### 视图的优缺点\n\n- **优点：**①提高逻辑独立性、②实时性、③提高安全性、④简化结构及复杂操作、⑤多角度地、更灵活地共享、⑥数据完整性\n\n- **缺点：**①更新的局限性、②结构的局限性、③性能开销（查询时需要转化）\n\n    > **视图维护：**更新基本表引起视图更新的过程称为视图维护\n    >\n    > **视图物化：**把第一次访问视图的结果存储为数据库的临时表；这样，基于物化视图的查询比每次重新计算视图要快的多。但会带来视图维护的代价\n\n## ==6、sql的完整性约束==\n\n### **基本概念：**\n\n- **完整性：**指数据库中数据的正确性、有效性和相容性（表示同一对象的两个或多个数据必须一致）\n- **完整性约束**：数据库中数据应满足的条件\n\n### 非过程性完整性约束\n\n- **数据取值要求：**非空约束（NOT NULL）、唯一性约束（UNIQUE）、CHECK约束（CHECK(searchcondition)）\n\n    > CHECK子句只对定义它的关系起约束作用，对其他关系没有任何作用\n\n    ```sql\n    sex CHAR NOT NULL CHECK (sex IN (‘M’, ‘F’))\n    ```\n\n    ```sql\n    #eg 增加学生姓名必须取唯一值的约束\n    ALTER TABLE student\n    ADD CONSTRAINT c1_name UNIQUE (SN)  #c1_name是约束的名字\n    \n    #eg 删除学生姓名必须取唯一值的约束\n    ALTER TABLE S \n    DROP UNIQUE（SN）;  \n    #或者 DROP CONSTRAINT c1_name\n    ```\n\n- **域约束：**通过自定义域来实现\n\n    ```sql\n    CREATE DOMAIN DomainName [AS] dataType\n    [DEFAULT defaultOption]\n    [CHECK (searchCondition)]  #searchCondition 可以用SELECT语句表达\n    \n    #eg\n    CREATE DOMAIN SexType AS CHAR(2)\n    DEFAULT ‘M’\n    CHECK (VALUE IN (‘M’, ‘F’));\n    \n    #使用域来定义列\n    sex SexType NOT NULL;\n    ```\n\n- **实体完整性：**主键属性不空。DBMS自动支持实体完整性（拒绝破坏实体完整性的操作（不合法的插入和更新））\n\n    ```sql\n    PRIMARY KEY(<列名表>)  #主键定义   \n    UNIQUE(<列名表>)   #候选键定义\n    ```\n\n- **参照完整性**：DBMS自动支持参照完整性（拒绝破坏参照完整性的操作，如不合法的对子表（参照表）的插入和更新操作，不合法的对父表（被参照表）的删除和更新操作）。注意SQL语句的顺序。\n\n    ```sql\n    FOREIGN KEY （<列名>[，<列名>] …）REFERENCES <被参照表名> \n    [ON DELETE [CASCADE | SET DEFAULT | SET NULL | NO ACTION] ]\n    [ON UPDATE [CASCADE | SET DEFAULT | SET NULL |NO ACTION] ]\n    ```\n\n    > 参照完整性被破坏时可选择的策略：\n    >\n    > <img src=\"https://s2.loli.net/2022/03/22/N9xBsZtjn5iSdO4.png\" alt=\"image-20220322230658737\" style=\"zoom: 80%;\" />\n\n- **一般约束（企业约束）**\n\n    在创建和修改表时使用CHECK/UNIQUE，还可以==CREATE ASSERTION（设置断言）==\n\n    当完整性约束涉及多个关系或者与聚合操作有关，则可以采用SQL的断言机制来完成\n\n    ```sql\n    CREATE ASSERTION AssertionName\n    CHECK (searchCondition)\n    \n    #限制staff不能管理太多的房产\n    CREATE ASSERTION StaffNotHandlingTooMuch\n    CHECK (NOT EXISTS \n               (SELECT *\n                FROM PropertyForRent\n                GROUP BY staffNo\n                HAVING COUNT(*) > 100));\n    ```\n\n<img src=\"https://s2.loli.net/2022/03/22/Ihst97CnifNJAq1.png\" alt=\"image-20220322231603163\" style=\"zoom: 67%;\" />\n\n\n\n### 过程性完整性约束：触发器\n\n- 概念：一类靠事件驱动的特殊过程，一旦由某个用户定义，任何触发该触发器的事件发生时，均由**服务器**自动激活相应的触发器。\n\n- 三要素：触发事件（包括Insert、delete、update等）、触发条件、触发动作\n\n- 作用：示警（给出提示信息）；满足特定条件时自动执行某项任务以消除负面影响\n\n- 定义(Full SQL-99的Create Trigger语法)\n\n    ```sql\n    CREATE TRIGGER trigger_name \n    {BEFORE | AFTER} {INSERT | DELETE | UPDATE [OF columnname{,columnname…}]} ON tablename #触发事件[REFERENCING corr_name_def {, corr_name_def…}]  #旧值或新值名表\n    [FOR EACH ROW | FOR EACH STATEMENT]  \n    [WHEN (search_condition)]   #触发条件\n    {\t\n    \tstatement |          #触发动作，为单个或一系列SQL语句\n    \tBEGIN ATOMIC statement; \n    \t{statement; …} \n    \tEND\n    } ;\n    \n    #eg 设计一个用于s_c的触发器，该触发器规定，如果需要修改成绩，则需要保证修改之后的成绩不得低于之前的成绩，否则拒绝修改\n    CREATE TRIGGER trig_grade\n    AFTER UPDATE OF grade ON s_c\n    REFERENCING OLD AS oldg, NEW AS newg\n    FOR EACH ROW\n    WHEN (oldg.grade > newg.grade)\n    \tUPDATE s_c\n    \tSET GRADE = oldg.grade\n    \tWHERE cno = oldg.cno AND sno = oldg.sno;  #根据主键找到该元组\n    ```\n\n    > 几点说明：\n    >\n    > - 触发器名是一个标识符，在其所属的模式里是唯一的\n    >\n    > - ON<表名>子句里的表必须和触发器位于同一个模式中\n    >\n    > - 定义行的相关名字的corr_name_def 如下:\n    >\n    >     {OLD [ROW] [AS] old_row_corr_name\n    >\n    >     | NEW [ROW] [AS] new_row_corr_name\n    >\n    >     | OLD TABLE [AS] old_table_corr_name\n    >\n    >     | NEW TABLE [AS] new_table_corr_name}\n    >\n    > - 如果在触发器定义中省略WHEN子句，即省略触发条件，则触发动作在触发器被激活后立即发生\n    >\n    > - 触发动作可以是单个或一系列SQL语句，若为一系列，需要使用BEGIN ATOMIC...END子句，语句之间用分号隔开\n    >\n    > - 注意触发器级联问题，防止一个触发动作引发一系列连锁反应（一个触发器的动作引发另一个触发器的动作）以致失控\n\n### 两种完整性约束的对比\n\n- 非过程性完整性约束：种类和能力有限但易于理解；直接为系统所知；难以给出约束不满足时的相应动作\n\n- 过程性完整性约束：给出了约束不满足时的相应动作；保证事物的一致性\n","slug":"sql概述与sql定义语言","published":1,"updated":"2022-06-24T00:44:47.199Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4wroc440003mwsk0bea70dp","content":"<h1 id=\"三、-sql概述与sql定义语言\"><a href=\"#三、-sql概述与sql定义语言\" class=\"headerlink\" title=\"三、 sql概述与sql定义语言\"></a>三、 sql概述与sql定义语言</h1><h2 id=\"1、基本概念\"><a href=\"#1、基本概念\" class=\"headerlink\" title=\"1、基本概念\"></a>1、基本概念</h2><p><strong>sql的特点：</strong></p>\n<ul>\n<li>综合统一：集数据定义、数据操纵、数据控制语言的功能为一体</li>\n<li>高度非过程化</li>\n<li>面向集合的操作方式</li>\n<li>两种使用方式，统一的语法结构</li>\n<li>简洁易学、通用、功能强</li>\n</ul>\n<span id=\"more\"></span>\n\n<p><strong>sql语言的分类</strong>：数据定义语言DDL、数据操作语言DML、数据查询语言DQL、数据控制语言DCL</p>\n<p><strong>sql数据库的三级结构：</strong></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/17/3IjuTbYwHFQzdAp.png\" alt=\"image-20220517103508209\"></p>\n<p>子模式对应于视图和部分查询表，模式对应于基本表，内模式对应于存储文件</p>\n<p><strong>sql语句的分类</strong>：模式定义语句、数据操纵语句（增删改查）、事务与控制语句、会话及诊断语句</p>\n<p><strong>sql的数据类型：</strong></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/17/fhJG9wazTZ1ydL5.png\" alt=\"image-20220517104732266\"></p>\n<blockquote>\n<p>在实验中发现，如果要显示001这种类型的数字，可以设置为<em>sno int(3) zerofill</em></p>\n</blockquote>\n<h2 id=\"2、sql的数据定义\"><a href=\"#2、sql的数据定义\" class=\"headerlink\" title=\"2、sql的数据定义\"></a>2、sql的数据定义</h2><p><img data-src=\"https://s2.loli.net/2022/05/17/5Qv3qyIM9TeJrXG.png\" alt=\"image-20220517110612939\"></p>\n<blockquote>\n<p>👉总结：</p>\n<p>创建：create  对象类型 对象名</p>\n<p>删除：drop 对象类型 对象名   [RESTRICT | CASCADE]</p>\n<p>RESTRICT：如果有其它对象依赖于该对象，则拒绝进行DROP操作</p>\n<p>CASCADE：级联删除该对象及所有依赖于该对象的对象</p>\n</blockquote>\n<h3 id=\"模式\"><a href=\"#模式\" class=\"headerlink\" title=\"模式\"></a>模式</h3><ul>\n<li><p>模式的定义：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> SCHEMA <span class=\"operator\">&lt;</span>模式名<span class=\"operator\">&gt;</span> <span class=\"keyword\">AUTHORIZATION</span> <span class=\"operator\">&lt;</span>用户名<span class=\"operator\">&gt;</span>  #若不指定<span class=\"operator\">&lt;</span>模式名<span class=\"operator\">&gt;</span>，则隐含为<span class=\"operator\">&lt;</span>用户名<span class=\"operator\">&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">#eg</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> SCHEMA library_db <span class=\"keyword\">AUTHORIZATION</span> Guoqing;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>模式的删除</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> SCHEMA <span class=\"operator\">&lt;</span>模式名<span class=\"operator\">&gt;</span> [RESTRICT <span class=\"operator\">|</span> CASCADE];</span><br><span class=\"line\">#RESTRICT – 如果模式内没有对象，则删除该模式</span><br><span class=\"line\">#CASCADE – 删除模式中所有对象的内容和定义</span><br><span class=\"line\"></span><br><span class=\"line\">#eg.</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> SCHEMA library RESTRICT;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"域\"><a href=\"#域\" class=\"headerlink\" title=\"域\"></a>域</h3><ul>\n<li><p>定义域：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> DOMAIN <span class=\"operator\">&lt;</span>域名<span class=\"operator\">&gt;</span> [<span class=\"keyword\">AS</span>] <span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span> [<span class=\"keyword\">DEFAULT</span> <span class=\"operator\">&lt;</span>默认值<span class=\"operator\">&gt;</span>] [<span class=\"operator\">&lt;</span>域约束<span class=\"operator\">&gt;</span>] </span><br><span class=\"line\"></span><br><span class=\"line\">#eg</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> DOMAIN SexType <span class=\"keyword\">AS</span> <span class=\"type\">CHAR</span>(<span class=\"number\">2</span>) <span class=\"keyword\">DEFAULT</span> ‘M’ <span class=\"keyword\">CHECK</span> (<span class=\"keyword\">VALUE</span> <span class=\"keyword\">IN</span> (‘M’, ‘F’));</span><br><span class=\"line\">sex SexType <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>;  #使用域</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除域：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> DOMAIN <span class=\"operator\">&lt;</span>域名<span class=\"operator\">&gt;</span> [RESTRICT <span class=\"operator\">|</span> CASCADE];</span><br><span class=\"line\">#如果指定RESTRICT，且域用于现有的表中，则删除失败</span><br><span class=\"line\">#如果指定CASCADE，基于域的任一表中的列都会自动地改变为基本域类型，该域的<span class=\"keyword\">CHECK</span>约束或默认值都会被列的约束或默认值代替</span><br><span class=\"line\"></span><br><span class=\"line\">#eg</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> DOMAIN SexType；</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"表\"><a href=\"#表\" class=\"headerlink\" title=\"表\"></a>表</h3><ul>\n<li><p>表的建立</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> [模式名.] <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> </span><br><span class=\"line\">(   </span><br><span class=\"line\">    <span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span><span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span>[<span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>│<span class=\"keyword\">NULL</span>][<span class=\"keyword\">UNIQUE</span>]</span><br><span class=\"line\">    [, <span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span><span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span>[<span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>│<span class=\"keyword\">NULL</span>][<span class=\"keyword\">UNIQUE</span>]]…</span><br><span class=\"line\">    [, <span class=\"keyword\">PRIMARY</span> KEY （<span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span>[，<span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span>] …）]    #主键,主键属性列用括号括起来</span><br><span class=\"line\">    [, <span class=\"keyword\">FOREIGN</span> KEY （<span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span>[，<span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span>] …）<span class=\"keyword\">REFERENCES</span>  <span class=\"operator\">&lt;</span>被参照表名<span class=\"operator\">&gt;</span>]#外键</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">#eg</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> PropertyForRent </span><br><span class=\"line\">(</span><br><span class=\"line\">    propertyNo PNumber <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,      #数据类型为用户定义的域</span><br><span class=\"line\">    rooms PRooms <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"number\">4</span>, </span><br><span class=\"line\">    rent PRent <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"number\">600</span>, </span><br><span class=\"line\">    ownerNo OwnerNumber <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>, </span><br><span class=\"line\">    staffNo StaffNumber <span class=\"keyword\">Constraint</span> StaffNotHandlingTooMuch ….</span><br><span class=\"line\">    branchNo BranchNumber <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">    <span class=\"keyword\">PRIMARY</span> KEY (propertyNo),   #主键属性和外键属性要用括号括起来</span><br><span class=\"line\">    <span class=\"keyword\">FOREIGN</span> KEY (staffNo) <span class=\"keyword\">REFERENCES</span> Staff </span><br><span class=\"line\">    <span class=\"keyword\">ON</span> <span class=\"keyword\">DELETE</span> <span class=\"keyword\">SET</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">ON</span> <span class=\"keyword\">UPDATE</span> CASCADE …. #可采取的行为</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>表的删除</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> [CASCADE <span class=\"operator\">|</span> RESTRICT]</span><br><span class=\"line\">#既删除DD中表的结构定义，也删除DB中的数据文件</span><br><span class=\"line\">#RESTRICT：如果有其它对象依赖于该表，则拒绝进行<span class=\"keyword\">DROP</span>操作</span><br><span class=\"line\">#CASCADE：级联删除表及所有依赖于该表的对象</span><br><span class=\"line\"></span><br><span class=\"line\">#eg</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> PropertyForRent;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>&#x3D;&#x3D;修改表&#x3D;&#x3D;</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALETR <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span></span><br><span class=\"line\">[<span class=\"keyword\">ADD</span> <span class=\"operator\">&lt;</span>新列名<span class=\"operator\">&gt;</span> <span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span> &#123;<span class=\"keyword\">NULL</span>&#125;]     #加新列，新增加的列默认为空值</span><br><span class=\"line\">[<span class=\"keyword\">ADD</span> <span class=\"operator\">&lt;</span>完整性约束条件<span class=\"operator\">&gt;</span>]</span><br><span class=\"line\">[<span class=\"keyword\">DROP</span> <span class=\"operator\">&lt;</span>完整性约束条件<span class=\"operator\">&gt;</span>]   #删除列的完整性约束条件，没有提供删除列的子句</span><br><span class=\"line\">[MODIFY <span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span> <span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span>]   #修改列，可能破坏已有数据</span><br><span class=\"line\"></span><br><span class=\"line\">#eg 增加学生姓名必须取唯一值的约束</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> student</span><br><span class=\"line\"><span class=\"keyword\">ADD</span> <span class=\"keyword\">CONSTRAINT</span> c1_name <span class=\"keyword\">UNIQUE</span> (SN)  #c1_name是约束的名字</span><br><span class=\"line\"></span><br><span class=\"line\">#eg 删除学生姓名必须取唯一值的约束</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> S </span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">UNIQUE</span>（SN）;  </span><br><span class=\"line\">#或者 <span class=\"keyword\">DROP</span> <span class=\"keyword\">CONSTRAINT</span> c1_name</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h3><ul>\n<li><p>建立索引</p>\n<p>  一条语句建立一个索引</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#<span class=\"keyword\">UNIQUE</span>表示每个索引值只能对应唯一的数据记录，CLUSTER表示聚簇索引，即索引项的顺序与表中记录的物理顺序一致的有序索引，一个基本表最多只能建立一个聚簇索引</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> [<span class=\"keyword\">UNIQUE</span>] [CLUSTER] INDEX <span class=\"operator\">&lt;</span>索引名<span class=\"operator\">&gt;</span>  </span><br><span class=\"line\"><span class=\"keyword\">ON</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> (<span class=\"operator\">&lt;</span>列名<span class=\"number\">1</span><span class=\"operator\">&gt;</span>[<span class=\"keyword\">ASC</span><span class=\"operator\">|</span><span class=\"keyword\">DESC</span>], <span class=\"operator\">&lt;</span>列名<span class=\"number\">2</span><span class=\"operator\">&gt;</span>[<span class=\"keyword\">ASC</span><span class=\"operator\">|</span><span class=\"keyword\">DESC</span>], ...);</span><br><span class=\"line\">#<span class=\"keyword\">ASC</span>表示升序，<span class=\"keyword\">DESC</span>表示降序。默认为升序。</span><br><span class=\"line\"></span><br><span class=\"line\">#eg:在SC中按sno升序cno降序建唯一索引</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">UNIQUE</span> INDEX SC_index <span class=\"keyword\">ON</span> SC( sno <span class=\"keyword\">ASC</span>，cno <span class=\"keyword\">DESC</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除索引</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> INDEX [<span class=\"keyword\">ON</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span>]<span class=\"operator\">&lt;</span>索引名<span class=\"operator\">&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">#eg</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> INDEX SC_index;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"x3D-x3D-3、⚠⚠⚠sql数据查询-x3D-x3D\"><a href=\"#x3D-x3D-3、⚠⚠⚠sql数据查询-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;3、⚠⚠⚠sql数据查询&#x3D;&#x3D;\"></a>&#x3D;&#x3D;3、⚠⚠⚠sql数据查询&#x3D;&#x3D;</h2><h3 id=\"一般格式\"><a href=\"#一般格式\" class=\"headerlink\" title=\"一般格式\"></a>一般格式</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> [<span class=\"keyword\">ALL</span><span class=\"operator\">|</span><span class=\"keyword\">DISTINCT</span>] <span class=\"operator\">&lt;</span>目标列表达式<span class=\"operator\">&gt;</span>[,<span class=\"operator\">&lt;</span>目标列表达式<span class=\"operator\">&gt;</span>]...      #<span class=\"keyword\">ALL</span>为默认设置，即不取消重复值，<span class=\"keyword\">DISTINCT</span>表示取消重复值</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> <span class=\"operator\">&lt;</span>表名或视图名<span class=\"operator\">&gt;</span>[,表名或视图名]...     #<span class=\"keyword\">SELECT</span>子句与<span class=\"keyword\">FROM</span>子句是必选子句</span><br><span class=\"line\">[<span class=\"keyword\">WHERE</span> <span class=\"operator\">&lt;</span>条件表达式<span class=\"operator\">&gt;</span>]</span><br><span class=\"line\">[<span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> <span class=\"operator\">&lt;</span>列名<span class=\"number\">1</span><span class=\"operator\">&gt;</span>[<span class=\"keyword\">HAVING</span><span class=\"operator\">&lt;</span>条件表达式<span class=\"operator\">&gt;</span>]]</span><br><span class=\"line\">[<span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> <span class=\"operator\">&lt;</span>列名<span class=\"number\">2</span><span class=\"operator\">&gt;</span>[<span class=\"keyword\">ASC</span><span class=\"operator\">|</span><span class=\"keyword\">DESC</span>]];     #其中，列名<span class=\"number\">2</span>也可以用<span class=\"keyword\">SELECT</span>子句中相应列的序号</span><br></pre></td></tr></table></figure>\n\n<p><strong>含义：</strong></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/17/GUvQItYzXHpeOmW.png\" alt=\"image-20220517114258444\"></p>\n<p><strong>概念性的执行步骤：</strong></p>\n<ul>\n<li>计算出现在FROM后面的表之间的笛卡儿积</li>\n<li>实施由WHERE后面的条件规定的选择操作</li>\n<li>根据GROUP BY后面的属性的值进行分组</li>\n<li>对于分组出来的每一个小组，实施由HAVING后面的条件规定的选择操作，保留满足条件的小组</li>\n<li>将出现在SELECT后面的属性投影成结果表</li>\n<li>将结果表中的元组根据ORDER BY后面的属性及指定的顺序（升序或降序）输出</li>\n</ul>\n<h3 id=\"SELECT子句：\"><a href=\"#SELECT子句：\" class=\"headerlink\" title=\"SELECT子句：\"></a>SELECT子句：</h3><p><em>SELECT [ALL|DISTINCT] &lt;目标列表达式&gt;[,&lt;目标列表达式&gt;]…</em></p>\n<ul>\n<li><p>*代表指定表的所有列，一般用在exists和not exists里面</p>\n</li>\n<li><p>ALL为默认设置 ，即不取消重复值，DISTINCT表示取消重复值</p>\n</li>\n<li><p>&#x3D;&#x3D;聚集函数（只能用于SELECT子句和HAVING子句中 ）&#x3D;&#x3D;</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/05/YGrdqMfam4Qhb8P.png\" alt=\"image-20220305102158697\"></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/07/xj6qmHkOhKrcvag.png\" alt=\"image-20220307231705848\"></p>\n<blockquote>\n<p>当这些函数遇到空值时，除COUNT(*)外，都跳过空值而只处理非空值。</p>\n</blockquote>\n<p>  例子：</p>\n  <img data-src=\"https://s2.loli.net/2022/05/17/5Yvk4aWe1JPLMOw.png\" alt=\"image-20220517115836637\" style=\"zoom: 67%;\" />\n</li>\n<li><p>&#x3D;&#x3D;算术表达式：&#x3D;&#x3D;  </p>\n<p>  +、-、*、&#x2F;、%、INTEGER（取整）、SQRT（求平方根）、三角函数（SIN、COS）、字符串函数SUBSTRING（取子串）、UPPER（大写字符）、MONTHS_BETWEEN（月份差）</p>\n<hr>\n</li>\n<li><p>用AS子句为列命名 </p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> staffNo, fName, lName, salary<span class=\"operator\">/</span><span class=\"number\">12</span> <span class=\"keyword\">AS</span> monthlySalary <span class=\"keyword\">FROM</span> Staff;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"FROM子句：\"><a href=\"#FROM子句：\" class=\"headerlink\" title=\"FROM子句：\"></a>FROM子句：</h3><p>可以给表指定别名：多个表放在FROM子句中，代表多表进行笛卡尔积</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/17/4bpXBmUsKrI3CdH.png\" alt=\"image-20220517120134854\"></p>\n<h3 id=\"WHERE子句：\"><a href=\"#WHERE子句：\" class=\"headerlink\" title=\"WHERE子句：\"></a>WHERE子句：</h3><p>WHERE子句的查询条件可以用多种形式表示： </p>\n<img data-src=\"https://s2.loli.net/2022/05/18/X4nGHxUtsuZCcio.png\" style=\"zoom:67%;\" />\n\n<ul>\n<li><p>比较运算作为查找条件 (&gt;,  &lt;,  &gt;&#x3D;,  &lt;&#x3D;,  &#x3D;,  &lt;&gt;(不等于))</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WHERE</span> salary <span class=\"operator\">&gt;</span> <span class=\"number\">10000</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>复合比较运算作为查找条件 (AND, OR, NOT ) </p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WHERE</span> city <span class=\"operator\">=</span> ‘London’ <span class=\"keyword\">OR</span> city <span class=\"operator\">=</span> ‘Glasgow’</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>范围作为查找条件（BETWEEN &#x2F; NOT BETWEEN）。&#x3D;&#x3D;BETWEEN包含端点&#x3D;&#x3D;</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WHERE</span> grade <span class=\"keyword\">BETWEEN</span> <span class=\"number\">85</span> <span class=\"keyword\">AND</span> <span class=\"number\">95</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>集合成员测试作为查找条件（IN &#x2F; NOT IN）</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WHERE</span> place <span class=\"keyword\">IN</span>(<span class=\"string\">&#x27;湖南&#x27;</span>,<span class=\"string\">&#x27;湖北&#x27;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>模式匹配作为查找条件（LIKE &#x2F; NOT LIKE）</p>\n<p>  SQL中的两种特殊的模式匹配符号：</p>\n<ul>\n<li><p>%: 百分号表示零或多个字符序列（通配符）</p>\n</li>\n<li><p>_: 下划线表示任意单个字符</p>\n  <img data-src=\"https://s2.loli.net/2022/03/07/Z52TOHjLlb6tivJ.png\" alt=\"image-20220307230435181\" style=\"zoom:67%;\" /></li>\n</ul>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WHERE</span> sname <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;刘%&#x27;</span> <span class=\"keyword\">OR</span> SNAME <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;__晓%&#x27;</span>   #一个汉字占两个字符位</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>空查找条件（IS NULL  &#x2F;  IS NOT NULL）</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WHERE</span> propertyNo <span class=\"operator\">=</span> ‘PG4’ <span class=\"keyword\">AND</span> comment <span class=\"keyword\">IS</span> <span class=\"keyword\">NULL</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"GROUP-BY子句-：\"><a href=\"#GROUP-BY子句-：\" class=\"headerlink\" title=\"GROUP BY子句 ：\"></a>GROUP BY子句 ：</h3><p>将查询结果按指定列名的取值分组，并选取满足HAVING中的内部函数表达式所指定条件的组。目的：细化聚集函数的作用对象。 &#x3D;&#x3D;HAVING子句是包含在GROUP BY子句中的&#x3D;&#x3D; </p>\n<blockquote>\n<p>WHERE子句是在表中选择满足条件的元组，而HAVING子句是在各组中选择满足条件的小组</p>\n</blockquote>\n<blockquote>\n<p>ISO标准规定，应用GROUP BY时，两个空值被认为是相等的</p>\n</blockquote>\n<blockquote>\n<p>&#x3D;&#x3D;当使用GROUP BY时， SELECT列表中的项必须每组都有单一值(因为最终一个组会变成一个元组)&#x3D;&#x3D; </p>\n</blockquote>\n<blockquote>\n<p>当使用GROUP BY时， SELECT子句中除集合函数外，其它所有列必须在GROUP BY子句中出现；反之，GROUP BY子句出现的列不一定出现在SELECT列表中；</p>\n<p>HAVING子句使用的列名必须出现在GROUP BY 子句列表中，或者包括在集合函数中。实践中，HAVING子句的条件表达式至少包括一个集合函数</p>\n</blockquote>\n<h3 id=\"ORDER-BY子句\"><a href=\"#ORDER-BY子句\" class=\"headerlink\" title=\"ORDER BY子句\"></a>ORDER BY子句</h3><p>order by子句必须放最后用于对最终的查询结果进行排序，<u>不能用在子查询中</u></p>\n<p>该子句后可以跟多个排序的变量名，第一个变量为主序，下面依次类推。&#x3D;&#x3D;ASC（升序）为默认设置&#x3D;&#x3D; 。它也可以用SELECT子句中相应列的序号。</p>\n<img data-src=\"https://s2.loli.net/2022/05/17/5Yvk4aWe1JPLMOw.png\" alt=\"image-20220517115836637\" style=\"zoom: 67%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/05/17/GeHg8L1yBXIUpJt.png\" alt=\"image-20220517120939452\" style=\"zoom: 80%;\" />\n\n<h3 id=\"简单查询\"><a href=\"#简单查询\" class=\"headerlink\" title=\"简单查询\"></a>简单查询</h3><p>单表查询</p>\n<ul>\n<li>查询指定的列：通过在SELECT子句的&lt;目标列表达式&gt;中指定要查询的列来实现。可以使用*、聚集函数、算术表达式等</li>\n<li>查询表中行：通过WHERE子句的查询条件来实现</li>\n</ul>\n<h3 id=\"复杂查询\"><a href=\"#复杂查询\" class=\"headerlink\" title=\"复杂查询\"></a>复杂查询</h3><h4 id=\"连接查询：\"><a href=\"#连接查询：\" class=\"headerlink\" title=\"连接查询：\"></a>连接查询：</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> student.sno, sname, cno, grade <span class=\"keyword\">FROM</span> student, s_c <span class=\"keyword\">WHERE</span> student.sno <span class=\"operator\">=</span> s_c.sno;</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;注意在多表查询中，当两个列名相同时，需采用表名.列名以示区别&#x3D;&#x3D;</p>\n<h4 id=\"嵌套查询（子查询）：\"><a href=\"#嵌套查询（子查询）：\" class=\"headerlink\" title=\"嵌套查询（子查询）：\"></a>嵌套查询（子查询）：</h4><p>子查询可以被使用在外部SELECT语句的WHERE子句、HAVING子句甚至SELECT子句中</p>\n<p>&#x3D;&#x3D;子查询应遵循如下规则：&#x3D;&#x3D; </p>\n<ul>\n<li><p>ORDER BY子句不能用于子查询（因为ORDER BY子句是对最终显示的结果进行排序）</p>\n</li>\n<li><p>子查询总是<strong>括在圆括号</strong> 中，作为表达式的一部分出现在条件比较运算符的右边，并且可以有选择的跟在IN，SOME（ANY），ALL和EXIST等谓词后面。</p>\n</li>\n<li><p>子查询select列表必须由<strong>单个列名或表达式</strong> （如集合函数）组成，除非子查询使用了关键字EXISTS（多列多行时使用）</p>\n</li>\n<li><p>默认情况下，子查询中列名取自子查询的FROM子句中给定的表，也可以通过限定列名的办法指定取自外查询的FROM子句中的表（不相关子查询和相关子查询）</p>\n</li>\n<li><p>带有比较运算符的子查询（&#x3D;&#x3D;此时子查询返回单个值&#x3D;&#x3D;，可以使用集合函数 ）</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#列出个人工资高于平均工资的所有职员，并求出多于平均数的值。</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> staffNo, fName, lName, position, salary–(<span class=\"keyword\">SELECT</span> <span class=\"built_in\">AVG</span>(salary) <span class=\"keyword\">FROM</span> Staff) <span class=\"keyword\">AS</span> SalDiff</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Staff</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> salary <span class=\"operator\">&gt;</span> (<span class=\"keyword\">SELECT</span> <span class=\"built_in\">AVG</span>(salary) <span class=\"keyword\">FROM</span> Staff);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>带有IN谓词的子查询（子查询返回单个值或单个列多个行）</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查询选修了课程“C2”的学生的学号和姓名</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> sno, sname <span class=\"keyword\">FROM</span> S <span class=\"keyword\">WHERE</span> sno <span class=\"keyword\">IN</span> ( <span class=\"keyword\">SELECT</span> sno <span class=\"keyword\">FROM</span> SC <span class=\"keyword\">WHERE</span> cno <span class=\"operator\">=</span> ‘C2’ );</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>多层嵌套：子查询中又嵌套子查询</p>\n</li>\n<li><p>&#x3D;&#x3D;不相关子查询和相关子查询&#x3D;&#x3D; </p>\n<ul>\n<li><p>不相关子查询：内层的子查询完全独立于外层的SELECT语句。&#x3D;&#x3D;m + n&#x3D;&#x3D; （只执行了一次子查询，在检查外层的元组时，无需再执行子查询）</p>\n<blockquote>\n<p>执行过程：1）执行子查询，其结果不被显示，而是传递给外部查询，作为外部查询的条件使用。2）执行外部查询，并显示整个结果。</p>\n</blockquote>\n</li>\n<li><p>相关子查询：子查询的判断条件涉及外层父查询的属性。要用到存在谓词EXISTS和NOT EXISTS，或者ALL、SOME等。&#x3D;&#x3D;m * n&#x3D;&#x3D; （每检查一个元组，都要执行一次子查询）</p>\n<blockquote>\n<p>执行过程：1）从外层查询中取出一个元组，将元组相关列（被内层子查询引用）的值传给内层查询。2）执行内层查询，得到子查询操作的值。3）外查询根据子查询返回的结果或结果集得到满足条件的行。4）然后外层查询取出下一个元组重复做步骤1-3，直到外层的元组全部处理完毕。</p>\n</blockquote>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#找出每个学生超过他自己已选修课程平均成绩的课程号</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> sno, cno <span class=\"keyword\">FROM</span> SC x <span class=\"keyword\">WHERE</span> G<span class=\"operator\">&gt;=</span> (<span class=\"keyword\">SELECT</span> <span class=\"built_in\">AVG</span>(G) <span class=\"keyword\">FROM</span> SC y <span class=\"keyword\">WHERE</span> x.sno <span class=\"operator\">=</span> y.sno);</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>量化比较谓词</p>\n<ul>\n<li><p>作用：产生单个列的子查询</p>\n</li>\n<li><p>通用形式：<code>expr Θ &#123; SOME | ANY | ALL &#125; (Subquery)其中Θ∈&#123;&lt;,&lt;=,=,&lt;&gt;,&gt;,&gt;=&#125; </code>。expr为表达式。该形式中的SOME与ANY含义相同，但用SOME而不用ANY。SOME某些，ALL全部。</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查询其它系中比信息系某一学生年龄小的学生姓名和年龄</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> SN, SA <span class=\"keyword\">FROM</span> S <span class=\"keyword\">WHERE</span> SA <span class=\"operator\">&lt;</span> <span class=\"keyword\">SOME</span> (<span class=\"keyword\">SELECT</span> SA <span class=\"keyword\">FROM</span> S <span class=\"keyword\">WHERE</span> SD <span class=\"operator\">=</span>‘<span class=\"keyword\">IS</span>’) <span class=\"keyword\">AND</span> SD <span class=\"operator\">&lt;&gt;</span>‘<span class=\"keyword\">IS</span>’;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<blockquote>\n<p>expr Θ （子查询）  子查询返回单个值</p>\n<p>expr IN （子查询）</p>\n<p>expr Θ { SOME | ANY | ALL } (子查询)，&gt;&#x3D; ALL可以用于求最大值</p>\n</blockquote>\n</li>\n<li><p>&#x3D;&#x3D;EXISTS谓词&#x3D;&#x3D; </p>\n<ul>\n<li><p>通用形式：[NOT] EXISTS （Subquery）</p>\n</li>\n<li><p>作用：测试被子查询检索到的行集(子查询可以返回多行多列)<strong>是否为空</strong> 。谓词 EXISTS （Subquery）为真当且仅当子查询返回一个非空的集合。NOT_EXISTS则相反</p>\n</li>\n<li><p>NOT EXISTS谓词可以实现<strong>关系代数的差运算</strong></p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查询没有选修‘C1’号课程的学生的姓名。</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> sname <span class=\"keyword\">FROM</span> S <span class=\"keyword\">WHERE</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> (<span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> SC <span class=\"keyword\">WHERE</span> sno <span class=\"operator\">=</span> S.sno <span class=\"keyword\">AND</span> cno <span class=\"operator\">=</span> ‘C1’);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>所有带IN谓词、比较运算符、SOME和ALL谓词的子查询都可以用带EXISTS谓词的子查询等价替换，反过来就不一定</p>\n</li>\n<li><p>可以采用双嵌套NOT_EXISTS来实现<strong>带全称量词的查询</strong>。<img data-src=\"https://s2.loli.net/2022/03/15/Km17HNji9vZAeGV.png\" alt=\"image-20220315110415416\" style=\"zoom:50%;\" /></p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查询选修了全部课程的学生姓名</span><br><span class=\"line\">#转化为查询这样的学生x，没有一门课程y 是x不选修的</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> SN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> S     #查询学生x</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span>  #不存在课程y</span><br><span class=\"line\">    （<span class=\"keyword\">SELECT</span> ﹡</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> C</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span>  #x不选修课程y</span><br><span class=\"line\">        （<span class=\"keyword\">SELECT</span> ﹡</span><br><span class=\"line\">        <span class=\"keyword\">FROM</span> SC</span><br><span class=\"line\">        <span class=\"keyword\">WHERE</span> S# <span class=\"operator\">=</span> S.S#</span><br><span class=\"line\">        <span class=\"keyword\">AND</span> C# <span class=\"operator\">=</span> C.C#））</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可以采用NOT EXISTS谓词实现<strong>关系代数的除运算</strong></p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查询至少选修了学生‘<span class=\"number\">95002</span>’选修的全部课程的学生号码</span><br><span class=\"line\">#转换为查询学号为x的学生，不存在这样的课程y，学生<span class=\"number\">95002</span>选修了y，而学生x没有选</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> S#</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> S          #查询学生x</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span></span><br><span class=\"line\">    （<span class=\"keyword\">SELECT</span> ﹡</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> C       #不存在课程y</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> <span class=\"keyword\">EXISTS</span>   #<span class=\"number\">95002</span>选修了课程y</span><br><span class=\"line\">        (<span class=\"keyword\">SELECT</span> ﹡</span><br><span class=\"line\">        <span class=\"keyword\">FROM</span> SC SCX</span><br><span class=\"line\">        <span class=\"keyword\">WHERE</span> SCX.C# <span class=\"operator\">=</span> C.C# <span class=\"keyword\">AND</span> SCX.S#<span class=\"operator\">=</span>‘<span class=\"number\">95002</span>’）</span><br><span class=\"line\">    <span class=\"keyword\">AND</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span>   #x没有选修y</span><br><span class=\"line\">        (<span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span></span><br><span class=\"line\">        <span class=\"keyword\">FROM</span> SC SCY</span><br><span class=\"line\">        <span class=\"keyword\">WHERE</span> SCY.C# <span class=\"operator\">=</span> C.C# <span class=\"keyword\">AND</span> SCY.S#<span class=\"operator\">=</span>S.S#)</span><br><span class=\"line\">    );</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> S#    #因为是从SC里选的学号，故需要<span class=\"keyword\">DISTINCT</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SC SCX         #查询学生x</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span></span><br><span class=\"line\">    （<span class=\"keyword\">SELECT</span> ﹡</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> SC SCY    #不存在课程y</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> SCY.S# <span class=\"operator\">=</span> ‘<span class=\"number\">95002</span>’  #<span class=\"number\">95002</span>选修了课程y</span><br><span class=\"line\">    <span class=\"keyword\">AND</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span>    #x没有选修y</span><br><span class=\"line\">        （<span class=\"keyword\">SELECT</span> ﹡  </span><br><span class=\"line\">        <span class=\"keyword\">FROM</span> SC SCZ</span><br><span class=\"line\">        <span class=\"keyword\">WHERE</span> SCZ.S# <span class=\"operator\">=</span> SCX.S#</span><br><span class=\"line\">        <span class=\"keyword\">AND</span> SCZ.C# <span class=\"operator\">=</span> SCY.C#））；</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://s2.loli.net/2022/03/14/2srATEC8QOWUzM4.png\" alt=\"image-20220314232322210\"></p>\n<h2 id=\"4、数据更新\"><a href=\"#4、数据更新\" class=\"headerlink\" title=\"4、数据更新\"></a>4、数据更新</h2><h3 id=\"插入数据：INSERT-（元组级）\"><a href=\"#插入数据：INSERT-（元组级）\" class=\"headerlink\" title=\"插入数据：INSERT （元组级）\"></a>插入数据：INSERT （元组级）</h3><p>&#x3D;&#x3D;插入数据时，表定义中说明了NOT NULL的列不能取空值&#x3D;&#x3D; </p>\n<ul>\n<li><p>用<strong>子句</strong>向表中插入数据：将新元组插入表中</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> </span><br><span class=\"line\"><span class=\"keyword\">INTO</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> [(<span class=\"operator\">&lt;</span>列名<span class=\"number\">1</span><span class=\"operator\">&gt;</span>[, <span class=\"operator\">&lt;</span>列名<span class=\"number\">2</span><span class=\"operator\">&gt;</span>]...)] </span><br><span class=\"line\"><span class=\"keyword\">VALUES</span>(<span class=\"operator\">&lt;</span>常量<span class=\"number\">1</span><span class=\"operator\">&gt;</span>[, <span class=\"operator\">&lt;</span>常量<span class=\"number\">2</span><span class=\"operator\">&gt;</span>]...)  </span><br><span class=\"line\"> #未指定任何列名时，新插入的属性必须在每个属性列上均有值，仅指定部分列名时，新元组的其他列为空值</span><br><span class=\"line\"> </span><br><span class=\"line\">#eg 插入一条选课记录（‘<span class=\"number\">95020</span>’，‘C1’）</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> SC（S#, C#）<span class=\"keyword\">VALUES</span> （‘<span class=\"number\">95020</span>’, ‘C1’）; </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用<strong>子查询</strong>向表中插入数据</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> </span><br><span class=\"line\"><span class=\"keyword\">INTO</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> [(<span class=\"operator\">&lt;</span>列名<span class=\"number\">1</span><span class=\"operator\">&gt;</span>[, <span class=\"operator\">&lt;</span>列名<span class=\"number\">2</span><span class=\"operator\">&gt;</span>]...)] </span><br><span class=\"line\"><span class=\"keyword\">SELECT</span>语句;  #<span class=\"keyword\">SELECT</span>语句的返回列要和INFO里的对应</span><br><span class=\"line\"></span><br><span class=\"line\">#eg  对每个系，求学生的平均年龄，并把结果存入数据库</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> Deptage (SD, Avgage) <span class=\"keyword\">SELECT</span> SD, <span class=\"built_in\">AVG</span>(SA) <span class=\"keyword\">FROM</span> S <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> SD;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"修改数据：UPDATE\"><a href=\"#修改数据：UPDATE\" class=\"headerlink\" title=\"修改数据：UPDATE\"></a>修改数据：UPDATE</h3><p>一条UPDATE语句在某一时刻只能更新<strong>一张表</strong>，但可以更新一张表中的<strong>多列</strong>，也可以更新<strong>多行</strong>数据。</p>\n<ul>\n<li><p>用<strong>子句</strong>修改表中数据</p>\n<p>  修改表中满足WHERE条件的元组：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">UPDATE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">SET</span> <span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span> <span class=\"operator\">=</span> <span class=\"operator\">&lt;</span>表达式<span class=\"operator\">&gt;</span>[, <span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span> <span class=\"operator\">=</span> <span class=\"operator\">&lt;</span>表达式<span class=\"operator\">&gt;</span>] #用表达式的值取代相应的属性列值</span><br><span class=\"line\">[<span class=\"keyword\">WHERE</span> <span class=\"operator\">&lt;</span>条件表达式<span class=\"operator\">&gt;</span>]\t\t\t\t#省略<span class=\"keyword\">WHERE</span>语句则修改全部元组</span><br><span class=\"line\"></span><br><span class=\"line\">#eg 将学生<span class=\"number\">95001</span>的年龄改为<span class=\"number\">22</span>岁</span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> S <span class=\"keyword\">SET</span> SA <span class=\"operator\">=</span> <span class=\"number\">22</span> <span class=\"keyword\">WHERE</span> S# <span class=\"operator\">=</span> ‘<span class=\"number\">95001</span>’;</span><br><span class=\"line\"></span><br><span class=\"line\">#eg 将所有学生的年龄增加<span class=\"number\">1</span>岁</span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> S <span class=\"keyword\">SET</span> SA <span class=\"operator\">=</span> SA <span class=\"operator\">+</span> <span class=\"number\">1</span>；</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用<strong>子查询</strong>修改表中数据：子查询可以嵌套在WHERE语句的条件表达式中，用于构造修改的条件。相关子查询</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#将计算机科学系全体学生的成绩置零</span><br><span class=\"line\">#相关子查询，每次拿出SC中的一个元组，得到它的系，如果为CS则将成绩置<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> SC <span class=\"keyword\">SET</span> G <span class=\"operator\">=</span> <span class=\"number\">0</span> <span class=\"keyword\">WHERE</span> ‘CS’ <span class=\"operator\">=</span> ( <span class=\"keyword\">SELECT</span> SD <span class=\"keyword\">FROM</span> S <span class=\"keyword\">WHERE</span> S.S# <span class=\"operator\">=</span> SC.S#);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"删除数据：DELETE-（元组级）\"><a href=\"#删除数据：DELETE-（元组级）\" class=\"headerlink\" title=\"删除数据：DELETE （元组级）\"></a>删除数据：DELETE （元组级）</h3><p>DELETE用于<strong>从指定表中删除满足条件的元组</strong>，但不能用来从特定的列中删除数据。一条DELETE语句可以从表中删除一个或多个元组。</p>\n<ul>\n<li><p>用<strong>子句</strong>删除表中数据</p>\n<p>  删除表中满足WHERE条件的元组：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DELETE</span> </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span></span><br><span class=\"line\">[<span class=\"keyword\">WHERE</span> <span class=\"operator\">&lt;</span>条件表达式<span class=\"operator\">&gt;</span>]  </span><br><span class=\"line\"></span><br><span class=\"line\">#eg 删除学号为<span class=\"number\">95001</span>的学生记录</span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> S <span class=\"keyword\">WHERE</span> S# <span class=\"operator\">=</span> ‘<span class=\"number\">95001</span>’;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>省略WHERE语句则删除全部元组，但<strong>只删除了表中的数据</strong>，而不是表的定义，表的定义仍在DD中。<strong>删除表应当用DROP</strong></p>\n</blockquote>\n</li>\n<li><p><strong>子查询</strong>可以嵌套在WHERE语句的条件表达式中。相关子查询</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#删除计算机科学系全体学生的选课记录</span><br><span class=\"line\">#相关子查询</span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> SC <span class=\"keyword\">WHERE</span> ‘CS’ <span class=\"operator\">=</span> ( <span class=\"keyword\">SELECT</span> SD <span class=\"keyword\">FROM</span> S <span class=\"keyword\">WHERE</span> S.S# <span class=\"operator\">=</span> SC.S#);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"5、视图\"><a href=\"#5、视图\" class=\"headerlink\" title=\"5、视图\"></a>5、视图</h2><ul>\n<li><strong>概念：</strong><ul>\n<li>视图是&#x3D;&#x3D;动态结果&#x3D;&#x3D;：对一个或多个基本关系进行关系操作得到的动态结果，是从一个或几个基本表（或视图）导出的表。而且对基本表的操作将在视图可见的范围内映射到视图上。&#x3D;&#x3D;视图对应的内容是实时的、最新的内容&#x3D;&#x3D; </li>\n<li>视图是&#x3D;&#x3D;虚关系&#x3D;&#x3D;：它不包含真正存储的数据，其内容不占用存储空间。</li>\n<li><strong>视图的内容被定义成基于一个或多个基本关系的查询</strong></li>\n<li>视图是在&#x3D;&#x3D;外模式&#x3D;&#x3D;这一层，为用户所用</li>\n</ul>\n</li>\n<li><strong>操作：</strong>视图可以和基本表一样被查询、被删除。也可以在一个视图之上再定义新的视图，但&#x3D;&#x3D;对视图的更新（增、删、改）操作则有一定的限制&#x3D;&#x3D;。&#x3D;&#x3D;对视图的一切操作最终也要转换为对基本表的操作。&#x3D;&#x3D;</li>\n</ul>\n<h3 id=\"视图的创建及种类\"><a href=\"#视图的创建及种类\" class=\"headerlink\" title=\"视图的创建及种类\"></a>视图的创建及种类</h3><ul>\n<li><p>视图可以从一张表、几张表或其他视图中创建。 </p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span> <span class=\"operator\">&lt;</span>视图名<span class=\"operator\">&gt;</span> [(<span class=\"operator\">&lt;</span>列名<span class=\"number\">1</span><span class=\"operator\">&gt;</span>[,<span class=\"operator\">&lt;</span>列名<span class=\"number\">2</span><span class=\"operator\">&gt;</span>]...)]</span><br><span class=\"line\"><span class=\"keyword\">AS</span> </span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> 语句</span><br><span class=\"line\">[<span class=\"keyword\">WITH</span> <span class=\"keyword\">CHECK</span> OPTION]  </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>几点说明：</strong></p>\n<ul>\n<li><p>&#x3D;&#x3D;创建视图只是将视图的定义存入DD（数据字典），并不会真的执行SELECT语句，当对视图查询时，才根据视图的定义从基本表中将数据查出。&#x3D;&#x3D;</p>\n</li>\n<li><p><strong>省略视图名后的列名表时</strong>，默认该视图由子查询中SELECT子句目标列中的诸属性列组成</p>\n</li>\n<li><p>若使用&#x3D;&#x3D;WITH CHECK OPTION&#x3D;&#x3D;，则对视图进行UPDATE和INSERT操作时，保证更新行满足视图定义中的WHERE子句指定的条件，否则将被DBMS拒绝</p>\n</li>\n<li><p>当目标列不是单一的属性列(如集合函数)、存在同名列以及需启用更合适的名字时，需要指定组成视图的所有列名</p>\n</li>\n<li><p>可以在视图中增加虚拟列（派生列），即基本表中并不存在的列，如avg(grade)</p>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p><strong>视图的种类</strong></p>\n<ul>\n<li><p>水平视图：从单个基本表导出，并且只是<strong>去掉了</strong>基本表的<strong>某些行</strong></p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#创建一个视图，让分支机构B003的经理只看到他所在分支机构的职员的信息</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span> Manager3Staff</span><br><span class=\"line\"><span class=\"keyword\">AS</span> <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Staff</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> branchNo <span class=\"operator\">=</span> ‘B003’;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>垂直视图：从单个基本表导出，并且只是<strong>去掉了</strong>基本表的<strong>某些列</strong> </p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#建立关于分支机构B003职员信息但不包括工资信息的视图</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span> Staff3</span><br><span class=\"line\"><span class=\"keyword\">AS</span> <span class=\"keyword\">SELECT</span> staffNo, fName, lName, position, sex</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Manager3Staff;\t\t#视图可以从其他视图中创建</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>分组视图：用<strong>GROUP BY 子句</strong>定义的视图</p>\n</li>\n<li><p>连接视图：用<strong>连接运算</strong>得到的视图</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/22/CA4TkBawSpnsgIi.png\" alt=\"image-20220322094759185\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"删除视图\"><a href=\"#删除视图\" class=\"headerlink\" title=\"删除视图\"></a>删除视图</h3><ul>\n<li><pre><code class=\"sql\">  DROP VIEW &lt;视图名&gt;&#123;CASCADE|RESTRICT&#125; \n  <figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">-</span> 视图是虚表，**删除的是<span class=\"selector-tag\">DD</span>中的视图的定义**，**对产生视图数据的基本表中的数据没有影响**</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">-</span> 默认<span class=\"selector-tag\">RESTRICT</span> ，如果存在依赖被删除视图的其他对象，则不允许删除</span><br><span class=\"line\"></span><br><span class=\"line\">    如果指定<span class=\"selector-tag\">CASCADE</span>**，**删除视图可能产生级联删除</span><br><span class=\"line\"></span><br><span class=\"line\">### 查询视图</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">-</span> **步骤**</span><br><span class=\"line\"></span><br><span class=\"line\">```<span class=\"selector-tag\">mermaid</span></span><br><span class=\"line\"><span class=\"selector-tag\">graph</span> <span class=\"selector-tag\">LR</span></span><br><span class=\"line\">    <span class=\"selector-tag\">a</span><span class=\"selector-attr\">[有效性检查]</span><span class=\"selector-tag\">--</span>&gt;|有效|<span class=\"selector-tag\">b</span><span class=\"selector-attr\">[从DD中取出视图定义]</span></span><br><span class=\"line\">    <span class=\"selector-tag\">b</span><span class=\"selector-attr\">[从DD中取出视图定义]</span><span class=\"selector-tag\">--</span>&gt;|视图消解|<span class=\"selector-tag\">c</span><span class=\"selector-attr\">[对基本表的查询]</span></span><br><span class=\"line\">    <span class=\"selector-tag\">c</span><span class=\"selector-attr\">[对基本表的查询]</span><span class=\"selector-tag\">--</span>&gt;<span class=\"selector-tag\">d</span><span class=\"selector-attr\">[执行查询]</span></span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n<li><p>&#x3D;&#x3D;视图消解&#x3D;&#x3D;：将对视图的查询<strong>转换为对基本表的查询</strong>。执行对视图的查询时，从数据字典中取出视图的定义，将定义中的子查询和用户的查询结合起来，转换成等价的对基本表的查询的过程</p>\n<blockquote>\n<p>简单转换的过程：</p>\n<ul>\n<li><p>将SELECT列表中给出的列名转换为视图定义中对应的列名</p>\n</li>\n<li><p>FROM子句的视图名可以视图定义中的FROM列表代替</p>\n</li>\n<li><p>用AND将WHERE子句和视图定义中的WHERE子句合并</p>\n</li>\n<li><p>从视图定义中复制GROUP BY和HAVING子句</p>\n</li>\n<li><p>将 ORDER BY列名转换为视图定义中对应的列名</p>\n<p>  例子：</p>\n  <img data-src=\"https://s2.loli.net/2022/03/22/jVlQaEdt8FD5HcW.png\" alt=\"image-20220322221341006\" style=\"zoom:67%;\" />\n\n  <img data-src=\"https://s2.loli.net/2022/03/22/I5TvHtQE4RCPSlk.png\" alt=\"image-20220322221538427\" style=\"zoom: 67%;\" />\n\n  <img data-src=\"https://s2.loli.net/2022/03/22/HOEKyJ3X26nhGs9.png\" alt=\"image-20220322221558073\" style=\"zoom:67%;\" /></li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>复杂转换：涉及集合函数，考虑HAVING子句等等</p>\n<img data-src=\"https://s2.loli.net/2022/03/22/7WcqENUudBsYIMg.png\" alt=\"image-20220322222248720\" style=\"zoom:67%;\" />\n</blockquote>\n<ul>\n<li><p><strong>查询视图的约束：</strong></p>\n<ul>\n<li><p>如果视图中某个列是基于集合函数的，那么，该列只能出现在访问视图的SELECT和ORDER BY子句中，特别是，该列不能出现在WHERE子句中，并且不能作为集合函数的参数</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> StaffPropCnt <span class=\"keyword\">WHERE</span> cnt <span class=\"operator\">&gt;</span> <span class=\"number\">2</span>; <span class=\"operator\">/</span><span class=\"operator\">/</span>错误</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">COUNT</span> (cnt) <span class=\"keyword\">FROM</span> StaffPropCnt;  <span class=\"operator\">/</span><span class=\"operator\">/</span>错误</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>分组视图不能与基本表或视图进行连接操作</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"更新视图\"><a href=\"#更新视图\" class=\"headerlink\" title=\"更新视图\"></a>更新视图</h3><ul>\n<li>👉<strong>对视图的更新最终要转换为对表的更新</strong>，但有些更新不能有意义地转换成对基本表S的更新，如修改一个集合函数得到的列，因此&#x3D;&#x3D;对视图的更新操作有一定的限制&#x3D;&#x3D;</li>\n<li>在视图定义时加上WITH CHECK OPTION子句可以使得对视图进行更新操作时需满足视图定义中子查询的条件</li>\n<li>&#x3D;&#x3D;视图可更新的充要条件&#x3D;&#x3D;<ul>\n<li>没有指定DISTINCT,即重复元组未从查询结果中消除；</li>\n<li>定义查询的SELECT列表中的每个元素均为列名（而不是常量，表达式或聚合函数），且列名不能出现多于一次；</li>\n<li>FROM子句只能指定一个表，即视图必须有一个源表且用户有请求该表的权限。如果源表本身就是一个视图，那么视图必须满足这些条件。因此，排除了基于连接、并（UNION）、交（INTERSECT）或差（EXCEPT）操作的所有视图；</li>\n<li>WHERE子句不能包括任何引用了FROM子句中的表的嵌套SELECT操作，即不能出现相关子查询</li>\n<li>定义查询不能有GROUP BY或HAVING子句。</li>\n<li>添加到视图中的每一行都不能违反基本表的完整性约束</li>\n</ul>\n</li>\n<li>分类<ul>\n<li>可更新视图：满足上面的六个条件，即对视图的更新能唯一的有意义的转换为对基本表的更新</li>\n<li>（理论上）不可更新的视图</li>\n<li>不允许更新的视图&#96;(<em>&gt;﹏&lt;</em>)′</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"视图的优缺点\"><a href=\"#视图的优缺点\" class=\"headerlink\" title=\"视图的优缺点\"></a>视图的优缺点</h3><ul>\n<li><p><strong>优点：</strong>①提高逻辑独立性、②实时性、③提高安全性、④简化结构及复杂操作、⑤多角度地、更灵活地共享、⑥数据完整性</p>\n</li>\n<li><p><strong>缺点：</strong>①更新的局限性、②结构的局限性、③性能开销（查询时需要转化）</p>\n<blockquote>\n<p><strong>视图维护：</strong>更新基本表引起视图更新的过程称为视图维护</p>\n<p><strong>视图物化：</strong>把第一次访问视图的结果存储为数据库的临时表；这样，基于物化视图的查询比每次重新计算视图要快的多。但会带来视图维护的代价</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"x3D-x3D-6、sql的完整性约束-x3D-x3D\"><a href=\"#x3D-x3D-6、sql的完整性约束-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;6、sql的完整性约束&#x3D;&#x3D;\"></a>&#x3D;&#x3D;6、sql的完整性约束&#x3D;&#x3D;</h2><h3 id=\"基本概念：\"><a href=\"#基本概念：\" class=\"headerlink\" title=\"基本概念：\"></a><strong>基本概念：</strong></h3><ul>\n<li><strong>完整性：</strong>指数据库中数据的正确性、有效性和相容性（表示同一对象的两个或多个数据必须一致）</li>\n<li><strong>完整性约束</strong>：数据库中数据应满足的条件</li>\n</ul>\n<h3 id=\"非过程性完整性约束\"><a href=\"#非过程性完整性约束\" class=\"headerlink\" title=\"非过程性完整性约束\"></a>非过程性完整性约束</h3><ul>\n<li><p><strong>数据取值要求：</strong>非空约束（NOT NULL）、唯一性约束（UNIQUE）、CHECK约束（CHECK(searchcondition)）</p>\n<blockquote>\n<p>CHECK子句只对定义它的关系起约束作用，对其他关系没有任何作用</p>\n</blockquote>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sex <span class=\"type\">CHAR</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">CHECK</span> (sex <span class=\"keyword\">IN</span> (‘M’, ‘F’))</span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#eg 增加学生姓名必须取唯一值的约束</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> student</span><br><span class=\"line\"><span class=\"keyword\">ADD</span> <span class=\"keyword\">CONSTRAINT</span> c1_name <span class=\"keyword\">UNIQUE</span> (SN)  #c1_name是约束的名字</span><br><span class=\"line\"></span><br><span class=\"line\">#eg 删除学生姓名必须取唯一值的约束</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> S </span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">UNIQUE</span>（SN）;  </span><br><span class=\"line\">#或者 <span class=\"keyword\">DROP</span> <span class=\"keyword\">CONSTRAINT</span> c1_name</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>域约束：</strong>通过自定义域来实现</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> DOMAIN DomainName [<span class=\"keyword\">AS</span>] dataType</span><br><span class=\"line\">[<span class=\"keyword\">DEFAULT</span> defaultOption]</span><br><span class=\"line\">[<span class=\"keyword\">CHECK</span> (searchCondition)]  #searchCondition 可以用<span class=\"keyword\">SELECT</span>语句表达</span><br><span class=\"line\"></span><br><span class=\"line\">#eg</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> DOMAIN SexType <span class=\"keyword\">AS</span> <span class=\"type\">CHAR</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">DEFAULT</span> ‘M’</span><br><span class=\"line\"><span class=\"keyword\">CHECK</span> (<span class=\"keyword\">VALUE</span> <span class=\"keyword\">IN</span> (‘M’, ‘F’));</span><br><span class=\"line\"></span><br><span class=\"line\">#使用域来定义列</span><br><span class=\"line\">sex SexType <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>实体完整性：</strong>主键属性不空。DBMS自动支持实体完整性（拒绝破坏实体完整性的操作（不合法的插入和更新））</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">PRIMARY</span> KEY(<span class=\"operator\">&lt;</span>列名表<span class=\"operator\">&gt;</span>)  #主键定义   </span><br><span class=\"line\"><span class=\"keyword\">UNIQUE</span>(<span class=\"operator\">&lt;</span>列名表<span class=\"operator\">&gt;</span>)   #候选键定义</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>参照完整性</strong>：DBMS自动支持参照完整性（拒绝破坏参照完整性的操作，如不合法的对子表（参照表）的插入和更新操作，不合法的对父表（被参照表）的删除和更新操作）。注意SQL语句的顺序。</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FOREIGN</span> KEY （<span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span>[，<span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span>] …）<span class=\"keyword\">REFERENCES</span> <span class=\"operator\">&lt;</span>被参照表名<span class=\"operator\">&gt;</span> </span><br><span class=\"line\">[<span class=\"keyword\">ON</span> <span class=\"keyword\">DELETE</span> [CASCADE <span class=\"operator\">|</span> <span class=\"keyword\">SET</span> <span class=\"keyword\">DEFAULT</span> <span class=\"operator\">|</span> <span class=\"keyword\">SET</span> <span class=\"keyword\">NULL</span> <span class=\"operator\">|</span> <span class=\"keyword\">NO</span> ACTION] ]</span><br><span class=\"line\">[<span class=\"keyword\">ON</span> <span class=\"keyword\">UPDATE</span> [CASCADE <span class=\"operator\">|</span> <span class=\"keyword\">SET</span> <span class=\"keyword\">DEFAULT</span> <span class=\"operator\">|</span> <span class=\"keyword\">SET</span> <span class=\"keyword\">NULL</span> <span class=\"operator\">|</span><span class=\"keyword\">NO</span> ACTION] ]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>参照完整性被破坏时可选择的策略：</p>\n<img data-src=\"https://s2.loli.net/2022/03/22/N9xBsZtjn5iSdO4.png\" alt=\"image-20220322230658737\" style=\"zoom: 80%;\" />\n</blockquote>\n</li>\n<li><p><strong>一般约束（企业约束）</strong></p>\n<p>  在创建和修改表时使用CHECK&#x2F;UNIQUE，还可以&#x3D;&#x3D;CREATE ASSERTION（设置断言）&#x3D;&#x3D;</p>\n<p>  当完整性约束涉及多个关系或者与聚合操作有关，则可以采用SQL的断言机制来完成</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> ASSERTION AssertionName</span><br><span class=\"line\"><span class=\"keyword\">CHECK</span> (searchCondition)</span><br><span class=\"line\"></span><br><span class=\"line\">#限制staff不能管理太多的房产</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> ASSERTION StaffNotHandlingTooMuch</span><br><span class=\"line\"><span class=\"keyword\">CHECK</span> (<span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> </span><br><span class=\"line\">           (<span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span></span><br><span class=\"line\">            <span class=\"keyword\">FROM</span> PropertyForRent</span><br><span class=\"line\">            <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> staffNo</span><br><span class=\"line\">            <span class=\"keyword\">HAVING</span> <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"operator\">&gt;</span> <span class=\"number\">100</span>));</span><br></pre></td></tr></table></figure></li>\n</ul>\n<img data-src=\"https://s2.loli.net/2022/03/22/Ihst97CnifNJAq1.png\" alt=\"image-20220322231603163\" style=\"zoom: 67%;\" />\n\n\n\n<h3 id=\"过程性完整性约束：触发器\"><a href=\"#过程性完整性约束：触发器\" class=\"headerlink\" title=\"过程性完整性约束：触发器\"></a>过程性完整性约束：触发器</h3><ul>\n<li><p>概念：一类靠事件驱动的特殊过程，一旦由某个用户定义，任何触发该触发器的事件发生时，均由<strong>服务器</strong>自动激活相应的触发器。</p>\n</li>\n<li><p>三要素：触发事件（包括Insert、delete、update等）、触发条件、触发动作</p>\n</li>\n<li><p>作用：示警（给出提示信息）；满足特定条件时自动执行某项任务以消除负面影响</p>\n</li>\n<li><p>定义(Full SQL-99的Create Trigger语法)</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TRIGGER</span> trigger_name </span><br><span class=\"line\">&#123;BEFORE <span class=\"operator\">|</span> AFTER&#125; &#123;<span class=\"keyword\">INSERT</span> <span class=\"operator\">|</span> <span class=\"keyword\">DELETE</span> <span class=\"operator\">|</span> <span class=\"keyword\">UPDATE</span> [<span class=\"keyword\">OF</span> columnname&#123;,columnname…&#125;]&#125; <span class=\"keyword\">ON</span> tablename #触发事件[<span class=\"keyword\">REFERENCING</span> corr_name_def &#123;, corr_name_def…&#125;]  #旧值或新值名表</span><br><span class=\"line\">[<span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> <span class=\"type\">ROW</span> <span class=\"operator\">|</span> <span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> STATEMENT]  </span><br><span class=\"line\">[<span class=\"keyword\">WHEN</span> (search_condition)]   #触发条件</span><br><span class=\"line\">&#123;\t</span><br><span class=\"line\">\tstatement <span class=\"operator\">|</span>          #触发动作，为单个或一系列<span class=\"keyword\">SQL</span>语句</span><br><span class=\"line\">\t<span class=\"keyword\">BEGIN</span> <span class=\"keyword\">ATOMIC</span> statement; </span><br><span class=\"line\">\t&#123;statement; …&#125; </span><br><span class=\"line\">\t<span class=\"keyword\">END</span></span><br><span class=\"line\">&#125; ;</span><br><span class=\"line\"></span><br><span class=\"line\">#eg 设计一个用于s_c的触发器，该触发器规定，如果需要修改成绩，则需要保证修改之后的成绩不得低于之前的成绩，否则拒绝修改</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TRIGGER</span> trig_grade</span><br><span class=\"line\">AFTER <span class=\"keyword\">UPDATE</span> <span class=\"keyword\">OF</span> grade <span class=\"keyword\">ON</span> s_c</span><br><span class=\"line\"><span class=\"keyword\">REFERENCING</span> <span class=\"keyword\">OLD</span> <span class=\"keyword\">AS</span> oldg, <span class=\"keyword\">NEW</span> <span class=\"keyword\">AS</span> newg</span><br><span class=\"line\"><span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> <span class=\"type\">ROW</span></span><br><span class=\"line\"><span class=\"keyword\">WHEN</span> (oldg.grade <span class=\"operator\">&gt;</span> newg.grade)</span><br><span class=\"line\">\t<span class=\"keyword\">UPDATE</span> s_c</span><br><span class=\"line\">\t<span class=\"keyword\">SET</span> GRADE <span class=\"operator\">=</span> oldg.grade</span><br><span class=\"line\">\t<span class=\"keyword\">WHERE</span> cno <span class=\"operator\">=</span> oldg.cno <span class=\"keyword\">AND</span> sno <span class=\"operator\">=</span> oldg.sno;  #根据主键找到该元组</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>几点说明：</p>\n<ul>\n<li><p>触发器名是一个标识符，在其所属的模式里是唯一的</p>\n</li>\n<li><p>ON&lt;表名&gt;子句里的表必须和触发器位于同一个模式中</p>\n</li>\n<li><p>定义行的相关名字的corr_name_def 如下:</p>\n<p>  {OLD [ROW] [AS] old_row_corr_name</p>\n<p>  | NEW [ROW] [AS] new_row_corr_name</p>\n<p>  | OLD TABLE [AS] old_table_corr_name</p>\n<p>  | NEW TABLE [AS] new_table_corr_name}</p>\n</li>\n<li><p>如果在触发器定义中省略WHEN子句，即省略触发条件，则触发动作在触发器被激活后立即发生</p>\n</li>\n<li><p>触发动作可以是单个或一系列SQL语句，若为一系列，需要使用BEGIN ATOMIC…END子句，语句之间用分号隔开</p>\n</li>\n<li><p>注意触发器级联问题，防止一个触发动作引发一系列连锁反应（一个触发器的动作引发另一个触发器的动作）以致失控</p>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"两种完整性约束的对比\"><a href=\"#两种完整性约束的对比\" class=\"headerlink\" title=\"两种完整性约束的对比\"></a>两种完整性约束的对比</h3><ul>\n<li><p>非过程性完整性约束：种类和能力有限但易于理解；直接为系统所知；难以给出约束不满足时的相应动作</p>\n</li>\n<li><p>过程性完整性约束：给出了约束不满足时的相应动作；保证事物的一致性</p>\n</li>\n</ul>\n","site":{"data":{"post-body-end":"<div>\n    \n</div>\n","styles":"body {\n  background: url(\"/images/background.png\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 100% 100%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.8);\n}\n.popup {\n  opacity: 0.8;\n}\n.post-block {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.comments {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.post {\n  margin-top: 60px;\n  padding: 20px;\n  margin-bottom: 60px;\n  -webkit-box-shadow: 0 0 0px #788072;\n  -moz-box-shadow: 0 0 0px rgba(202,203,204,0.5);\n}\n.post-button .btn {\n  color: #555 !important;\n  background-color: #fff;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  border: none !important;\n  transition-property: unset;\n  padding: 0px 15px;\n}\n.post-button .btn:hover {\n  color: #fff !important;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  background-image: linear-gradient(90deg, #a166ab 0%, #ef4e7b 25%, #f37055 50%, #ef4e7b 75%, #a166ab 100%);\n}\n","variables":""}},"length":15321,"excerpt":"<h1 id=\"三、-sql概述与sql定义语言\"><a href=\"#三、-sql概述与sql定义语言\" class=\"headerlink\" title=\"三、 sql概述与sql定义语言\"></a>三、 sql概述与sql定义语言</h1><h2 id=\"1、基本概念\"><a href=\"#1、基本概念\" class=\"headerlink\" title=\"1、基本概念\"></a>1、基本概念</h2><p><strong>sql的特点：</strong></p>\n<ul>\n<li>综合统一：集数据定义、数据操纵、数据控制语言的功能为一体</li>\n<li>高度非过程化</li>\n<li>面向集合的操作方式</li>\n<li>两种使用方式，统一的语法结构</li>\n<li>简洁易学、通用、功能强</li>\n</ul>","more":"<p><strong>sql语言的分类</strong>：数据定义语言DDL、数据操作语言DML、数据查询语言DQL、数据控制语言DCL</p>\n<p><strong>sql数据库的三级结构：</strong></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/17/3IjuTbYwHFQzdAp.png\" alt=\"image-20220517103508209\"></p>\n<p>子模式对应于视图和部分查询表，模式对应于基本表，内模式对应于存储文件</p>\n<p><strong>sql语句的分类</strong>：模式定义语句、数据操纵语句（增删改查）、事务与控制语句、会话及诊断语句</p>\n<p><strong>sql的数据类型：</strong></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/17/fhJG9wazTZ1ydL5.png\" alt=\"image-20220517104732266\"></p>\n<blockquote>\n<p>在实验中发现，如果要显示001这种类型的数字，可以设置为<em>sno int(3) zerofill</em></p>\n</blockquote>\n<h2 id=\"2、sql的数据定义\"><a href=\"#2、sql的数据定义\" class=\"headerlink\" title=\"2、sql的数据定义\"></a>2、sql的数据定义</h2><p><img data-src=\"https://s2.loli.net/2022/05/17/5Qv3qyIM9TeJrXG.png\" alt=\"image-20220517110612939\"></p>\n<blockquote>\n<p>👉总结：</p>\n<p>创建：create  对象类型 对象名</p>\n<p>删除：drop 对象类型 对象名   [RESTRICT | CASCADE]</p>\n<p>RESTRICT：如果有其它对象依赖于该对象，则拒绝进行DROP操作</p>\n<p>CASCADE：级联删除该对象及所有依赖于该对象的对象</p>\n</blockquote>\n<h3 id=\"模式\"><a href=\"#模式\" class=\"headerlink\" title=\"模式\"></a>模式</h3><ul>\n<li><p>模式的定义：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> SCHEMA <span class=\"operator\">&lt;</span>模式名<span class=\"operator\">&gt;</span> <span class=\"keyword\">AUTHORIZATION</span> <span class=\"operator\">&lt;</span>用户名<span class=\"operator\">&gt;</span>  #若不指定<span class=\"operator\">&lt;</span>模式名<span class=\"operator\">&gt;</span>，则隐含为<span class=\"operator\">&lt;</span>用户名<span class=\"operator\">&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">#eg</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> SCHEMA library_db <span class=\"keyword\">AUTHORIZATION</span> Guoqing;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>模式的删除</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> SCHEMA <span class=\"operator\">&lt;</span>模式名<span class=\"operator\">&gt;</span> [RESTRICT <span class=\"operator\">|</span> CASCADE];</span><br><span class=\"line\">#RESTRICT – 如果模式内没有对象，则删除该模式</span><br><span class=\"line\">#CASCADE – 删除模式中所有对象的内容和定义</span><br><span class=\"line\"></span><br><span class=\"line\">#eg.</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> SCHEMA library RESTRICT;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"域\"><a href=\"#域\" class=\"headerlink\" title=\"域\"></a>域</h3><ul>\n<li><p>定义域：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> DOMAIN <span class=\"operator\">&lt;</span>域名<span class=\"operator\">&gt;</span> [<span class=\"keyword\">AS</span>] <span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span> [<span class=\"keyword\">DEFAULT</span> <span class=\"operator\">&lt;</span>默认值<span class=\"operator\">&gt;</span>] [<span class=\"operator\">&lt;</span>域约束<span class=\"operator\">&gt;</span>] </span><br><span class=\"line\"></span><br><span class=\"line\">#eg</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> DOMAIN SexType <span class=\"keyword\">AS</span> <span class=\"type\">CHAR</span>(<span class=\"number\">2</span>) <span class=\"keyword\">DEFAULT</span> ‘M’ <span class=\"keyword\">CHECK</span> (<span class=\"keyword\">VALUE</span> <span class=\"keyword\">IN</span> (‘M’, ‘F’));</span><br><span class=\"line\">sex SexType <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>;  #使用域</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除域：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> DOMAIN <span class=\"operator\">&lt;</span>域名<span class=\"operator\">&gt;</span> [RESTRICT <span class=\"operator\">|</span> CASCADE];</span><br><span class=\"line\">#如果指定RESTRICT，且域用于现有的表中，则删除失败</span><br><span class=\"line\">#如果指定CASCADE，基于域的任一表中的列都会自动地改变为基本域类型，该域的<span class=\"keyword\">CHECK</span>约束或默认值都会被列的约束或默认值代替</span><br><span class=\"line\"></span><br><span class=\"line\">#eg</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> DOMAIN SexType；</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"表\"><a href=\"#表\" class=\"headerlink\" title=\"表\"></a>表</h3><ul>\n<li><p>表的建立</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> [模式名.] <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> </span><br><span class=\"line\">(   </span><br><span class=\"line\">    <span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span><span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span>[<span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>│<span class=\"keyword\">NULL</span>][<span class=\"keyword\">UNIQUE</span>]</span><br><span class=\"line\">    [, <span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span><span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span>[<span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>│<span class=\"keyword\">NULL</span>][<span class=\"keyword\">UNIQUE</span>]]…</span><br><span class=\"line\">    [, <span class=\"keyword\">PRIMARY</span> KEY （<span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span>[，<span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span>] …）]    #主键,主键属性列用括号括起来</span><br><span class=\"line\">    [, <span class=\"keyword\">FOREIGN</span> KEY （<span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span>[，<span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span>] …）<span class=\"keyword\">REFERENCES</span>  <span class=\"operator\">&lt;</span>被参照表名<span class=\"operator\">&gt;</span>]#外键</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">#eg</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> PropertyForRent </span><br><span class=\"line\">(</span><br><span class=\"line\">    propertyNo PNumber <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,      #数据类型为用户定义的域</span><br><span class=\"line\">    rooms PRooms <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"number\">4</span>, </span><br><span class=\"line\">    rent PRent <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"number\">600</span>, </span><br><span class=\"line\">    ownerNo OwnerNumber <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>, </span><br><span class=\"line\">    staffNo StaffNumber <span class=\"keyword\">Constraint</span> StaffNotHandlingTooMuch ….</span><br><span class=\"line\">    branchNo BranchNumber <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">    <span class=\"keyword\">PRIMARY</span> KEY (propertyNo),   #主键属性和外键属性要用括号括起来</span><br><span class=\"line\">    <span class=\"keyword\">FOREIGN</span> KEY (staffNo) <span class=\"keyword\">REFERENCES</span> Staff </span><br><span class=\"line\">    <span class=\"keyword\">ON</span> <span class=\"keyword\">DELETE</span> <span class=\"keyword\">SET</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">ON</span> <span class=\"keyword\">UPDATE</span> CASCADE …. #可采取的行为</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>表的删除</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> [CASCADE <span class=\"operator\">|</span> RESTRICT]</span><br><span class=\"line\">#既删除DD中表的结构定义，也删除DB中的数据文件</span><br><span class=\"line\">#RESTRICT：如果有其它对象依赖于该表，则拒绝进行<span class=\"keyword\">DROP</span>操作</span><br><span class=\"line\">#CASCADE：级联删除表及所有依赖于该表的对象</span><br><span class=\"line\"></span><br><span class=\"line\">#eg</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> PropertyForRent;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>&#x3D;&#x3D;修改表&#x3D;&#x3D;</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALETR <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span></span><br><span class=\"line\">[<span class=\"keyword\">ADD</span> <span class=\"operator\">&lt;</span>新列名<span class=\"operator\">&gt;</span> <span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span> &#123;<span class=\"keyword\">NULL</span>&#125;]     #加新列，新增加的列默认为空值</span><br><span class=\"line\">[<span class=\"keyword\">ADD</span> <span class=\"operator\">&lt;</span>完整性约束条件<span class=\"operator\">&gt;</span>]</span><br><span class=\"line\">[<span class=\"keyword\">DROP</span> <span class=\"operator\">&lt;</span>完整性约束条件<span class=\"operator\">&gt;</span>]   #删除列的完整性约束条件，没有提供删除列的子句</span><br><span class=\"line\">[MODIFY <span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span> <span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span>]   #修改列，可能破坏已有数据</span><br><span class=\"line\"></span><br><span class=\"line\">#eg 增加学生姓名必须取唯一值的约束</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> student</span><br><span class=\"line\"><span class=\"keyword\">ADD</span> <span class=\"keyword\">CONSTRAINT</span> c1_name <span class=\"keyword\">UNIQUE</span> (SN)  #c1_name是约束的名字</span><br><span class=\"line\"></span><br><span class=\"line\">#eg 删除学生姓名必须取唯一值的约束</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> S </span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">UNIQUE</span>（SN）;  </span><br><span class=\"line\">#或者 <span class=\"keyword\">DROP</span> <span class=\"keyword\">CONSTRAINT</span> c1_name</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h3><ul>\n<li><p>建立索引</p>\n<p>  一条语句建立一个索引</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#<span class=\"keyword\">UNIQUE</span>表示每个索引值只能对应唯一的数据记录，CLUSTER表示聚簇索引，即索引项的顺序与表中记录的物理顺序一致的有序索引，一个基本表最多只能建立一个聚簇索引</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> [<span class=\"keyword\">UNIQUE</span>] [CLUSTER] INDEX <span class=\"operator\">&lt;</span>索引名<span class=\"operator\">&gt;</span>  </span><br><span class=\"line\"><span class=\"keyword\">ON</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> (<span class=\"operator\">&lt;</span>列名<span class=\"number\">1</span><span class=\"operator\">&gt;</span>[<span class=\"keyword\">ASC</span><span class=\"operator\">|</span><span class=\"keyword\">DESC</span>], <span class=\"operator\">&lt;</span>列名<span class=\"number\">2</span><span class=\"operator\">&gt;</span>[<span class=\"keyword\">ASC</span><span class=\"operator\">|</span><span class=\"keyword\">DESC</span>], ...);</span><br><span class=\"line\">#<span class=\"keyword\">ASC</span>表示升序，<span class=\"keyword\">DESC</span>表示降序。默认为升序。</span><br><span class=\"line\"></span><br><span class=\"line\">#eg:在SC中按sno升序cno降序建唯一索引</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">UNIQUE</span> INDEX SC_index <span class=\"keyword\">ON</span> SC( sno <span class=\"keyword\">ASC</span>，cno <span class=\"keyword\">DESC</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除索引</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> INDEX [<span class=\"keyword\">ON</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span>]<span class=\"operator\">&lt;</span>索引名<span class=\"operator\">&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">#eg</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> INDEX SC_index;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"x3D-x3D-3、⚠⚠⚠sql数据查询-x3D-x3D\"><a href=\"#x3D-x3D-3、⚠⚠⚠sql数据查询-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;3、⚠⚠⚠sql数据查询&#x3D;&#x3D;\"></a>&#x3D;&#x3D;3、⚠⚠⚠sql数据查询&#x3D;&#x3D;</h2><h3 id=\"一般格式\"><a href=\"#一般格式\" class=\"headerlink\" title=\"一般格式\"></a>一般格式</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> [<span class=\"keyword\">ALL</span><span class=\"operator\">|</span><span class=\"keyword\">DISTINCT</span>] <span class=\"operator\">&lt;</span>目标列表达式<span class=\"operator\">&gt;</span>[,<span class=\"operator\">&lt;</span>目标列表达式<span class=\"operator\">&gt;</span>]...      #<span class=\"keyword\">ALL</span>为默认设置，即不取消重复值，<span class=\"keyword\">DISTINCT</span>表示取消重复值</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> <span class=\"operator\">&lt;</span>表名或视图名<span class=\"operator\">&gt;</span>[,表名或视图名]...     #<span class=\"keyword\">SELECT</span>子句与<span class=\"keyword\">FROM</span>子句是必选子句</span><br><span class=\"line\">[<span class=\"keyword\">WHERE</span> <span class=\"operator\">&lt;</span>条件表达式<span class=\"operator\">&gt;</span>]</span><br><span class=\"line\">[<span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> <span class=\"operator\">&lt;</span>列名<span class=\"number\">1</span><span class=\"operator\">&gt;</span>[<span class=\"keyword\">HAVING</span><span class=\"operator\">&lt;</span>条件表达式<span class=\"operator\">&gt;</span>]]</span><br><span class=\"line\">[<span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> <span class=\"operator\">&lt;</span>列名<span class=\"number\">2</span><span class=\"operator\">&gt;</span>[<span class=\"keyword\">ASC</span><span class=\"operator\">|</span><span class=\"keyword\">DESC</span>]];     #其中，列名<span class=\"number\">2</span>也可以用<span class=\"keyword\">SELECT</span>子句中相应列的序号</span><br></pre></td></tr></table></figure>\n\n<p><strong>含义：</strong></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/17/GUvQItYzXHpeOmW.png\" alt=\"image-20220517114258444\"></p>\n<p><strong>概念性的执行步骤：</strong></p>\n<ul>\n<li>计算出现在FROM后面的表之间的笛卡儿积</li>\n<li>实施由WHERE后面的条件规定的选择操作</li>\n<li>根据GROUP BY后面的属性的值进行分组</li>\n<li>对于分组出来的每一个小组，实施由HAVING后面的条件规定的选择操作，保留满足条件的小组</li>\n<li>将出现在SELECT后面的属性投影成结果表</li>\n<li>将结果表中的元组根据ORDER BY后面的属性及指定的顺序（升序或降序）输出</li>\n</ul>\n<h3 id=\"SELECT子句：\"><a href=\"#SELECT子句：\" class=\"headerlink\" title=\"SELECT子句：\"></a>SELECT子句：</h3><p><em>SELECT [ALL|DISTINCT] &lt;目标列表达式&gt;[,&lt;目标列表达式&gt;]…</em></p>\n<ul>\n<li><p>*代表指定表的所有列，一般用在exists和not exists里面</p>\n</li>\n<li><p>ALL为默认设置 ，即不取消重复值，DISTINCT表示取消重复值</p>\n</li>\n<li><p>&#x3D;&#x3D;聚集函数（只能用于SELECT子句和HAVING子句中 ）&#x3D;&#x3D;</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/05/YGrdqMfam4Qhb8P.png\" alt=\"image-20220305102158697\"></p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/07/xj6qmHkOhKrcvag.png\" alt=\"image-20220307231705848\"></p>\n<blockquote>\n<p>当这些函数遇到空值时，除COUNT(*)外，都跳过空值而只处理非空值。</p>\n</blockquote>\n<p>  例子：</p>\n  <img data-src=\"https://s2.loli.net/2022/05/17/5Yvk4aWe1JPLMOw.png\" alt=\"image-20220517115836637\" style=\"zoom: 67%;\" />\n</li>\n<li><p>&#x3D;&#x3D;算术表达式：&#x3D;&#x3D;  </p>\n<p>  +、-、*、&#x2F;、%、INTEGER（取整）、SQRT（求平方根）、三角函数（SIN、COS）、字符串函数SUBSTRING（取子串）、UPPER（大写字符）、MONTHS_BETWEEN（月份差）</p>\n<hr>\n</li>\n<li><p>用AS子句为列命名 </p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> staffNo, fName, lName, salary<span class=\"operator\">/</span><span class=\"number\">12</span> <span class=\"keyword\">AS</span> monthlySalary <span class=\"keyword\">FROM</span> Staff;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"FROM子句：\"><a href=\"#FROM子句：\" class=\"headerlink\" title=\"FROM子句：\"></a>FROM子句：</h3><p>可以给表指定别名：多个表放在FROM子句中，代表多表进行笛卡尔积</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/17/4bpXBmUsKrI3CdH.png\" alt=\"image-20220517120134854\"></p>\n<h3 id=\"WHERE子句：\"><a href=\"#WHERE子句：\" class=\"headerlink\" title=\"WHERE子句：\"></a>WHERE子句：</h3><p>WHERE子句的查询条件可以用多种形式表示： </p>\n<img data-src=\"https://s2.loli.net/2022/05/18/X4nGHxUtsuZCcio.png\" style=\"zoom:67%;\" />\n\n<ul>\n<li><p>比较运算作为查找条件 (&gt;,  &lt;,  &gt;&#x3D;,  &lt;&#x3D;,  &#x3D;,  &lt;&gt;(不等于))</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WHERE</span> salary <span class=\"operator\">&gt;</span> <span class=\"number\">10000</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>复合比较运算作为查找条件 (AND, OR, NOT ) </p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WHERE</span> city <span class=\"operator\">=</span> ‘London’ <span class=\"keyword\">OR</span> city <span class=\"operator\">=</span> ‘Glasgow’</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>范围作为查找条件（BETWEEN &#x2F; NOT BETWEEN）。&#x3D;&#x3D;BETWEEN包含端点&#x3D;&#x3D;</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WHERE</span> grade <span class=\"keyword\">BETWEEN</span> <span class=\"number\">85</span> <span class=\"keyword\">AND</span> <span class=\"number\">95</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>集合成员测试作为查找条件（IN &#x2F; NOT IN）</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WHERE</span> place <span class=\"keyword\">IN</span>(<span class=\"string\">&#x27;湖南&#x27;</span>,<span class=\"string\">&#x27;湖北&#x27;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>模式匹配作为查找条件（LIKE &#x2F; NOT LIKE）</p>\n<p>  SQL中的两种特殊的模式匹配符号：</p>\n<ul>\n<li><p>%: 百分号表示零或多个字符序列（通配符）</p>\n</li>\n<li><p>_: 下划线表示任意单个字符</p>\n  <img data-src=\"https://s2.loli.net/2022/03/07/Z52TOHjLlb6tivJ.png\" alt=\"image-20220307230435181\" style=\"zoom:67%;\" /></li>\n</ul>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WHERE</span> sname <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;刘%&#x27;</span> <span class=\"keyword\">OR</span> SNAME <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;__晓%&#x27;</span>   #一个汉字占两个字符位</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>空查找条件（IS NULL  &#x2F;  IS NOT NULL）</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WHERE</span> propertyNo <span class=\"operator\">=</span> ‘PG4’ <span class=\"keyword\">AND</span> comment <span class=\"keyword\">IS</span> <span class=\"keyword\">NULL</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"GROUP-BY子句-：\"><a href=\"#GROUP-BY子句-：\" class=\"headerlink\" title=\"GROUP BY子句 ：\"></a>GROUP BY子句 ：</h3><p>将查询结果按指定列名的取值分组，并选取满足HAVING中的内部函数表达式所指定条件的组。目的：细化聚集函数的作用对象。 &#x3D;&#x3D;HAVING子句是包含在GROUP BY子句中的&#x3D;&#x3D; </p>\n<blockquote>\n<p>WHERE子句是在表中选择满足条件的元组，而HAVING子句是在各组中选择满足条件的小组</p>\n</blockquote>\n<blockquote>\n<p>ISO标准规定，应用GROUP BY时，两个空值被认为是相等的</p>\n</blockquote>\n<blockquote>\n<p>&#x3D;&#x3D;当使用GROUP BY时， SELECT列表中的项必须每组都有单一值(因为最终一个组会变成一个元组)&#x3D;&#x3D; </p>\n</blockquote>\n<blockquote>\n<p>当使用GROUP BY时， SELECT子句中除集合函数外，其它所有列必须在GROUP BY子句中出现；反之，GROUP BY子句出现的列不一定出现在SELECT列表中；</p>\n<p>HAVING子句使用的列名必须出现在GROUP BY 子句列表中，或者包括在集合函数中。实践中，HAVING子句的条件表达式至少包括一个集合函数</p>\n</blockquote>\n<h3 id=\"ORDER-BY子句\"><a href=\"#ORDER-BY子句\" class=\"headerlink\" title=\"ORDER BY子句\"></a>ORDER BY子句</h3><p>order by子句必须放最后用于对最终的查询结果进行排序，<u>不能用在子查询中</u></p>\n<p>该子句后可以跟多个排序的变量名，第一个变量为主序，下面依次类推。&#x3D;&#x3D;ASC（升序）为默认设置&#x3D;&#x3D; 。它也可以用SELECT子句中相应列的序号。</p>\n<img data-src=\"https://s2.loli.net/2022/05/17/5Yvk4aWe1JPLMOw.png\" alt=\"image-20220517115836637\" style=\"zoom: 67%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/05/17/GeHg8L1yBXIUpJt.png\" alt=\"image-20220517120939452\" style=\"zoom: 80%;\" />\n\n<h3 id=\"简单查询\"><a href=\"#简单查询\" class=\"headerlink\" title=\"简单查询\"></a>简单查询</h3><p>单表查询</p>\n<ul>\n<li>查询指定的列：通过在SELECT子句的&lt;目标列表达式&gt;中指定要查询的列来实现。可以使用*、聚集函数、算术表达式等</li>\n<li>查询表中行：通过WHERE子句的查询条件来实现</li>\n</ul>\n<h3 id=\"复杂查询\"><a href=\"#复杂查询\" class=\"headerlink\" title=\"复杂查询\"></a>复杂查询</h3><h4 id=\"连接查询：\"><a href=\"#连接查询：\" class=\"headerlink\" title=\"连接查询：\"></a>连接查询：</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> student.sno, sname, cno, grade <span class=\"keyword\">FROM</span> student, s_c <span class=\"keyword\">WHERE</span> student.sno <span class=\"operator\">=</span> s_c.sno;</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;注意在多表查询中，当两个列名相同时，需采用表名.列名以示区别&#x3D;&#x3D;</p>\n<h4 id=\"嵌套查询（子查询）：\"><a href=\"#嵌套查询（子查询）：\" class=\"headerlink\" title=\"嵌套查询（子查询）：\"></a>嵌套查询（子查询）：</h4><p>子查询可以被使用在外部SELECT语句的WHERE子句、HAVING子句甚至SELECT子句中</p>\n<p>&#x3D;&#x3D;子查询应遵循如下规则：&#x3D;&#x3D; </p>\n<ul>\n<li><p>ORDER BY子句不能用于子查询（因为ORDER BY子句是对最终显示的结果进行排序）</p>\n</li>\n<li><p>子查询总是<strong>括在圆括号</strong> 中，作为表达式的一部分出现在条件比较运算符的右边，并且可以有选择的跟在IN，SOME（ANY），ALL和EXIST等谓词后面。</p>\n</li>\n<li><p>子查询select列表必须由<strong>单个列名或表达式</strong> （如集合函数）组成，除非子查询使用了关键字EXISTS（多列多行时使用）</p>\n</li>\n<li><p>默认情况下，子查询中列名取自子查询的FROM子句中给定的表，也可以通过限定列名的办法指定取自外查询的FROM子句中的表（不相关子查询和相关子查询）</p>\n</li>\n<li><p>带有比较运算符的子查询（&#x3D;&#x3D;此时子查询返回单个值&#x3D;&#x3D;，可以使用集合函数 ）</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#列出个人工资高于平均工资的所有职员，并求出多于平均数的值。</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> staffNo, fName, lName, position, salary–(<span class=\"keyword\">SELECT</span> <span class=\"built_in\">AVG</span>(salary) <span class=\"keyword\">FROM</span> Staff) <span class=\"keyword\">AS</span> SalDiff</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Staff</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> salary <span class=\"operator\">&gt;</span> (<span class=\"keyword\">SELECT</span> <span class=\"built_in\">AVG</span>(salary) <span class=\"keyword\">FROM</span> Staff);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>带有IN谓词的子查询（子查询返回单个值或单个列多个行）</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查询选修了课程“C2”的学生的学号和姓名</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> sno, sname <span class=\"keyword\">FROM</span> S <span class=\"keyword\">WHERE</span> sno <span class=\"keyword\">IN</span> ( <span class=\"keyword\">SELECT</span> sno <span class=\"keyword\">FROM</span> SC <span class=\"keyword\">WHERE</span> cno <span class=\"operator\">=</span> ‘C2’ );</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>多层嵌套：子查询中又嵌套子查询</p>\n</li>\n<li><p>&#x3D;&#x3D;不相关子查询和相关子查询&#x3D;&#x3D; </p>\n<ul>\n<li><p>不相关子查询：内层的子查询完全独立于外层的SELECT语句。&#x3D;&#x3D;m + n&#x3D;&#x3D; （只执行了一次子查询，在检查外层的元组时，无需再执行子查询）</p>\n<blockquote>\n<p>执行过程：1）执行子查询，其结果不被显示，而是传递给外部查询，作为外部查询的条件使用。2）执行外部查询，并显示整个结果。</p>\n</blockquote>\n</li>\n<li><p>相关子查询：子查询的判断条件涉及外层父查询的属性。要用到存在谓词EXISTS和NOT EXISTS，或者ALL、SOME等。&#x3D;&#x3D;m * n&#x3D;&#x3D; （每检查一个元组，都要执行一次子查询）</p>\n<blockquote>\n<p>执行过程：1）从外层查询中取出一个元组，将元组相关列（被内层子查询引用）的值传给内层查询。2）执行内层查询，得到子查询操作的值。3）外查询根据子查询返回的结果或结果集得到满足条件的行。4）然后外层查询取出下一个元组重复做步骤1-3，直到外层的元组全部处理完毕。</p>\n</blockquote>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#找出每个学生超过他自己已选修课程平均成绩的课程号</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> sno, cno <span class=\"keyword\">FROM</span> SC x <span class=\"keyword\">WHERE</span> G<span class=\"operator\">&gt;=</span> (<span class=\"keyword\">SELECT</span> <span class=\"built_in\">AVG</span>(G) <span class=\"keyword\">FROM</span> SC y <span class=\"keyword\">WHERE</span> x.sno <span class=\"operator\">=</span> y.sno);</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>量化比较谓词</p>\n<ul>\n<li><p>作用：产生单个列的子查询</p>\n</li>\n<li><p>通用形式：<code>expr Θ &#123; SOME | ANY | ALL &#125; (Subquery)其中Θ∈&#123;&lt;,&lt;=,=,&lt;&gt;,&gt;,&gt;=&#125; </code>。expr为表达式。该形式中的SOME与ANY含义相同，但用SOME而不用ANY。SOME某些，ALL全部。</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查询其它系中比信息系某一学生年龄小的学生姓名和年龄</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> SN, SA <span class=\"keyword\">FROM</span> S <span class=\"keyword\">WHERE</span> SA <span class=\"operator\">&lt;</span> <span class=\"keyword\">SOME</span> (<span class=\"keyword\">SELECT</span> SA <span class=\"keyword\">FROM</span> S <span class=\"keyword\">WHERE</span> SD <span class=\"operator\">=</span>‘<span class=\"keyword\">IS</span>’) <span class=\"keyword\">AND</span> SD <span class=\"operator\">&lt;&gt;</span>‘<span class=\"keyword\">IS</span>’;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<blockquote>\n<p>expr Θ （子查询）  子查询返回单个值</p>\n<p>expr IN （子查询）</p>\n<p>expr Θ { SOME | ANY | ALL } (子查询)，&gt;&#x3D; ALL可以用于求最大值</p>\n</blockquote>\n</li>\n<li><p>&#x3D;&#x3D;EXISTS谓词&#x3D;&#x3D; </p>\n<ul>\n<li><p>通用形式：[NOT] EXISTS （Subquery）</p>\n</li>\n<li><p>作用：测试被子查询检索到的行集(子查询可以返回多行多列)<strong>是否为空</strong> 。谓词 EXISTS （Subquery）为真当且仅当子查询返回一个非空的集合。NOT_EXISTS则相反</p>\n</li>\n<li><p>NOT EXISTS谓词可以实现<strong>关系代数的差运算</strong></p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查询没有选修‘C1’号课程的学生的姓名。</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> sname <span class=\"keyword\">FROM</span> S <span class=\"keyword\">WHERE</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> (<span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> SC <span class=\"keyword\">WHERE</span> sno <span class=\"operator\">=</span> S.sno <span class=\"keyword\">AND</span> cno <span class=\"operator\">=</span> ‘C1’);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>所有带IN谓词、比较运算符、SOME和ALL谓词的子查询都可以用带EXISTS谓词的子查询等价替换，反过来就不一定</p>\n</li>\n<li><p>可以采用双嵌套NOT_EXISTS来实现<strong>带全称量词的查询</strong>。<img data-src=\"https://s2.loli.net/2022/03/15/Km17HNji9vZAeGV.png\" alt=\"image-20220315110415416\" style=\"zoom:50%;\" /></p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查询选修了全部课程的学生姓名</span><br><span class=\"line\">#转化为查询这样的学生x，没有一门课程y 是x不选修的</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> SN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> S     #查询学生x</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span>  #不存在课程y</span><br><span class=\"line\">    （<span class=\"keyword\">SELECT</span> ﹡</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> C</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span>  #x不选修课程y</span><br><span class=\"line\">        （<span class=\"keyword\">SELECT</span> ﹡</span><br><span class=\"line\">        <span class=\"keyword\">FROM</span> SC</span><br><span class=\"line\">        <span class=\"keyword\">WHERE</span> S# <span class=\"operator\">=</span> S.S#</span><br><span class=\"line\">        <span class=\"keyword\">AND</span> C# <span class=\"operator\">=</span> C.C#））</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可以采用NOT EXISTS谓词实现<strong>关系代数的除运算</strong></p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查询至少选修了学生‘<span class=\"number\">95002</span>’选修的全部课程的学生号码</span><br><span class=\"line\">#转换为查询学号为x的学生，不存在这样的课程y，学生<span class=\"number\">95002</span>选修了y，而学生x没有选</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> S#</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> S          #查询学生x</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span></span><br><span class=\"line\">    （<span class=\"keyword\">SELECT</span> ﹡</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> C       #不存在课程y</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> <span class=\"keyword\">EXISTS</span>   #<span class=\"number\">95002</span>选修了课程y</span><br><span class=\"line\">        (<span class=\"keyword\">SELECT</span> ﹡</span><br><span class=\"line\">        <span class=\"keyword\">FROM</span> SC SCX</span><br><span class=\"line\">        <span class=\"keyword\">WHERE</span> SCX.C# <span class=\"operator\">=</span> C.C# <span class=\"keyword\">AND</span> SCX.S#<span class=\"operator\">=</span>‘<span class=\"number\">95002</span>’）</span><br><span class=\"line\">    <span class=\"keyword\">AND</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span>   #x没有选修y</span><br><span class=\"line\">        (<span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span></span><br><span class=\"line\">        <span class=\"keyword\">FROM</span> SC SCY</span><br><span class=\"line\">        <span class=\"keyword\">WHERE</span> SCY.C# <span class=\"operator\">=</span> C.C# <span class=\"keyword\">AND</span> SCY.S#<span class=\"operator\">=</span>S.S#)</span><br><span class=\"line\">    );</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> S#    #因为是从SC里选的学号，故需要<span class=\"keyword\">DISTINCT</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SC SCX         #查询学生x</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span></span><br><span class=\"line\">    （<span class=\"keyword\">SELECT</span> ﹡</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> SC SCY    #不存在课程y</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> SCY.S# <span class=\"operator\">=</span> ‘<span class=\"number\">95002</span>’  #<span class=\"number\">95002</span>选修了课程y</span><br><span class=\"line\">    <span class=\"keyword\">AND</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span>    #x没有选修y</span><br><span class=\"line\">        （<span class=\"keyword\">SELECT</span> ﹡  </span><br><span class=\"line\">        <span class=\"keyword\">FROM</span> SC SCZ</span><br><span class=\"line\">        <span class=\"keyword\">WHERE</span> SCZ.S# <span class=\"operator\">=</span> SCX.S#</span><br><span class=\"line\">        <span class=\"keyword\">AND</span> SCZ.C# <span class=\"operator\">=</span> SCY.C#））；</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://s2.loli.net/2022/03/14/2srATEC8QOWUzM4.png\" alt=\"image-20220314232322210\"></p>\n<h2 id=\"4、数据更新\"><a href=\"#4、数据更新\" class=\"headerlink\" title=\"4、数据更新\"></a>4、数据更新</h2><h3 id=\"插入数据：INSERT-（元组级）\"><a href=\"#插入数据：INSERT-（元组级）\" class=\"headerlink\" title=\"插入数据：INSERT （元组级）\"></a>插入数据：INSERT （元组级）</h3><p>&#x3D;&#x3D;插入数据时，表定义中说明了NOT NULL的列不能取空值&#x3D;&#x3D; </p>\n<ul>\n<li><p>用<strong>子句</strong>向表中插入数据：将新元组插入表中</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> </span><br><span class=\"line\"><span class=\"keyword\">INTO</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> [(<span class=\"operator\">&lt;</span>列名<span class=\"number\">1</span><span class=\"operator\">&gt;</span>[, <span class=\"operator\">&lt;</span>列名<span class=\"number\">2</span><span class=\"operator\">&gt;</span>]...)] </span><br><span class=\"line\"><span class=\"keyword\">VALUES</span>(<span class=\"operator\">&lt;</span>常量<span class=\"number\">1</span><span class=\"operator\">&gt;</span>[, <span class=\"operator\">&lt;</span>常量<span class=\"number\">2</span><span class=\"operator\">&gt;</span>]...)  </span><br><span class=\"line\"> #未指定任何列名时，新插入的属性必须在每个属性列上均有值，仅指定部分列名时，新元组的其他列为空值</span><br><span class=\"line\"> </span><br><span class=\"line\">#eg 插入一条选课记录（‘<span class=\"number\">95020</span>’，‘C1’）</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> SC（S#, C#）<span class=\"keyword\">VALUES</span> （‘<span class=\"number\">95020</span>’, ‘C1’）; </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用<strong>子查询</strong>向表中插入数据</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> </span><br><span class=\"line\"><span class=\"keyword\">INTO</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> [(<span class=\"operator\">&lt;</span>列名<span class=\"number\">1</span><span class=\"operator\">&gt;</span>[, <span class=\"operator\">&lt;</span>列名<span class=\"number\">2</span><span class=\"operator\">&gt;</span>]...)] </span><br><span class=\"line\"><span class=\"keyword\">SELECT</span>语句;  #<span class=\"keyword\">SELECT</span>语句的返回列要和INFO里的对应</span><br><span class=\"line\"></span><br><span class=\"line\">#eg  对每个系，求学生的平均年龄，并把结果存入数据库</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> Deptage (SD, Avgage) <span class=\"keyword\">SELECT</span> SD, <span class=\"built_in\">AVG</span>(SA) <span class=\"keyword\">FROM</span> S <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> SD;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"修改数据：UPDATE\"><a href=\"#修改数据：UPDATE\" class=\"headerlink\" title=\"修改数据：UPDATE\"></a>修改数据：UPDATE</h3><p>一条UPDATE语句在某一时刻只能更新<strong>一张表</strong>，但可以更新一张表中的<strong>多列</strong>，也可以更新<strong>多行</strong>数据。</p>\n<ul>\n<li><p>用<strong>子句</strong>修改表中数据</p>\n<p>  修改表中满足WHERE条件的元组：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">UPDATE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">SET</span> <span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span> <span class=\"operator\">=</span> <span class=\"operator\">&lt;</span>表达式<span class=\"operator\">&gt;</span>[, <span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span> <span class=\"operator\">=</span> <span class=\"operator\">&lt;</span>表达式<span class=\"operator\">&gt;</span>] #用表达式的值取代相应的属性列值</span><br><span class=\"line\">[<span class=\"keyword\">WHERE</span> <span class=\"operator\">&lt;</span>条件表达式<span class=\"operator\">&gt;</span>]\t\t\t\t#省略<span class=\"keyword\">WHERE</span>语句则修改全部元组</span><br><span class=\"line\"></span><br><span class=\"line\">#eg 将学生<span class=\"number\">95001</span>的年龄改为<span class=\"number\">22</span>岁</span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> S <span class=\"keyword\">SET</span> SA <span class=\"operator\">=</span> <span class=\"number\">22</span> <span class=\"keyword\">WHERE</span> S# <span class=\"operator\">=</span> ‘<span class=\"number\">95001</span>’;</span><br><span class=\"line\"></span><br><span class=\"line\">#eg 将所有学生的年龄增加<span class=\"number\">1</span>岁</span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> S <span class=\"keyword\">SET</span> SA <span class=\"operator\">=</span> SA <span class=\"operator\">+</span> <span class=\"number\">1</span>；</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用<strong>子查询</strong>修改表中数据：子查询可以嵌套在WHERE语句的条件表达式中，用于构造修改的条件。相关子查询</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#将计算机科学系全体学生的成绩置零</span><br><span class=\"line\">#相关子查询，每次拿出SC中的一个元组，得到它的系，如果为CS则将成绩置<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> SC <span class=\"keyword\">SET</span> G <span class=\"operator\">=</span> <span class=\"number\">0</span> <span class=\"keyword\">WHERE</span> ‘CS’ <span class=\"operator\">=</span> ( <span class=\"keyword\">SELECT</span> SD <span class=\"keyword\">FROM</span> S <span class=\"keyword\">WHERE</span> S.S# <span class=\"operator\">=</span> SC.S#);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"删除数据：DELETE-（元组级）\"><a href=\"#删除数据：DELETE-（元组级）\" class=\"headerlink\" title=\"删除数据：DELETE （元组级）\"></a>删除数据：DELETE （元组级）</h3><p>DELETE用于<strong>从指定表中删除满足条件的元组</strong>，但不能用来从特定的列中删除数据。一条DELETE语句可以从表中删除一个或多个元组。</p>\n<ul>\n<li><p>用<strong>子句</strong>删除表中数据</p>\n<p>  删除表中满足WHERE条件的元组：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DELETE</span> </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span></span><br><span class=\"line\">[<span class=\"keyword\">WHERE</span> <span class=\"operator\">&lt;</span>条件表达式<span class=\"operator\">&gt;</span>]  </span><br><span class=\"line\"></span><br><span class=\"line\">#eg 删除学号为<span class=\"number\">95001</span>的学生记录</span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> S <span class=\"keyword\">WHERE</span> S# <span class=\"operator\">=</span> ‘<span class=\"number\">95001</span>’;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>省略WHERE语句则删除全部元组，但<strong>只删除了表中的数据</strong>，而不是表的定义，表的定义仍在DD中。<strong>删除表应当用DROP</strong></p>\n</blockquote>\n</li>\n<li><p><strong>子查询</strong>可以嵌套在WHERE语句的条件表达式中。相关子查询</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#删除计算机科学系全体学生的选课记录</span><br><span class=\"line\">#相关子查询</span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> SC <span class=\"keyword\">WHERE</span> ‘CS’ <span class=\"operator\">=</span> ( <span class=\"keyword\">SELECT</span> SD <span class=\"keyword\">FROM</span> S <span class=\"keyword\">WHERE</span> S.S# <span class=\"operator\">=</span> SC.S#);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"5、视图\"><a href=\"#5、视图\" class=\"headerlink\" title=\"5、视图\"></a>5、视图</h2><ul>\n<li><strong>概念：</strong><ul>\n<li>视图是&#x3D;&#x3D;动态结果&#x3D;&#x3D;：对一个或多个基本关系进行关系操作得到的动态结果，是从一个或几个基本表（或视图）导出的表。而且对基本表的操作将在视图可见的范围内映射到视图上。&#x3D;&#x3D;视图对应的内容是实时的、最新的内容&#x3D;&#x3D; </li>\n<li>视图是&#x3D;&#x3D;虚关系&#x3D;&#x3D;：它不包含真正存储的数据，其内容不占用存储空间。</li>\n<li><strong>视图的内容被定义成基于一个或多个基本关系的查询</strong></li>\n<li>视图是在&#x3D;&#x3D;外模式&#x3D;&#x3D;这一层，为用户所用</li>\n</ul>\n</li>\n<li><strong>操作：</strong>视图可以和基本表一样被查询、被删除。也可以在一个视图之上再定义新的视图，但&#x3D;&#x3D;对视图的更新（增、删、改）操作则有一定的限制&#x3D;&#x3D;。&#x3D;&#x3D;对视图的一切操作最终也要转换为对基本表的操作。&#x3D;&#x3D;</li>\n</ul>\n<h3 id=\"视图的创建及种类\"><a href=\"#视图的创建及种类\" class=\"headerlink\" title=\"视图的创建及种类\"></a>视图的创建及种类</h3><ul>\n<li><p>视图可以从一张表、几张表或其他视图中创建。 </p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span> <span class=\"operator\">&lt;</span>视图名<span class=\"operator\">&gt;</span> [(<span class=\"operator\">&lt;</span>列名<span class=\"number\">1</span><span class=\"operator\">&gt;</span>[,<span class=\"operator\">&lt;</span>列名<span class=\"number\">2</span><span class=\"operator\">&gt;</span>]...)]</span><br><span class=\"line\"><span class=\"keyword\">AS</span> </span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> 语句</span><br><span class=\"line\">[<span class=\"keyword\">WITH</span> <span class=\"keyword\">CHECK</span> OPTION]  </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>几点说明：</strong></p>\n<ul>\n<li><p>&#x3D;&#x3D;创建视图只是将视图的定义存入DD（数据字典），并不会真的执行SELECT语句，当对视图查询时，才根据视图的定义从基本表中将数据查出。&#x3D;&#x3D;</p>\n</li>\n<li><p><strong>省略视图名后的列名表时</strong>，默认该视图由子查询中SELECT子句目标列中的诸属性列组成</p>\n</li>\n<li><p>若使用&#x3D;&#x3D;WITH CHECK OPTION&#x3D;&#x3D;，则对视图进行UPDATE和INSERT操作时，保证更新行满足视图定义中的WHERE子句指定的条件，否则将被DBMS拒绝</p>\n</li>\n<li><p>当目标列不是单一的属性列(如集合函数)、存在同名列以及需启用更合适的名字时，需要指定组成视图的所有列名</p>\n</li>\n<li><p>可以在视图中增加虚拟列（派生列），即基本表中并不存在的列，如avg(grade)</p>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p><strong>视图的种类</strong></p>\n<ul>\n<li><p>水平视图：从单个基本表导出，并且只是<strong>去掉了</strong>基本表的<strong>某些行</strong></p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#创建一个视图，让分支机构B003的经理只看到他所在分支机构的职员的信息</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span> Manager3Staff</span><br><span class=\"line\"><span class=\"keyword\">AS</span> <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Staff</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> branchNo <span class=\"operator\">=</span> ‘B003’;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>垂直视图：从单个基本表导出，并且只是<strong>去掉了</strong>基本表的<strong>某些列</strong> </p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#建立关于分支机构B003职员信息但不包括工资信息的视图</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span> Staff3</span><br><span class=\"line\"><span class=\"keyword\">AS</span> <span class=\"keyword\">SELECT</span> staffNo, fName, lName, position, sex</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Manager3Staff;\t\t#视图可以从其他视图中创建</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>分组视图：用<strong>GROUP BY 子句</strong>定义的视图</p>\n</li>\n<li><p>连接视图：用<strong>连接运算</strong>得到的视图</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/22/CA4TkBawSpnsgIi.png\" alt=\"image-20220322094759185\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"删除视图\"><a href=\"#删除视图\" class=\"headerlink\" title=\"删除视图\"></a>删除视图</h3><ul>\n<li><pre><code class=\"sql\">  DROP VIEW &lt;视图名&gt;&#123;CASCADE|RESTRICT&#125; \n  <figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">-</span> 视图是虚表，**删除的是<span class=\"selector-tag\">DD</span>中的视图的定义**，**对产生视图数据的基本表中的数据没有影响**</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">-</span> 默认<span class=\"selector-tag\">RESTRICT</span> ，如果存在依赖被删除视图的其他对象，则不允许删除</span><br><span class=\"line\"></span><br><span class=\"line\">    如果指定<span class=\"selector-tag\">CASCADE</span>**，**删除视图可能产生级联删除</span><br><span class=\"line\"></span><br><span class=\"line\">### 查询视图</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">-</span> **步骤**</span><br><span class=\"line\"></span><br><span class=\"line\">```<span class=\"selector-tag\">mermaid</span></span><br><span class=\"line\"><span class=\"selector-tag\">graph</span> <span class=\"selector-tag\">LR</span></span><br><span class=\"line\">    <span class=\"selector-tag\">a</span><span class=\"selector-attr\">[有效性检查]</span><span class=\"selector-tag\">--</span>&gt;|有效|<span class=\"selector-tag\">b</span><span class=\"selector-attr\">[从DD中取出视图定义]</span></span><br><span class=\"line\">    <span class=\"selector-tag\">b</span><span class=\"selector-attr\">[从DD中取出视图定义]</span><span class=\"selector-tag\">--</span>&gt;|视图消解|<span class=\"selector-tag\">c</span><span class=\"selector-attr\">[对基本表的查询]</span></span><br><span class=\"line\">    <span class=\"selector-tag\">c</span><span class=\"selector-attr\">[对基本表的查询]</span><span class=\"selector-tag\">--</span>&gt;<span class=\"selector-tag\">d</span><span class=\"selector-attr\">[执行查询]</span></span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n<li><p>&#x3D;&#x3D;视图消解&#x3D;&#x3D;：将对视图的查询<strong>转换为对基本表的查询</strong>。执行对视图的查询时，从数据字典中取出视图的定义，将定义中的子查询和用户的查询结合起来，转换成等价的对基本表的查询的过程</p>\n<blockquote>\n<p>简单转换的过程：</p>\n<ul>\n<li><p>将SELECT列表中给出的列名转换为视图定义中对应的列名</p>\n</li>\n<li><p>FROM子句的视图名可以视图定义中的FROM列表代替</p>\n</li>\n<li><p>用AND将WHERE子句和视图定义中的WHERE子句合并</p>\n</li>\n<li><p>从视图定义中复制GROUP BY和HAVING子句</p>\n</li>\n<li><p>将 ORDER BY列名转换为视图定义中对应的列名</p>\n<p>  例子：</p>\n  <img data-src=\"https://s2.loli.net/2022/03/22/jVlQaEdt8FD5HcW.png\" alt=\"image-20220322221341006\" style=\"zoom:67%;\" />\n\n  <img data-src=\"https://s2.loli.net/2022/03/22/I5TvHtQE4RCPSlk.png\" alt=\"image-20220322221538427\" style=\"zoom: 67%;\" />\n\n  <img data-src=\"https://s2.loli.net/2022/03/22/HOEKyJ3X26nhGs9.png\" alt=\"image-20220322221558073\" style=\"zoom:67%;\" /></li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>复杂转换：涉及集合函数，考虑HAVING子句等等</p>\n<img data-src=\"https://s2.loli.net/2022/03/22/7WcqENUudBsYIMg.png\" alt=\"image-20220322222248720\" style=\"zoom:67%;\" />\n</blockquote>\n<ul>\n<li><p><strong>查询视图的约束：</strong></p>\n<ul>\n<li><p>如果视图中某个列是基于集合函数的，那么，该列只能出现在访问视图的SELECT和ORDER BY子句中，特别是，该列不能出现在WHERE子句中，并且不能作为集合函数的参数</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> StaffPropCnt <span class=\"keyword\">WHERE</span> cnt <span class=\"operator\">&gt;</span> <span class=\"number\">2</span>; <span class=\"operator\">/</span><span class=\"operator\">/</span>错误</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">COUNT</span> (cnt) <span class=\"keyword\">FROM</span> StaffPropCnt;  <span class=\"operator\">/</span><span class=\"operator\">/</span>错误</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>分组视图不能与基本表或视图进行连接操作</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"更新视图\"><a href=\"#更新视图\" class=\"headerlink\" title=\"更新视图\"></a>更新视图</h3><ul>\n<li>👉<strong>对视图的更新最终要转换为对表的更新</strong>，但有些更新不能有意义地转换成对基本表S的更新，如修改一个集合函数得到的列，因此&#x3D;&#x3D;对视图的更新操作有一定的限制&#x3D;&#x3D;</li>\n<li>在视图定义时加上WITH CHECK OPTION子句可以使得对视图进行更新操作时需满足视图定义中子查询的条件</li>\n<li>&#x3D;&#x3D;视图可更新的充要条件&#x3D;&#x3D;<ul>\n<li>没有指定DISTINCT,即重复元组未从查询结果中消除；</li>\n<li>定义查询的SELECT列表中的每个元素均为列名（而不是常量，表达式或聚合函数），且列名不能出现多于一次；</li>\n<li>FROM子句只能指定一个表，即视图必须有一个源表且用户有请求该表的权限。如果源表本身就是一个视图，那么视图必须满足这些条件。因此，排除了基于连接、并（UNION）、交（INTERSECT）或差（EXCEPT）操作的所有视图；</li>\n<li>WHERE子句不能包括任何引用了FROM子句中的表的嵌套SELECT操作，即不能出现相关子查询</li>\n<li>定义查询不能有GROUP BY或HAVING子句。</li>\n<li>添加到视图中的每一行都不能违反基本表的完整性约束</li>\n</ul>\n</li>\n<li>分类<ul>\n<li>可更新视图：满足上面的六个条件，即对视图的更新能唯一的有意义的转换为对基本表的更新</li>\n<li>（理论上）不可更新的视图</li>\n<li>不允许更新的视图&#96;(<em>&gt;﹏&lt;</em>)′</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"视图的优缺点\"><a href=\"#视图的优缺点\" class=\"headerlink\" title=\"视图的优缺点\"></a>视图的优缺点</h3><ul>\n<li><p><strong>优点：</strong>①提高逻辑独立性、②实时性、③提高安全性、④简化结构及复杂操作、⑤多角度地、更灵活地共享、⑥数据完整性</p>\n</li>\n<li><p><strong>缺点：</strong>①更新的局限性、②结构的局限性、③性能开销（查询时需要转化）</p>\n<blockquote>\n<p><strong>视图维护：</strong>更新基本表引起视图更新的过程称为视图维护</p>\n<p><strong>视图物化：</strong>把第一次访问视图的结果存储为数据库的临时表；这样，基于物化视图的查询比每次重新计算视图要快的多。但会带来视图维护的代价</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"x3D-x3D-6、sql的完整性约束-x3D-x3D\"><a href=\"#x3D-x3D-6、sql的完整性约束-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;6、sql的完整性约束&#x3D;&#x3D;\"></a>&#x3D;&#x3D;6、sql的完整性约束&#x3D;&#x3D;</h2><h3 id=\"基本概念：\"><a href=\"#基本概念：\" class=\"headerlink\" title=\"基本概念：\"></a><strong>基本概念：</strong></h3><ul>\n<li><strong>完整性：</strong>指数据库中数据的正确性、有效性和相容性（表示同一对象的两个或多个数据必须一致）</li>\n<li><strong>完整性约束</strong>：数据库中数据应满足的条件</li>\n</ul>\n<h3 id=\"非过程性完整性约束\"><a href=\"#非过程性完整性约束\" class=\"headerlink\" title=\"非过程性完整性约束\"></a>非过程性完整性约束</h3><ul>\n<li><p><strong>数据取值要求：</strong>非空约束（NOT NULL）、唯一性约束（UNIQUE）、CHECK约束（CHECK(searchcondition)）</p>\n<blockquote>\n<p>CHECK子句只对定义它的关系起约束作用，对其他关系没有任何作用</p>\n</blockquote>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sex <span class=\"type\">CHAR</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">CHECK</span> (sex <span class=\"keyword\">IN</span> (‘M’, ‘F’))</span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#eg 增加学生姓名必须取唯一值的约束</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> student</span><br><span class=\"line\"><span class=\"keyword\">ADD</span> <span class=\"keyword\">CONSTRAINT</span> c1_name <span class=\"keyword\">UNIQUE</span> (SN)  #c1_name是约束的名字</span><br><span class=\"line\"></span><br><span class=\"line\">#eg 删除学生姓名必须取唯一值的约束</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> S </span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">UNIQUE</span>（SN）;  </span><br><span class=\"line\">#或者 <span class=\"keyword\">DROP</span> <span class=\"keyword\">CONSTRAINT</span> c1_name</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>域约束：</strong>通过自定义域来实现</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> DOMAIN DomainName [<span class=\"keyword\">AS</span>] dataType</span><br><span class=\"line\">[<span class=\"keyword\">DEFAULT</span> defaultOption]</span><br><span class=\"line\">[<span class=\"keyword\">CHECK</span> (searchCondition)]  #searchCondition 可以用<span class=\"keyword\">SELECT</span>语句表达</span><br><span class=\"line\"></span><br><span class=\"line\">#eg</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> DOMAIN SexType <span class=\"keyword\">AS</span> <span class=\"type\">CHAR</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">DEFAULT</span> ‘M’</span><br><span class=\"line\"><span class=\"keyword\">CHECK</span> (<span class=\"keyword\">VALUE</span> <span class=\"keyword\">IN</span> (‘M’, ‘F’));</span><br><span class=\"line\"></span><br><span class=\"line\">#使用域来定义列</span><br><span class=\"line\">sex SexType <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>实体完整性：</strong>主键属性不空。DBMS自动支持实体完整性（拒绝破坏实体完整性的操作（不合法的插入和更新））</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">PRIMARY</span> KEY(<span class=\"operator\">&lt;</span>列名表<span class=\"operator\">&gt;</span>)  #主键定义   </span><br><span class=\"line\"><span class=\"keyword\">UNIQUE</span>(<span class=\"operator\">&lt;</span>列名表<span class=\"operator\">&gt;</span>)   #候选键定义</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>参照完整性</strong>：DBMS自动支持参照完整性（拒绝破坏参照完整性的操作，如不合法的对子表（参照表）的插入和更新操作，不合法的对父表（被参照表）的删除和更新操作）。注意SQL语句的顺序。</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FOREIGN</span> KEY （<span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span>[，<span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span>] …）<span class=\"keyword\">REFERENCES</span> <span class=\"operator\">&lt;</span>被参照表名<span class=\"operator\">&gt;</span> </span><br><span class=\"line\">[<span class=\"keyword\">ON</span> <span class=\"keyword\">DELETE</span> [CASCADE <span class=\"operator\">|</span> <span class=\"keyword\">SET</span> <span class=\"keyword\">DEFAULT</span> <span class=\"operator\">|</span> <span class=\"keyword\">SET</span> <span class=\"keyword\">NULL</span> <span class=\"operator\">|</span> <span class=\"keyword\">NO</span> ACTION] ]</span><br><span class=\"line\">[<span class=\"keyword\">ON</span> <span class=\"keyword\">UPDATE</span> [CASCADE <span class=\"operator\">|</span> <span class=\"keyword\">SET</span> <span class=\"keyword\">DEFAULT</span> <span class=\"operator\">|</span> <span class=\"keyword\">SET</span> <span class=\"keyword\">NULL</span> <span class=\"operator\">|</span><span class=\"keyword\">NO</span> ACTION] ]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>参照完整性被破坏时可选择的策略：</p>\n<img data-src=\"https://s2.loli.net/2022/03/22/N9xBsZtjn5iSdO4.png\" alt=\"image-20220322230658737\" style=\"zoom: 80%;\" />\n</blockquote>\n</li>\n<li><p><strong>一般约束（企业约束）</strong></p>\n<p>  在创建和修改表时使用CHECK&#x2F;UNIQUE，还可以&#x3D;&#x3D;CREATE ASSERTION（设置断言）&#x3D;&#x3D;</p>\n<p>  当完整性约束涉及多个关系或者与聚合操作有关，则可以采用SQL的断言机制来完成</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> ASSERTION AssertionName</span><br><span class=\"line\"><span class=\"keyword\">CHECK</span> (searchCondition)</span><br><span class=\"line\"></span><br><span class=\"line\">#限制staff不能管理太多的房产</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> ASSERTION StaffNotHandlingTooMuch</span><br><span class=\"line\"><span class=\"keyword\">CHECK</span> (<span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> </span><br><span class=\"line\">           (<span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span></span><br><span class=\"line\">            <span class=\"keyword\">FROM</span> PropertyForRent</span><br><span class=\"line\">            <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> staffNo</span><br><span class=\"line\">            <span class=\"keyword\">HAVING</span> <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"operator\">&gt;</span> <span class=\"number\">100</span>));</span><br></pre></td></tr></table></figure></li>\n</ul>\n<img data-src=\"https://s2.loli.net/2022/03/22/Ihst97CnifNJAq1.png\" alt=\"image-20220322231603163\" style=\"zoom: 67%;\" />\n\n\n\n<h3 id=\"过程性完整性约束：触发器\"><a href=\"#过程性完整性约束：触发器\" class=\"headerlink\" title=\"过程性完整性约束：触发器\"></a>过程性完整性约束：触发器</h3><ul>\n<li><p>概念：一类靠事件驱动的特殊过程，一旦由某个用户定义，任何触发该触发器的事件发生时，均由<strong>服务器</strong>自动激活相应的触发器。</p>\n</li>\n<li><p>三要素：触发事件（包括Insert、delete、update等）、触发条件、触发动作</p>\n</li>\n<li><p>作用：示警（给出提示信息）；满足特定条件时自动执行某项任务以消除负面影响</p>\n</li>\n<li><p>定义(Full SQL-99的Create Trigger语法)</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TRIGGER</span> trigger_name </span><br><span class=\"line\">&#123;BEFORE <span class=\"operator\">|</span> AFTER&#125; &#123;<span class=\"keyword\">INSERT</span> <span class=\"operator\">|</span> <span class=\"keyword\">DELETE</span> <span class=\"operator\">|</span> <span class=\"keyword\">UPDATE</span> [<span class=\"keyword\">OF</span> columnname&#123;,columnname…&#125;]&#125; <span class=\"keyword\">ON</span> tablename #触发事件[<span class=\"keyword\">REFERENCING</span> corr_name_def &#123;, corr_name_def…&#125;]  #旧值或新值名表</span><br><span class=\"line\">[<span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> <span class=\"type\">ROW</span> <span class=\"operator\">|</span> <span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> STATEMENT]  </span><br><span class=\"line\">[<span class=\"keyword\">WHEN</span> (search_condition)]   #触发条件</span><br><span class=\"line\">&#123;\t</span><br><span class=\"line\">\tstatement <span class=\"operator\">|</span>          #触发动作，为单个或一系列<span class=\"keyword\">SQL</span>语句</span><br><span class=\"line\">\t<span class=\"keyword\">BEGIN</span> <span class=\"keyword\">ATOMIC</span> statement; </span><br><span class=\"line\">\t&#123;statement; …&#125; </span><br><span class=\"line\">\t<span class=\"keyword\">END</span></span><br><span class=\"line\">&#125; ;</span><br><span class=\"line\"></span><br><span class=\"line\">#eg 设计一个用于s_c的触发器，该触发器规定，如果需要修改成绩，则需要保证修改之后的成绩不得低于之前的成绩，否则拒绝修改</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TRIGGER</span> trig_grade</span><br><span class=\"line\">AFTER <span class=\"keyword\">UPDATE</span> <span class=\"keyword\">OF</span> grade <span class=\"keyword\">ON</span> s_c</span><br><span class=\"line\"><span class=\"keyword\">REFERENCING</span> <span class=\"keyword\">OLD</span> <span class=\"keyword\">AS</span> oldg, <span class=\"keyword\">NEW</span> <span class=\"keyword\">AS</span> newg</span><br><span class=\"line\"><span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> <span class=\"type\">ROW</span></span><br><span class=\"line\"><span class=\"keyword\">WHEN</span> (oldg.grade <span class=\"operator\">&gt;</span> newg.grade)</span><br><span class=\"line\">\t<span class=\"keyword\">UPDATE</span> s_c</span><br><span class=\"line\">\t<span class=\"keyword\">SET</span> GRADE <span class=\"operator\">=</span> oldg.grade</span><br><span class=\"line\">\t<span class=\"keyword\">WHERE</span> cno <span class=\"operator\">=</span> oldg.cno <span class=\"keyword\">AND</span> sno <span class=\"operator\">=</span> oldg.sno;  #根据主键找到该元组</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>几点说明：</p>\n<ul>\n<li><p>触发器名是一个标识符，在其所属的模式里是唯一的</p>\n</li>\n<li><p>ON&lt;表名&gt;子句里的表必须和触发器位于同一个模式中</p>\n</li>\n<li><p>定义行的相关名字的corr_name_def 如下:</p>\n<p>  {OLD [ROW] [AS] old_row_corr_name</p>\n<p>  | NEW [ROW] [AS] new_row_corr_name</p>\n<p>  | OLD TABLE [AS] old_table_corr_name</p>\n<p>  | NEW TABLE [AS] new_table_corr_name}</p>\n</li>\n<li><p>如果在触发器定义中省略WHEN子句，即省略触发条件，则触发动作在触发器被激活后立即发生</p>\n</li>\n<li><p>触发动作可以是单个或一系列SQL语句，若为一系列，需要使用BEGIN ATOMIC…END子句，语句之间用分号隔开</p>\n</li>\n<li><p>注意触发器级联问题，防止一个触发动作引发一系列连锁反应（一个触发器的动作引发另一个触发器的动作）以致失控</p>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"两种完整性约束的对比\"><a href=\"#两种完整性约束的对比\" class=\"headerlink\" title=\"两种完整性约束的对比\"></a>两种完整性约束的对比</h3><ul>\n<li><p>非过程性完整性约束：种类和能力有限但易于理解；直接为系统所知；难以给出约束不满足时的相应动作</p>\n</li>\n<li><p>过程性完整性约束：给出了约束不满足时的相应动作；保证事物的一致性</p>\n</li>\n</ul>"},{"title":"关系数据库","abbrlink":19168,"date":"2022-06-23T03:20:17.000Z","password":123456,"message":"请输入密码查看文章","_content":"\n## 1、基本概念\n\n**关系模型的特点：**①结构简单、表达力强；②语言的一体化；③非过程化的操作；④坚实的数学基础（关系理论）\n\n**关系模型的三要素**：\n\n- 关系数据结构：在关系模型中，实体与实体之间的联系均用表来表示\n- 关系数据操作：包括增删改查、传统的集合操作、专门的关系操作\n- 关系的完整性约束：实体完整性、参照完整性、用户自定义的完整性\n\n<!-- more -->\n\n**关系的基本术语**：\n\n| 基本术语         | 含义                                                         |\n| ---------------- | ------------------------------------------------------------ |\n| 元组和属性       | 元组：行，属性：列。关系中的元组个数称为关系的基数，属性个数称为关系的度或维数 |\n| 超键             | 能唯一区分任意两行数据的属性或属性集。包含超键的多个属性都是超键 |\n| 候选键（==键==） | 某一属性（或属性集）的值可唯一地表示每一个元组。<u>候选键本身是超键，但其任何真子集都不再是超键</u>。候选键包含的属性为==主属性== |\n| 主键             | 在使用关系来组织数据时，常使用一个候选键作为组织该关系以及唯一性操作的对象，其中被选用的候选键为主键，例如学号。主键包含的属性为==主键属性== |\n| 外键             | 对于关系R1、R2，其中某属性\\属性集A不是R1的候选键，但是是R2的候选键，则称A是R1的外键 |\n| 全键             | 当需要一个关系的全部属性作为该关系的候选键，则称该全部属性组合为全键 |\n\n**关系的种类：**基本关系、查询表（查询结果对应的表）、视图表（虚表）\n\n**关系的性质**：\n\n①列的同质性：每一列中的分量为同一类型，来自同一个域\n\n②列名唯一性：每列要基于不同的属性名，但是不同列的值可以出自同一个域\n\n③元组相异性：关系中任意两个元组不能完全相同\n\n④行序无关性：行的次序无关紧要，可以互换\n\n⑤列序无关性：列的次序无关紧要，可以互换\n\n⑥分量原子性：每一个分量都必须是不可分的数据项\n\n**关系模式：** 关系结构的描述和定义，即二维表的表结构定义。可简记为关系的属性名表。例如学生关系模式可以简记为学生（<u>学号</u>，姓名，性别，年龄，籍贯）。可理解为**表头** \n\n**关系数据库：** 基于关系模型的数据库。\n\n==关系、关系模型、关系模式和关系数据库的区别与联系：==\n\n**区别：**\n\n- `关系模型`是用表结构表示实体集与实体集之间联系的一种模型；`关系`是属性值域的笛卡儿积中有意义的元组集合，实质上是一张二维表，表的每一行为一个元组，每一列为一个属性；`关系模式`是关系结构的描述和定义，即二维表的表结构定义；`关系数据库`是建立在关系模型之上的关系的集合\n\n**联系：**\n\n- 一个关系只能对应一个关系模式，一个关系模式可对应多个关系\n- 关系模式是关系的型，按其型装入数据值后即形成关系\n- 关系模式是相对静态的、稳定的，而关系是动态的、随时间变化的\n- 一个关系数据库是相关关系的集合，而关系模型的结构是相关关系模式的集合\n\n## 2、关系的完整性约束\n\n**实体完整性**： 组成主键的各属性都不能取空值（任何主键属性都不能为空，==注意属性集不为空不代表属性集中的所有属性都不为空==）。插入和修改元组可能破坏实体完整性规则。\n\n**参照完整性**：如果属性\\属性组F是R的外键（R为依赖表），它与S表的主键相对应，则对于R中的每个元组，在F上的取值必须取空值或者等于S中某个元组的主键值。\n\n> **实体完整性优先于参照完整性** 。即外键是主键属性时，不能为空。\n>\n> <img src=\"C:/AppData/Roaming/Typora/typora-user-images/image-20220516162456086.png\" alt=\"image-20220516162456086\" style=\"zoom:50%;\" />\n\n**用户定义完整性**：针对某一具体关系数据库的约束。包括定义属性是否为空值、定义属性值的唯一性、定义属性的取值范围、定义属性的默认值、定义属性间函数依赖关系等。\n\n---\n\n<img src=\"https://s2.loli.net/2022/05/16/SB9MQkbiUuwDPaj.png\" alt=\"image-20220516162759988\" style=\"zoom:67%;\" />\n\n**关系完整性控制的实现原理**：定义、检查、保证数据完整性\n\n**例子：**\n\n<img src=\"https://s2.loli.net/2022/05/16/rXFtZ146I9xePCw.png\" alt=\"image-20220516194737598\" style=\"zoom:67%;\" />\n\n## 3、关系代数的运算\n\n**常用的关系运算：**并、交、差、笛卡儿积、投影、选择、连接、除运算\n\n**基本的关系运算：**并、差、笛卡儿积、选择、投影，其他的关系运算可以通过这些基本运算来表达（关系依赖） \n\n<img src=\"https://s2.loli.net/2022/05/16/1zVE8DkPaXOYuAe.png\" alt=\"image-20220516163214039\" style=\"zoom:67%;\" />\n\n### 并 ∪\n\n关系R和S的并由属于R或者属于S的元组（行）组成，并去掉冗余的元组\n\n### 交 ∩\n\n关系R和S的交由即属于R又属于S的元组（行）组成\n\n### 差 -\n\n关系R和S的差由属于R但不属于S的元组（行）组成\n\n👉并交差运算：两个关系必须是相容的同类关系（兼容表），列数相同且属性值取自同一个域\n\n### 积 ×\n\n即笛卡尔积，k元关系R与j元关系S进行笛卡尔积得到j+k元新关系，该关系的元组（行）数为R和S的元组（行）数之积\n\n![image-20220516163515542](https://s2.loli.net/2022/05/16/6Aq4Di3mdcESkLr.png)\n\n### 选择 σ\n\nσ~F~ (R) = {t|(t ∈R) ∧ F(t) = True}。从关系R中选出满足条件表达式F（可简单可复合）的那些==元组==所构成的关系\n\n### 投影 Π\n\n∏~A~ (R) = {t[A] | t ∈ R}。取属性名表A中指定的==列==，**消除重复元组** （当选择的列中不包含键时会出现重复元组）\n\n![image-20220516163855752](https://s2.loli.net/2022/05/16/yiZbTMXzfPdKh7n.png)\n\n### 连接 ⋈\n\n从两个关系的笛卡儿积中选取属性间满足一定条件的元组（==笛卡儿积上进行的选择运算== ）\n\n①等值连接：该特定条件为R关系在A属性（列）上的值与S关系在B属性（列）上的值相等\n\n②自然连接：将结果之中重复的属性（列）去掉的等值连接\n\n👉等值连接与自然连接的区别：①自然连接一定是等值连接，等值连接不一定是自然连接；②等值连接的连接属性不要求是同名属性；③等值连接后不要求去掉同名属性\n\n![image-20220516164224269](https://s2.loli.net/2022/05/16/43KxoqJRZsfLXvj.png)\n\n### 除 ÷\n\n（个人概括？）R ÷ S，先求出R与S的属性集交集，在本例中为CD，∏~C,D~ (S) = {cd, ef}，然后求R的属性集 - CD = AB，将R按AB分组，本例中可以分为三组ab、bc、ed，分别求出这些组的CD集合，本例中为ab组 = {cd, ef, de}，bc组 = {ef}，ed组 = {cd, ef}，可以判断出{cd, ef}包含于ab组和ed组，故R ÷ S = {ab, cd}\n\n![image-20220516165612885](https://s2.loli.net/2022/05/16/s1ezau8YtGgRPyV.png)\n\n## 4、综合的例子\n\n> 基本都是先选择后投影，注意如果要做连接运算的话，可以先做部分选择和投影运算，这样可以降低计算开销\n>\n> 如果有“所有”这个词，可以考虑除运算\n\n<img src=\"https://s2.loli.net/2022/05/16/sNoQwLK7nvU3eWu.png\" alt=\"image-20220516185848173\" style=\"zoom:67%;\" />\n\n<img src=\"https://s2.loli.net/2022/05/16/pjqTRbnkX8VPLfy.png\" alt=\"image-20220516185957304\" style=\"zoom:67%;\" />\n\n<img src=\"https://s2.loli.net/2022/05/16/fjmZiRI2uoJaAXb.png\" alt=\"image-20220516190034825\" style=\"zoom:67%;\" />\n\n<img src=\"https://s2.loli.net/2022/05/16/DLAMuWNqnKVo923.png\" alt=\"image-20220516190106486\" style=\"zoom:67%;\" />\n\n<img src=\"https://s2.loli.net/2022/05/16/gQGOdZX5zUB3KTf.png\" alt=\"image-20220516190238200\" style=\"zoom:67%;\" />\n\n<img src=\"https://s2.loli.net/2022/05/16/rjBwDJC1KUzI35h.png\" alt=\"image-20220516190551314\" style=\"zoom:67%;\" />\n\n<img src=\"https://s2.loli.net/2022/05/16/vpOuMmTFUZKsJAL.png\" alt=\"image-20220516191322048\" style=\"zoom:67%;\" />\n\n","source":"_posts/关系数据库.md","raw":"---\ntitle: 关系数据库\ntags: \n- 数据库\ncategory: \n- 数据库\nabbrlink: 19168\ndate: 2022-06-23 11:20:17\npassword: 123456\nmessage: 请输入密码查看文章\n---\n\n## 1、基本概念\n\n**关系模型的特点：**①结构简单、表达力强；②语言的一体化；③非过程化的操作；④坚实的数学基础（关系理论）\n\n**关系模型的三要素**：\n\n- 关系数据结构：在关系模型中，实体与实体之间的联系均用表来表示\n- 关系数据操作：包括增删改查、传统的集合操作、专门的关系操作\n- 关系的完整性约束：实体完整性、参照完整性、用户自定义的完整性\n\n<!-- more -->\n\n**关系的基本术语**：\n\n| 基本术语         | 含义                                                         |\n| ---------------- | ------------------------------------------------------------ |\n| 元组和属性       | 元组：行，属性：列。关系中的元组个数称为关系的基数，属性个数称为关系的度或维数 |\n| 超键             | 能唯一区分任意两行数据的属性或属性集。包含超键的多个属性都是超键 |\n| 候选键（==键==） | 某一属性（或属性集）的值可唯一地表示每一个元组。<u>候选键本身是超键，但其任何真子集都不再是超键</u>。候选键包含的属性为==主属性== |\n| 主键             | 在使用关系来组织数据时，常使用一个候选键作为组织该关系以及唯一性操作的对象，其中被选用的候选键为主键，例如学号。主键包含的属性为==主键属性== |\n| 外键             | 对于关系R1、R2，其中某属性\\属性集A不是R1的候选键，但是是R2的候选键，则称A是R1的外键 |\n| 全键             | 当需要一个关系的全部属性作为该关系的候选键，则称该全部属性组合为全键 |\n\n**关系的种类：**基本关系、查询表（查询结果对应的表）、视图表（虚表）\n\n**关系的性质**：\n\n①列的同质性：每一列中的分量为同一类型，来自同一个域\n\n②列名唯一性：每列要基于不同的属性名，但是不同列的值可以出自同一个域\n\n③元组相异性：关系中任意两个元组不能完全相同\n\n④行序无关性：行的次序无关紧要，可以互换\n\n⑤列序无关性：列的次序无关紧要，可以互换\n\n⑥分量原子性：每一个分量都必须是不可分的数据项\n\n**关系模式：** 关系结构的描述和定义，即二维表的表结构定义。可简记为关系的属性名表。例如学生关系模式可以简记为学生（<u>学号</u>，姓名，性别，年龄，籍贯）。可理解为**表头** \n\n**关系数据库：** 基于关系模型的数据库。\n\n==关系、关系模型、关系模式和关系数据库的区别与联系：==\n\n**区别：**\n\n- `关系模型`是用表结构表示实体集与实体集之间联系的一种模型；`关系`是属性值域的笛卡儿积中有意义的元组集合，实质上是一张二维表，表的每一行为一个元组，每一列为一个属性；`关系模式`是关系结构的描述和定义，即二维表的表结构定义；`关系数据库`是建立在关系模型之上的关系的集合\n\n**联系：**\n\n- 一个关系只能对应一个关系模式，一个关系模式可对应多个关系\n- 关系模式是关系的型，按其型装入数据值后即形成关系\n- 关系模式是相对静态的、稳定的，而关系是动态的、随时间变化的\n- 一个关系数据库是相关关系的集合，而关系模型的结构是相关关系模式的集合\n\n## 2、关系的完整性约束\n\n**实体完整性**： 组成主键的各属性都不能取空值（任何主键属性都不能为空，==注意属性集不为空不代表属性集中的所有属性都不为空==）。插入和修改元组可能破坏实体完整性规则。\n\n**参照完整性**：如果属性\\属性组F是R的外键（R为依赖表），它与S表的主键相对应，则对于R中的每个元组，在F上的取值必须取空值或者等于S中某个元组的主键值。\n\n> **实体完整性优先于参照完整性** 。即外键是主键属性时，不能为空。\n>\n> <img src=\"C:/AppData/Roaming/Typora/typora-user-images/image-20220516162456086.png\" alt=\"image-20220516162456086\" style=\"zoom:50%;\" />\n\n**用户定义完整性**：针对某一具体关系数据库的约束。包括定义属性是否为空值、定义属性值的唯一性、定义属性的取值范围、定义属性的默认值、定义属性间函数依赖关系等。\n\n---\n\n<img src=\"https://s2.loli.net/2022/05/16/SB9MQkbiUuwDPaj.png\" alt=\"image-20220516162759988\" style=\"zoom:67%;\" />\n\n**关系完整性控制的实现原理**：定义、检查、保证数据完整性\n\n**例子：**\n\n<img src=\"https://s2.loli.net/2022/05/16/rXFtZ146I9xePCw.png\" alt=\"image-20220516194737598\" style=\"zoom:67%;\" />\n\n## 3、关系代数的运算\n\n**常用的关系运算：**并、交、差、笛卡儿积、投影、选择、连接、除运算\n\n**基本的关系运算：**并、差、笛卡儿积、选择、投影，其他的关系运算可以通过这些基本运算来表达（关系依赖） \n\n<img src=\"https://s2.loli.net/2022/05/16/1zVE8DkPaXOYuAe.png\" alt=\"image-20220516163214039\" style=\"zoom:67%;\" />\n\n### 并 ∪\n\n关系R和S的并由属于R或者属于S的元组（行）组成，并去掉冗余的元组\n\n### 交 ∩\n\n关系R和S的交由即属于R又属于S的元组（行）组成\n\n### 差 -\n\n关系R和S的差由属于R但不属于S的元组（行）组成\n\n👉并交差运算：两个关系必须是相容的同类关系（兼容表），列数相同且属性值取自同一个域\n\n### 积 ×\n\n即笛卡尔积，k元关系R与j元关系S进行笛卡尔积得到j+k元新关系，该关系的元组（行）数为R和S的元组（行）数之积\n\n![image-20220516163515542](https://s2.loli.net/2022/05/16/6Aq4Di3mdcESkLr.png)\n\n### 选择 σ\n\nσ~F~ (R) = {t|(t ∈R) ∧ F(t) = True}。从关系R中选出满足条件表达式F（可简单可复合）的那些==元组==所构成的关系\n\n### 投影 Π\n\n∏~A~ (R) = {t[A] | t ∈ R}。取属性名表A中指定的==列==，**消除重复元组** （当选择的列中不包含键时会出现重复元组）\n\n![image-20220516163855752](https://s2.loli.net/2022/05/16/yiZbTMXzfPdKh7n.png)\n\n### 连接 ⋈\n\n从两个关系的笛卡儿积中选取属性间满足一定条件的元组（==笛卡儿积上进行的选择运算== ）\n\n①等值连接：该特定条件为R关系在A属性（列）上的值与S关系在B属性（列）上的值相等\n\n②自然连接：将结果之中重复的属性（列）去掉的等值连接\n\n👉等值连接与自然连接的区别：①自然连接一定是等值连接，等值连接不一定是自然连接；②等值连接的连接属性不要求是同名属性；③等值连接后不要求去掉同名属性\n\n![image-20220516164224269](https://s2.loli.net/2022/05/16/43KxoqJRZsfLXvj.png)\n\n### 除 ÷\n\n（个人概括？）R ÷ S，先求出R与S的属性集交集，在本例中为CD，∏~C,D~ (S) = {cd, ef}，然后求R的属性集 - CD = AB，将R按AB分组，本例中可以分为三组ab、bc、ed，分别求出这些组的CD集合，本例中为ab组 = {cd, ef, de}，bc组 = {ef}，ed组 = {cd, ef}，可以判断出{cd, ef}包含于ab组和ed组，故R ÷ S = {ab, cd}\n\n![image-20220516165612885](https://s2.loli.net/2022/05/16/s1ezau8YtGgRPyV.png)\n\n## 4、综合的例子\n\n> 基本都是先选择后投影，注意如果要做连接运算的话，可以先做部分选择和投影运算，这样可以降低计算开销\n>\n> 如果有“所有”这个词，可以考虑除运算\n\n<img src=\"https://s2.loli.net/2022/05/16/sNoQwLK7nvU3eWu.png\" alt=\"image-20220516185848173\" style=\"zoom:67%;\" />\n\n<img src=\"https://s2.loli.net/2022/05/16/pjqTRbnkX8VPLfy.png\" alt=\"image-20220516185957304\" style=\"zoom:67%;\" />\n\n<img src=\"https://s2.loli.net/2022/05/16/fjmZiRI2uoJaAXb.png\" alt=\"image-20220516190034825\" style=\"zoom:67%;\" />\n\n<img src=\"https://s2.loli.net/2022/05/16/DLAMuWNqnKVo923.png\" alt=\"image-20220516190106486\" style=\"zoom:67%;\" />\n\n<img src=\"https://s2.loli.net/2022/05/16/gQGOdZX5zUB3KTf.png\" alt=\"image-20220516190238200\" style=\"zoom:67%;\" />\n\n<img src=\"https://s2.loli.net/2022/05/16/rjBwDJC1KUzI35h.png\" alt=\"image-20220516190551314\" style=\"zoom:67%;\" />\n\n<img src=\"https://s2.loli.net/2022/05/16/vpOuMmTFUZKsJAL.png\" alt=\"image-20220516191322048\" style=\"zoom:67%;\" />\n\n","slug":"关系数据库","published":1,"updated":"2022-06-24T15:25:05.872Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4wroc460005mwsk7ehzb33g","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"2fb805a0bd5b5c948b1cb6c6e393f74fc31e9906a0c853b2db4f7ae37bcc7bd6\"></script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">请输入密码查看文章</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","site":{"data":{"post-body-end":"<div>\n    \n</div>\n","styles":"body {\n  background: url(\"/images/background.png\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 100% 100%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.8);\n}\n.popup {\n  opacity: 0.8;\n}\n.post-block {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.comments {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.post {\n  margin-top: 60px;\n  padding: 20px;\n  margin-bottom: 60px;\n  -webkit-box-shadow: 0 0 0px #788072;\n  -moz-box-shadow: 0 0 0px rgba(202,203,204,0.5);\n}\n.post-button .btn {\n  color: #555 !important;\n  background-color: #fff;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  border: none !important;\n  transition-property: unset;\n  padding: 0px 15px;\n}\n.post-button .btn:hover {\n  color: #fff !important;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  background-image: linear-gradient(90deg, #a166ab 0%, #ef4e7b 25%, #f37055 50%, #ef4e7b 75%, #a166ab 100%);\n}\n","variables":""}},"length":2443,"excerpt":"Here's something encrypted, password is required to continue reading.","more":"Here's something encrypted, password is required to continue reading.","origin":"<h2 id=\"1、基本概念\"><a href=\"#1、基本概念\" class=\"headerlink\" title=\"1、基本概念\"></a>1、基本概念</h2><p><strong>关系模型的特点：</strong>①结构简单、表达力强；②语言的一体化；③非过程化的操作；④坚实的数学基础（关系理论）</p>\n<p><strong>关系模型的三要素</strong>：</p>\n<ul>\n<li>关系数据结构：在关系模型中，实体与实体之间的联系均用表来表示</li>\n<li>关系数据操作：包括增删改查、传统的集合操作、专门的关系操作</li>\n<li>关系的完整性约束：实体完整性、参照完整性、用户自定义的完整性</li>\n</ul>\n<span id=\"more\"></span>\n\n<p><strong>关系的基本术语</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>基本术语</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>元组和属性</td>\n<td>元组：行，属性：列。关系中的元组个数称为关系的基数，属性个数称为关系的度或维数</td>\n</tr>\n<tr>\n<td>超键</td>\n<td>能唯一区分任意两行数据的属性或属性集。包含超键的多个属性都是超键</td>\n</tr>\n<tr>\n<td>候选键（&#x3D;&#x3D;键&#x3D;&#x3D;）</td>\n<td>某一属性（或属性集）的值可唯一地表示每一个元组。<u>候选键本身是超键，但其任何真子集都不再是超键</u>。候选键包含的属性为&#x3D;&#x3D;主属性&#x3D;&#x3D;</td>\n</tr>\n<tr>\n<td>主键</td>\n<td>在使用关系来组织数据时，常使用一个候选键作为组织该关系以及唯一性操作的对象，其中被选用的候选键为主键，例如学号。主键包含的属性为&#x3D;&#x3D;主键属性&#x3D;&#x3D;</td>\n</tr>\n<tr>\n<td>外键</td>\n<td>对于关系R1、R2，其中某属性\\属性集A不是R1的候选键，但是是R2的候选键，则称A是R1的外键</td>\n</tr>\n<tr>\n<td>全键</td>\n<td>当需要一个关系的全部属性作为该关系的候选键，则称该全部属性组合为全键</td>\n</tr>\n</tbody></table>\n<p><strong>关系的种类：</strong>基本关系、查询表（查询结果对应的表）、视图表（虚表）</p>\n<p><strong>关系的性质</strong>：</p>\n<p>①列的同质性：每一列中的分量为同一类型，来自同一个域</p>\n<p>②列名唯一性：每列要基于不同的属性名，但是不同列的值可以出自同一个域</p>\n<p>③元组相异性：关系中任意两个元组不能完全相同</p>\n<p>④行序无关性：行的次序无关紧要，可以互换</p>\n<p>⑤列序无关性：列的次序无关紧要，可以互换</p>\n<p>⑥分量原子性：每一个分量都必须是不可分的数据项</p>\n<p><strong>关系模式：</strong> 关系结构的描述和定义，即二维表的表结构定义。可简记为关系的属性名表。例如学生关系模式可以简记为学生（<u>学号</u>，姓名，性别，年龄，籍贯）。可理解为<strong>表头</strong> </p>\n<p><strong>关系数据库：</strong> 基于关系模型的数据库。</p>\n<p>&#x3D;&#x3D;关系、关系模型、关系模式和关系数据库的区别与联系：&#x3D;&#x3D;</p>\n<p><strong>区别：</strong></p>\n<ul>\n<li><code>关系模型</code>是用表结构表示实体集与实体集之间联系的一种模型；<code>关系</code>是属性值域的笛卡儿积中有意义的元组集合，实质上是一张二维表，表的每一行为一个元组，每一列为一个属性；<code>关系模式</code>是关系结构的描述和定义，即二维表的表结构定义；<code>关系数据库</code>是建立在关系模型之上的关系的集合</li>\n</ul>\n<p><strong>联系：</strong></p>\n<ul>\n<li>一个关系只能对应一个关系模式，一个关系模式可对应多个关系</li>\n<li>关系模式是关系的型，按其型装入数据值后即形成关系</li>\n<li>关系模式是相对静态的、稳定的，而关系是动态的、随时间变化的</li>\n<li>一个关系数据库是相关关系的集合，而关系模型的结构是相关关系模式的集合</li>\n</ul>\n<h2 id=\"2、关系的完整性约束\"><a href=\"#2、关系的完整性约束\" class=\"headerlink\" title=\"2、关系的完整性约束\"></a>2、关系的完整性约束</h2><p><strong>实体完整性</strong>： 组成主键的各属性都不能取空值（任何主键属性都不能为空，&#x3D;&#x3D;注意属性集不为空不代表属性集中的所有属性都不为空&#x3D;&#x3D;）。插入和修改元组可能破坏实体完整性规则。</p>\n<p><strong>参照完整性</strong>：如果属性\\属性组F是R的外键（R为依赖表），它与S表的主键相对应，则对于R中的每个元组，在F上的取值必须取空值或者等于S中某个元组的主键值。</p>\n<blockquote>\n<p><strong>实体完整性优先于参照完整性</strong> 。即外键是主键属性时，不能为空。</p>\n<img data-src=\"C:/AppData/Roaming/Typora/typora-user-images/image-20220516162456086.png\" alt=\"image-20220516162456086\" style=\"zoom:50%;\" />\n</blockquote>\n<p><strong>用户定义完整性</strong>：针对某一具体关系数据库的约束。包括定义属性是否为空值、定义属性值的唯一性、定义属性的取值范围、定义属性的默认值、定义属性间函数依赖关系等。</p>\n<hr>\n<img data-src=\"https://s2.loli.net/2022/05/16/SB9MQkbiUuwDPaj.png\" alt=\"image-20220516162759988\" style=\"zoom:67%;\" />\n\n<p><strong>关系完整性控制的实现原理</strong>：定义、检查、保证数据完整性</p>\n<p><strong>例子：</strong></p>\n<img data-src=\"https://s2.loli.net/2022/05/16/rXFtZ146I9xePCw.png\" alt=\"image-20220516194737598\" style=\"zoom:67%;\" />\n\n<h2 id=\"3、关系代数的运算\"><a href=\"#3、关系代数的运算\" class=\"headerlink\" title=\"3、关系代数的运算\"></a>3、关系代数的运算</h2><p><strong>常用的关系运算：</strong>并、交、差、笛卡儿积、投影、选择、连接、除运算</p>\n<p><strong>基本的关系运算：</strong>并、差、笛卡儿积、选择、投影，其他的关系运算可以通过这些基本运算来表达（关系依赖） </p>\n<img data-src=\"https://s2.loli.net/2022/05/16/1zVE8DkPaXOYuAe.png\" alt=\"image-20220516163214039\" style=\"zoom:67%;\" />\n\n<h3 id=\"并-∪\"><a href=\"#并-∪\" class=\"headerlink\" title=\"并 ∪\"></a>并 ∪</h3><p>关系R和S的并由属于R或者属于S的元组（行）组成，并去掉冗余的元组</p>\n<h3 id=\"交-∩\"><a href=\"#交-∩\" class=\"headerlink\" title=\"交 ∩\"></a>交 ∩</h3><p>关系R和S的交由即属于R又属于S的元组（行）组成</p>\n<h3 id=\"差\"><a href=\"#差\" class=\"headerlink\" title=\"差 -\"></a>差 -</h3><p>关系R和S的差由属于R但不属于S的元组（行）组成</p>\n<p>👉并交差运算：两个关系必须是相容的同类关系（兼容表），列数相同且属性值取自同一个域</p>\n<h3 id=\"积-×\"><a href=\"#积-×\" class=\"headerlink\" title=\"积 ×\"></a>积 ×</h3><p>即笛卡尔积，k元关系R与j元关系S进行笛卡尔积得到j+k元新关系，该关系的元组（行）数为R和S的元组（行）数之积</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/16/6Aq4Di3mdcESkLr.png\" alt=\"image-20220516163515542\"></p>\n<h3 id=\"选择-σ\"><a href=\"#选择-σ\" class=\"headerlink\" title=\"选择 σ\"></a>选择 σ</h3><p>σ<del>F</del> (R) &#x3D; {t|(t ∈R) ∧ F(t) &#x3D; True}。从关系R中选出满足条件表达式F（可简单可复合）的那些&#x3D;&#x3D;元组&#x3D;&#x3D;所构成的关系</p>\n<h3 id=\"投影-Π\"><a href=\"#投影-Π\" class=\"headerlink\" title=\"投影 Π\"></a>投影 Π</h3><p>∏<del>A</del> (R) &#x3D; {t[A] | t ∈ R}。取属性名表A中指定的&#x3D;&#x3D;列&#x3D;&#x3D;，<strong>消除重复元组</strong> （当选择的列中不包含键时会出现重复元组）</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/16/yiZbTMXzfPdKh7n.png\" alt=\"image-20220516163855752\"></p>\n<h3 id=\"连接-⋈\"><a href=\"#连接-⋈\" class=\"headerlink\" title=\"连接 ⋈\"></a>连接 ⋈</h3><p>从两个关系的笛卡儿积中选取属性间满足一定条件的元组（&#x3D;&#x3D;笛卡儿积上进行的选择运算&#x3D;&#x3D; ）</p>\n<p>①等值连接：该特定条件为R关系在A属性（列）上的值与S关系在B属性（列）上的值相等</p>\n<p>②自然连接：将结果之中重复的属性（列）去掉的等值连接</p>\n<p>👉等值连接与自然连接的区别：①自然连接一定是等值连接，等值连接不一定是自然连接；②等值连接的连接属性不要求是同名属性；③等值连接后不要求去掉同名属性</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/16/43KxoqJRZsfLXvj.png\" alt=\"image-20220516164224269\"></p>\n<h3 id=\"除-÷\"><a href=\"#除-÷\" class=\"headerlink\" title=\"除 ÷\"></a>除 ÷</h3><p>（个人概括？）R ÷ S，先求出R与S的属性集交集，在本例中为CD，∏<del>C,D</del> (S) &#x3D; {cd, ef}，然后求R的属性集 - CD &#x3D; AB，将R按AB分组，本例中可以分为三组ab、bc、ed，分别求出这些组的CD集合，本例中为ab组 &#x3D; {cd, ef, de}，bc组 &#x3D; {ef}，ed组 &#x3D; {cd, ef}，可以判断出{cd, ef}包含于ab组和ed组，故R ÷ S &#x3D; {ab, cd}</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/16/s1ezau8YtGgRPyV.png\" alt=\"image-20220516165612885\"></p>\n<h2 id=\"4、综合的例子\"><a href=\"#4、综合的例子\" class=\"headerlink\" title=\"4、综合的例子\"></a>4、综合的例子</h2><blockquote>\n<p>基本都是先选择后投影，注意如果要做连接运算的话，可以先做部分选择和投影运算，这样可以降低计算开销</p>\n<p>如果有“所有”这个词，可以考虑除运算</p>\n</blockquote>\n<img data-src=\"https://s2.loli.net/2022/05/16/sNoQwLK7nvU3eWu.png\" alt=\"image-20220516185848173\" style=\"zoom:67%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/05/16/pjqTRbnkX8VPLfy.png\" alt=\"image-20220516185957304\" style=\"zoom:67%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/05/16/fjmZiRI2uoJaAXb.png\" alt=\"image-20220516190034825\" style=\"zoom:67%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/05/16/DLAMuWNqnKVo923.png\" alt=\"image-20220516190106486\" style=\"zoom:67%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/05/16/gQGOdZX5zUB3KTf.png\" alt=\"image-20220516190238200\" style=\"zoom:67%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/05/16/rjBwDJC1KUzI35h.png\" alt=\"image-20220516190551314\" style=\"zoom:67%;\" />\n\n<img data-src=\"https://s2.loli.net/2022/05/16/vpOuMmTFUZKsJAL.png\" alt=\"image-20220516191322048\" style=\"zoom:67%;\" />\n\n","encrypt":true},{"title":"os绪论","abbrlink":23723,"date":"2022-06-23T03:23:57.000Z","_content":"\n# 一、操作系统绪论\n\n## ==重点考察概念==\n\n操作系统的定义，操作系统在计算机系统中的地位，操作系统的主要功能，资源复用、虚化、抽象，操作系统的特征，多道程序设计，并发，中断，系统调用，CPU 的两种工作模式（用户态、内核态），特权指令和非特权指令 \n\n## 1、操作系统概念、功能及提供的接口\n\n**操作系统的概念**：管理计算机硬件并提供应用程序运行环境的软件。操作系统是配置在计算机硬件上的第一层软件，是对硬件的首次扩充，形成了虚拟计算机/扩展机。它位于硬件与其它软件之间，是所有其他软件运行的基础。\n\n<!-- more -->\n\n**操作系统的作用：**\n\n**用户视角：** 操作系统是用户与计算机硬件之间的接口。为用户使用计算机提供服务。\n\n**系统视角：** \n\n- ==资源管理器== ：管理计算机系统的软硬件资源。**资源复用、资源虚化以及资源抽象** 。\n    - 资源复用：分为时间复用和空间复用。时间复用指的是多个用户或程序轮流使用某个资源，如CPU使用；空间复用指的是多个用户或程序同时使用资源的一部分，如内存使用。\n    - 资源虚化：让一个物理设备变成多个相对独立的对应物\n    - 资源抽象：对内封装细节，对外通过管理对象与访问接口，如：面向进程而不是CPU，面向文件而不是物理存储介质，面向窗口而不是屏幕\n    - ==复用与虚拟化解决的是资源不足的问题。资源抽象解决的是资源复杂的问题。==\n- ==控制程序== ：控制程序执行过程，防止错误和计算机的不当使用\n\n![image-20220513191418134](https://s2.loli.net/2022/05/13/msaGykqzLiVtrDT.png)\n\n![image-20220513193433159](https://s2.loli.net/2022/05/13/HKJvnRhTVw89bdC.png)\n\n![image-20220513192502110](https://s2.loli.net/2022/05/13/AQW3CRkS6fHpBNw.png)\n\n![image-20220513193123123](https://s2.loli.net/2022/05/13/LiEpfK6Awz8WFvs.png)\n\n联机命令接口 = 交互命令接口，如命令行\n\n脱机命令接口 = 批处理命令接口，如*.bat文件\n\n程序接口：如dll文件，调用dll文件即可进行系统调用，只能通过应用程序间接使用\n\n## 2、操作系统的特征\n\n- **并发性：** 多个事件在同一事件间隔内发生（并行：同一时刻）。并发的实质是一个物理CPU(也可以多个物理CPU) 在若干道程序之间多路复用，并发性是对有限物理资源强制行使多用户共享以提高效率。\n\n- **共享性：** 系统中的资源可供多个并发执行的进程共同使用。有两种资源共享方式：\n\n    - 互斥共享：一段时间只允许一个进程访问。如对摄像头设备的共享使用\n    - 同时访问：一段时间允许多个进程访问。如对硬盘资源的共享使用\n\n    ==并发和共享是操作系统的两个最基本特征，二者之间互为存在条件。== \n\n- **虚拟性：** 把一个物理上的实体变为若干个逻辑上的对应物；或把物理上的多个实体变成逻辑上的一个对应物的技术。eg.虚拟存储器\n\n    - 空分复用技术：如虚拟存储技术\n\n    - 时分复用技术：如虚拟处理器技术\n\n        并发性是虚拟性存在的基础\n\n- **异步性（或不确定性）：** 多个作业的执行过程是走走停停的，其执行顺序和每个作业的执行时间是不确定的。\n\n## 3、操作系统的发展与分类\n\n![image-20220513201053867](https://s2.loli.net/2022/05/13/3AWQXpLSTGkobFC.png)\n\n批处理技术是指计算机系统对一批作业自动进行处理的一种技术。\n\n分类：\n\n- 联机批处理：采用联机输入/输出，即输入/输出操作在监督程序控制下，同步进行。 缺点：速度慢 \n- 脱机批处理：外围机：独立于主机，负责把作业任务写入磁带，以及从磁带输出到打印机。主机：负责从磁带上把作业调入内存，或者把结果写回磁带。实现了部分异步能力、减少了CPU的空闲时间、提高了I/O速度\n\n---\n\n多道程序设计：\n\n- **核心思想：** 将多个作业存放在主存中，这些程序在管理程序的控制下交替运行，共享处理机和系统中的其他资源。即通过安排作业（编码与数据）==使得CPU无论何时都有进程执行，从而最大化CPU利用率== \n- 没有提供用户与计算机系统的交互\n- 多道程序宏观上并行，微观上串行\n- 多道程序设计的道数不是任意的\n- **优缺点：** \n    - 提高了CPU的利用率\n    - 提高了内存和I/O设备的利用率\n    - 改进了系统的吞吐率\n    - 充分发挥了系统的并行性\n    - 其主要缺点是: 作业周转时间延长\n- **多重处理系统:   ** 指配置了多个物理CPU，能真正同时执行多道程序的系统。\n\n---\n\n==操作系统的三种基本类型：批处理操作系统、分时操作系统、实时操作系统== \n\n分时系统：允许多个联机用户同时使用一台计算机系统进行计算的操作系统称分时操作系统\n\n**分时技术：** 把处理机的运行时间分成很短的时间片，按时间片轮流把处理机分配给各联机作业使用。\n\n是多道程序设计的自然延伸\n\n采用调度算法，以快速切换作业，好像每个作业同时执行\n\n**特征：** \n\n- 多路性：也称同时性，一台计算机与若干台终端相连接，终端上的这些用户可以同时使用计算机。\n- 交互性：用户通过终端采用人机会话的方式直接控制程序运行，同程序进行交互。\n- 独立性：用户彼此之间都感觉不到别人也在使用这台计算机，好像只有自己独占计算机一样。\n- 及时性：用户请求能在很短时间内获得响应。\n\n## 4、操作系统的运行机制与体系结构\n\n![image-20220513203343485](https://s2.loli.net/2022/05/13/uCvXRb5ixgc4ep9.png)\n\n> 用程序状态字寄存器（PSW， program status word）中的某标志位来标识当前处理器处于什么状态。如0为用户态，1为核心态\n\n---\n\n内核是操作系统的构件，或称基本单位。 \n\n内核作用：  为进程提供管理 、为进程执行提供良好的运行环境\n\n==基本功能:==  \n\n- 中断处理：截获中断，转向中断处理例程\n- 短程调度：CPU调度，保存与恢复现场\n- 原语管理：原语是不可中断过程\n\n==基本属性:== \n\n- 内核是由中断驱动的\n- 内核的执行是连续的\n- 内核在屏蔽中断状态下执行\n- 内核可以使用特权指令\n\n==分类：==\n\n- **模块结构（整体式结构）**：将内核划分为一个个独立的模块，模块之间相互调用。效率高但是结构不清晰，访问控制困难\n\n- **层次结构**：一种特殊的模块结构。将内核划分为一系列相互依赖的层次，每个层次也可以分解为一系列更小的模块。\n\n    ![](https://s2.loli.net/2022/03/04/2PkGeSmIBXyOTai.png)\n\n- **微内核结构**\n\n![image-20220513202231353](https://s2.loli.net/2022/05/13/OzmplexJuwFcj24.png)\n\n![image-20220513202617422](https://s2.loli.net/2022/05/13/7S4E6d3gHUeNlpI.png)\n\n## 5、中断和异常\n\n![image-20220513205554625](https://s2.loli.net/2022/05/13/ojrdODLXqEezi3G.png)\n\n==用户态 → 核心态是通过中断实现的，并且中断是唯一途径==\n\n==核心态 → 用户态的切换是通过执行一个特权指令，将程序状态字（PSW）的标志位设置为“用户态”==\n\n![image-20220513205029547](https://s2.loli.net/2022/05/13/twndlTegkLJ6x9X.png)\n\n![image-20220513205136837](https://s2.loli.net/2022/05/13/EYTzjIOvW7drqfx.png)\n\n**外中断的处理过程：**\n\n![image-20220513205420243](https://s2.loli.net/2022/05/13/oRmXYrNvBUkTgfI.png)\n\n## 6、系统调用\n\n![image-20220513213014300](https://s2.loli.net/2022/05/13/xzmwb1KdrT5MIsp.png)\n\n系统调用是操作系统提供给应用程序（程序员/编程人员）使用的接口，可以理解为一种可供应用程序调用的特殊函数，应用程序可以发出系统调用请求来获得操作系统的服务。\n\n系统调用与库函数的区别：\n\n![image-20220513211951839](https://s2.loli.net/2022/05/13/tK9mNhM6OdzepCP.png)\n\n系统调用背后的过程：\n\n![image-20220513212751507](https://s2.loli.net/2022/05/13/obNKP1RrQt9sBuV.png)\n\n中断、异常和系统调用：\n\n|              | 产生原因                                         | 实现机制                     | 区别                                                         | 保存地址                                                 | 处理                                                         |\n| ------------ | ------------------------------------------------ | ---------------------------- | ------------------------------------------------------------ | -------------------------------------------------------- | ------------------------------------------------------------ |\n| **中断**     | 由定时器和I/O设备产生（来自硬件设备的处理请求）  | 中断机制                     | ①由与现行指令无关的中断信号触发的(异步的)；②中断的发生与CPU处在用户模式或内核模式无关，系统不能确定中断发生的时间 ；③一般来说，中断处理程序提供的服务不是为当前进程所需的 | 保存的是下一条指令的地址，以便在指令结束后检测有没有中断 | **硬件和软件结合** 。①定时器：定时器是OS回收控制的重要方式，可设置为在指定周期（固定或可变）后中断计算机。防止用户程序陷入死循环，或不调用系统服务并且不将控制返回给操作系统。在将控制交到用户之前，操作系统确保定时器已设置好以便产生中断；②中断装置（发生中断源并产生中断的**硬件** ）：发现中断源、保护现场、启动中断处理程序（IDTR寄存器中存放了中断描述符表在内存的起始地址）；③中断处理程序： 保护未被硬件保护的一些必需的处理状态 （CPU自动保存的只有EIP/EFLAGS/ESP/SS/CS） ；识别各个中断源，分析产生中断的原因；处理中断事件；恢复正常操作；④OS必须保证中断前后的同步性，必须保证现场保护的原子性（保护现场的过程不能被中断） |\n| **异常**     | 由程序错误产生，或者由内核必须处理的异常条件产生 | 中断机制                     | ① 由处理器正在执行现行指令而引起的； ②异常处理程序提供的服务是为当前进程所用的；③异常包括出错、陷入、终止和编程异常等等；④异常通常由意想不到的行为触发 | 出错保存的是当前指令的地址，陷入保存的是下一条指令的地址 | ①由硬件检测并处理（如除0）；②硬件自身出错产生的异常：通常会在检测错误之后重新执行该指令，CPU保存运行状态；③有些异常是修复后返回并重新执行出错的指令（如页错误）；有些异常是OS通知相应进程；④异常发生在内核会导致OS崩溃 |\n| **系统调用** | 程序主动请求操作系统服务                         | 通常通过一种特殊的异常来实现 | 程序主动请求系统服务                                         | 保存的是下一条指令的地址                                 | 提供给用户态程序执行特权操作的接口；触发事件，切换至内核态；传递系统调用的参数； 保存状态以便完成系统调用后恢复执行 |\n\n## 7、==可能的大题：多道程序运行、简答题==\n\n### 甘特图\n\n计算作业完成时间，CPU或者I/O设备的利用率等等\n\n资源利用率：CPU利用率 = CPU有效工作时间/CPU总的运行时间， CPU总的运行时间 = CPU有效工作时间+CPU空闲等待时间。\n\nI/O设备的利用率同理。\n\n==注意考虑优先级以及是否能够抢占==\n\n**（1）**在单CPU和两台I/O(I1,I2)设备的多道程序设计环境下，同时投入三个作业运行。它们的执行轨迹如下：\n\nJob1：I2(30ms)、CPU(10ms)、I1(30ms)、CPU(10ms)\n\nJob2：I1(20ms)、CPU(20ms)、I2(40ms)\n\nJob3：CPU(30ms)、I1(20ms)\n\n如果CPU、I1和I2都能并行工作，优先级从高到低为Job1、Job2和Job3，优先级高的作业可以抢占优先级低的作业的CPU。试求：(1)每个作业从投入到完成分别所需的时间。(2) 每个作业投入到完成CPU的利用率。(3)I/O设备利用率。\n\n**答：**画出三个作业并行工作图如下(图中着色部分为作业等待时间)：\n\n![img](https://s2.loli.net/2022/05/14/FxBnaZuVIQ8Nhe7.png)\n\n(1) Job1从投入到运行完成需80ms，Job2从投入到运行完成需90ms，Job3从投入到运行完成需90ms。\n\n(2) CPU空闲时间段为：60ms至70ms，80ms至90ms。所以CPU利用率为(90-20)/90=77.78%。\n\n(3) 设备I1空闲时间段为：20ms至40ms，故I1的利用率为(90-20)/90=77.78%。设备I2空闲时间段为：30ms至50ms，故I2的利用率为(90-20)/90=77.78%。\n\n \n\n2、 若内存中有3道程序A、B、C，它们按A、B、C优先次序运行（不考虑强占）。各程序的计算轨迹为：\n\nA：计算(20)、I/O(30)、计算(10) \n\nB：计算(40)、I/O(20)、计算(10)\n\nC：计算(10)、I/O(30)、计算(20)\n\n如果三道程序都使用相同设备进行I/O(即程序用串行方式使用设备，调度开销忽略不计)。试分别画出单道和多道运行的时间关系图。两种情况下，CPU的平均利用率各为多少?\n\n**答**：分别画出单道和多道运行的时间图\n\n(1) 单道运行时间关系图\n\n  ![img](https://s2.loli.net/2022/05/14/FhG1CTOSvzJu8EM.png)\n\n单道总运行时间为190ms。CPU利用率为(190-80)/190=57.9%\n\n(2) 多道运行时间关系图\n\n  ![img](https://s2.loli.net/2022/05/14/vworFI23sGiWeKp.png)\n\n多道总运行时间为140ms。CPU利用率为(140-30)/140=78.6%\n","source":"_posts/os绪论.md","raw":"---\ntitle: os绪论\ntags: \n- 操作系统\ncategory: \n- 操作系统\nabbrlink: 23723\ndate: 2022-06-23 11:23:57\n---\n\n# 一、操作系统绪论\n\n## ==重点考察概念==\n\n操作系统的定义，操作系统在计算机系统中的地位，操作系统的主要功能，资源复用、虚化、抽象，操作系统的特征，多道程序设计，并发，中断，系统调用，CPU 的两种工作模式（用户态、内核态），特权指令和非特权指令 \n\n## 1、操作系统概念、功能及提供的接口\n\n**操作系统的概念**：管理计算机硬件并提供应用程序运行环境的软件。操作系统是配置在计算机硬件上的第一层软件，是对硬件的首次扩充，形成了虚拟计算机/扩展机。它位于硬件与其它软件之间，是所有其他软件运行的基础。\n\n<!-- more -->\n\n**操作系统的作用：**\n\n**用户视角：** 操作系统是用户与计算机硬件之间的接口。为用户使用计算机提供服务。\n\n**系统视角：** \n\n- ==资源管理器== ：管理计算机系统的软硬件资源。**资源复用、资源虚化以及资源抽象** 。\n    - 资源复用：分为时间复用和空间复用。时间复用指的是多个用户或程序轮流使用某个资源，如CPU使用；空间复用指的是多个用户或程序同时使用资源的一部分，如内存使用。\n    - 资源虚化：让一个物理设备变成多个相对独立的对应物\n    - 资源抽象：对内封装细节，对外通过管理对象与访问接口，如：面向进程而不是CPU，面向文件而不是物理存储介质，面向窗口而不是屏幕\n    - ==复用与虚拟化解决的是资源不足的问题。资源抽象解决的是资源复杂的问题。==\n- ==控制程序== ：控制程序执行过程，防止错误和计算机的不当使用\n\n![image-20220513191418134](https://s2.loli.net/2022/05/13/msaGykqzLiVtrDT.png)\n\n![image-20220513193433159](https://s2.loli.net/2022/05/13/HKJvnRhTVw89bdC.png)\n\n![image-20220513192502110](https://s2.loli.net/2022/05/13/AQW3CRkS6fHpBNw.png)\n\n![image-20220513193123123](https://s2.loli.net/2022/05/13/LiEpfK6Awz8WFvs.png)\n\n联机命令接口 = 交互命令接口，如命令行\n\n脱机命令接口 = 批处理命令接口，如*.bat文件\n\n程序接口：如dll文件，调用dll文件即可进行系统调用，只能通过应用程序间接使用\n\n## 2、操作系统的特征\n\n- **并发性：** 多个事件在同一事件间隔内发生（并行：同一时刻）。并发的实质是一个物理CPU(也可以多个物理CPU) 在若干道程序之间多路复用，并发性是对有限物理资源强制行使多用户共享以提高效率。\n\n- **共享性：** 系统中的资源可供多个并发执行的进程共同使用。有两种资源共享方式：\n\n    - 互斥共享：一段时间只允许一个进程访问。如对摄像头设备的共享使用\n    - 同时访问：一段时间允许多个进程访问。如对硬盘资源的共享使用\n\n    ==并发和共享是操作系统的两个最基本特征，二者之间互为存在条件。== \n\n- **虚拟性：** 把一个物理上的实体变为若干个逻辑上的对应物；或把物理上的多个实体变成逻辑上的一个对应物的技术。eg.虚拟存储器\n\n    - 空分复用技术：如虚拟存储技术\n\n    - 时分复用技术：如虚拟处理器技术\n\n        并发性是虚拟性存在的基础\n\n- **异步性（或不确定性）：** 多个作业的执行过程是走走停停的，其执行顺序和每个作业的执行时间是不确定的。\n\n## 3、操作系统的发展与分类\n\n![image-20220513201053867](https://s2.loli.net/2022/05/13/3AWQXpLSTGkobFC.png)\n\n批处理技术是指计算机系统对一批作业自动进行处理的一种技术。\n\n分类：\n\n- 联机批处理：采用联机输入/输出，即输入/输出操作在监督程序控制下，同步进行。 缺点：速度慢 \n- 脱机批处理：外围机：独立于主机，负责把作业任务写入磁带，以及从磁带输出到打印机。主机：负责从磁带上把作业调入内存，或者把结果写回磁带。实现了部分异步能力、减少了CPU的空闲时间、提高了I/O速度\n\n---\n\n多道程序设计：\n\n- **核心思想：** 将多个作业存放在主存中，这些程序在管理程序的控制下交替运行，共享处理机和系统中的其他资源。即通过安排作业（编码与数据）==使得CPU无论何时都有进程执行，从而最大化CPU利用率== \n- 没有提供用户与计算机系统的交互\n- 多道程序宏观上并行，微观上串行\n- 多道程序设计的道数不是任意的\n- **优缺点：** \n    - 提高了CPU的利用率\n    - 提高了内存和I/O设备的利用率\n    - 改进了系统的吞吐率\n    - 充分发挥了系统的并行性\n    - 其主要缺点是: 作业周转时间延长\n- **多重处理系统:   ** 指配置了多个物理CPU，能真正同时执行多道程序的系统。\n\n---\n\n==操作系统的三种基本类型：批处理操作系统、分时操作系统、实时操作系统== \n\n分时系统：允许多个联机用户同时使用一台计算机系统进行计算的操作系统称分时操作系统\n\n**分时技术：** 把处理机的运行时间分成很短的时间片，按时间片轮流把处理机分配给各联机作业使用。\n\n是多道程序设计的自然延伸\n\n采用调度算法，以快速切换作业，好像每个作业同时执行\n\n**特征：** \n\n- 多路性：也称同时性，一台计算机与若干台终端相连接，终端上的这些用户可以同时使用计算机。\n- 交互性：用户通过终端采用人机会话的方式直接控制程序运行，同程序进行交互。\n- 独立性：用户彼此之间都感觉不到别人也在使用这台计算机，好像只有自己独占计算机一样。\n- 及时性：用户请求能在很短时间内获得响应。\n\n## 4、操作系统的运行机制与体系结构\n\n![image-20220513203343485](https://s2.loli.net/2022/05/13/uCvXRb5ixgc4ep9.png)\n\n> 用程序状态字寄存器（PSW， program status word）中的某标志位来标识当前处理器处于什么状态。如0为用户态，1为核心态\n\n---\n\n内核是操作系统的构件，或称基本单位。 \n\n内核作用：  为进程提供管理 、为进程执行提供良好的运行环境\n\n==基本功能:==  \n\n- 中断处理：截获中断，转向中断处理例程\n- 短程调度：CPU调度，保存与恢复现场\n- 原语管理：原语是不可中断过程\n\n==基本属性:== \n\n- 内核是由中断驱动的\n- 内核的执行是连续的\n- 内核在屏蔽中断状态下执行\n- 内核可以使用特权指令\n\n==分类：==\n\n- **模块结构（整体式结构）**：将内核划分为一个个独立的模块，模块之间相互调用。效率高但是结构不清晰，访问控制困难\n\n- **层次结构**：一种特殊的模块结构。将内核划分为一系列相互依赖的层次，每个层次也可以分解为一系列更小的模块。\n\n    ![](https://s2.loli.net/2022/03/04/2PkGeSmIBXyOTai.png)\n\n- **微内核结构**\n\n![image-20220513202231353](https://s2.loli.net/2022/05/13/OzmplexJuwFcj24.png)\n\n![image-20220513202617422](https://s2.loli.net/2022/05/13/7S4E6d3gHUeNlpI.png)\n\n## 5、中断和异常\n\n![image-20220513205554625](https://s2.loli.net/2022/05/13/ojrdODLXqEezi3G.png)\n\n==用户态 → 核心态是通过中断实现的，并且中断是唯一途径==\n\n==核心态 → 用户态的切换是通过执行一个特权指令，将程序状态字（PSW）的标志位设置为“用户态”==\n\n![image-20220513205029547](https://s2.loli.net/2022/05/13/twndlTegkLJ6x9X.png)\n\n![image-20220513205136837](https://s2.loli.net/2022/05/13/EYTzjIOvW7drqfx.png)\n\n**外中断的处理过程：**\n\n![image-20220513205420243](https://s2.loli.net/2022/05/13/oRmXYrNvBUkTgfI.png)\n\n## 6、系统调用\n\n![image-20220513213014300](https://s2.loli.net/2022/05/13/xzmwb1KdrT5MIsp.png)\n\n系统调用是操作系统提供给应用程序（程序员/编程人员）使用的接口，可以理解为一种可供应用程序调用的特殊函数，应用程序可以发出系统调用请求来获得操作系统的服务。\n\n系统调用与库函数的区别：\n\n![image-20220513211951839](https://s2.loli.net/2022/05/13/tK9mNhM6OdzepCP.png)\n\n系统调用背后的过程：\n\n![image-20220513212751507](https://s2.loli.net/2022/05/13/obNKP1RrQt9sBuV.png)\n\n中断、异常和系统调用：\n\n|              | 产生原因                                         | 实现机制                     | 区别                                                         | 保存地址                                                 | 处理                                                         |\n| ------------ | ------------------------------------------------ | ---------------------------- | ------------------------------------------------------------ | -------------------------------------------------------- | ------------------------------------------------------------ |\n| **中断**     | 由定时器和I/O设备产生（来自硬件设备的处理请求）  | 中断机制                     | ①由与现行指令无关的中断信号触发的(异步的)；②中断的发生与CPU处在用户模式或内核模式无关，系统不能确定中断发生的时间 ；③一般来说，中断处理程序提供的服务不是为当前进程所需的 | 保存的是下一条指令的地址，以便在指令结束后检测有没有中断 | **硬件和软件结合** 。①定时器：定时器是OS回收控制的重要方式，可设置为在指定周期（固定或可变）后中断计算机。防止用户程序陷入死循环，或不调用系统服务并且不将控制返回给操作系统。在将控制交到用户之前，操作系统确保定时器已设置好以便产生中断；②中断装置（发生中断源并产生中断的**硬件** ）：发现中断源、保护现场、启动中断处理程序（IDTR寄存器中存放了中断描述符表在内存的起始地址）；③中断处理程序： 保护未被硬件保护的一些必需的处理状态 （CPU自动保存的只有EIP/EFLAGS/ESP/SS/CS） ；识别各个中断源，分析产生中断的原因；处理中断事件；恢复正常操作；④OS必须保证中断前后的同步性，必须保证现场保护的原子性（保护现场的过程不能被中断） |\n| **异常**     | 由程序错误产生，或者由内核必须处理的异常条件产生 | 中断机制                     | ① 由处理器正在执行现行指令而引起的； ②异常处理程序提供的服务是为当前进程所用的；③异常包括出错、陷入、终止和编程异常等等；④异常通常由意想不到的行为触发 | 出错保存的是当前指令的地址，陷入保存的是下一条指令的地址 | ①由硬件检测并处理（如除0）；②硬件自身出错产生的异常：通常会在检测错误之后重新执行该指令，CPU保存运行状态；③有些异常是修复后返回并重新执行出错的指令（如页错误）；有些异常是OS通知相应进程；④异常发生在内核会导致OS崩溃 |\n| **系统调用** | 程序主动请求操作系统服务                         | 通常通过一种特殊的异常来实现 | 程序主动请求系统服务                                         | 保存的是下一条指令的地址                                 | 提供给用户态程序执行特权操作的接口；触发事件，切换至内核态；传递系统调用的参数； 保存状态以便完成系统调用后恢复执行 |\n\n## 7、==可能的大题：多道程序运行、简答题==\n\n### 甘特图\n\n计算作业完成时间，CPU或者I/O设备的利用率等等\n\n资源利用率：CPU利用率 = CPU有效工作时间/CPU总的运行时间， CPU总的运行时间 = CPU有效工作时间+CPU空闲等待时间。\n\nI/O设备的利用率同理。\n\n==注意考虑优先级以及是否能够抢占==\n\n**（1）**在单CPU和两台I/O(I1,I2)设备的多道程序设计环境下，同时投入三个作业运行。它们的执行轨迹如下：\n\nJob1：I2(30ms)、CPU(10ms)、I1(30ms)、CPU(10ms)\n\nJob2：I1(20ms)、CPU(20ms)、I2(40ms)\n\nJob3：CPU(30ms)、I1(20ms)\n\n如果CPU、I1和I2都能并行工作，优先级从高到低为Job1、Job2和Job3，优先级高的作业可以抢占优先级低的作业的CPU。试求：(1)每个作业从投入到完成分别所需的时间。(2) 每个作业投入到完成CPU的利用率。(3)I/O设备利用率。\n\n**答：**画出三个作业并行工作图如下(图中着色部分为作业等待时间)：\n\n![img](https://s2.loli.net/2022/05/14/FxBnaZuVIQ8Nhe7.png)\n\n(1) Job1从投入到运行完成需80ms，Job2从投入到运行完成需90ms，Job3从投入到运行完成需90ms。\n\n(2) CPU空闲时间段为：60ms至70ms，80ms至90ms。所以CPU利用率为(90-20)/90=77.78%。\n\n(3) 设备I1空闲时间段为：20ms至40ms，故I1的利用率为(90-20)/90=77.78%。设备I2空闲时间段为：30ms至50ms，故I2的利用率为(90-20)/90=77.78%。\n\n \n\n2、 若内存中有3道程序A、B、C，它们按A、B、C优先次序运行（不考虑强占）。各程序的计算轨迹为：\n\nA：计算(20)、I/O(30)、计算(10) \n\nB：计算(40)、I/O(20)、计算(10)\n\nC：计算(10)、I/O(30)、计算(20)\n\n如果三道程序都使用相同设备进行I/O(即程序用串行方式使用设备，调度开销忽略不计)。试分别画出单道和多道运行的时间关系图。两种情况下，CPU的平均利用率各为多少?\n\n**答**：分别画出单道和多道运行的时间图\n\n(1) 单道运行时间关系图\n\n  ![img](https://s2.loli.net/2022/05/14/FhG1CTOSvzJu8EM.png)\n\n单道总运行时间为190ms。CPU利用率为(190-80)/190=57.9%\n\n(2) 多道运行时间关系图\n\n  ![img](https://s2.loli.net/2022/05/14/vworFI23sGiWeKp.png)\n\n多道总运行时间为140ms。CPU利用率为(140-30)/140=78.6%\n","slug":"os绪论","published":1,"updated":"2022-06-27T00:29:52.985Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4wroc480008mwskg83ygnvx","content":"<h1 id=\"一、操作系统绪论\"><a href=\"#一、操作系统绪论\" class=\"headerlink\" title=\"一、操作系统绪论\"></a>一、操作系统绪论</h1><h2 id=\"x3D-x3D-重点考察概念-x3D-x3D\"><a href=\"#x3D-x3D-重点考察概念-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;重点考察概念&#x3D;&#x3D;\"></a>&#x3D;&#x3D;重点考察概念&#x3D;&#x3D;</h2><p>操作系统的定义，操作系统在计算机系统中的地位，操作系统的主要功能，资源复用、虚化、抽象，操作系统的特征，多道程序设计，并发，中断，系统调用，CPU 的两种工作模式（用户态、内核态），特权指令和非特权指令 </p>\n<h2 id=\"1、操作系统概念、功能及提供的接口\"><a href=\"#1、操作系统概念、功能及提供的接口\" class=\"headerlink\" title=\"1、操作系统概念、功能及提供的接口\"></a>1、操作系统概念、功能及提供的接口</h2><p><strong>操作系统的概念</strong>：管理计算机硬件并提供应用程序运行环境的软件。操作系统是配置在计算机硬件上的第一层软件，是对硬件的首次扩充，形成了虚拟计算机&#x2F;扩展机。它位于硬件与其它软件之间，是所有其他软件运行的基础。</p>\n<span id=\"more\"></span>\n\n<p><strong>操作系统的作用：</strong></p>\n<p><strong>用户视角：</strong> 操作系统是用户与计算机硬件之间的接口。为用户使用计算机提供服务。</p>\n<p><strong>系统视角：</strong> </p>\n<ul>\n<li>&#x3D;&#x3D;资源管理器&#x3D;&#x3D; ：管理计算机系统的软硬件资源。<strong>资源复用、资源虚化以及资源抽象</strong> 。<ul>\n<li>资源复用：分为时间复用和空间复用。时间复用指的是多个用户或程序轮流使用某个资源，如CPU使用；空间复用指的是多个用户或程序同时使用资源的一部分，如内存使用。</li>\n<li>资源虚化：让一个物理设备变成多个相对独立的对应物</li>\n<li>资源抽象：对内封装细节，对外通过管理对象与访问接口，如：面向进程而不是CPU，面向文件而不是物理存储介质，面向窗口而不是屏幕</li>\n<li>&#x3D;&#x3D;复用与虚拟化解决的是资源不足的问题。资源抽象解决的是资源复杂的问题。&#x3D;&#x3D;</li>\n</ul>\n</li>\n<li>&#x3D;&#x3D;控制程序&#x3D;&#x3D; ：控制程序执行过程，防止错误和计算机的不当使用</li>\n</ul>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/msaGykqzLiVtrDT.png\" alt=\"image-20220513191418134\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/HKJvnRhTVw89bdC.png\" alt=\"image-20220513193433159\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/AQW3CRkS6fHpBNw.png\" alt=\"image-20220513192502110\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/LiEpfK6Awz8WFvs.png\" alt=\"image-20220513193123123\"></p>\n<p>联机命令接口 &#x3D; 交互命令接口，如命令行</p>\n<p>脱机命令接口 &#x3D; 批处理命令接口，如*.bat文件</p>\n<p>程序接口：如dll文件，调用dll文件即可进行系统调用，只能通过应用程序间接使用</p>\n<h2 id=\"2、操作系统的特征\"><a href=\"#2、操作系统的特征\" class=\"headerlink\" title=\"2、操作系统的特征\"></a>2、操作系统的特征</h2><ul>\n<li><p><strong>并发性：</strong> 多个事件在同一事件间隔内发生（并行：同一时刻）。并发的实质是一个物理CPU(也可以多个物理CPU) 在若干道程序之间多路复用，并发性是对有限物理资源强制行使多用户共享以提高效率。</p>\n</li>\n<li><p><strong>共享性：</strong> 系统中的资源可供多个并发执行的进程共同使用。有两种资源共享方式：</p>\n<ul>\n<li>互斥共享：一段时间只允许一个进程访问。如对摄像头设备的共享使用</li>\n<li>同时访问：一段时间允许多个进程访问。如对硬盘资源的共享使用</li>\n</ul>\n<p>  &#x3D;&#x3D;并发和共享是操作系统的两个最基本特征，二者之间互为存在条件。&#x3D;&#x3D; </p>\n</li>\n<li><p><strong>虚拟性：</strong> 把一个物理上的实体变为若干个逻辑上的对应物；或把物理上的多个实体变成逻辑上的一个对应物的技术。eg.虚拟存储器</p>\n<ul>\n<li><p>空分复用技术：如虚拟存储技术</p>\n</li>\n<li><p>时分复用技术：如虚拟处理器技术</p>\n<p>  并发性是虚拟性存在的基础</p>\n</li>\n</ul>\n</li>\n<li><p><strong>异步性（或不确定性）：</strong> 多个作业的执行过程是走走停停的，其执行顺序和每个作业的执行时间是不确定的。</p>\n</li>\n</ul>\n<h2 id=\"3、操作系统的发展与分类\"><a href=\"#3、操作系统的发展与分类\" class=\"headerlink\" title=\"3、操作系统的发展与分类\"></a>3、操作系统的发展与分类</h2><p><img data-src=\"https://s2.loli.net/2022/05/13/3AWQXpLSTGkobFC.png\" alt=\"image-20220513201053867\"></p>\n<p>批处理技术是指计算机系统对一批作业自动进行处理的一种技术。</p>\n<p>分类：</p>\n<ul>\n<li>联机批处理：采用联机输入&#x2F;输出，即输入&#x2F;输出操作在监督程序控制下，同步进行。 缺点：速度慢 </li>\n<li>脱机批处理：外围机：独立于主机，负责把作业任务写入磁带，以及从磁带输出到打印机。主机：负责从磁带上把作业调入内存，或者把结果写回磁带。实现了部分异步能力、减少了CPU的空闲时间、提高了I&#x2F;O速度</li>\n</ul>\n<hr>\n<p>多道程序设计：</p>\n<ul>\n<li><strong>核心思想：</strong> 将多个作业存放在主存中，这些程序在管理程序的控制下交替运行，共享处理机和系统中的其他资源。即通过安排作业（编码与数据）&#x3D;&#x3D;使得CPU无论何时都有进程执行，从而最大化CPU利用率&#x3D;&#x3D; </li>\n<li>没有提供用户与计算机系统的交互</li>\n<li>多道程序宏观上并行，微观上串行</li>\n<li>多道程序设计的道数不是任意的</li>\n<li><strong>优缺点：</strong> <ul>\n<li>提高了CPU的利用率</li>\n<li>提高了内存和I&#x2F;O设备的利用率</li>\n<li>改进了系统的吞吐率</li>\n<li>充分发挥了系统的并行性</li>\n<li>其主要缺点是: 作业周转时间延长</li>\n</ul>\n</li>\n<li>**多重处理系统:   ** 指配置了多个物理CPU，能真正同时执行多道程序的系统。</li>\n</ul>\n<hr>\n<p>&#x3D;&#x3D;操作系统的三种基本类型：批处理操作系统、分时操作系统、实时操作系统&#x3D;&#x3D; </p>\n<p>分时系统：允许多个联机用户同时使用一台计算机系统进行计算的操作系统称分时操作系统</p>\n<p><strong>分时技术：</strong> 把处理机的运行时间分成很短的时间片，按时间片轮流把处理机分配给各联机作业使用。</p>\n<p>是多道程序设计的自然延伸</p>\n<p>采用调度算法，以快速切换作业，好像每个作业同时执行</p>\n<p><strong>特征：</strong> </p>\n<ul>\n<li>多路性：也称同时性，一台计算机与若干台终端相连接，终端上的这些用户可以同时使用计算机。</li>\n<li>交互性：用户通过终端采用人机会话的方式直接控制程序运行，同程序进行交互。</li>\n<li>独立性：用户彼此之间都感觉不到别人也在使用这台计算机，好像只有自己独占计算机一样。</li>\n<li>及时性：用户请求能在很短时间内获得响应。</li>\n</ul>\n<h2 id=\"4、操作系统的运行机制与体系结构\"><a href=\"#4、操作系统的运行机制与体系结构\" class=\"headerlink\" title=\"4、操作系统的运行机制与体系结构\"></a>4、操作系统的运行机制与体系结构</h2><p><img data-src=\"https://s2.loli.net/2022/05/13/uCvXRb5ixgc4ep9.png\" alt=\"image-20220513203343485\"></p>\n<blockquote>\n<p>用程序状态字寄存器（PSW， program status word）中的某标志位来标识当前处理器处于什么状态。如0为用户态，1为核心态</p>\n</blockquote>\n<hr>\n<p>内核是操作系统的构件，或称基本单位。 </p>\n<p>内核作用：  为进程提供管理 、为进程执行提供良好的运行环境</p>\n<p>&#x3D;&#x3D;基本功能:&#x3D;&#x3D;  </p>\n<ul>\n<li>中断处理：截获中断，转向中断处理例程</li>\n<li>短程调度：CPU调度，保存与恢复现场</li>\n<li>原语管理：原语是不可中断过程</li>\n</ul>\n<p>&#x3D;&#x3D;基本属性:&#x3D;&#x3D; </p>\n<ul>\n<li>内核是由中断驱动的</li>\n<li>内核的执行是连续的</li>\n<li>内核在屏蔽中断状态下执行</li>\n<li>内核可以使用特权指令</li>\n</ul>\n<p>&#x3D;&#x3D;分类：&#x3D;&#x3D;</p>\n<ul>\n<li><p><strong>模块结构（整体式结构）</strong>：将内核划分为一个个独立的模块，模块之间相互调用。效率高但是结构不清晰，访问控制困难</p>\n</li>\n<li><p><strong>层次结构</strong>：一种特殊的模块结构。将内核划分为一系列相互依赖的层次，每个层次也可以分解为一系列更小的模块。</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/04/2PkGeSmIBXyOTai.png\"></p>\n</li>\n<li><p><strong>微内核结构</strong></p>\n</li>\n</ul>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/OzmplexJuwFcj24.png\" alt=\"image-20220513202231353\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/7S4E6d3gHUeNlpI.png\" alt=\"image-20220513202617422\"></p>\n<h2 id=\"5、中断和异常\"><a href=\"#5、中断和异常\" class=\"headerlink\" title=\"5、中断和异常\"></a>5、中断和异常</h2><p><img data-src=\"https://s2.loli.net/2022/05/13/ojrdODLXqEezi3G.png\" alt=\"image-20220513205554625\"></p>\n<p>&#x3D;&#x3D;用户态 → 核心态是通过中断实现的，并且中断是唯一途径&#x3D;&#x3D;</p>\n<p>&#x3D;&#x3D;核心态 → 用户态的切换是通过执行一个特权指令，将程序状态字（PSW）的标志位设置为“用户态”&#x3D;&#x3D;</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/twndlTegkLJ6x9X.png\" alt=\"image-20220513205029547\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/EYTzjIOvW7drqfx.png\" alt=\"image-20220513205136837\"></p>\n<p><strong>外中断的处理过程：</strong></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/oRmXYrNvBUkTgfI.png\" alt=\"image-20220513205420243\"></p>\n<h2 id=\"6、系统调用\"><a href=\"#6、系统调用\" class=\"headerlink\" title=\"6、系统调用\"></a>6、系统调用</h2><p><img data-src=\"https://s2.loli.net/2022/05/13/xzmwb1KdrT5MIsp.png\" alt=\"image-20220513213014300\"></p>\n<p>系统调用是操作系统提供给应用程序（程序员&#x2F;编程人员）使用的接口，可以理解为一种可供应用程序调用的特殊函数，应用程序可以发出系统调用请求来获得操作系统的服务。</p>\n<p>系统调用与库函数的区别：</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/tK9mNhM6OdzepCP.png\" alt=\"image-20220513211951839\"></p>\n<p>系统调用背后的过程：</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/obNKP1RrQt9sBuV.png\" alt=\"image-20220513212751507\"></p>\n<p>中断、异常和系统调用：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>产生原因</th>\n<th>实现机制</th>\n<th>区别</th>\n<th>保存地址</th>\n<th>处理</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>中断</strong></td>\n<td>由定时器和I&#x2F;O设备产生（来自硬件设备的处理请求）</td>\n<td>中断机制</td>\n<td>①由与现行指令无关的中断信号触发的(异步的)；②中断的发生与CPU处在用户模式或内核模式无关，系统不能确定中断发生的时间 ；③一般来说，中断处理程序提供的服务不是为当前进程所需的</td>\n<td>保存的是下一条指令的地址，以便在指令结束后检测有没有中断</td>\n<td><strong>硬件和软件结合</strong> 。①定时器：定时器是OS回收控制的重要方式，可设置为在指定周期（固定或可变）后中断计算机。防止用户程序陷入死循环，或不调用系统服务并且不将控制返回给操作系统。在将控制交到用户之前，操作系统确保定时器已设置好以便产生中断；②中断装置（发生中断源并产生中断的<strong>硬件</strong> ）：发现中断源、保护现场、启动中断处理程序（IDTR寄存器中存放了中断描述符表在内存的起始地址）；③中断处理程序： 保护未被硬件保护的一些必需的处理状态 （CPU自动保存的只有EIP&#x2F;EFLAGS&#x2F;ESP&#x2F;SS&#x2F;CS） ；识别各个中断源，分析产生中断的原因；处理中断事件；恢复正常操作；④OS必须保证中断前后的同步性，必须保证现场保护的原子性（保护现场的过程不能被中断）</td>\n</tr>\n<tr>\n<td><strong>异常</strong></td>\n<td>由程序错误产生，或者由内核必须处理的异常条件产生</td>\n<td>中断机制</td>\n<td>① 由处理器正在执行现行指令而引起的； ②异常处理程序提供的服务是为当前进程所用的；③异常包括出错、陷入、终止和编程异常等等；④异常通常由意想不到的行为触发</td>\n<td>出错保存的是当前指令的地址，陷入保存的是下一条指令的地址</td>\n<td>①由硬件检测并处理（如除0）；②硬件自身出错产生的异常：通常会在检测错误之后重新执行该指令，CPU保存运行状态；③有些异常是修复后返回并重新执行出错的指令（如页错误）；有些异常是OS通知相应进程；④异常发生在内核会导致OS崩溃</td>\n</tr>\n<tr>\n<td><strong>系统调用</strong></td>\n<td>程序主动请求操作系统服务</td>\n<td>通常通过一种特殊的异常来实现</td>\n<td>程序主动请求系统服务</td>\n<td>保存的是下一条指令的地址</td>\n<td>提供给用户态程序执行特权操作的接口；触发事件，切换至内核态；传递系统调用的参数； 保存状态以便完成系统调用后恢复执行</td>\n</tr>\n</tbody></table>\n<h2 id=\"7、-x3D-x3D-可能的大题：多道程序运行、简答题-x3D-x3D\"><a href=\"#7、-x3D-x3D-可能的大题：多道程序运行、简答题-x3D-x3D\" class=\"headerlink\" title=\"7、&#x3D;&#x3D;可能的大题：多道程序运行、简答题&#x3D;&#x3D;\"></a>7、&#x3D;&#x3D;可能的大题：多道程序运行、简答题&#x3D;&#x3D;</h2><h3 id=\"甘特图\"><a href=\"#甘特图\" class=\"headerlink\" title=\"甘特图\"></a>甘特图</h3><p>计算作业完成时间，CPU或者I&#x2F;O设备的利用率等等</p>\n<p>资源利用率：CPU利用率 &#x3D; CPU有效工作时间&#x2F;CPU总的运行时间， CPU总的运行时间 &#x3D; CPU有效工作时间+CPU空闲等待时间。</p>\n<p>I&#x2F;O设备的利用率同理。</p>\n<p>&#x3D;&#x3D;注意考虑优先级以及是否能够抢占&#x3D;&#x3D;</p>\n<p><strong>（1）</strong>在单CPU和两台I&#x2F;O(I1,I2)设备的多道程序设计环境下，同时投入三个作业运行。它们的执行轨迹如下：</p>\n<p>Job1：I2(30ms)、CPU(10ms)、I1(30ms)、CPU(10ms)</p>\n<p>Job2：I1(20ms)、CPU(20ms)、I2(40ms)</p>\n<p>Job3：CPU(30ms)、I1(20ms)</p>\n<p>如果CPU、I1和I2都能并行工作，优先级从高到低为Job1、Job2和Job3，优先级高的作业可以抢占优先级低的作业的CPU。试求：(1)每个作业从投入到完成分别所需的时间。(2) 每个作业投入到完成CPU的利用率。(3)I&#x2F;O设备利用率。</p>\n<p><strong>答：</strong>画出三个作业并行工作图如下(图中着色部分为作业等待时间)：</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/14/FxBnaZuVIQ8Nhe7.png\" alt=\"img\"></p>\n<p>(1) Job1从投入到运行完成需80ms，Job2从投入到运行完成需90ms，Job3从投入到运行完成需90ms。</p>\n<p>(2) CPU空闲时间段为：60ms至70ms，80ms至90ms。所以CPU利用率为(90-20)&#x2F;90&#x3D;77.78%。</p>\n<p>(3) 设备I1空闲时间段为：20ms至40ms，故I1的利用率为(90-20)&#x2F;90&#x3D;77.78%。设备I2空闲时间段为：30ms至50ms，故I2的利用率为(90-20)&#x2F;90&#x3D;77.78%。</p>\n<p>2、 若内存中有3道程序A、B、C，它们按A、B、C优先次序运行（不考虑强占）。各程序的计算轨迹为：</p>\n<p>A：计算(20)、I&#x2F;O(30)、计算(10) </p>\n<p>B：计算(40)、I&#x2F;O(20)、计算(10)</p>\n<p>C：计算(10)、I&#x2F;O(30)、计算(20)</p>\n<p>如果三道程序都使用相同设备进行I&#x2F;O(即程序用串行方式使用设备，调度开销忽略不计)。试分别画出单道和多道运行的时间关系图。两种情况下，CPU的平均利用率各为多少?</p>\n<p><strong>答</strong>：分别画出单道和多道运行的时间图</p>\n<p>(1) 单道运行时间关系图</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/05/14/FhG1CTOSvzJu8EM.png\" alt=\"img\"></p>\n<p>单道总运行时间为190ms。CPU利用率为(190-80)&#x2F;190&#x3D;57.9%</p>\n<p>(2) 多道运行时间关系图</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/05/14/vworFI23sGiWeKp.png\" alt=\"img\"></p>\n<p>多道总运行时间为140ms。CPU利用率为(140-30)&#x2F;140&#x3D;78.6%</p>\n","site":{"data":{"post-body-end":"<div>\n    \n</div>\n","styles":"body {\n  background: url(\"/images/background.png\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 100% 100%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.8);\n}\n.popup {\n  opacity: 0.8;\n}\n.post-block {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.comments {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.post {\n  margin-top: 60px;\n  padding: 20px;\n  margin-bottom: 60px;\n  -webkit-box-shadow: 0 0 0px #788072;\n  -moz-box-shadow: 0 0 0px rgba(202,203,204,0.5);\n}\n.post-button .btn {\n  color: #555 !important;\n  background-color: #fff;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  border: none !important;\n  transition-property: unset;\n  padding: 0px 15px;\n}\n.post-button .btn:hover {\n  color: #fff !important;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  background-image: linear-gradient(90deg, #a166ab 0%, #ef4e7b 25%, #f37055 50%, #ef4e7b 75%, #a166ab 100%);\n}\n","variables":""}},"length":4655,"excerpt":"<h1 id=\"一、操作系统绪论\"><a href=\"#一、操作系统绪论\" class=\"headerlink\" title=\"一、操作系统绪论\"></a>一、操作系统绪论</h1><h2 id=\"x3D-x3D-重点考察概念-x3D-x3D\"><a href=\"#x3D-x3D-重点考察概念-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;重点考察概念&#x3D;&#x3D;\"></a>&#x3D;&#x3D;重点考察概念&#x3D;&#x3D;</h2><p>操作系统的定义，操作系统在计算机系统中的地位，操作系统的主要功能，资源复用、虚化、抽象，操作系统的特征，多道程序设计，并发，中断，系统调用，CPU 的两种工作模式（用户态、内核态），特权指令和非特权指令 </p>\n<h2 id=\"1、操作系统概念、功能及提供的接口\"><a href=\"#1、操作系统概念、功能及提供的接口\" class=\"headerlink\" title=\"1、操作系统概念、功能及提供的接口\"></a>1、操作系统概念、功能及提供的接口</h2><p><strong>操作系统的概念</strong>：管理计算机硬件并提供应用程序运行环境的软件。操作系统是配置在计算机硬件上的第一层软件，是对硬件的首次扩充，形成了虚拟计算机&#x2F;扩展机。它位于硬件与其它软件之间，是所有其他软件运行的基础。</p>","more":"<p><strong>操作系统的作用：</strong></p>\n<p><strong>用户视角：</strong> 操作系统是用户与计算机硬件之间的接口。为用户使用计算机提供服务。</p>\n<p><strong>系统视角：</strong> </p>\n<ul>\n<li>&#x3D;&#x3D;资源管理器&#x3D;&#x3D; ：管理计算机系统的软硬件资源。<strong>资源复用、资源虚化以及资源抽象</strong> 。<ul>\n<li>资源复用：分为时间复用和空间复用。时间复用指的是多个用户或程序轮流使用某个资源，如CPU使用；空间复用指的是多个用户或程序同时使用资源的一部分，如内存使用。</li>\n<li>资源虚化：让一个物理设备变成多个相对独立的对应物</li>\n<li>资源抽象：对内封装细节，对外通过管理对象与访问接口，如：面向进程而不是CPU，面向文件而不是物理存储介质，面向窗口而不是屏幕</li>\n<li>&#x3D;&#x3D;复用与虚拟化解决的是资源不足的问题。资源抽象解决的是资源复杂的问题。&#x3D;&#x3D;</li>\n</ul>\n</li>\n<li>&#x3D;&#x3D;控制程序&#x3D;&#x3D; ：控制程序执行过程，防止错误和计算机的不当使用</li>\n</ul>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/msaGykqzLiVtrDT.png\" alt=\"image-20220513191418134\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/HKJvnRhTVw89bdC.png\" alt=\"image-20220513193433159\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/AQW3CRkS6fHpBNw.png\" alt=\"image-20220513192502110\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/LiEpfK6Awz8WFvs.png\" alt=\"image-20220513193123123\"></p>\n<p>联机命令接口 &#x3D; 交互命令接口，如命令行</p>\n<p>脱机命令接口 &#x3D; 批处理命令接口，如*.bat文件</p>\n<p>程序接口：如dll文件，调用dll文件即可进行系统调用，只能通过应用程序间接使用</p>\n<h2 id=\"2、操作系统的特征\"><a href=\"#2、操作系统的特征\" class=\"headerlink\" title=\"2、操作系统的特征\"></a>2、操作系统的特征</h2><ul>\n<li><p><strong>并发性：</strong> 多个事件在同一事件间隔内发生（并行：同一时刻）。并发的实质是一个物理CPU(也可以多个物理CPU) 在若干道程序之间多路复用，并发性是对有限物理资源强制行使多用户共享以提高效率。</p>\n</li>\n<li><p><strong>共享性：</strong> 系统中的资源可供多个并发执行的进程共同使用。有两种资源共享方式：</p>\n<ul>\n<li>互斥共享：一段时间只允许一个进程访问。如对摄像头设备的共享使用</li>\n<li>同时访问：一段时间允许多个进程访问。如对硬盘资源的共享使用</li>\n</ul>\n<p>  &#x3D;&#x3D;并发和共享是操作系统的两个最基本特征，二者之间互为存在条件。&#x3D;&#x3D; </p>\n</li>\n<li><p><strong>虚拟性：</strong> 把一个物理上的实体变为若干个逻辑上的对应物；或把物理上的多个实体变成逻辑上的一个对应物的技术。eg.虚拟存储器</p>\n<ul>\n<li><p>空分复用技术：如虚拟存储技术</p>\n</li>\n<li><p>时分复用技术：如虚拟处理器技术</p>\n<p>  并发性是虚拟性存在的基础</p>\n</li>\n</ul>\n</li>\n<li><p><strong>异步性（或不确定性）：</strong> 多个作业的执行过程是走走停停的，其执行顺序和每个作业的执行时间是不确定的。</p>\n</li>\n</ul>\n<h2 id=\"3、操作系统的发展与分类\"><a href=\"#3、操作系统的发展与分类\" class=\"headerlink\" title=\"3、操作系统的发展与分类\"></a>3、操作系统的发展与分类</h2><p><img data-src=\"https://s2.loli.net/2022/05/13/3AWQXpLSTGkobFC.png\" alt=\"image-20220513201053867\"></p>\n<p>批处理技术是指计算机系统对一批作业自动进行处理的一种技术。</p>\n<p>分类：</p>\n<ul>\n<li>联机批处理：采用联机输入&#x2F;输出，即输入&#x2F;输出操作在监督程序控制下，同步进行。 缺点：速度慢 </li>\n<li>脱机批处理：外围机：独立于主机，负责把作业任务写入磁带，以及从磁带输出到打印机。主机：负责从磁带上把作业调入内存，或者把结果写回磁带。实现了部分异步能力、减少了CPU的空闲时间、提高了I&#x2F;O速度</li>\n</ul>\n<hr>\n<p>多道程序设计：</p>\n<ul>\n<li><strong>核心思想：</strong> 将多个作业存放在主存中，这些程序在管理程序的控制下交替运行，共享处理机和系统中的其他资源。即通过安排作业（编码与数据）&#x3D;&#x3D;使得CPU无论何时都有进程执行，从而最大化CPU利用率&#x3D;&#x3D; </li>\n<li>没有提供用户与计算机系统的交互</li>\n<li>多道程序宏观上并行，微观上串行</li>\n<li>多道程序设计的道数不是任意的</li>\n<li><strong>优缺点：</strong> <ul>\n<li>提高了CPU的利用率</li>\n<li>提高了内存和I&#x2F;O设备的利用率</li>\n<li>改进了系统的吞吐率</li>\n<li>充分发挥了系统的并行性</li>\n<li>其主要缺点是: 作业周转时间延长</li>\n</ul>\n</li>\n<li>**多重处理系统:   ** 指配置了多个物理CPU，能真正同时执行多道程序的系统。</li>\n</ul>\n<hr>\n<p>&#x3D;&#x3D;操作系统的三种基本类型：批处理操作系统、分时操作系统、实时操作系统&#x3D;&#x3D; </p>\n<p>分时系统：允许多个联机用户同时使用一台计算机系统进行计算的操作系统称分时操作系统</p>\n<p><strong>分时技术：</strong> 把处理机的运行时间分成很短的时间片，按时间片轮流把处理机分配给各联机作业使用。</p>\n<p>是多道程序设计的自然延伸</p>\n<p>采用调度算法，以快速切换作业，好像每个作业同时执行</p>\n<p><strong>特征：</strong> </p>\n<ul>\n<li>多路性：也称同时性，一台计算机与若干台终端相连接，终端上的这些用户可以同时使用计算机。</li>\n<li>交互性：用户通过终端采用人机会话的方式直接控制程序运行，同程序进行交互。</li>\n<li>独立性：用户彼此之间都感觉不到别人也在使用这台计算机，好像只有自己独占计算机一样。</li>\n<li>及时性：用户请求能在很短时间内获得响应。</li>\n</ul>\n<h2 id=\"4、操作系统的运行机制与体系结构\"><a href=\"#4、操作系统的运行机制与体系结构\" class=\"headerlink\" title=\"4、操作系统的运行机制与体系结构\"></a>4、操作系统的运行机制与体系结构</h2><p><img data-src=\"https://s2.loli.net/2022/05/13/uCvXRb5ixgc4ep9.png\" alt=\"image-20220513203343485\"></p>\n<blockquote>\n<p>用程序状态字寄存器（PSW， program status word）中的某标志位来标识当前处理器处于什么状态。如0为用户态，1为核心态</p>\n</blockquote>\n<hr>\n<p>内核是操作系统的构件，或称基本单位。 </p>\n<p>内核作用：  为进程提供管理 、为进程执行提供良好的运行环境</p>\n<p>&#x3D;&#x3D;基本功能:&#x3D;&#x3D;  </p>\n<ul>\n<li>中断处理：截获中断，转向中断处理例程</li>\n<li>短程调度：CPU调度，保存与恢复现场</li>\n<li>原语管理：原语是不可中断过程</li>\n</ul>\n<p>&#x3D;&#x3D;基本属性:&#x3D;&#x3D; </p>\n<ul>\n<li>内核是由中断驱动的</li>\n<li>内核的执行是连续的</li>\n<li>内核在屏蔽中断状态下执行</li>\n<li>内核可以使用特权指令</li>\n</ul>\n<p>&#x3D;&#x3D;分类：&#x3D;&#x3D;</p>\n<ul>\n<li><p><strong>模块结构（整体式结构）</strong>：将内核划分为一个个独立的模块，模块之间相互调用。效率高但是结构不清晰，访问控制困难</p>\n</li>\n<li><p><strong>层次结构</strong>：一种特殊的模块结构。将内核划分为一系列相互依赖的层次，每个层次也可以分解为一系列更小的模块。</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/03/04/2PkGeSmIBXyOTai.png\"></p>\n</li>\n<li><p><strong>微内核结构</strong></p>\n</li>\n</ul>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/OzmplexJuwFcj24.png\" alt=\"image-20220513202231353\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/7S4E6d3gHUeNlpI.png\" alt=\"image-20220513202617422\"></p>\n<h2 id=\"5、中断和异常\"><a href=\"#5、中断和异常\" class=\"headerlink\" title=\"5、中断和异常\"></a>5、中断和异常</h2><p><img data-src=\"https://s2.loli.net/2022/05/13/ojrdODLXqEezi3G.png\" alt=\"image-20220513205554625\"></p>\n<p>&#x3D;&#x3D;用户态 → 核心态是通过中断实现的，并且中断是唯一途径&#x3D;&#x3D;</p>\n<p>&#x3D;&#x3D;核心态 → 用户态的切换是通过执行一个特权指令，将程序状态字（PSW）的标志位设置为“用户态”&#x3D;&#x3D;</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/twndlTegkLJ6x9X.png\" alt=\"image-20220513205029547\"></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/EYTzjIOvW7drqfx.png\" alt=\"image-20220513205136837\"></p>\n<p><strong>外中断的处理过程：</strong></p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/oRmXYrNvBUkTgfI.png\" alt=\"image-20220513205420243\"></p>\n<h2 id=\"6、系统调用\"><a href=\"#6、系统调用\" class=\"headerlink\" title=\"6、系统调用\"></a>6、系统调用</h2><p><img data-src=\"https://s2.loli.net/2022/05/13/xzmwb1KdrT5MIsp.png\" alt=\"image-20220513213014300\"></p>\n<p>系统调用是操作系统提供给应用程序（程序员&#x2F;编程人员）使用的接口，可以理解为一种可供应用程序调用的特殊函数，应用程序可以发出系统调用请求来获得操作系统的服务。</p>\n<p>系统调用与库函数的区别：</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/tK9mNhM6OdzepCP.png\" alt=\"image-20220513211951839\"></p>\n<p>系统调用背后的过程：</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/13/obNKP1RrQt9sBuV.png\" alt=\"image-20220513212751507\"></p>\n<p>中断、异常和系统调用：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>产生原因</th>\n<th>实现机制</th>\n<th>区别</th>\n<th>保存地址</th>\n<th>处理</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>中断</strong></td>\n<td>由定时器和I&#x2F;O设备产生（来自硬件设备的处理请求）</td>\n<td>中断机制</td>\n<td>①由与现行指令无关的中断信号触发的(异步的)；②中断的发生与CPU处在用户模式或内核模式无关，系统不能确定中断发生的时间 ；③一般来说，中断处理程序提供的服务不是为当前进程所需的</td>\n<td>保存的是下一条指令的地址，以便在指令结束后检测有没有中断</td>\n<td><strong>硬件和软件结合</strong> 。①定时器：定时器是OS回收控制的重要方式，可设置为在指定周期（固定或可变）后中断计算机。防止用户程序陷入死循环，或不调用系统服务并且不将控制返回给操作系统。在将控制交到用户之前，操作系统确保定时器已设置好以便产生中断；②中断装置（发生中断源并产生中断的<strong>硬件</strong> ）：发现中断源、保护现场、启动中断处理程序（IDTR寄存器中存放了中断描述符表在内存的起始地址）；③中断处理程序： 保护未被硬件保护的一些必需的处理状态 （CPU自动保存的只有EIP&#x2F;EFLAGS&#x2F;ESP&#x2F;SS&#x2F;CS） ；识别各个中断源，分析产生中断的原因；处理中断事件；恢复正常操作；④OS必须保证中断前后的同步性，必须保证现场保护的原子性（保护现场的过程不能被中断）</td>\n</tr>\n<tr>\n<td><strong>异常</strong></td>\n<td>由程序错误产生，或者由内核必须处理的异常条件产生</td>\n<td>中断机制</td>\n<td>① 由处理器正在执行现行指令而引起的； ②异常处理程序提供的服务是为当前进程所用的；③异常包括出错、陷入、终止和编程异常等等；④异常通常由意想不到的行为触发</td>\n<td>出错保存的是当前指令的地址，陷入保存的是下一条指令的地址</td>\n<td>①由硬件检测并处理（如除0）；②硬件自身出错产生的异常：通常会在检测错误之后重新执行该指令，CPU保存运行状态；③有些异常是修复后返回并重新执行出错的指令（如页错误）；有些异常是OS通知相应进程；④异常发生在内核会导致OS崩溃</td>\n</tr>\n<tr>\n<td><strong>系统调用</strong></td>\n<td>程序主动请求操作系统服务</td>\n<td>通常通过一种特殊的异常来实现</td>\n<td>程序主动请求系统服务</td>\n<td>保存的是下一条指令的地址</td>\n<td>提供给用户态程序执行特权操作的接口；触发事件，切换至内核态；传递系统调用的参数； 保存状态以便完成系统调用后恢复执行</td>\n</tr>\n</tbody></table>\n<h2 id=\"7、-x3D-x3D-可能的大题：多道程序运行、简答题-x3D-x3D\"><a href=\"#7、-x3D-x3D-可能的大题：多道程序运行、简答题-x3D-x3D\" class=\"headerlink\" title=\"7、&#x3D;&#x3D;可能的大题：多道程序运行、简答题&#x3D;&#x3D;\"></a>7、&#x3D;&#x3D;可能的大题：多道程序运行、简答题&#x3D;&#x3D;</h2><h3 id=\"甘特图\"><a href=\"#甘特图\" class=\"headerlink\" title=\"甘特图\"></a>甘特图</h3><p>计算作业完成时间，CPU或者I&#x2F;O设备的利用率等等</p>\n<p>资源利用率：CPU利用率 &#x3D; CPU有效工作时间&#x2F;CPU总的运行时间， CPU总的运行时间 &#x3D; CPU有效工作时间+CPU空闲等待时间。</p>\n<p>I&#x2F;O设备的利用率同理。</p>\n<p>&#x3D;&#x3D;注意考虑优先级以及是否能够抢占&#x3D;&#x3D;</p>\n<p><strong>（1）</strong>在单CPU和两台I&#x2F;O(I1,I2)设备的多道程序设计环境下，同时投入三个作业运行。它们的执行轨迹如下：</p>\n<p>Job1：I2(30ms)、CPU(10ms)、I1(30ms)、CPU(10ms)</p>\n<p>Job2：I1(20ms)、CPU(20ms)、I2(40ms)</p>\n<p>Job3：CPU(30ms)、I1(20ms)</p>\n<p>如果CPU、I1和I2都能并行工作，优先级从高到低为Job1、Job2和Job3，优先级高的作业可以抢占优先级低的作业的CPU。试求：(1)每个作业从投入到完成分别所需的时间。(2) 每个作业投入到完成CPU的利用率。(3)I&#x2F;O设备利用率。</p>\n<p><strong>答：</strong>画出三个作业并行工作图如下(图中着色部分为作业等待时间)：</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/14/FxBnaZuVIQ8Nhe7.png\" alt=\"img\"></p>\n<p>(1) Job1从投入到运行完成需80ms，Job2从投入到运行完成需90ms，Job3从投入到运行完成需90ms。</p>\n<p>(2) CPU空闲时间段为：60ms至70ms，80ms至90ms。所以CPU利用率为(90-20)&#x2F;90&#x3D;77.78%。</p>\n<p>(3) 设备I1空闲时间段为：20ms至40ms，故I1的利用率为(90-20)&#x2F;90&#x3D;77.78%。设备I2空闲时间段为：30ms至50ms，故I2的利用率为(90-20)&#x2F;90&#x3D;77.78%。</p>\n<p>2、 若内存中有3道程序A、B、C，它们按A、B、C优先次序运行（不考虑强占）。各程序的计算轨迹为：</p>\n<p>A：计算(20)、I&#x2F;O(30)、计算(10) </p>\n<p>B：计算(40)、I&#x2F;O(20)、计算(10)</p>\n<p>C：计算(10)、I&#x2F;O(30)、计算(20)</p>\n<p>如果三道程序都使用相同设备进行I&#x2F;O(即程序用串行方式使用设备，调度开销忽略不计)。试分别画出单道和多道运行的时间关系图。两种情况下，CPU的平均利用率各为多少?</p>\n<p><strong>答</strong>：分别画出单道和多道运行的时间图</p>\n<p>(1) 单道运行时间关系图</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/05/14/FhG1CTOSvzJu8EM.png\" alt=\"img\"></p>\n<p>单道总运行时间为190ms。CPU利用率为(190-80)&#x2F;190&#x3D;57.9%</p>\n<p>(2) 多道运行时间关系图</p>\n<p>  <img data-src=\"https://s2.loli.net/2022/05/14/vworFI23sGiWeKp.png\" alt=\"img\"></p>\n<p>多道总运行时间为140ms。CPU利用率为(140-30)&#x2F;140&#x3D;78.6%</p>"},{"title":"绪论","abbrlink":62383,"date":"2022-06-23T03:10:12.000Z","_content":"\n# 一、绪论\n\n## 1、概念\n\n**DB：数据库**，是按照一定结构组织并长期存储在计算机内的可共享的大量数据的有机集合。\n\n**DBMS：数据库管理系统**，是管理和维护数据库的系统软件，是数据库和用户之间的一个接口，其主要作用是在数据库建立、运行和维护时对数据库进行统一的管理控制和提供数据服务。\n\n<!-- more -->\n\n`DBMS的功能：`数据定义、数据操作、数据组织和管理、数据库运行管理（核心工作）、数据库的建立和维护、数据接口\n\n**DBA：数据库管理人员**，其职责包括决定DB中的信息内容和结构；决定DB的存储结构和存取策略；定义数据的安全性要求和完整性约束条件；监控数据库的使用和运行。\n\n**DBS：数据库系统**，是实现有组织地、动态地存储大量关联数据、方便多用户访问的计算机软件、硬件和人组成的系统。\n\n`DBS的特点：`①数据的高度结构化；②数据的高共享性；③程序与数据的高独立性；④数据控制力度大（DBMS统一管理和控制数据）\n$$\nDBS = 计算机系统(硬件、软件平台、人)+DBMS+DB\\\\\n或\\\\\nDBS = 硬件 + 软件（OS、DB、DBMS、语言及开发工具、DB应用程序）+ 人（DBA、设计者、用户）\n$$\n\n![](https://s2.loli.net/2022/03/04/7zNQasLYrVqw1px.png)\n\n## 2、信息模型\n\n也称概念模型，主要用于数据库设计\n\n表示方法：ER图\n\n基本成分：实体集、属性、联系\n\n![](https://s2.loli.net/2022/03/04/oMmlnGpIqh5iDXO.png)\n\n## 3、数据模型\n\n三要素：数据结构、数据操作、数据的完整性约束\n\n三种基本数据模型：层次模型、网状模型、关系模型\n\n**3种基本数据模型的比较**\n\n| 特点\\模型          | 层次模型                                                     | 网状模型                                                     | 关系模型（==最重要== ）                                      |\n| ------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| **数据结构**       | 树结构                                                       | 图结构                                                       | 表结构                                                       |\n| **存储方法**       | 按先根顺序存储及用左孩子右兄弟链式存储                       | 链接法                                                       | 文件                                                         |\n| **数据操作**       | 增删改查。按层次顺序查询、按层次路径查询。且每次操作只能取一个记录 | 操作时必须说明做什么、如何做                                 | 增删改查。集合操作，操作对象和操作结果都是关系，即若干元组的集合。存取路径对用户隐藏（安全的同时效率低），用户只需指出干什么。 |\n| **数据完整性约束** | 父子约束、一致性约束、数据的型和值需保持树形结构等           | 父子约束、主从约束                                           | 实体完整性、参照完整性和用户定义的完整性                     |\n| **联系表示的特点** | 适合1：n                                                     | 可以间接表示m：n                                             | 便于表示m：n                                                 |\n| **联系的方式**     | 通过指针（或路径）                                           | 通过指针（或路径）                                           | 通过表格自然联系及创建联系                                   |\n| **使用与效率**     | 较难使用、效率较高                                           | 使用复杂、效率较高                                           | 容易使用，效率较低                                           |\n| **数据操作语言**   | 过程化                                                       | 过程化                                                       | 非过程化及过程扩展                                           |\n| **理论基础**       | 无                                                           | 无                                                           | 关系理论                                                     |\n| **优缺点**         | ①数据结构较简单、查询效率高；②提供良好的完整性支持；③不易表示多对多的联系；④数据操作限制多，独立性较差 | ①较为直接地描述现实世界；②存取效率较高；③结构较复杂，不易使用；④数据独立性较差 | ①有坚实的理论基础；②结构简单、易用；③数据独立性及安全性好；④查询效率较低 |\n\n## 4、三级模式结构\n\n**模式**：（也称概念模式/逻辑模式）是数据库中全体数据的逻辑结构和特征的描述，是所有用户的公用数据结构。\n\n**子模式**：（也称外模式/用户模式）是数据库用户所见和使用的局部数据的逻辑结构和特征的描述，是用户所用的数据库结构。子模式是模式的子集，它主要描述用户视图的各记录的组成、相互联系、数据项的特征等。\n\n**内模式**：（也称存储模式）是数据物理结构和存储方法的描述，是整个数据库的最低层结构的标识。\n\n三级模式结构示意如下图所示：\n\n![image-20220508100815575](https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205081008688.png)\n\n## 5、二级映像功能\n\n**映像1：子模式/模式映像**，是指由模式生成子模式的规则，它定义了各个子模式和模式之间的对应关系。（不唯一）\n\n**映像2：模式/内模式映像**，是说明模式在物理设备中的存储结构，定义了模式和内模式之间的对应关系。（唯一）\n\n**三级模式结构和二级映像的作用：保证了数据库系统的数据能够具有较高的逻辑独立性和物理独立性**\n\n> 数据冗余：\n>\n> ![image-20220514221005579](https://s2.loli.net/2022/05/14/pExd5HsrKunezmM.png)\n\n","source":"_posts/绪论.md","raw":"---\ntitle: 绪论\ntags: \n- 数据库\ncategory: \n- 数据库\nabbrlink: 62383\ndate: 2022-06-23 11:10:12\n---\n\n# 一、绪论\n\n## 1、概念\n\n**DB：数据库**，是按照一定结构组织并长期存储在计算机内的可共享的大量数据的有机集合。\n\n**DBMS：数据库管理系统**，是管理和维护数据库的系统软件，是数据库和用户之间的一个接口，其主要作用是在数据库建立、运行和维护时对数据库进行统一的管理控制和提供数据服务。\n\n<!-- more -->\n\n`DBMS的功能：`数据定义、数据操作、数据组织和管理、数据库运行管理（核心工作）、数据库的建立和维护、数据接口\n\n**DBA：数据库管理人员**，其职责包括决定DB中的信息内容和结构；决定DB的存储结构和存取策略；定义数据的安全性要求和完整性约束条件；监控数据库的使用和运行。\n\n**DBS：数据库系统**，是实现有组织地、动态地存储大量关联数据、方便多用户访问的计算机软件、硬件和人组成的系统。\n\n`DBS的特点：`①数据的高度结构化；②数据的高共享性；③程序与数据的高独立性；④数据控制力度大（DBMS统一管理和控制数据）\n$$\nDBS = 计算机系统(硬件、软件平台、人)+DBMS+DB\\\\\n或\\\\\nDBS = 硬件 + 软件（OS、DB、DBMS、语言及开发工具、DB应用程序）+ 人（DBA、设计者、用户）\n$$\n\n![](https://s2.loli.net/2022/03/04/7zNQasLYrVqw1px.png)\n\n## 2、信息模型\n\n也称概念模型，主要用于数据库设计\n\n表示方法：ER图\n\n基本成分：实体集、属性、联系\n\n![](https://s2.loli.net/2022/03/04/oMmlnGpIqh5iDXO.png)\n\n## 3、数据模型\n\n三要素：数据结构、数据操作、数据的完整性约束\n\n三种基本数据模型：层次模型、网状模型、关系模型\n\n**3种基本数据模型的比较**\n\n| 特点\\模型          | 层次模型                                                     | 网状模型                                                     | 关系模型（==最重要== ）                                      |\n| ------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| **数据结构**       | 树结构                                                       | 图结构                                                       | 表结构                                                       |\n| **存储方法**       | 按先根顺序存储及用左孩子右兄弟链式存储                       | 链接法                                                       | 文件                                                         |\n| **数据操作**       | 增删改查。按层次顺序查询、按层次路径查询。且每次操作只能取一个记录 | 操作时必须说明做什么、如何做                                 | 增删改查。集合操作，操作对象和操作结果都是关系，即若干元组的集合。存取路径对用户隐藏（安全的同时效率低），用户只需指出干什么。 |\n| **数据完整性约束** | 父子约束、一致性约束、数据的型和值需保持树形结构等           | 父子约束、主从约束                                           | 实体完整性、参照完整性和用户定义的完整性                     |\n| **联系表示的特点** | 适合1：n                                                     | 可以间接表示m：n                                             | 便于表示m：n                                                 |\n| **联系的方式**     | 通过指针（或路径）                                           | 通过指针（或路径）                                           | 通过表格自然联系及创建联系                                   |\n| **使用与效率**     | 较难使用、效率较高                                           | 使用复杂、效率较高                                           | 容易使用，效率较低                                           |\n| **数据操作语言**   | 过程化                                                       | 过程化                                                       | 非过程化及过程扩展                                           |\n| **理论基础**       | 无                                                           | 无                                                           | 关系理论                                                     |\n| **优缺点**         | ①数据结构较简单、查询效率高；②提供良好的完整性支持；③不易表示多对多的联系；④数据操作限制多，独立性较差 | ①较为直接地描述现实世界；②存取效率较高；③结构较复杂，不易使用；④数据独立性较差 | ①有坚实的理论基础；②结构简单、易用；③数据独立性及安全性好；④查询效率较低 |\n\n## 4、三级模式结构\n\n**模式**：（也称概念模式/逻辑模式）是数据库中全体数据的逻辑结构和特征的描述，是所有用户的公用数据结构。\n\n**子模式**：（也称外模式/用户模式）是数据库用户所见和使用的局部数据的逻辑结构和特征的描述，是用户所用的数据库结构。子模式是模式的子集，它主要描述用户视图的各记录的组成、相互联系、数据项的特征等。\n\n**内模式**：（也称存储模式）是数据物理结构和存储方法的描述，是整个数据库的最低层结构的标识。\n\n三级模式结构示意如下图所示：\n\n![image-20220508100815575](https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205081008688.png)\n\n## 5、二级映像功能\n\n**映像1：子模式/模式映像**，是指由模式生成子模式的规则，它定义了各个子模式和模式之间的对应关系。（不唯一）\n\n**映像2：模式/内模式映像**，是说明模式在物理设备中的存储结构，定义了模式和内模式之间的对应关系。（唯一）\n\n**三级模式结构和二级映像的作用：保证了数据库系统的数据能够具有较高的逻辑独立性和物理独立性**\n\n> 数据冗余：\n>\n> ![image-20220514221005579](https://s2.loli.net/2022/05/14/pExd5HsrKunezmM.png)\n\n","slug":"绪论","published":1,"updated":"2022-06-24T00:44:55.900Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4wroc490009mwsk7frn9u6e","content":"<h1 id=\"一、绪论\"><a href=\"#一、绪论\" class=\"headerlink\" title=\"一、绪论\"></a>一、绪论</h1><h2 id=\"1、概念\"><a href=\"#1、概念\" class=\"headerlink\" title=\"1、概念\"></a>1、概念</h2><p><strong>DB：数据库</strong>，是按照一定结构组织并长期存储在计算机内的可共享的大量数据的有机集合。</p>\n<p><strong>DBMS：数据库管理系统</strong>，是管理和维护数据库的系统软件，是数据库和用户之间的一个接口，其主要作用是在数据库建立、运行和维护时对数据库进行统一的管理控制和提供数据服务。</p>\n<span id=\"more\"></span>\n\n<p><code>DBMS的功能：</code>数据定义、数据操作、数据组织和管理、数据库运行管理（核心工作）、数据库的建立和维护、数据接口</p>\n<p><strong>DBA：数据库管理人员</strong>，其职责包括决定DB中的信息内容和结构；决定DB的存储结构和存取策略；定义数据的安全性要求和完整性约束条件；监控数据库的使用和运行。</p>\n<p><strong>DBS：数据库系统</strong>，是实现有组织地、动态地存储大量关联数据、方便多用户访问的计算机软件、硬件和人组成的系统。</p>\n<p><code>DBS的特点：</code>①数据的高度结构化；②数据的高共享性；③程序与数据的高独立性；④数据控制力度大（DBMS统一管理和控制数据）<br>$$<br>DBS &#x3D; 计算机系统(硬件、软件平台、人)+DBMS+DB\\<br>或\\<br>DBS &#x3D; 硬件 + 软件（OS、DB、DBMS、语言及开发工具、DB应用程序）+ 人（DBA、设计者、用户）<br>$$</p>\n<p><img data-src=\"https://s2.loli.net/2022/03/04/7zNQasLYrVqw1px.png\"></p>\n<h2 id=\"2、信息模型\"><a href=\"#2、信息模型\" class=\"headerlink\" title=\"2、信息模型\"></a>2、信息模型</h2><p>也称概念模型，主要用于数据库设计</p>\n<p>表示方法：ER图</p>\n<p>基本成分：实体集、属性、联系</p>\n<p><img data-src=\"https://s2.loli.net/2022/03/04/oMmlnGpIqh5iDXO.png\"></p>\n<h2 id=\"3、数据模型\"><a href=\"#3、数据模型\" class=\"headerlink\" title=\"3、数据模型\"></a>3、数据模型</h2><p>三要素：数据结构、数据操作、数据的完整性约束</p>\n<p>三种基本数据模型：层次模型、网状模型、关系模型</p>\n<p><strong>3种基本数据模型的比较</strong></p>\n<table>\n<thead>\n<tr>\n<th>特点\\模型</th>\n<th>层次模型</th>\n<th>网状模型</th>\n<th>关系模型（&#x3D;&#x3D;最重要&#x3D;&#x3D; ）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>数据结构</strong></td>\n<td>树结构</td>\n<td>图结构</td>\n<td>表结构</td>\n</tr>\n<tr>\n<td><strong>存储方法</strong></td>\n<td>按先根顺序存储及用左孩子右兄弟链式存储</td>\n<td>链接法</td>\n<td>文件</td>\n</tr>\n<tr>\n<td><strong>数据操作</strong></td>\n<td>增删改查。按层次顺序查询、按层次路径查询。且每次操作只能取一个记录</td>\n<td>操作时必须说明做什么、如何做</td>\n<td>增删改查。集合操作，操作对象和操作结果都是关系，即若干元组的集合。存取路径对用户隐藏（安全的同时效率低），用户只需指出干什么。</td>\n</tr>\n<tr>\n<td><strong>数据完整性约束</strong></td>\n<td>父子约束、一致性约束、数据的型和值需保持树形结构等</td>\n<td>父子约束、主从约束</td>\n<td>实体完整性、参照完整性和用户定义的完整性</td>\n</tr>\n<tr>\n<td><strong>联系表示的特点</strong></td>\n<td>适合1：n</td>\n<td>可以间接表示m：n</td>\n<td>便于表示m：n</td>\n</tr>\n<tr>\n<td><strong>联系的方式</strong></td>\n<td>通过指针（或路径）</td>\n<td>通过指针（或路径）</td>\n<td>通过表格自然联系及创建联系</td>\n</tr>\n<tr>\n<td><strong>使用与效率</strong></td>\n<td>较难使用、效率较高</td>\n<td>使用复杂、效率较高</td>\n<td>容易使用，效率较低</td>\n</tr>\n<tr>\n<td><strong>数据操作语言</strong></td>\n<td>过程化</td>\n<td>过程化</td>\n<td>非过程化及过程扩展</td>\n</tr>\n<tr>\n<td><strong>理论基础</strong></td>\n<td>无</td>\n<td>无</td>\n<td>关系理论</td>\n</tr>\n<tr>\n<td><strong>优缺点</strong></td>\n<td>①数据结构较简单、查询效率高；②提供良好的完整性支持；③不易表示多对多的联系；④数据操作限制多，独立性较差</td>\n<td>①较为直接地描述现实世界；②存取效率较高；③结构较复杂，不易使用；④数据独立性较差</td>\n<td>①有坚实的理论基础；②结构简单、易用；③数据独立性及安全性好；④查询效率较低</td>\n</tr>\n</tbody></table>\n<h2 id=\"4、三级模式结构\"><a href=\"#4、三级模式结构\" class=\"headerlink\" title=\"4、三级模式结构\"></a>4、三级模式结构</h2><p><strong>模式</strong>：（也称概念模式&#x2F;逻辑模式）是数据库中全体数据的逻辑结构和特征的描述，是所有用户的公用数据结构。</p>\n<p><strong>子模式</strong>：（也称外模式&#x2F;用户模式）是数据库用户所见和使用的局部数据的逻辑结构和特征的描述，是用户所用的数据库结构。子模式是模式的子集，它主要描述用户视图的各记录的组成、相互联系、数据项的特征等。</p>\n<p><strong>内模式</strong>：（也称存储模式）是数据物理结构和存储方法的描述，是整个数据库的最低层结构的标识。</p>\n<p>三级模式结构示意如下图所示：</p>\n<p><img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205081008688.png\" alt=\"image-20220508100815575\"></p>\n<h2 id=\"5、二级映像功能\"><a href=\"#5、二级映像功能\" class=\"headerlink\" title=\"5、二级映像功能\"></a>5、二级映像功能</h2><p><strong>映像1：子模式&#x2F;模式映像</strong>，是指由模式生成子模式的规则，它定义了各个子模式和模式之间的对应关系。（不唯一）</p>\n<p><strong>映像2：模式&#x2F;内模式映像</strong>，是说明模式在物理设备中的存储结构，定义了模式和内模式之间的对应关系。（唯一）</p>\n<p><strong>三级模式结构和二级映像的作用：保证了数据库系统的数据能够具有较高的逻辑独立性和物理独立性</strong></p>\n<blockquote>\n<p>数据冗余：</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/14/pExd5HsrKunezmM.png\" alt=\"image-20220514221005579\"></p>\n</blockquote>\n","site":{"data":{"post-body-end":"<div>\n    \n</div>\n","styles":"body {\n  background: url(\"/images/background.png\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 100% 100%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.8);\n}\n.popup {\n  opacity: 0.8;\n}\n.post-block {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.comments {\n  background: rgba(255,255,255,0.7) none repeat scroll !important;\n}\n.post {\n  margin-top: 60px;\n  padding: 20px;\n  margin-bottom: 60px;\n  -webkit-box-shadow: 0 0 0px #788072;\n  -moz-box-shadow: 0 0 0px rgba(202,203,204,0.5);\n}\n.post-button .btn {\n  color: #555 !important;\n  background-color: #fff;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  border: none !important;\n  transition-property: unset;\n  padding: 0px 15px;\n}\n.post-button .btn:hover {\n  color: #fff !important;\n  border-radius: 3px;\n  font-size: 15px;\n  box-shadow: inset 0px 0px 10px 0px rgba(0,0,0,0.35);\n  background-image: linear-gradient(90deg, #a166ab 0%, #ef4e7b 25%, #f37055 50%, #ef4e7b 75%, #a166ab 100%);\n}\n","variables":""}},"length":1503,"excerpt":"<h1 id=\"一、绪论\"><a href=\"#一、绪论\" class=\"headerlink\" title=\"一、绪论\"></a>一、绪论</h1><h2 id=\"1、概念\"><a href=\"#1、概念\" class=\"headerlink\" title=\"1、概念\"></a>1、概念</h2><p><strong>DB：数据库</strong>，是按照一定结构组织并长期存储在计算机内的可共享的大量数据的有机集合。</p>\n<p><strong>DBMS：数据库管理系统</strong>，是管理和维护数据库的系统软件，是数据库和用户之间的一个接口，其主要作用是在数据库建立、运行和维护时对数据库进行统一的管理控制和提供数据服务。</p>","more":"<p><code>DBMS的功能：</code>数据定义、数据操作、数据组织和管理、数据库运行管理（核心工作）、数据库的建立和维护、数据接口</p>\n<p><strong>DBA：数据库管理人员</strong>，其职责包括决定DB中的信息内容和结构；决定DB的存储结构和存取策略；定义数据的安全性要求和完整性约束条件；监控数据库的使用和运行。</p>\n<p><strong>DBS：数据库系统</strong>，是实现有组织地、动态地存储大量关联数据、方便多用户访问的计算机软件、硬件和人组成的系统。</p>\n<p><code>DBS的特点：</code>①数据的高度结构化；②数据的高共享性；③程序与数据的高独立性；④数据控制力度大（DBMS统一管理和控制数据）<br>$$<br>DBS &#x3D; 计算机系统(硬件、软件平台、人)+DBMS+DB\\<br>或\\<br>DBS &#x3D; 硬件 + 软件（OS、DB、DBMS、语言及开发工具、DB应用程序）+ 人（DBA、设计者、用户）<br>$$</p>\n<p><img data-src=\"https://s2.loli.net/2022/03/04/7zNQasLYrVqw1px.png\"></p>\n<h2 id=\"2、信息模型\"><a href=\"#2、信息模型\" class=\"headerlink\" title=\"2、信息模型\"></a>2、信息模型</h2><p>也称概念模型，主要用于数据库设计</p>\n<p>表示方法：ER图</p>\n<p>基本成分：实体集、属性、联系</p>\n<p><img data-src=\"https://s2.loli.net/2022/03/04/oMmlnGpIqh5iDXO.png\"></p>\n<h2 id=\"3、数据模型\"><a href=\"#3、数据模型\" class=\"headerlink\" title=\"3、数据模型\"></a>3、数据模型</h2><p>三要素：数据结构、数据操作、数据的完整性约束</p>\n<p>三种基本数据模型：层次模型、网状模型、关系模型</p>\n<p><strong>3种基本数据模型的比较</strong></p>\n<table>\n<thead>\n<tr>\n<th>特点\\模型</th>\n<th>层次模型</th>\n<th>网状模型</th>\n<th>关系模型（&#x3D;&#x3D;最重要&#x3D;&#x3D; ）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>数据结构</strong></td>\n<td>树结构</td>\n<td>图结构</td>\n<td>表结构</td>\n</tr>\n<tr>\n<td><strong>存储方法</strong></td>\n<td>按先根顺序存储及用左孩子右兄弟链式存储</td>\n<td>链接法</td>\n<td>文件</td>\n</tr>\n<tr>\n<td><strong>数据操作</strong></td>\n<td>增删改查。按层次顺序查询、按层次路径查询。且每次操作只能取一个记录</td>\n<td>操作时必须说明做什么、如何做</td>\n<td>增删改查。集合操作，操作对象和操作结果都是关系，即若干元组的集合。存取路径对用户隐藏（安全的同时效率低），用户只需指出干什么。</td>\n</tr>\n<tr>\n<td><strong>数据完整性约束</strong></td>\n<td>父子约束、一致性约束、数据的型和值需保持树形结构等</td>\n<td>父子约束、主从约束</td>\n<td>实体完整性、参照完整性和用户定义的完整性</td>\n</tr>\n<tr>\n<td><strong>联系表示的特点</strong></td>\n<td>适合1：n</td>\n<td>可以间接表示m：n</td>\n<td>便于表示m：n</td>\n</tr>\n<tr>\n<td><strong>联系的方式</strong></td>\n<td>通过指针（或路径）</td>\n<td>通过指针（或路径）</td>\n<td>通过表格自然联系及创建联系</td>\n</tr>\n<tr>\n<td><strong>使用与效率</strong></td>\n<td>较难使用、效率较高</td>\n<td>使用复杂、效率较高</td>\n<td>容易使用，效率较低</td>\n</tr>\n<tr>\n<td><strong>数据操作语言</strong></td>\n<td>过程化</td>\n<td>过程化</td>\n<td>非过程化及过程扩展</td>\n</tr>\n<tr>\n<td><strong>理论基础</strong></td>\n<td>无</td>\n<td>无</td>\n<td>关系理论</td>\n</tr>\n<tr>\n<td><strong>优缺点</strong></td>\n<td>①数据结构较简单、查询效率高；②提供良好的完整性支持；③不易表示多对多的联系；④数据操作限制多，独立性较差</td>\n<td>①较为直接地描述现实世界；②存取效率较高；③结构较复杂，不易使用；④数据独立性较差</td>\n<td>①有坚实的理论基础；②结构简单、易用；③数据独立性及安全性好；④查询效率较低</td>\n</tr>\n</tbody></table>\n<h2 id=\"4、三级模式结构\"><a href=\"#4、三级模式结构\" class=\"headerlink\" title=\"4、三级模式结构\"></a>4、三级模式结构</h2><p><strong>模式</strong>：（也称概念模式&#x2F;逻辑模式）是数据库中全体数据的逻辑结构和特征的描述，是所有用户的公用数据结构。</p>\n<p><strong>子模式</strong>：（也称外模式&#x2F;用户模式）是数据库用户所见和使用的局部数据的逻辑结构和特征的描述，是用户所用的数据库结构。子模式是模式的子集，它主要描述用户视图的各记录的组成、相互联系、数据项的特征等。</p>\n<p><strong>内模式</strong>：（也称存储模式）是数据物理结构和存储方法的描述，是整个数据库的最低层结构的标识。</p>\n<p>三级模式结构示意如下图所示：</p>\n<p><img data-src=\"https://yzxtuchuang.oss-cn-beijing.aliyuncs.com/img/202205081008688.png\" alt=\"image-20220508100815575\"></p>\n<h2 id=\"5、二级映像功能\"><a href=\"#5、二级映像功能\" class=\"headerlink\" title=\"5、二级映像功能\"></a>5、二级映像功能</h2><p><strong>映像1：子模式&#x2F;模式映像</strong>，是指由模式生成子模式的规则，它定义了各个子模式和模式之间的对应关系。（不唯一）</p>\n<p><strong>映像2：模式&#x2F;内模式映像</strong>，是说明模式在物理设备中的存储结构，定义了模式和内模式之间的对应关系。（唯一）</p>\n<p><strong>三级模式结构和二级映像的作用：保证了数据库系统的数据能够具有较高的逻辑独立性和物理独立性</strong></p>\n<blockquote>\n<p>数据冗余：</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/14/pExd5HsrKunezmM.png\" alt=\"image-20220514221005579\"></p>\n</blockquote>"}],"PostAsset":[],"PostCategory":[{"post_id":"cl4wroc490009mwsk7frn9u6e","category_id":"cl4wroc470006mwskeoatddm1","_id":"cl4wroc4c000emwsk52452507"},{"post_id":"cl4wroc440003mwsk0bea70dp","category_id":"cl4wroc470006mwskeoatddm1","_id":"cl4wroc4d000imwsk8brq9xfb"},{"post_id":"cl4wroc460005mwsk7ehzb33g","category_id":"cl4wroc470006mwskeoatddm1","_id":"cl4wroc4d000jmwsk7blhgspo"},{"post_id":"cl4wroc480008mwskg83ygnvx","category_id":"cl4wroc4c000fmwsk7ayy8b8d","_id":"cl4wroc4d000lmwsk67rb703j"}],"PostTag":[{"post_id":"cl4wroc490009mwsk7frn9u6e","tag_id":"cl4wroc480007mwskglgt5can","_id":"cl4wroc4c000cmwsk53wm2unt"},{"post_id":"cl4wroc440003mwsk0bea70dp","tag_id":"cl4wroc480007mwskglgt5can","_id":"cl4wroc4c000dmwsk7wgmdu5z"},{"post_id":"cl4wroc460005mwsk7ehzb33g","tag_id":"cl4wroc480007mwskglgt5can","_id":"cl4wroc4d000hmwskg9nl4xhj"},{"post_id":"cl4wroc480008mwskg83ygnvx","tag_id":"cl4wroc4c000gmwskgcxba5zj","_id":"cl4wroc4d000kmwskgxjn4utp"}],"Tag":[{"name":"数据库","_id":"cl4wroc480007mwskglgt5can"},{"name":"操作系统","_id":"cl4wroc4c000gmwskgcxba5zj"}]}}